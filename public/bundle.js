!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/public/",n(n.s=241)}([function(e,t){e.exports=React},function(e,t,n){e.exports=n(95)()},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){var r=n(100);e.exports=function(e,t){if(null==e)return{};var n,o,i=r(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";n.r(t);var r=n(51),o=n.n(r);n.d(t,"componentPropType",function(){return o.a});var i=n(52),a=n.n(i);n.d(t,"exactProp",function(){return a.a});var u=n(53),l=n.n(u);n.d(t,"getDisplayName",function(){return l.a});var s=n(54),c=n.n(s);n.d(t,"ponyfillGlobal",function(){return c.a})},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var u in r)n.call(r,u)&&r[u]&&e.push(u)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.sheetsManager=void 0;var o=r(n(5)),i=r(n(3)),a=r(n(10)),u=r(n(11)),l=r(n(12)),s=r(n(13)),c=r(n(14)),d=r(n(4)),f=r(n(0)),p=r(n(1)),h=(r(n(7)),r(n(17))),v=n(6),g=n(55),m=r(n(119)),b=r(n(61)),y=r(n(133)),x=r(n(134)),S=r(n(45)),w=r(n(46)),P=r(n(63)),O=r(n(150)),E=r(n(151)),C=(0,g.create)((0,b.default)()),M=(0,P.default)(),D=-1e11,T=new Map;t.sheetsManager=T;var k={},j=(0,S.default)({typography:{suppressWarning:!0}});v.ponyfillGlobal.__MUI_STYLES__||(v.ponyfillGlobal.__MUI_STYLES__={}),v.ponyfillGlobal.__MUI_STYLES__.withStyles||(v.ponyfillGlobal.__MUI_STYLES__.withStyles=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r,v=t.withTheme,g=void 0!==v&&v,b=t.flip,S=void 0===b?null:b,P=t.name,I=(0,d.default)(t,["withTheme","flip","name"]),R=(0,O.default)(e),_=R.themingEnabled||"string"==typeof P||g;D+=1,R.options.index=D;var N=function(e){function t(e,n){var r;(0,a.default)(this,t),(r=(0,l.default)(this,(0,s.default)(t).call(this,e,n))).jss=n[m.default.jss]||C,r.sheetsManager=T,r.unsubscribeId=null;var o=n.muiThemeProviderOptions;return o&&(o.sheetsManager&&(r.sheetsManager=o.sheetsManager),r.sheetsCache=o.sheetsCache,r.disableStylesGeneration=o.disableStylesGeneration),r.stylesCreatorSaved=R,r.sheetOptions=(0,i.default)({generateClassName:M},n[m.default.sheetOptions]),r.theme=_?w.default.initial(n)||j:k,r.attach(r.theme),r.cacheClasses={value:null,lastProp:null,lastJSS:{}},r}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){var e=this;_&&(this.unsubscribeId=w.default.subscribe(this.context,function(t){var n=e.theme;e.theme=t,e.attach(e.theme),e.setState({},function(){e.detach(n)})}))}},{key:"componentDidUpdate",value:function(){this.stylesCreatorSaved}},{key:"componentWillUnmount",value:function(){this.detach(this.theme),null!==this.unsubscribeId&&w.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"getClasses",value:function(){if(this.disableStylesGeneration)return this.props.classes||{};var e=!1,t=x.default.get(this.sheetsManager,this.stylesCreatorSaved,this.theme);return t.sheet.classes!==this.cacheClasses.lastJSS&&(this.cacheClasses.lastJSS=t.sheet.classes,e=!0),this.props.classes!==this.cacheClasses.lastProp&&(this.cacheClasses.lastProp=this.props.classes,e=!0),e&&(this.cacheClasses.value=(0,y.default)({baseClasses:this.cacheClasses.lastJSS,newClasses:this.props.classes,Component:n})),this.cacheClasses.value}},{key:"attach",value:function(e){if(!this.disableStylesGeneration){var t=this.stylesCreatorSaved,n=x.default.get(this.sheetsManager,t,e);if(n||(n={refs:0,sheet:null},x.default.set(this.sheetsManager,t,e,n)),0===n.refs){var r;this.sheetsCache&&(r=x.default.get(this.sheetsCache,t,e)),r||((r=this.createSheet(e)).attach(),this.sheetsCache&&x.default.set(this.sheetsCache,t,e,r)),n.sheet=r;var o=this.context[m.default.sheetsRegistry];o&&o.add(r)}n.refs+=1}}},{key:"createSheet",value:function(e){var t=this.stylesCreatorSaved.create(e,P),r=P;return this.jss.createStyleSheet(t,(0,i.default)({meta:r,classNamePrefix:r,flip:"boolean"==typeof S?S:"rtl"===e.direction,link:!1},this.sheetOptions,this.stylesCreatorSaved.options,{name:P||n.displayName},I))}},{key:"detach",value:function(e){if(!this.disableStylesGeneration){var t=x.default.get(this.sheetsManager,this.stylesCreatorSaved,e);if(t.refs-=1,0===t.refs){x.default.delete(this.sheetsManager,this.stylesCreatorSaved,e),this.jss.removeStyleSheet(t.sheet);var n=this.context[m.default.sheetsRegistry];n&&n.remove(t.sheet)}}}},{key:"render",value:function(){var e=this.props,t=(e.classes,e.innerRef),r=(0,d.default)(e,["classes","innerRef"]),o=(0,E.default)({theme:this.theme,name:P,props:r});return g&&!o.theme&&(o.theme=this.theme),f.default.createElement(n,(0,i.default)({},o,{classes:this.getClasses(),ref:t}))}}]),t}(f.default.Component);return N.contextTypes=(0,i.default)((r={muiThemeProviderOptions:p.default.object},(0,o.default)(r,m.default.jss,p.default.object),(0,o.default)(r,m.default.sheetOptions,p.default.object),(0,o.default)(r,m.default.sheetsRegistry,p.default.object),r),_?w.default.contextTypes:{}),(0,h.default)(N,n),N}});t.default=function(e,t){return v.ponyfillGlobal.__MUI_STYLES__.withStyles(e,(0,i.default)({defaultTheme:j},t))}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(25),o=n(41);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(101);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,u],c=0;(l=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t){var n=e.exports={version:"2.6.1"};"number"==typeof __e&&(__e=n)},function(e,t,n){"use strict";var r=n(24),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={};a[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var u=Object.defineProperty,l=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,c=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,f=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(f){var p=d(n);p&&p!==f&&e(t,p,r)}var h=l(n);s&&(h=h.concat(s(n)));for(var v=a[t.$$typeof]||o,g=a[n.$$typeof]||o,m=0;m<h.length;++m){var b=h[m];if(!(i[b]||r&&r[b]||g&&g[b]||v&&v[b])){var y=c(n,b);try{u(t,b,y)}catch(e){}}}return t}return t}},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(19)),u=s(n(42)),l=s(n(26));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="style",this.isProcessed=!1;var o=r.sheet,i=r.Renderer,a=r.selector;this.key=t,this.options=r,this.style=n,a&&(this.selectorText=a),this.renderer=o?o.renderer:new i}return i(e,[{key:"prop",value:function(e,t){if(void 0===t)return this.style[e];if(this.style[e]===t)return this;var n=null==(t=this.options.jss.plugins.onChangeValue(t,e,this))||!1===t,r=e in this.style;if(n&&!r)return this;var o=n&&r;if(o?delete this.style[e]:this.style[e]=t,this.renderable)return o?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,t),this;var i=this.options.sheet;return i&&i.attached&&(0,a.default)(!1,'Rule is not linked. Missing sheet option "link: true".'),this}},{key:"applyTo",value:function(e){var t=this.toJSON();for(var n in t)this.renderer.setProperty(e,n,t[n]);return this}},{key:"toJSON",value:function(){var e={};for(var t in this.style){var n=this.style[t];"object"!==(void 0===n?"undefined":o(n))?e[t]=n:Array.isArray(n)&&(e[t]=(0,l.default)(n))}return e}},{key:"toString",value:function(e){var t=this.options.sheet,n=!!t&&t.options.link?r({},e,{allowEmpty:!0}):e;return(0,u.default)(this.selector,this.style,n)}},{key:"selector",set:function(e){if(e!==this.selectorText&&(this.selectorText=e,this.renderable&&!this.renderer.setSelector(this.renderable,e)&&this.renderable)){var t=this.renderer.replaceRule(this.renderable,this);t&&(this.renderable=t)}},get:function(){return this.selectorText}}]),e}();t.default=c},function(e,t,n){var r=n(31),o=n(16),i=n(155),a=n(157),u=n(66),l=function(e,t,n){var s,c,d,f=e&l.F,p=e&l.G,h=e&l.S,v=e&l.P,g=e&l.B,m=e&l.W,b=p?o:o[t]||(o[t]={}),y=b.prototype,x=p?r:h?r[t]:(r[t]||{}).prototype;for(s in p&&(n=t),n)(c=!f&&x&&void 0!==x[s])&&u(b,s)||(d=c?x[s]:n[s],b[s]=p&&"function"!=typeof x[s]?n[s]:g&&c?i(d,r):m&&x[s]==d?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(d):v&&"function"==typeof d?i(Function.call,d):d,v&&((b.virtual||(b.virtual={}))[s]=d,e&l.R&&y&&!y[s]&&a(y,s,d)))};l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(27)),a=s(n(58)),u=s(n(20)),l=s(n(105));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.map={},this.raw={},this.index=[],this.update=function(e,t){var r=n.options,o=r.jss.plugins,i=r.sheet;if("string"==typeof e)o.onUpdate(t,n.get(e),i);else for(var a=0;a<n.index.length;a++)o.onUpdate(e,n.index[a],i)},this.options=t,this.classes=t.classes}return o(e,[{key:"add",value:function(e,t,n){var o=this.options,a=o.parent,s=o.sheet,c=o.jss,d=o.Renderer,f=o.generateClassName;!(n=r({classes:this.classes,parent:a,sheet:s,jss:c,Renderer:d,generateClassName:f},n)).selector&&this.classes[e]&&(n.selector="."+(0,l.default)(this.classes[e])),this.raw[e]=t;var p=(0,i.default)(e,t,n),h=void 0;!n.selector&&p instanceof u.default&&(h=f(p,s),p.selector="."+(0,l.default)(h)),this.register(p,h);var v=void 0===n.index?this.index.length:n.index;return this.index.splice(v,0,p),p}},{key:"get",value:function(e){return this.map[e]}},{key:"remove",value:function(e){this.unregister(e),this.index.splice(this.indexOf(e),1)}},{key:"indexOf",value:function(e){return this.index.indexOf(e)}},{key:"process",value:function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)}},{key:"register",value:function(e,t){this.map[e.key]=e,e instanceof u.default&&(this.map[e.selector]=e,t&&(this.classes[e.key]=t))}},{key:"unregister",value:function(e){delete this.map[e.key],e instanceof u.default&&(delete this.map[e.selector],delete this.classes[e.key])}},{key:"link",value:function(e){for(var t=this.options.sheet.renderer.getUnescapedKeysMap(this.index),n=0;n<e.length;n++){var r=e[n],o=this.options.sheet.renderer.getKey(r);t[o]&&(o=t[o]);var i=this.map[o];i&&(0,a.default)(i,r)}}},{key:"toString",value:function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t}}]),e}();t.default=c},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";e.exports=n(97)},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var o=0;o<e.length&&"!important"!==e[o];o++)n&&(n+=", "),n+=r(e[o]," ");else n=r(e,", ");t||"!important"!==e[e.length-1]||(n+=" !important");return n};var r=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"unnamed",t=arguments[1],n=arguments[2],a=n.jss,u=(0,i.default)(t),l=a.plugins.onCreateRule(e,u,n);if(l)return l;"@"===e[0]&&(0,r.default)(!1,"[JSS] Unknown at-rule %s",e);return new o.default(e,u,n)};var r=a(n(19)),o=a(n(20)),i=a(n(104));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";n.r(t),n.d(t,"isBrowser",function(){return o});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o="object"===("undefined"==typeof window?"undefined":r(window))&&"object"===("undefined"==typeof document?"undefined":r(document))&&9===document.nodeType;t.default=o},function(e,t,n){e.exports=function(){"use strict";var e=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var n=Object.prototype.toString.call(e);return"[object RegExp]"===n||"[object Date]"===n||function(e){return e.$$typeof===t}(e)}(e)},t="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function n(e,t){return!1!==t.clone&&t.isMergeableObject(e)?o((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function r(e,t,r){return e.concat(t).map(function(e){return n(e,r)})}function o(t,i,a){(a=a||{}).arrayMerge=a.arrayMerge||r,a.isMergeableObject=a.isMergeableObject||e;var u=Array.isArray(i),l=Array.isArray(t),s=u===l;return s?u?a.arrayMerge(t,i,a):function(e,t,r){var i={};return r.isMergeableObject(e)&&Object.keys(e).forEach(function(t){i[t]=n(e[t],r)}),Object.keys(t).forEach(function(a){r.isMergeableObject(t[a])&&e[a]?i[a]=o(e[a],t[a],r):i[a]=n(t[a],r)}),i}(t,i,a):n(i,a)}return o.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return o(e,n,t)},{})},o}()},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.convertHexToRGB=i,t.rgbToHex=function(e){if(0===e.indexOf("#"))return e;var t=a(e).values;return t=t.map(function(e){return 1===(t=e.toString(16)).length?"0".concat(t):t;var t}),"#".concat(t.join(""))},t.decomposeColor=a,t.recomposeColor=u,t.getContrastRatio=function(e,t){var n=l(e),r=l(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.getLuminance=l,t.emphasize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return l(e)>.5?s(e,t):c(e,t)},t.fade=function(e,t){if(!e)return e;e=a(e),t=o(t),("rgb"===e.type||"hsl"===e.type)&&(e.type+="a");return e.values[3]=t,u(e)},t.darken=s,t.lighten=c;r(n(7));function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e<t?t:e>n?n:e}function i(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length/3,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map(function(e){return e+e})),n?"rgb(".concat(n.map(function(e){return parseInt(e,16)}).join(", "),")"):""}function a(e){if("#"===e.charAt(0))return a(i(e));var t=e.indexOf("("),n=e.substring(0,t),r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map(function(e){return parseFloat(e)})}}function u(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")&&(n=n.map(function(e,t){return t<3?parseInt(e,10):e})),-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(e.type,"(").concat(n.join(", "),")")}function l(e){var t=a(e);if(-1!==t.type.indexOf("rgb")){var n=t.values.map(function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)});return Number((.2126*n[0]+.7152*n[1]+.0722*n[2]).toFixed(3))}return t.values[2]/100}function s(e,t){if(!e)return e;if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return u(e)}function c(e,t){if(!e)return e;if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return u(e)}},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(34)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(162),o=n(71);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){"use strict";n.r(t),function(e,r){var o,i=n(84);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.default=a}.call(this,n(40),n(98)(e))},function(e,t,n){e.exports=n(173)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(99))},function(e,t,n){e.exports=n(170)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r="";if(!t)return r;var o=n.indent,u=void 0===o?0:o,l=t.fallbacks;if(u++,l)if(Array.isArray(l))for(var s=0;s<l.length;s++){var c=l[s];for(var d in c){var f=c[d];null!=f&&(r+="\n"+a(d+": "+(0,i.default)(f)+";",u))}}else for(var p in l){var h=l[p];null!=h&&(r+="\n"+a(p+": "+(0,i.default)(h)+";",u))}for(var v in t){var g=t[v];null!=g&&"fallbacks"!==v&&(r+="\n"+a(v+": "+(0,i.default)(g)+";",u))}return r||n.allowEmpty?r=a(e+" {"+r+"\n",--u)+a("}",u):r};var r,o=n(26),i=(r=o)&&r.__esModule?r:{default:r};function a(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(56),i=(r=o)&&r.__esModule?r:{default:r};t.default=new i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(28);var i="",a="";if(((r=o)&&r.__esModule?r:{default:r}).default){var u={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},l=document.createElement("p").style;for(var s in u)if(s+"Transform"in l){i=s,a=u[s];break}}t.default={js:i,css:a}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;r(n(5));var o=r(n(3)),i=r(n(4)),a=r(n(29)),u=r(n(135)),l=(r(n(7)),r(n(62))),s=r(n(137)),c=r(n(138)),d=r(n(144)),f=r(n(145)),p=r(n(146)),h=r(n(147)),v=r(n(148)),g=r(n(149));var m=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,m=void 0===r?{}:r,b=e.palette,y=void 0===b?{}:b,x=e.shadows,S=e.spacing,w=void 0===S?{}:S,P=e.typography,O=void 0===P?{}:P,E=(0,i.default)(e,["breakpoints","mixins","palette","shadows","spacing","typography"]),C=(0,c.default)(y),M=(0,l.default)(n),D=(0,o.default)({},h.default,w);return(0,o.default)({breakpoints:M,direction:"ltr",mixins:(0,s.default)(M,D,m),overrides:{},palette:C,props:{},shadows:x||f.default,typography:(0,d.default)(C,O)},(0,a.default)({shape:p.default,spacing:D,transitions:v.default,zIndex:g.default},E,{isMergeableObject:u.default}))};t.default=m},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.CHANNEL=void 0;var o=r(n(5)),i="__THEMING__";t.CHANNEL=i;var a={contextTypes:(0,o.default)({},i,function(){}),initial:function(e){return e[i]?e[i].getState():null},subscribe:function(e,t){return e[i]?e[i].subscribe(t):null},unsubscribe:function(e,t){e[i]&&e[i].unsubscribe(t)}};t.default=a},function(e,t,n){var r=n(32);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){var r=n(67),o=n(68);e.exports=function(e){return r(o(e))}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.capitalize=function(e){0;return e.charAt(0).toUpperCase()+e.slice(1)},t.contains=i,t.findIndex=a,t.find=function(e,t){var n=a(e,t);return n>-1?e[n]:void 0},t.createChainedFunction=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce(function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}},function(){})};var o=r(n(25));r(n(7));function i(e,t){return Object.keys(t).every(function(n){return e.hasOwnProperty(n)&&e[n]===t[n]})}function a(e,t){for(var n=(0,o.default)(t),r=0;r<e.length;r+=1){if("function"===n&&!0==!!t(e[r],r,e))return r;if("object"===n&&i(e[r],t))return r;if(-1!==["string","number","boolean"].indexOf(n))return e.indexOf(t)}return-1}},function(e,t,n){e.exports=n(177)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;r(n(25)),n(24);var o=function(){return null};o.isRequired=function(){return null};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.specialProperty=void 0;r(n(5)),r(n(3));var o="exact-prop: ​";t.specialProperty=o;var i=function(e){return e};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFunctionName=o,t.default=void 0;var r=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s\/]*)\s*/;function o(e){var t="".concat(e).match(r);return t&&t[1]||""}var i=function(e){return"string"==typeof e?e:e?e.displayName||e.name||o(e)||"Component":void 0};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.create=t.createGenerateClassName=t.sheets=t.RuleList=t.SheetsManager=t.SheetsRegistry=t.toCssValue=t.getDynamicStyles=void 0;var r=n(102);Object.defineProperty(t,"getDynamicStyles",{enumerable:!0,get:function(){return d(r).default}});var o=n(26);Object.defineProperty(t,"toCssValue",{enumerable:!0,get:function(){return d(o).default}});var i=n(56);Object.defineProperty(t,"SheetsRegistry",{enumerable:!0,get:function(){return d(i).default}});var a=n(103);Object.defineProperty(t,"SheetsManager",{enumerable:!0,get:function(){return d(a).default}});var u=n(22);Object.defineProperty(t,"RuleList",{enumerable:!0,get:function(){return d(u).default}});var l=n(43);Object.defineProperty(t,"sheets",{enumerable:!0,get:function(){return d(l).default}});var s=n(59);Object.defineProperty(t,"createGenerateClassName",{enumerable:!0,get:function(){return d(s).default}});var c=d(n(107));function d(e){return e&&e.__esModule?e:{default:e}}var f=t.create=function(e){return new c.default(e)};t.default=f()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.registry=[]}return r(e,[{key:"add",value:function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)}},{key:"reset",value:function(){this.registry=[]}},{key:"remove",value:function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)}},{key:"toString",value:function(e){return this.registry.filter(function(e){return e.attached}).map(function(t){return t.toString(e)}).join("\n")}},{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(36),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){return e&&e[i.default]&&e===e[i.default]()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){e.renderable=t,e.rules&&t.cssRules&&e.rules.link(t.cssRules)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(19)),o=(i(n(60)),i(n(106)));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(){var e=0;return function(t,n){(e+=1)>1e10&&(0,r.default)(!1,"[JSS] You might have a memory leak. Rule counter is at %s.",e);var i="c",a="";return n&&(i=n.options.classNamePrefix||"c",null!=n.options.jss.id&&(a+=n.options.jss.id)),""+i+o.default+a+e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=u(n(58)),a=u(n(22));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t,n){var o=this;for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.update=function(e,t){return"string"==typeof e?o.rules.update(e,t):o.rules.update(e),o},this.attached=!1,this.deployed=!1,this.linked=!1,this.classes={},this.options=r({},n,{sheet:this,parent:this,classes:this.classes}),this.renderer=new n.Renderer(this),this.rules=new a.default(this.options),t)this.rules.add(i,t[i]);this.rules.process()}return o(e,[{key:"attach",value:function(){return this.attached?this:(this.deployed||this.deploy(),this.renderer.attach(),!this.linked&&this.options.link&&this.link(),this.attached=!0,this)}},{key:"detach",value:function(){return this.attached?(this.renderer.detach(),this.attached=!1,this):this}},{key:"addRule",value:function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)}},{key:"insertRule",value:function(e){var t=this.renderer.insertRule(e);t&&this.options.link&&(0,i.default)(e,t)}},{key:"addRules",value:function(e,t){var n=[];for(var r in e)n.push(this.addRule(r,e[r],t));return n}},{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"deleteRule",value:function(e){var t=this.rules.get(e);return!!t&&(this.rules.remove(t),!this.attached||!t.renderable||this.renderer.deleteRule(t.renderable))}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"deploy",value:function(){return this.renderer.deploy(),this.deployed=!0,this}},{key:"link",value:function(){var e=this.renderer.getRules();return e&&this.rules.link(e),this.linked=!0,this}},{key:"toString",value:function(e){return this.rules.toString(e)}}]),e}();t.default=l},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(120)),i=r(n(121)),a=r(n(123)),u=r(n(125)),l=r(n(127)),s=r(n(132));var c=function(){return{plugins:[(0,o.default)(),(0,i.default)(),(0,a.default)(),(0,u.default)(),"undefined"==typeof window?null:(0,l.default)(),(0,s.default)()]}};t.default=c},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,u=void 0===r?"px":r,l=e.step,s=void 0===l?5:l,c=(0,i.default)(e,["values","unit","step"]);function d(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(u,")")}function f(e,t){var r=a.indexOf(t)+1;return r===a.length?d(e):"@media (min-width:".concat(n[e]).concat(u,") and ")+"(max-width:".concat(n[a[r]]-s/100).concat(u,")")}return(0,o.default)({keys:a,values:n,up:d,down:function(e){var t=a.indexOf(e)+1,r=n[a[t]];if(t===a.length)return d("xs");return"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-s/100).concat(u,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},c)},t.keys=void 0;var o=r(n(3)),i=r(n(4)),a=["xs","sm","md","lg","xl"];t.keys=a},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dangerouslyUseGlobalCSS,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,a=e.seed,u=void 0===a?"":a,l=0;return function(e,t){return l+=1,n&&t&&t.options.name?"".concat(i(t.options.name),"-").concat(e.key):"".concat(o).concat(u).concat(l)}};r(n(7));var o=/([[\].#*$><+~=|^:(),"'`\s])/g;function i(e){return String(e).replace(o,"-")}},function(e,t,n){var r=n(47),o=n(158),i=n(159),a=Object.defineProperty;t.f=n(33)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(32),o=n(31).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(163);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(167)("keys"),o=n(169);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(68);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(188))},function(e,t){function n(e){if(e&&"object"==typeof e){var t=e.which||e.keyCode||e.charCode;t&&(e=t)}if("number"==typeof e)return a[e];var n,i=String(e);return(n=r[i.toLowerCase()])?n:(n=o[i.toLowerCase()])||(1===i.length?i.charCodeAt(0):void 0)}n.isEventKey=function(e,t){if(e&&"object"==typeof e){var n=e.which||e.keyCode||e.charCode;if(null==n)return!1;if("string"==typeof t){var i;if(i=r[t.toLowerCase()])return i===n;if(i=o[t.toLowerCase()])return i===n}else if("number"==typeof t)return t===n;return!1}};var r=(t=e.exports=n).code=t.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},o=t.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(i=97;i<123;i++)r[String.fromCharCode(i)]=i-32;for(var i=48;i<58;i++)r[i-48]=i;for(i=1;i<13;i++)r["f"+i]=i+111;for(i=0;i<10;i++)r["numpad "+i]=i+96;var a=t.names=t.title={};for(i in r)a[r[i]]=i;for(var u in o)r[u]=o[u]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return e&&e.ownerDocument||document};t.default=r},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function i(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,u=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?u="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==u){var l=e.displayName||e.name,s="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+l+" uses "+s+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=i;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return a}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t){return function(){return null}};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)).default.createContext();t.default=o},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.cloneElementWithClassName=a,t.cloneChildrenWithClassName=function(e,t){return o.default.Children.map(e,function(e){return o.default.isValidElement(e)&&a(e,t)})},t.isMuiElement=function(e,t){return o.default.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)},t.setRef=function(e,t){"function"==typeof e?e(t):e&&(e.current=t)};var o=r(n(0)),i=r(n(8));function a(e,t){return o.default.cloneElement(e,{className:(0,i.default)(e.props.className,t)})}},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t,n){"use strict";var r=n(18);t.__esModule=!0,t.default=void 0;var o=r(n(234)),i=function(e){return(0,o.default)("displayName",e)};t.default=i},function(e,t,n){"use strict";var r=n(18);t.__esModule=!0,t.default=void 0;var o=r(n(235)),i=function(e,t){return t+"("+(0,o.default)(e)+")"};t.default=i},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){e.exports=n(153)},function(e,t,n){e.exports=n(179)},function(e,t,n){e.exports=n(184)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(187))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(204))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(205))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(206))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(223))},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(230)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),o.default.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"})),"AddCircle");t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(240))},function(e,t,n){"use strict";var r=n(96);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.7.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116;function m(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case d:case f:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case s:return e;default:return t}}case g:case v:case i:return t}}}function b(e){return m(e)===f}t.typeOf=m,t.AsyncMode=d,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===u||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p)},t.isAsyncMode=function(e){return b(e)||m(e)===d},t.isConcurrentMode=b,t.isContextConsumer=function(e){return m(e)===c},t.isContextProvider=function(e){return m(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return m(e)===p},t.isFragment=function(e){return m(e)===a},t.isLazy=function(e){return m(e)===g},t.isMemo=function(e){return m(e)===v},t.isPortal=function(e){return m(e)===i},t.isProfiler=function(e){return m(e)===l},t.isStrictMode=function(e){return m(e)===u},t.isSuspense=function(e){return m(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(5)),i=r(n(4)),a=r(n(3)),u=r(n(0)),l=(r(n(1)),r(n(8))),s=(n(6),r(n(9))),c=n(62),d=(r(n(152)),[0,8,16,24,32,40]),f=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];var p=function(e){return(0,a.default)({container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return d.forEach(function(e,r){0!==r&&(n["spacing-".concat(t,"-").concat(e)]={margin:-e/2,width:"calc(100% + ".concat(e,"px)"),"& > $item":{padding:e/2}})}),n}(0,"xs"),c.keys.reduce(function(t,n){return function(e,t,n){var r={};f.forEach(function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var o="".concat(Math.round(e/12*1e8)/1e6,"%");r[t]={flexBasis:o,flexGrow:0,maxWidth:o}}else r[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else r[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}}),"xs"===n?(0,a.default)(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t},{}))};function h(e){var t,n=e.alignContent,r=e.alignItems,s=e.classes,c=e.className,d=e.component,f=e.container,p=e.direction,v=e.item,g=e.justify,m=e.lg,b=e.md,y=e.sm,x=e.spacing,S=e.wrap,w=e.xl,P=e.xs,O=e.zeroMinWidth,E=(0,i.default)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),C=(0,l.default)((t={},(0,o.default)(t,s.container,f),(0,o.default)(t,s.item,v),(0,o.default)(t,s.zeroMinWidth,O),(0,o.default)(t,s["spacing-xs-".concat(String(x))],f&&0!==x),(0,o.default)(t,s["direction-xs-".concat(String(p))],p!==h.defaultProps.direction),(0,o.default)(t,s["wrap-xs-".concat(String(S))],S!==h.defaultProps.wrap),(0,o.default)(t,s["align-items-xs-".concat(String(r))],r!==h.defaultProps.alignItems),(0,o.default)(t,s["align-content-xs-".concat(String(n))],n!==h.defaultProps.alignContent),(0,o.default)(t,s["justify-xs-".concat(String(g))],g!==h.defaultProps.justify),(0,o.default)(t,s["grid-xs-".concat(String(P))],!1!==P),(0,o.default)(t,s["grid-sm-".concat(String(y))],!1!==y),(0,o.default)(t,s["grid-md-".concat(String(b))],!1!==b),(0,o.default)(t,s["grid-lg-".concat(String(m))],!1!==m),(0,o.default)(t,s["grid-xl-".concat(String(w))],!1!==w),t),c);return u.default.createElement(d,(0,a.default)({className:C},E))}t.styles=p,h.defaultProps={alignContent:"stretch",alignItems:"stretch",component:"div",container:!1,direction:"row",item:!1,justify:"flex-start",lg:!1,md:!1,sm:!1,spacing:0,wrap:"wrap",xl:!1,xs:!1,zeroMinWidth:!1};var v=(0,s.default)(p,{name:"MuiGrid"})(h);t.default=v},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t){var n=null;for(var o in t){var i=t[o],a=void 0===i?"undefined":r(i);if("function"===a)n||(n={}),n[o]=i;else if("object"===a&&null!==i&&!Array.isArray(i)){var u=e(i);u&&(n||(n={}),n[o]=u)}}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(19),a=(r=i)&&r.__esModule?r:{default:r};var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sheets=[],this.refs=[],this.keys=[]}return o(e,[{key:"get",value:function(e){var t=this.keys.indexOf(e);return this.sheets[t]}},{key:"add",value:function(e,t){var n=this.sheets,r=this.refs,o=this.keys,i=n.indexOf(t);return-1!==i?i:(n.push(t),r.push(0),o.push(e),n.length-1)}},{key:"manage",value:function(e){var t=this.keys.indexOf(e),n=this.sheets[t];return 0===this.refs[t]&&n.attach(),this.refs[t]++,this.keys[t]||this.keys.splice(t,0,e),n}},{key:"unmanage",value:function(e){var t=this.keys.indexOf(e);-1!==t?this.refs[t]>0&&(this.refs[t]--,0===this.refs[t]&&this.sheets[t].detach()):(0,a.default)(!1,"SheetsManager: can't find sheet to unmanage")}},{key:"size",get:function(){return this.keys.length}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t){if(null==t)return t;var n=void 0===t?"undefined":r(t);if("string"===n||"number"===n||"function"===n)return t;if(u(t))return t.map(e);if((0,a.default)(t))return t;var o={};for(var i in t){var l=t[i];"object"!==(void 0===l?"undefined":r(l))?o[i]=l:o[i]=e(l)}return o};var o,i=n(57),a=(o=i)&&o.__esModule?o:{default:o};var u=Array.isArray},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});e.CSS;t.default=function(e){return e}}).call(this,n(40))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n="2f1acc6c3a606b082e5eef5e54414ffb";null==e[n]&&(e[n]=0),t.default=e[n]++}).call(this,n(40))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=b(n(28)),u=b(n(60)),l=b(n(108)),s=b(n(109)),c=b(n(115)),d=b(n(116)),f=b(n(43)),p=b(n(20)),h=b(n(59)),v=b(n(27)),g=b(n(117)),m=b(n(118));function b(e){return e&&e.__esModule?e:{default:e}}var y=s.default.concat([c.default,d.default]),x=0,S=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=x++,this.version="9.8.7",this.plugins=new l.default,this.options={createGenerateClassName:h.default,Renderer:a.default?g.default:m.default,plugins:[]},this.generateClassName=(0,h.default)(),this.use.apply(this,y),this.setup(t)}return i(e,[{key:"setup",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.createGenerateClassName&&(this.options.createGenerateClassName=e.createGenerateClassName,this.generateClassName=e.createGenerateClassName()),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),(e.virtual||e.Renderer)&&(this.options.Renderer=e.Renderer||(e.virtual?m.default:g.default)),e.plugins&&this.use.apply(this,e.plugins),this}},{key:"createStyleSheet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.index;"number"!=typeof n&&(n=0===f.default.index?0:f.default.index+1);var r=new u.default(e,o({},t,{jss:this,generateClassName:t.generateClassName||this.generateClassName,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r}},{key:"removeStyleSheet",value:function(e){return e.detach(),f.default.remove(e),this}},{key:"createRule",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"===(void 0===e?"undefined":r(e))&&(n=t,t=e,e=void 0);var o=n;o.jss=this,o.Renderer=this.options.Renderer,o.generateClassName||(o.generateClassName=this.generateClassName),o.classes||(o.classes={});var i=(0,v.default)(e,t,o);return!o.selector&&i instanceof p.default&&(i.selector="."+o.generateClassName(i)),this.plugins.onProcessRule(i),i}},{key:"use",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach(function(t){-1===e.options.plugins.indexOf(t)&&(e.options.plugins.push(t),e.plugins.use(t))}),this}}]),e}();t.default=S},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(19),a=(r=i)&&r.__esModule?r:{default:r};var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.hooks={onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}}return o(e,[{key:"onCreateRule",value:function(e,t,n){for(var r=0;r<this.hooks.onCreateRule.length;r++){var o=this.hooks.onCreateRule[r](e,t,n);if(o)return o}return null}},{key:"onProcessRule",value:function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.hooks.onProcessRule.length;n++)this.hooks.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}}},{key:"onProcessStyle",value:function(e,t,n){for(var r=e,o=0;o<this.hooks.onProcessStyle.length;o++)r=this.hooks.onProcessStyle[o](r,t,n),t.style=r}},{key:"onProcessSheet",value:function(e){for(var t=0;t<this.hooks.onProcessSheet.length;t++)this.hooks.onProcessSheet[t](e)}},{key:"onUpdate",value:function(e,t,n){for(var r=0;r<this.hooks.onUpdate.length;r++)this.hooks.onUpdate[r](e,t,n)}},{key:"onChangeValue",value:function(e,t,n){for(var r=e,o=0;o<this.hooks.onChangeValue.length;o++)r=this.hooks.onChangeValue[o](r,t,n);return r}},{key:"use",value:function(e){for(var t in e)this.hooks[t]?this.hooks[t].push(e[t]):(0,a.default)(!1,'[JSS] Unknown hook "%s".',t)}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(110)),o=l(n(111)),i=l(n(112)),a=l(n(113)),u=l(n(114));function l(e){return e&&e.__esModule?e:{default:e}}var s={"@charset":r.default,"@import":r.default,"@namespace":r.default,"@keyframes":o.default,"@media":i.default,"@supports":i.default,"@font-face":a.default,"@viewport":u.default,"@-ms-viewport":u.default},c=Object.keys(s).map(function(e){var t=new RegExp("^"+e),n=s[e];return{onCreateRule:function(e,r,o){return t.test(e)?new n(e,r,o):null}}});t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="simple",this.isProcessed=!1,this.key=t,this.value=n,this.options=r}return r(e,[{key:"toString",value:function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(22),u=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(t,n,r){for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="keyframes",this.isProcessed=!1,this.key=t,this.options=r,this.rules=new u.default(o({},r,{parent:this})),n)this.rules.add(i,n[i],o({},this.options,{parent:this,selector:i}));this.rules.process()}return i(e,[{key:"toString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{indent:1},t=this.rules.toString(e);return t&&(t+="\n"),this.key+" {\n"+t+"}"}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(22),u=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(t,n,r){for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="conditional",this.isProcessed=!1,this.key=t,this.options=r,this.rules=new u.default(o({},r,{parent:this})),n)this.rules.add(i,n[i]);this.rules.process()}return i(e,[{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"addRule",value:function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r}},{key:"toString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{indent:1},t=this.rules.toString(e);return t?this.key+" {\n"+t+"\n}":""}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(42),a=(r=i)&&r.__esModule?r:{default:r};var u=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="font-face",this.isProcessed=!1,this.key=t,this.style=n,this.options=r}return o(e,[{key:"toString",value:function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=(0,a.default)(this.key,this.style[n]),this.style[n+1]&&(t+="\n");return t}return(0,a.default)(this.key,this.style,e)}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(42),a=(r=i)&&r.__esModule?r:{default:r};var u=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="viewport",this.isProcessed=!1,this.key=t,this.style=n,this.options=r}return o(e,[{key:"toString",value:function(e){return(0,a.default)(this.key,this.style,e)}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(20)),o=a(n(27)),i=a(n(57));function a(e){return e&&e.__esModule?e:{default:e}}t.default={onCreateRule:function(e,t,n){if(!(0,i.default)(t))return null;var r=t,a=(0,o.default)(e,{},n);return r.subscribe(function(e){for(var t in e)a.prop(t,e[t])}),a},onProcessRule:function(e){if(e instanceof r.default){var t=e,n=t.style,o=function(e){var r=n[e];if(!(0,i.default)(r))return"continue";delete n[e],r.subscribe({next:function(n){t.prop(e,n)}})};for(var a in n)o(a)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(22)),o=a(n(20)),i=a(n(27));function a(e){return e&&e.__esModule?e:{default:e}}var u=Date.now(),l="fnValues"+u,s="fnStyle"+ ++u;t.default={onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=(0,i.default)(e,{},n);return r[s]=t,r},onProcessStyle:function(e,t){var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return(t=t)[l]=n,e},onUpdate:function(e,t){if(t.rules instanceof r.default)t.rules.update(e);else if(t instanceof o.default){if((t=t)[l])for(var n in t[l])t.prop(n,t[l][n](e));var i=(t=t)[s];if(i){var a=i(e);for(var u in a)t.prop(u,a[u])}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(19)),i=l(n(43)),a=l(n(20)),u=l(n(26));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=void 0;return function(){return t||(t=e()),t}};function c(e,t){try{return e.style.getPropertyValue(t)}catch(e){return""}}function d(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=(0,u.default)(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.style.setProperty(t,r)}catch(e){return!1}return!0}function f(e,t){try{e.style.removeProperty(t)}catch(e){(0,o.default)(!1,'[JSS] DOMException "%s" was thrown. Tried to remove property "%s".',e.message,t)}}var p,h=1,v=7,g=(p=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return e.substr(t,e.indexOf("{")-1)},function(e){if(e.type===h)return e.selectorText;if(e.type===v){var t=e.name;if(t)return"@keyframes "+t;var n=e.cssText;return"@"+p(n,n.indexOf("keyframes"))}return p(e.cssText)});function m(e,t){return e.selectorText=t,e.selectorText===t}var b,y,x=s(function(){return document.head||document.getElementsByTagName("head")[0]}),S=(b=void 0,y=!1,function(e){var t={};b||(b=document.createElement("style"));for(var n=0;n<e.length;n++){var r=e[n];if(r instanceof a.default){var o=r.selector;if(o&&-1!==o.indexOf("\\")){y||(x().appendChild(b),y=!0),b.textContent=o+" {}";var i=b.sheet;if(i){var u=i.cssRules;u&&(t[u[0].selectorText]=r.key)}}}}return y&&(x().removeChild(b),y=!1),t});function w(e){var t=i.default.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n)return n.renderer.element;if(n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))return n.renderer.element.nextElementSibling}var r=e.insertionPoint;if(r&&"string"==typeof r){var a=function(e){for(var t=x(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(a)return a.nextSibling;(0,o.default)("jss"===r,'[JSS] Insertion point "%s" not found.',r)}return null}var P=s(function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null}),O=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.getPropertyValue=c,this.setProperty=d,this.removeProperty=f,this.setSelector=m,this.getKey=g,this.getUnescapedKeysMap=S,this.hasInsertedRules=!1,t&&i.default.add(t),this.sheet=t;var n=this.sheet?this.sheet.options:{},r=n.media,o=n.meta,a=n.element;this.element=a||document.createElement("style"),this.element.setAttribute("data-jss",""),r&&this.element.setAttribute("media",r),o&&this.element.setAttribute("data-meta",o);var u=P();u&&this.element.setAttribute("nonce",u)}return r(e,[{key:"attach",value:function(){!this.element.parentNode&&this.sheet&&(this.hasInsertedRules&&(this.deploy(),this.hasInsertedRules=!1),function(e,t){var n=t.insertionPoint,r=w(t);if(r){var i=r.parentNode;i&&i.insertBefore(e,r)}else if(n&&"number"==typeof n.nodeType){var a=n,u=a.parentNode;u?u.insertBefore(e,a.nextSibling):(0,o.default)(!1,"[JSS] Insertion point is not in the DOM.")}else x().insertBefore(e,r)}(this.element,this.sheet.options))}},{key:"detach",value:function(){this.element.parentNode.removeChild(this.element)}},{key:"deploy",value:function(){this.sheet&&(this.element.textContent="\n"+this.sheet.toString()+"\n")}},{key:"insertRule",value:function(e,t){var n=this.element.sheet,r=n.cssRules,i=e.toString();if(t||(t=r.length),!i)return!1;try{n.insertRule(i,t)}catch(t){return(0,o.default)(!1,"[JSS] Can not insert an unsupported rule \n\r%s",e),!1}return this.hasInsertedRules=!0,r[t]}},{key:"deleteRule",value:function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)}},{key:"indexOf",value:function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1}},{key:"replaceRule",value:function(e,t){var n=this.indexOf(e),r=this.insertRule(t,n);return this.element.sheet.deleteRule(n),r}},{key:"getRules",value:function(){return this.element.sheet.cssRules}}]),e}();t.default=O},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"setProperty",value:function(){return!0}},{key:"getPropertyValue",value:function(){return""}},{key:"removeProperty",value:function(){}},{key:"setSelector",value:function(){return!0}},{key:"getKey",value:function(){return""}},{key:"attach",value:function(){}},{key:"detach",value:function(){}},{key:"deploy",value:function(){}},{key:"insertRule",value:function(){return!1}},{key:"deleteRule",value:function(){return!0}},{key:"replaceRule",value:function(){return!1}},{key:"getRules",value:function(){}},{key:"indexOf",value:function(){return-1}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={jss:"64a55d578f856d258dc345b094a2a2b3",sheetsRegistry:"d4bd0baacbc52bbd48bbb9eb24344ecd",sheetOptions:"6fc570d6bd61383819d0f9e7407c452d"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(){return{onCreateRule:function(e,t,n){if(e===u)return new s(e,t,n);if("@"===e[0]&&e.substr(0,l.length)===l)return new c(e,t,n);var r=n.parent;r&&("global"!==r.type&&"global"!==r.options.parent.type||(n.global=!0));n.global&&(n.selector=e);return null},onProcessRule:function(e){if("style"!==e.type)return;(function(e){var t=e.options,n=e.style,o=n[u];if(!o)return;for(var i in o)t.sheet.addRule(i,o[i],r({},t,{selector:f(i,e.selector)}));delete n[u]})(e),function(e){var t=e.options,n=e.style;for(var o in n)if(o.substr(0,u.length)===u){var i=f(o.substr(u.length),e.selector);t.sheet.addRule(i,n[o],r({},t,{selector:i})),delete n[o]}}(e)}}};var i=n(55);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var u="@global",l="@global ",s=function(){function e(t,n,o){for(var u in a(this,e),this.type="global",this.key=t,this.options=o,this.rules=new i.RuleList(r({},o,{parent:this})),n)this.rules.add(u,n[u],{selector:u});this.rules.process()}return o(e,[{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"addRule",value:function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"toString",value:function(){return this.rules.toString()}}]),e}(),c=function(){function e(t,n,o){a(this,e),this.name=t,this.options=o;var i=t.substr(l.length);this.rule=o.jss.createRule(i,n,r({},o,{parent:this,selector:i}))}return o(e,[{key:"toString",value:function(e){return this.rule.toString(e)}}]),e}(),d=/\s*,\s*/g;function f(e,t){for(var n=e.split(d),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(){function e(e){return function(t,n){var r=e.getRule(n);return r?r.selector:((0,a.default)(!1,"[JSS] Could not find the referenced rule %s in %s.",n,e.options.meta||e),n)}}var t=function(e){return-1!==e.indexOf("&")};function n(e,n){for(var r=n.split(u),o=e.split(u),i="",a=0;a<r.length;a++)for(var s=r[a],c=0;c<o.length;c++){var d=o[c];i&&(i+=", "),i+=t(d)?d.replace(l,s):s+" "+d}return i}function o(e,t,n){if(n)return r({},n,{index:n.index+1});var o=e.options.nestingLevel;return o=void 0===o?1:o+1,r({},e.options,{nestingLevel:o,index:t.indexOf(e)+1})}return{onProcessStyle:function(i,a){if("style"!==a.type)return i;var u=a.options.parent,l=void 0,c=void 0;for(var d in i){var f=t(d),p="@"===d[0];if(f||p){if(l=o(a,u,l),f){var h=n(d,a.selector);c||(c=e(u)),h=h.replace(s,c),u.addRule(h,i[d],r({},l,{selector:h}))}else p&&u.addRule(d,null,l).addRule(a.key,i[d],{selector:a.selector});delete i[d]}}return i}}};var o,i=n(122),a=(o=i)&&o.__esModule?o:{default:o};var u=/\s*,\s*/g,l=/&/g,s=/\$([\w-]+)/g},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=a(e[t]);return e}return a(e)},onChangeValue:function(e,t,n){var r=(0,i.default)(t);return t===r?e:(n.prop(r,e),null)}}};var r,o=n(124),i=(r=o)&&r.__esModule?r:{default:r};function a(e){var t={};for(var n in e)t[(0,i.default)(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(a):t.fallbacks=a(e.fallbacks)),t}},function(e,t,n){"use strict";var r=/[A-Z]/g,o=/^ms-/,i={};e.exports=function(e){return e in i?i[e]:i[e]=e.replace(r,"-$&").toLowerCase().replace(o,"-ms-")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(){var e=a(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{});return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r in t)t[r]=l(r,t[r],e);return t},onChangeValue:function(t,n){return l(n,t,e)}}};var o,i=n(126);function a(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var u=a(((o=i)&&o.__esModule?o:{default:o}).default);function l(e,t,n){if(!t)return t;var o=t,i=void 0===t?"undefined":r(t);switch("object"===i&&Array.isArray(t)&&(i="array"),i){case"object":if("fallbacks"===e){for(var a in t)t[a]=l(a,t[a],n);break}for(var s in t)t[s]=l(e+"-"+s,t[s],n);break;case"array":for(var c=0;c<t.length;c++)t[c]=l(e,t[c],n);break;case"number":0!==t&&(o=t+(n[e]||u[e]||""))}return o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={"animation-delay":"ms","animation-duration":"ms","background-position":"px","background-position-x":"px","background-position-y":"px","background-size":"px",border:"px","border-bottom":"px","border-bottom-left-radius":"px","border-bottom-right-radius":"px","border-bottom-width":"px","border-left":"px","border-left-width":"px","border-radius":"px","border-right":"px","border-right-width":"px","border-spacing":"px","border-top":"px","border-top-left-radius":"px","border-top-right-radius":"px","border-top-width":"px","border-width":"px","border-after-width":"px","border-before-width":"px","border-end-width":"px","border-horizontal-spacing":"px","border-start-width":"px","border-vertical-spacing":"px",bottom:"px","box-shadow":"px","column-gap":"px","column-rule":"px","column-rule-width":"px","column-width":"px","flex-basis":"px","font-size":"px","font-size-delta":"px",height:"px",left:"px","letter-spacing":"px","logical-height":"px","logical-width":"px",margin:"px","margin-after":"px","margin-before":"px","margin-bottom":"px","margin-left":"px","margin-right":"px","margin-top":"px","max-height":"px","max-width":"px","margin-end":"px","margin-start":"px","mask-position-x":"px","mask-position-y":"px","mask-size":"px","max-logical-height":"px","max-logical-width":"px","min-height":"px","min-width":"px","min-logical-height":"px","min-logical-width":"px",motion:"px","motion-offset":"px",outline:"px","outline-offset":"px","outline-width":"px",padding:"px","padding-bottom":"px","padding-left":"px","padding-right":"px","padding-top":"px","padding-after":"px","padding-before":"px","padding-end":"px","padding-start":"px","perspective-origin-x":"%","perspective-origin-y":"%",perspective:"px",right:"px","shape-margin":"px",size:"px","text-indent":"px","text-stroke":"px","text-stroke-width":"px",top:"px","transform-origin":"%","transform-origin-x":"%","transform-origin-y":"%","transform-origin-z":"%","transition-delay":"ms","transition-duration":"ms","vertical-align":"px",width:"px","word-spacing":"px","box-shadow-x":"px","box-shadow-y":"px","box-shadow-blur":"px","box-shadow-spread":"px","font-line-height":"px","text-shadow-x":"px","text-shadow-y":"px","text-shadow-blur":"px"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{onProcessRule:function(e){"keyframes"===e.type&&(e.key="@"+r.prefix.css+e.key.substr(1))},onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n in e){var o=e[n],i=!1,a=r.supportedProperty(n);a&&a!==n&&(i=!0);var u=!1,l=r.supportedValue(a,o);l&&l!==o&&(u=!0),(i||u)&&(i&&delete e[n],e[a||n]=l||o)}return e},onChangeValue:function(e,t){return r.supportedValue(t,e)}}};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(128))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.supportedValue=t.supportedProperty=t.prefix=void 0;var r=a(n(44)),o=a(n(129)),i=a(n(131));function a(e){return e&&e.__esModule?e:{default:e}}t.default={prefix:r.default,supportedProperty:o.default,supportedValue:i.default},
/**
    * CSS Vendor prefix detection and property feature testing.
    *
    * @copyright Oleg Slobodskoi 2015
    * @website https://github.com/jsstyles/css-vendor
    * @license MIT
    */
t.prefix=r.default,t.supportedProperty=o.default,t.supportedValue=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!u)return e;if(null!=l[e])return l[e];(0,i.default)(e)in u.style?l[e]=e:o.default.js+(0,i.default)("-"+e)in u.style?l[e]=o.default.css+e:l[e]=!1;return l[e]};var r=a(n(28)),o=a(n(44)),i=a(n(130));function a(e){return e&&e.__esModule?e:{default:e}}var u=void 0,l={};if(r.default){u=document.createElement("p");var s=window.getComputedStyle(document.documentElement,"");for(var c in s)isNaN(c)||(l[s[c]]=s[c])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(r,o)};var r=/[-\s]+(.)?/g;function o(e,t){return t?t.toUpperCase():""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!u)return t;if("string"!=typeof t||!isNaN(parseInt(t,10)))return t;var n=e+t;if(null!=a[n])return a[n];try{u.style[e]=t}catch(e){return a[n]=!1,!1}""!==u.style[e]?a[n]=t:("-ms-flex"===(t=o.default.css+t)&&(t="-ms-flexbox"),u.style[e]=t,""!==u.style[e]&&(a[n]=t));a[n]||(a[n]=!1);return u.style[e]="",a[n]};var r=i(n(28)),o=i(n(44));function i(e){return e&&e.__esModule?e:{default:e}}var a={},u=void 0;r.default&&(u=document.createElement("p"))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){function e(e,t){return e.length-t.length}return{onProcessStyle:function(t,n){if("style"!==n.type)return t;var r={},o=Object.keys(t).sort(e);for(var i in o)r[o[i]]=t[o[i]];return r}}}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3));r(n(7)),n(6);var i=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=(0,o.default)({},t);return Object.keys(n).forEach(function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))}),r};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};t.default=r},function(e,t,n){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var r=n(136);function o(e){return!0===r(e)&&"[object Object]"===Object.prototype.toString.call(e)}e.exports=function(e){var t,n;return!1!==o(e)&&("function"==typeof(t=e.constructor)&&(!1!==o(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf")))}},function(e,t,n){"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */e.exports=function(e){return null!=e&&"object"==typeof e&&!1===Array.isArray(e)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r;return(0,i.default)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.default)({paddingLeft:2*t.unit,paddingRight:2*t.unit},n,(0,o.default)({},e.up("sm"),(0,i.default)({paddingLeft:3*t.unit,paddingRight:3*t.unit},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,o.default)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,o.default)(r,e.up("sm"),{minHeight:64}),r)},n)};var o=r(n(5)),i=r(n(3))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.primary,n=void 0===t?{light:u.default[300],main:u.default[500],dark:u.default[700]}:t,r=e.secondary,g=void 0===r?{light:l.default.A200,main:l.default.A400,dark:l.default.A700}:r,m=e.error,b=void 0===m?{light:c.default[300],main:c.default[500],dark:c.default[700]}:m,y=e.type,x=void 0===y?"light":y,S=e.contrastThreshold,w=void 0===S?3:S,P=e.tonalOffset,O=void 0===P?.2:P,E=(0,i.default)(e,["primary","secondary","error","type","contrastThreshold","tonalOffset"]);function C(e){var t=(0,f.getContrastRatio)(e,h.text.primary)>=w?h.text.primary:p.text.primary;return t}function M(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;return!e.main&&e[t]&&(e.main=e[t]),v(e,"light",n,O),v(e,"dark",r,O),e.contrastText||(e.contrastText=C(e.main)),e}M(n),M(g,"A400","A200","A700"),M(b);var D={dark:h,light:p};return(0,a.default)((0,o.default)({common:d.default,type:x,primary:n,secondary:g,error:b,grey:s.default,contrastThreshold:w,getContrastText:C,augmentColor:M,tonalOffset:O},D[x]),E,{clone:!1})},t.dark=t.light=void 0;var o=r(n(3)),i=r(n(4)),a=(r(n(7)),r(n(29))),u=r(n(139)),l=r(n(140)),s=r(n(141)),c=r(n(142)),d=r(n(143)),f=n(30),p={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:d.default.white,default:s.default[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.08)",hoverOpacity:.08,selected:"rgba(0, 0, 0, 0.14)",disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)"}};t.light=p;var h={text:{primary:d.default.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:s.default[800],default:"#303030"},action:{active:d.default.white,hover:"rgba(255, 255, 255, 0.1)",hoverOpacity:.1,selected:"rgba(255, 255, 255, 0.2)",disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)"}};function v(e,t,n,r){e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,f.lighten)(e.main,r):"dark"===t&&(e.dark=(0,f.darken)(e.main,1.5*r)))}t.dark=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={black:"#000",white:"#fff"};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,d=void 0===r?c:r,f=n.fontSize,p=void 0===f?14:f,h=n.fontWeightLight,v=void 0===h?300:h,g=n.fontWeightRegular,m=void 0===g?400:g,b=n.fontWeightMedium,y=void 0===b?500:b,x=n.htmlFontSize,S=void 0===x?16:x,w=n.useNextVariants,P=void 0===w?Boolean(u.ponyfillGlobal.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__):w,O=(n.suppressWarning,n.allVariants),E=(0,i.default)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","htmlFontSize","useNextVariants","suppressWarning","allVariants"]);var C=p/14,M=function(e){return"".concat(e/S*C,"rem")},D=function(t,n,r,i,a){return(0,o.default)({color:e.text.primary,fontFamily:d,fontWeight:t,fontSize:M(n),lineHeight:r},d===c?{letterSpacing:"".concat(l(i/n),"em")}:{},a,O)},T={h1:D(v,96,1,-1.5),h2:D(v,60,1,-.5),h3:D(m,48,1.04,0),h4:D(m,34,1.17,.25),h5:D(m,24,1.33,0),h6:D(y,20,1.6,.15),subtitle1:D(m,16,1.75,.15),subtitle2:D(y,14,1.57,.1),body1Next:D(m,16,1.5,.15),body2Next:D(m,14,1.5,.15),buttonNext:D(y,14,1.5,.4,s),captionNext:D(m,12,1.66,.4),overline:D(m,12,2.66,1,s)},k={display4:(0,o.default)({fontSize:M(112),fontWeight:v,fontFamily:d,letterSpacing:"-.04em",lineHeight:"".concat(l(128/112),"em"),marginLeft:"-.04em",color:e.text.secondary},O),display3:(0,o.default)({fontSize:M(56),fontWeight:m,fontFamily:d,letterSpacing:"-.02em",lineHeight:"".concat(l(73/56),"em"),marginLeft:"-.02em",color:e.text.secondary},O),display2:(0,o.default)({fontSize:M(45),fontWeight:m,fontFamily:d,lineHeight:"".concat(l(51/45),"em"),marginLeft:"-.02em",color:e.text.secondary},O),display1:(0,o.default)({fontSize:M(34),fontWeight:m,fontFamily:d,lineHeight:"".concat(l(41/34),"em"),color:e.text.secondary},O),headline:(0,o.default)({fontSize:M(24),fontWeight:m,fontFamily:d,lineHeight:"".concat(l(32.5/24),"em"),color:e.text.primary},O),title:(0,o.default)({fontSize:M(21),fontWeight:y,fontFamily:d,lineHeight:"".concat(l(24.5/21),"em"),color:e.text.primary},O),subheading:(0,o.default)({fontSize:M(16),fontWeight:m,fontFamily:d,lineHeight:"".concat(l(1.5),"em"),color:e.text.primary},O),body2:(0,o.default)({fontSize:M(14),fontWeight:y,fontFamily:d,lineHeight:"".concat(l(24/14),"em"),color:e.text.primary},O),body1:(0,o.default)({fontSize:M(14),fontWeight:m,fontFamily:d,lineHeight:"".concat(l(20.5/14),"em"),color:e.text.primary},O),caption:(0,o.default)({fontSize:M(12),fontWeight:m,fontFamily:d,lineHeight:"".concat(l(1.375),"em"),color:e.text.secondary},O),button:(0,o.default)({fontSize:M(14),textTransform:"uppercase",fontWeight:y,fontFamily:d,color:e.text.primary},O)};return(0,a.default)((0,o.default)({pxToRem:M,round:l,fontFamily:d,fontSize:p,fontWeightLight:v,fontWeightRegular:m,fontWeightMedium:y},k,T,P?{body1:T.body1Next,body2:T.body2Next,button:T.buttonNext,caption:T.captionNext}:{},{useNextVariants:P}),E,{clone:!1})};var o=r(n(3)),i=r(n(4)),a=r(n(29)),u=(r(n(7)),n(6));function l(e){return Math.round(1e5*e)/1e5}var s={textTransform:"uppercase"},c='"Roboto", "Helvetica", "Arial", sans-serif'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=.2,o=.14,i=.12;function a(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(r,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(o,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(i,")")].join(",")}var u=["none",a(0,1,3,0,0,1,1,0,0,2,1,-1),a(0,1,5,0,0,2,2,0,0,3,1,-2),a(0,1,8,0,0,3,4,0,0,3,3,-2),a(0,2,4,-1,0,4,5,0,0,1,10,0),a(0,3,5,-1,0,5,8,0,0,1,14,0),a(0,3,5,-1,0,6,10,0,0,1,18,0),a(0,4,5,-2,0,7,10,1,0,2,16,1),a(0,5,5,-3,0,8,10,1,0,3,14,2),a(0,5,6,-3,0,9,12,1,0,3,16,2),a(0,6,6,-3,0,10,14,1,0,4,18,3),a(0,6,7,-4,0,11,15,1,0,4,20,3),a(0,7,8,-4,0,12,17,2,0,5,22,4),a(0,7,8,-4,0,13,19,2,0,5,24,4),a(0,7,9,-4,0,14,21,2,0,5,26,4),a(0,8,9,-5,0,15,22,2,0,6,28,5),a(0,8,10,-5,0,16,24,2,0,6,30,5),a(0,8,11,-5,0,17,26,2,0,6,32,5),a(0,9,11,-5,0,18,28,2,0,7,34,6),a(0,9,12,-6,0,19,29,2,0,7,36,6),a(0,10,13,-6,0,20,31,3,0,8,38,7),a(0,10,13,-6,0,21,33,3,0,8,40,7),a(0,10,14,-6,0,22,35,3,0,8,42,7),a(0,11,14,-7,0,23,36,3,0,9,44,8),a(0,11,15,-7,0,24,38,3,0,9,46,8)];t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={borderRadius:4};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={unit:8};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isNumber=t.isString=t.formatMs=t.duration=t.easing=void 0;var o=r(n(4)),i=(r(n(7)),{easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"});t.easing=i;var a={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};t.duration=a;var u=function(e){return"".concat(Math.round(e),"ms")};t.formatMs=u;t.isString=function(e){return"string"==typeof e};t.isNumber=function(e){return!isNaN(parseFloat(e))};var l={easing:i,duration:a,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?a.standard:n,l=t.easing,s=void 0===l?i.easeInOut:l,c=t.delay,d=void 0===c?0:c;(0,o.default)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map(function(e){return"".concat(e," ").concat("string"==typeof r?r:u(r)," ").concat(s," ").concat("string"==typeof d?d:u(d))}).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={mobileStepper:1e3,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=(r(n(25)),r(n(7)),r(n(29)));function a(e,t){return t}var u=function(e){var t="function"==typeof e;return{create:function(n,r){var u=t?e(n):e;if(!r||!n.overrides||!n.overrides[r])return u;var l=n.overrides[r],s=(0,o.default)({},u);return Object.keys(l).forEach(function(e){s[e]=(0,i.default)(s[e],l[e],{arrayMerge:a})}),s},options:{},themingEnabled:t}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){var t=e.theme,n=e.name,r=e.props;if(!t.props||!n||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return function(){return null}};t.default=r},function(e,t,n){n(154),e.exports=n(16).Object.values},function(e,t,n){var r=n(21),o=n(161)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},function(e,t,n){var r=n(156);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(64),o=n(160);e.exports=n(33)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){e.exports=!n(33)&&!n(34)(function(){return 7!=Object.defineProperty(n(65)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(32);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(35),o=n(48),i=n(72).f;e.exports=function(e){return function(t){for(var n,a=o(t),u=r(a),l=u.length,s=0,c=[];l>s;)i.call(a,n=u[s++])&&c.push(e?[n,a[n]]:a[n]);return c}}},function(e,t,n){var r=n(66),o=n(48),i=n(164)(!1),a=n(70)("IE_PROTO");e.exports=function(e,t){var n,u=o(e),l=0,s=[];for(n in u)n!=a&&r(u,n)&&s.push(n);for(;t.length>l;)r(u,n=t[l++])&&(~i(s,n)||s.push(n));return s}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(48),o=n(165),i=n(166);e.exports=function(e){return function(t,n,a){var u,l=r(t),s=o(l.length),c=i(a,s);if(e&&n!=n){for(;s>c;)if((u=l[c++])!=u)return!0}else for(;s>c;c++)if((e||c in l)&&l[c]===n)return e||c||0;return!e&&-1}}},function(e,t,n){var r=n(69),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(69),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(16),o=n(31),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(168)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports=!0},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){n(171),e.exports=n(16).Object.keys},function(e,t,n){var r=n(73),o=n(35);n(172)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(21),o=n(16),i=n(34);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(e,t,n){n(174),e.exports=n(16).Object.assign},function(e,t,n){var r=n(21);r(r.S+r.F,"Object",{assign:n(175)})},function(e,t,n){"use strict";var r=n(35),o=n(176),i=n(72),a=n(73),u=n(67),l=Object.assign;e.exports=!l||n(34)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=l({},e)[n]||Object.keys(l({},t)).join("")!=r})?function(e,t){for(var n=a(e),l=arguments.length,s=1,c=o.f,d=i.f;l>s;)for(var f,p=u(arguments[s++]),h=c?r(p).concat(c(p)):r(p),v=h.length,g=0;v>g;)d.call(p,f=h[g++])&&(n[f]=p[f]);return n}:l},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){n(178),e.exports=n(16).Date.now},function(e,t,n){var r=n(21);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){n(180);var r=n(16).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){var r=n(21);r(r.S,"Object",{create:n(181)})},function(e,t,n){var r=n(47),o=n(182),i=n(71),a=n(70)("IE_PROTO"),u=function(){},l=function(){var e,t=n(65)("iframe"),r=i.length;for(t.style.display="none",n(183).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l.prototype[i[r]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[a]=e):n=l(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(64),o=n(47),i=n(35);e.exports=n(33)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),u=a.length,l=0;u>l;)r.f(e,n=a[l++],t[n]);return e}},function(e,t,n){var r=n(31).document;e.exports=r&&r.documentElement},function(e,t,n){n(185),e.exports=n(16).Number.isInteger},function(e,t,n){var r=n(21);r(r.S,"Number",{isInteger:n(186)})},function(e,t,n){var r=n(32),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(5)),i=r(n(4)),a=r(n(3)),u=r(n(0)),l=(r(n(1)),r(n(8))),s=(n(6),r(n(9))),c=n(30),d=r(n(74)),f=(r(n(78)),n(49)),p=function(e){return{root:(0,a.default)({},e.typography.button,{boxSizing:"border-box",minWidth:64,minHeight:36,padding:"8px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:(0,c.fade)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:e.spacing.unit},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},flat:{},flatPrimary:{},flatSecondary:{},outlined:{border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)")},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat((0,c.fade)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:(0,c.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat((0,c.fade)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:(0,c.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground},"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},raised:{},raisedPrimary:{},raisedSecondary:{},fab:{borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,boxShadow:e.shadows[6],"&:active":{boxShadow:e.shadows[12]}},extendedFab:{borderRadius:24,padding:"0 16px",width:"auto",minWidth:48,height:48},focusVisible:{},disabled:{},colorInherit:{color:"inherit"},mini:{width:40,height:40},sizeSmall:{padding:"7px 8px",minWidth:64,minHeight:32,fontSize:e.typography.pxToRem(13)},sizeLarge:{padding:"8px 24px",minWidth:112,minHeight:40,fontSize:e.typography.pxToRem(15)},fullWidth:{width:"100%"}}};function h(e){var t,n=e.children,r=e.classes,s=e.className,c=e.color,p=e.disabled,h=e.disableFocusRipple,v=e.focusVisibleClassName,g=e.fullWidth,m=e.mini,b=e.size,y=e.variant,x=(0,i.default)(e,["children","classes","className","color","disabled","disableFocusRipple","focusVisibleClassName","fullWidth","mini","size","variant"]),S="fab"===y||"extendedFab"===y,w="contained"===y||"raised"===y,P="text"===y||"flat"===y,O=(0,l.default)(r.root,(t={},(0,o.default)(t,r.fab,S),(0,o.default)(t,r.mini,S&&m),(0,o.default)(t,r.extendedFab,"extendedFab"===y),(0,o.default)(t,r.text,P),(0,o.default)(t,r.textPrimary,P&&"primary"===c),(0,o.default)(t,r.textSecondary,P&&"secondary"===c),(0,o.default)(t,r.flat,P),(0,o.default)(t,r.flatPrimary,P&&"primary"===c),(0,o.default)(t,r.flatSecondary,P&&"secondary"===c),(0,o.default)(t,r.contained,w||S),(0,o.default)(t,r.containedPrimary,(w||S)&&"primary"===c),(0,o.default)(t,r.containedSecondary,(w||S)&&"secondary"===c),(0,o.default)(t,r.raised,w||S),(0,o.default)(t,r.raisedPrimary,(w||S)&&"primary"===c),(0,o.default)(t,r.raisedSecondary,(w||S)&&"secondary"===c),(0,o.default)(t,r.outlined,"outlined"===y),(0,o.default)(t,r.outlinedPrimary,"outlined"===y&&"primary"===c),(0,o.default)(t,r.outlinedSecondary,"outlined"===y&&"secondary"===c),(0,o.default)(t,r["size".concat((0,f.capitalize)(b))],"medium"!==b),(0,o.default)(t,r.disabled,p),(0,o.default)(t,r.fullWidth,g),(0,o.default)(t,r.colorInherit,"inherit"===c),t),s);return u.default.createElement(d.default,(0,a.default)({className:O,disabled:p,focusRipple:!h,focusVisibleClassName:(0,l.default)(r.focusVisible,v)},x),u.default.createElement("span",{className:r.label},n))}t.styles=p,h.defaultProps={color:"default",component:"button",disabled:!1,disableFocusRipple:!1,fullWidth:!1,mini:!1,size:"medium",type:"button",variant:"text"};var v=(0,s.default)(p,{name:"MuiButton"})(h);t.default=v},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(4)),u=r(n(10)),l=r(n(11)),s=r(n(12)),c=r(n(13)),d=r(n(14)),f=r(n(41)),p=r(n(0)),h=(r(n(1)),r(n(23))),v=r(n(8)),g=r(n(75)),m=(n(6),r(n(189))),b=r(n(9)),y=r(n(190)),x=n(192),S=r(n(193)),w=r(n(203)),P={root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:"none",border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"}},disabled:{},focusVisible:{}};t.styles=P;var O=function(e){function t(){var e,n;(0,u.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).state={},n.keyDown=!1,n.focusVisibleCheckTime=50,n.focusVisibleMaxCheckTimes=5,n.handleMouseDown=(0,w.default)((0,f.default)((0,f.default)(n)),"MouseDown","start",function(){clearTimeout(n.focusVisibleTimeout),n.state.focusVisible&&n.setState({focusVisible:!1})}),n.handleMouseUp=(0,w.default)((0,f.default)((0,f.default)(n)),"MouseUp","stop"),n.handleMouseLeave=(0,w.default)((0,f.default)((0,f.default)(n)),"MouseLeave","stop",function(e){n.state.focusVisible&&e.preventDefault()}),n.handleTouchStart=(0,w.default)((0,f.default)((0,f.default)(n)),"TouchStart","start"),n.handleTouchEnd=(0,w.default)((0,f.default)((0,f.default)(n)),"TouchEnd","stop"),n.handleTouchMove=(0,w.default)((0,f.default)((0,f.default)(n)),"TouchMove","stop"),n.handleContextMenu=(0,w.default)((0,f.default)((0,f.default)(n)),"ContextMenu","stop"),n.handleBlur=(0,w.default)((0,f.default)((0,f.default)(n)),"Blur","stop",function(){clearTimeout(n.focusVisibleTimeout),n.state.focusVisible&&n.setState({focusVisible:!1})}),n.onRippleRef=function(e){n.ripple=e},n.onFocusVisibleHandler=function(e){n.keyDown=!1,n.setState({focusVisible:!0}),n.props.onFocusVisible&&n.props.onFocusVisible(e)},n.handleKeyDown=function(e){var t=n.props,r=t.component,o=t.focusRipple,i=t.onKeyDown,a=t.onClick,u=(0,g.default)(e);o&&!n.keyDown&&n.state.focusVisible&&n.ripple&&"space"===u&&(n.keyDown=!0,e.persist(),n.ripple.stop(e,function(){n.ripple.start(e)})),i&&i(e),e.target!==e.currentTarget||!r||"button"===r||"space"!==u&&"enter"!==u||"A"===n.button.tagName&&n.button.href||(e.preventDefault(),a&&a(e))},n.handleKeyUp=function(e){n.props.focusRipple&&"space"===(0,g.default)(e)&&n.ripple&&n.state.focusVisible&&(n.keyDown=!1,e.persist(),n.ripple.stop(e,function(){n.ripple.pulsate(e)})),n.props.onKeyUp&&n.props.onKeyUp(e)},n.handleFocus=function(e){n.props.disabled||(n.button||(n.button=e.currentTarget),e.persist(),(0,x.detectFocusVisible)((0,f.default)((0,f.default)(n)),n.button,function(){n.onFocusVisibleHandler(e)}),n.props.onFocus&&n.props.onFocus(e))},n}return(0,d.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.button=h.default.findDOMNode(this),(0,x.listenForFocusKeys)((0,m.default)(this.button)),this.props.action&&this.props.action({focusVisible:function(){e.setState({focusVisible:!0}),e.button.focus()}})}},{key:"componentDidUpdate",value:function(e,t){this.props.focusRipple&&!this.props.disableRipple&&!t.focusVisible&&this.state.focusVisible&&this.ripple.pulsate()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.focusVisibleTimeout)}},{key:"render",value:function(){var e,t=this.props,n=(t.action,t.buttonRef),r=t.centerRipple,u=t.children,l=t.classes,s=t.className,c=t.component,d=t.disabled,f=t.disableRipple,h=(t.disableTouchRipple,t.focusRipple,t.focusVisibleClassName),g=(t.onBlur,t.onFocus,t.onFocusVisible,t.onKeyDown,t.onKeyUp,t.onMouseDown,t.onMouseLeave,t.onMouseUp,t.onTouchEnd,t.onTouchMove,t.onTouchStart,t.tabIndex),m=t.TouchRippleProps,b=t.type,x=(0,a.default)(t,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","type"]),w=(0,v.default)(l.root,(e={},(0,i.default)(e,l.disabled,d),(0,i.default)(e,l.focusVisible,this.state.focusVisible),(0,i.default)(e,h,this.state.focusVisible),e),s),P=c;"button"===P&&x.href&&(P="a");var O={};return"button"===P?(O.type=b||"button",O.disabled=d):O.role="button",p.default.createElement(P,(0,o.default)({className:w,onBlur:this.handleBlur,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown,onKeyUp:this.handleKeyUp,onMouseDown:this.handleMouseDown,onMouseLeave:this.handleMouseLeave,onMouseUp:this.handleMouseUp,onTouchEnd:this.handleTouchEnd,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,onContextMenu:this.handleContextMenu,ref:n,tabIndex:d?"-1":g},O,x),u,f||d?null:p.default.createElement(y.default,null,p.default.createElement(S.default,(0,o.default)({innerRef:this.onRippleRef,center:r},m))))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return void 0===t.focusVisible?{focusVisible:!1,lastDisabled:e.disabled}:!t.prevState&&e.disabled&&t.focusVisible?{focusVisible:!1,lastDisabled:e.disabled}:{lastDisabled:e.disabled}}}]),t}(p.default.Component);O.defaultProps={centerRipple:!1,component:"button",disableRipple:!1,disableTouchRipple:!1,focusRipple:!1,tabIndex:"0",type:"button"};var E=(0,b.default)(P,{name:"MuiButtonBase"})(O);t.default=E},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(76));var i=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window,n=(0,o.default)(e);return n.defaultView||n.parentView||t};t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(191))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(10)),i=r(n(11)),a=r(n(12)),u=r(n(13)),l=r(n(14)),s=r(n(0)),c=(r(n(1)),n(6),function(e){function t(){var e,n;(0,o.default)(this,t);for(var r=arguments.length,i=new Array(r),l=0;l<r;l++)i[l]=arguments[l];return(n=(0,a.default)(this,(e=(0,u.default)(t)).call.apply(e,[this].concat(i)))).mounted=!1,n.state={mounted:!1},n}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.mounted=!0,this.props.defer?requestAnimationFrame(function(){requestAnimationFrame(function(){e.mounted&&e.setState({mounted:!0})})}):this.setState({mounted:!0})}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.fallback;return this.state.mounted?t:n}}]),t}(s.default.Component));c.defaultProps={defer:!1,fallback:null};var d=c;t.default=d},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.detectFocusVisible=function e(t,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.focusVisibleTimeout=setTimeout(function(){var u=(0,i.default)(n),l=function(e){var t=e.activeElement;for(;t&&t.shadowRoot&&t.shadowRoot.activeElement;)t=t.shadowRoot.activeElement;return t}(u);a.focusKeyPressed&&(l===n||n.contains(l))?r():o<t.focusVisibleMaxCheckTimes&&e(t,n,r,o+1)},t.focusVisibleCheckTime)},t.listenForFocusKeys=function(e){e.addEventListener("keyup",l)};var o=r(n(75)),i=(r(n(7)),r(n(76))),a={focusKeyPressed:!1,keyUpEventTimeout:-1};var u=["tab","enter","space","esc","up","down","left","right"];var l=function(e){(function(e){return u.indexOf((0,o.default)(e))>-1})(e)&&(a.focusKeyPressed=!0,clearTimeout(a.keyUpEventTimeout),a.keyUpEventTimeout=setTimeout(function(){a.focusKeyPressed=!1},1e3))}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=t.DELAY_RIPPLE=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(194)),u=r(n(10)),l=r(n(11)),s=r(n(12)),c=r(n(13)),d=r(n(14)),f=r(n(41)),p=r(n(0)),h=(r(n(1)),r(n(23))),v=r(n(198)),g=r(n(8)),m=r(n(9)),b=r(n(200)),y=550,x=80;t.DELAY_RIPPLE=x;var S=function(e){return{root:{display:"block",position:"absolute",overflow:"hidden",borderRadius:"inherit",width:"100%",height:"100%",left:0,top:0,pointerEvents:"none",zIndex:0},ripple:{width:50,height:50,left:0,top:0,opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"mui-ripple-enter ".concat(y,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"mui-ripple-exit ".concat(y,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"mui-ripple-pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes mui-ripple-enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes mui-ripple-exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes mui-ripple-pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}};t.styles=S;var w=function(e){function t(){var e,n;(0,u.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).state={nextKey:0,ripples:[]},n.pulsate=function(){n.start({},{pulsate:!0})},n.start=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2?arguments[2]:void 0,o=t.pulsate,i=void 0!==o&&o,a=t.center,u=void 0===a?n.props.center||t.pulsate:a,l=t.fakeElement,s=void 0!==l&&l;if("mousedown"===e.type&&n.ignoringMouseDown)n.ignoringMouseDown=!1;else{"touchstart"===e.type&&(n.ignoringMouseDown=!0);var c,d,p,v=s?null:h.default.findDOMNode((0,f.default)((0,f.default)(n))),g=v?v.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(u||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(g.width/2),d=Math.round(g.height/2);else{var m=e.clientX?e.clientX:e.touches[0].clientX,b=e.clientY?e.clientY:e.touches[0].clientY;c=Math.round(m-g.left),d=Math.round(b-g.top)}if(u)(p=Math.sqrt((2*Math.pow(g.width,2)+Math.pow(g.height,2))/3))%2==0&&(p+=1);else{var y=2*Math.max(Math.abs((v?v.clientWidth:0)-c),c)+2,S=2*Math.max(Math.abs((v?v.clientHeight:0)-d),d)+2;p=Math.sqrt(Math.pow(y,2)+Math.pow(S,2))}e.touches?(n.startTimerCommit=function(){n.startCommit({pulsate:i,rippleX:c,rippleY:d,rippleSize:p,cb:r})},n.startTimer=setTimeout(function(){n.startTimerCommit&&(n.startTimerCommit(),n.startTimerCommit=null)},x)):n.startCommit({pulsate:i,rippleX:c,rippleY:d,rippleSize:p,cb:r})}},n.startCommit=function(e){var t=e.pulsate,r=e.rippleX,o=e.rippleY,i=e.rippleSize,u=e.cb;n.setState(function(e){return{nextKey:e.nextKey+1,ripples:[].concat((0,a.default)(e.ripples),[p.default.createElement(b.default,{key:e.nextKey,classes:n.props.classes,timeout:{exit:y,enter:y},pulsate:t,rippleX:r,rippleY:o,rippleSize:i})])}},u)},n.stop=function(e,t){clearTimeout(n.startTimer);var r=n.state.ripples;if("touchend"===e.type&&n.startTimerCommit)return e.persist(),n.startTimerCommit(),n.startTimerCommit=null,void(n.startTimer=setTimeout(function(){n.stop(e,t)},0));n.startTimerCommit=null,r&&r.length&&n.setState({ripples:r.slice(1)},t)},n}return(0,d.default)(t,e),(0,l.default)(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.startTimer)}},{key:"render",value:function(){var e=this.props,t=(e.center,e.classes),n=e.className,r=(0,i.default)(e,["center","classes","className"]);return p.default.createElement(v.default,(0,o.default)({component:"span",enter:!0,exit:!0,className:(0,g.default)(t.root,n)},r),this.state.ripples)}}]),t}(p.default.PureComponent);w.defaultProps={center:!1};var P=(0,m.default)(S,{flip:!1,name:"MuiTouchRipple"})(w);t.default=P},function(e,t,n){var r=n(195),o=n(196),i=n(197);e.exports=function(e){return r(e)||o(e)||i()}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=u(n(1)),o=u(n(0)),i=n(77),a=n(199);function u(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var c=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},d=function(e){var t,n;function r(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(s(s(r)));return r.state={handleExited:o,firstRender:!0},r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},i.componentDidMount=function(){this.appeared=!0,this.mounted=!0},i.componentWillUnmount=function(){this.mounted=!1},r.getDerivedStateFromProps=function(e,t){var n=t.children,r=t.handleExited;return{children:t.firstRender?(0,a.getInitialChildMapping)(e,r):(0,a.getNextChildMapping)(e,n,r),firstRender:!1}},i.handleExited=function(e,t){var n=(0,a.getChildMapping)(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState(function(t){var n=l({},t.children);return delete n[e.key],{children:n}}))},i.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["component","childFactory"]),i=c(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?i:o.default.createElement(t,r,i)},r}(o.default.Component);d.childContextTypes={transitionGroup:r.default.object.isRequired},d.propTypes={},d.defaultProps={component:"div",childFactory:function(e){return e}};var f=(0,i.polyfill)(d);t.default=f,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=o,t.mergeChildMappings=i,t.getInitialChildMapping=function(e,t){return o(e.children,function(n){return(0,r.cloneElement)(n,{onExited:t.bind(null,n),in:!0,appear:a(n,"appear",e),enter:a(n,"enter",e),exit:a(n,"exit",e)})})},t.getNextChildMapping=function(e,t,n){var u=o(e.children),l=i(t,u);return Object.keys(l).forEach(function(o){var i=l[o];if((0,r.isValidElement)(i)){var s=o in t,c=o in u,d=t[o],f=(0,r.isValidElement)(d)&&!d.props.in;!c||s&&!f?c||!s||f?c&&s&&(0,r.isValidElement)(d)&&(l[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:d.props.in,exit:a(i,"exit",e),enter:a(i,"enter",e)})):l[o]=(0,r.cloneElement)(i,{in:!1}):l[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:!0,exit:a(i,"exit",e),enter:a(i,"enter",e)})}}),l};var r=n(0);function o(e,t){var n=Object.create(null);return e&&r.Children.map(e,function(e){return e}).forEach(function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)}),n}function i(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var u={};for(var l in t){if(o[l])for(r=0;r<o[l].length;r++){var s=o[l][r];u[o[l][r]]=n(s)}u[l]=n(l)}for(r=0;r<i.length;r++)u[i[r]]=n(i[r]);return u}function a(e,t,n){return null!=n[t]?n[t]:e.props[t]}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(4)),u=r(n(10)),l=r(n(11)),s=r(n(12)),c=r(n(13)),d=r(n(14)),f=r(n(0)),p=(r(n(1)),r(n(8))),h=r(n(201)),v=function(e){function t(){var e,n;(0,u.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).state={visible:!1,leaving:!1},n.handleEnter=function(){n.setState({visible:!0})},n.handleExit=function(){n.setState({leaving:!0})},n}return(0,d.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e,t,n=this.props,r=n.classes,u=n.className,l=n.pulsate,s=n.rippleX,c=n.rippleY,d=n.rippleSize,v=(0,a.default)(n,["classes","className","pulsate","rippleX","rippleY","rippleSize"]),g=this.state,m=g.visible,b=g.leaving,y=(0,p.default)(r.ripple,(e={},(0,i.default)(e,r.rippleVisible,m),(0,i.default)(e,r.ripplePulsate,l),e),u),x={width:d,height:d,top:-d/2+c,left:-d/2+s},S=(0,p.default)(r.child,(t={},(0,i.default)(t,r.childLeaving,b),(0,i.default)(t,r.childPulsate,l),t));return f.default.createElement(h.default,(0,o.default)({onEnter:this.handleEnter,onExit:this.handleExit},v),f.default.createElement("span",{className:y,style:x},f.default.createElement("span",{className:S})))}}]),t}(f.default.Component);v.defaultProps={pulsate:!1};var g=v;t.default=g},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(1)),o=u(n(0)),i=u(n(23)),a=n(77);n(202);function u(e){return e&&e.__esModule?e:{default:e}}var l="unmounted";t.UNMOUNTED=l;var s="exited";t.EXITED=s;var c="entering";t.ENTERING=c;var d="entered";t.ENTERED=d;t.EXITING="exiting";var f=function(e){var t,n;function r(t,n){var r;r=e.call(this,t,n)||this;var o,i=n.transitionGroup,a=i&&!i.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=s,r.appearStatus=c):o=d:o=t.unmountOnExit||t.mountOnEnter?l:s,r.state={status:o},r.nextCallback=null,r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var a=r.prototype;return a.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===l?{status:s}:null},a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==c&&n!==d&&(t=c):n!==c&&n!==d||(t="exiting")}this.updateStatus(!1,t)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=r.appear),{exit:e,enter:t,appear:n}},a.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=i.default.findDOMNode(this);t===c?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===s&&this.setState({status:l})},a.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,i=this.getTimeouts();t||r?(this.props.onEnter(e,o),this.safeSetState({status:c},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,i.enter,function(){n.safeSetState({status:d},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:d},function(){n.props.onEntered(e)})},a.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:s},function(){t.props.onExited(e)})})})):this.safeSetState({status:s},function(){t.props.onExited(e)})},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},a.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},a.render=function(){var e=this.state.status;if(e===l)return null;var t=this.props,n=t.children,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var i=o.default.Children.only(n);return o.default.cloneElement(i,r)},r}(o.default.Component);function p(){}f.contextTypes={transitionGroup:r.object},f.childContextTypes={transitionGroup:function(){}},f.propTypes={},f.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:p,onEntering:p,onEntered:p,onExit:p,onExiting:p,onExited:p},f.UNMOUNTED=0,f.EXITED=1,f.ENTERING=2,f.ENTERED=3,f.EXITING=4;var h=(0,a.polyfill)(f);t.default=h},function(e,t,n){"use strict";t.__esModule=!0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}},t.classNamesShape=t.timeoutsShape=void 0;var r,o=(r=n(1))&&r.__esModule?r:{default:r};var i=o.default.oneOfType([o.default.number,o.default.shape({enter:o.default.number,exit:o.default.number}).isRequired]);t.timeoutsShape=i;var a=o.default.oneOfType([o.default.string,o.default.shape({enter:o.default.string,exit:o.default.string,active:o.default.string}),o.default.shape({enter:o.default.string,enterDone:o.default.string,enterActive:o.default.string,exit:o.default.string,exitDone:o.default.string,exitActive:o.default.string})]);t.classNamesShape=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t,n,r){return function(o){r&&r.call(e,o);var i=!1;return o.defaultPrevented&&(i=!0),e.props.disableTouchRipple&&"Blur"!==t&&(i=!0),!i&&e.ripple&&e.ripple[n](o),"function"==typeof e.props["on".concat(t)]&&e.props["on".concat(t)](o),!0}};"undefined"==typeof window&&(r=function(){return function(){}});var o=r;t.default=o},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(4)),u=r(n(0)),l=(r(n(1)),r(n(8))),s=r(n(9)),c=n(30),d=r(n(74)),f=n(49),p=function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:(0,c.fade)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}};function h(e){var t,n=e.children,r=e.classes,s=e.className,c=e.color,p=e.disabled,h=(0,a.default)(e,["children","classes","className","color","disabled"]);return u.default.createElement(d.default,(0,o.default)({className:(0,l.default)(r.root,(t={},(0,i.default)(t,r["color".concat((0,f.capitalize)(c))],"default"!==c),(0,i.default)(t,r.disabled,p),t),s),centerRipple:!0,focusRipple:!0,disabled:p},h),u.default.createElement("span",{className:r.label},n))}t.styles=p,h.defaultProps={color:"default",disabled:!1};var v=(0,s.default)(p,{name:"MuiIconButton"})(h);t.default=v},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(5)),i=r(n(4)),a=r(n(3)),u=r(n(0)),l=(r(n(1)),r(n(8))),s=(r(n(7)),n(6),r(n(9))),c=function(e){var t={};return e.shadows.forEach(function(e,n){t["elevation".concat(n)]={boxShadow:e}}),(0,a.default)({root:{backgroundColor:e.palette.background.paper},rounded:{borderRadius:e.shape.borderRadius}},t)};function d(e){var t=e.classes,n=e.className,r=e.component,s=e.square,c=e.elevation,d=(0,i.default)(e,["classes","className","component","square","elevation"]),f=(0,l.default)(t.root,t["elevation".concat(c)],(0,o.default)({},t.rounded,!s),n);return u.default.createElement(r,(0,a.default)({className:f},d))}t.styles=c,d.defaultProps={component:"div",elevation:2,square:!1};var f=(0,s.default)(c,{name:"MuiPaper"})(d);t.default=f},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(4)),u=r(n(10)),l=r(n(12)),s=r(n(13)),c=r(n(11)),d=r(n(14)),f=r(n(0)),p=(r(n(1)),r(n(7)),r(n(8))),h=(n(6),r(n(207))),v=r(n(79)),g=r(n(208)),m=r(n(9)),b=n(80),y=r(n(209)),x=n(222),S=function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:0},o={opacity:t?.42:.5};return{root:{fontFamily:e.typography.fontFamily,color:e.palette.text.primary,fontSize:e.typography.pxToRem(16),lineHeight:"1.1875em",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}},formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px")},fullWidth:{width:"100%"},input:{font:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},"&$disabled":{opacity:1}},inputMarginDense:{paddingTop:3},inputMultiline:{resize:"none",padding:0},inputType:{height:"1.1875em"},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{}}};t.styles=S;var w=function(e){function t(e){var n;return(0,u.default)(this,t),(n=(0,l.default)(this,(0,s.default)(t).call(this,e))).state={focused:!1},n.handleFocus=function(e){var t=n.props.muiFormControl;(0,h.default)({props:n.props,muiFormControl:t,states:["disabled"]}).disabled?e.stopPropagation():(n.setState({focused:!0}),n.props.onFocus&&n.props.onFocus(e),t&&t.onFocus&&t.onFocus(e))},n.handleBlur=function(e){n.setState({focused:!1}),n.props.onBlur&&n.props.onBlur(e);var t=n.props.muiFormControl;t&&t.onBlur&&t.onBlur(e)},n.handleChange=function(){var e;(n.isControlled||n.checkDirty(n.inputRef),n.props.onChange)&&(e=n.props).onChange.apply(e,arguments)},n.handleRefInput=function(e){var t;n.inputRef=e,n.props.inputRef?t=n.props.inputRef:n.props.inputProps&&n.props.inputProps.ref&&(t=n.props.inputProps.ref),(0,b.setRef)(t,e)},n.handleClick=function(e){n.inputRef&&e.currentTarget===e.target&&n.inputRef.focus(),n.props.onClick&&n.props.onClick(e)},n.isControlled=null!=e.value,n.isControlled&&n.checkDirty(e),n}return(0,d.default)(t,e),(0,c.default)(t,null,[{key:"getDerivedStateFromProps",value:function(e,t){return e.disabled&&t.focused?{focused:!1}:null}}]),(0,c.default)(t,[{key:"componentDidMount",value:function(){this.isControlled||this.checkDirty(this.inputRef)}},{key:"componentDidUpdate",value:function(e){if(!e.disabled&&this.props.disabled){var t=this.props.muiFormControl;t&&t.onBlur&&t.onBlur()}this.isControlled&&this.checkDirty(this.props)}},{key:"checkDirty",value:function(e){var t=this.props.muiFormControl;if((0,x.isFilled)(e))return t&&t.onFilled&&t.onFilled(),void(this.props.onFilled&&this.props.onFilled());t&&t.onEmpty&&t.onEmpty(),this.props.onEmpty&&this.props.onEmpty()}},{key:"render",value:function(){var e,t,n=this.props,r=n.autoComplete,u=n.autoFocus,l=n.classes,s=n.className,c=n.defaultValue,d=(n.disabled,n.endAdornment),g=(n.error,n.fullWidth),m=n.id,b=n.inputComponent,x=n.inputProps,S=(x=void 0===x?{}:x).className,w=(0,a.default)(x,["className"]),P=(n.inputRef,n.margin,n.muiFormControl),O=n.multiline,E=n.name,C=(n.onBlur,n.onChange,n.onClick,n.onEmpty,n.onFilled,n.onFocus,n.onKeyDown),M=n.onKeyUp,D=n.placeholder,T=n.readOnly,k=n.renderPrefix,j=n.rows,I=n.rowsMax,R=n.startAdornment,_=n.type,N=n.value,A=(0,a.default)(n,["autoComplete","autoFocus","classes","className","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","muiFormControl","multiline","name","onBlur","onChange","onClick","onEmpty","onFilled","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderPrefix","rows","rowsMax","startAdornment","type","value"]),B=(0,h.default)({props:this.props,muiFormControl:P,states:["disabled","error","margin","required","filled"]}),L=P?P.focused:this.state.focused,F=(0,p.default)(l.root,(e={},(0,i.default)(e,l.disabled,B.disabled),(0,i.default)(e,l.error,B.error),(0,i.default)(e,l.fullWidth,g),(0,i.default)(e,l.focused,L),(0,i.default)(e,l.formControl,P),(0,i.default)(e,l.marginDense,"dense"===B.margin),(0,i.default)(e,l.multiline,O),(0,i.default)(e,l.adornedStart,R),(0,i.default)(e,l.adornedEnd,d),e),s),W=(0,p.default)(l.input,(t={},(0,i.default)(t,l.disabled,B.disabled),(0,i.default)(t,l.inputType,"text"!==_),(0,i.default)(t,l.inputTypeSearch,"search"===_),(0,i.default)(t,l.inputMultiline,O),(0,i.default)(t,l.inputMarginDense,"dense"===B.margin),(0,i.default)(t,l.inputAdornedStart,R),(0,i.default)(t,l.inputAdornedEnd,d),t),S),U=b,G=(0,o.default)({},w,{ref:this.handleRefInput});return"string"!=typeof U?G=(0,o.default)({inputRef:this.handleRefInput,type:_},G,{ref:null}):O?j&&!I?U="textarea":(G=(0,o.default)({rowsMax:I,textareaRef:this.handleRefInput},G,{ref:null}),U=y.default):G=(0,o.default)({type:_},G),f.default.createElement(v.default.Provider,{value:null},f.default.createElement("div",(0,o.default)({className:F,onClick:this.handleClick},A),k?k((0,o.default)({},B,{startAdornment:R,focused:L})):null,R,f.default.createElement(U,(0,o.default)({"aria-invalid":B.error,autoComplete:r,autoFocus:u,className:W,defaultValue:c,disabled:B.disabled,id:m,name:E,onBlur:this.handleBlur,onChange:this.handleChange,onFocus:this.handleFocus,onKeyDown:C,onKeyUp:M,placeholder:D,readOnly:T,required:B.required,rows:j,value:N},G)),d))}}]),t}(f.default.Component);w.defaultProps={fullWidth:!1,inputComponent:"input",multiline:!1,type:"text"};var P=(0,m.default)(S,{name:"MuiInputBase"})((0,g.default)(w));t.default=P},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.props,n=e.states,r=e.muiFormControl;return n.reduce(function(e,n){return e[n]=t[n],r&&void 0===t[n]&&(e[n]=r[n]),e},{})}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=function(t){return i.default.createElement(u.default.Consumer,null,function(n){return i.default.createElement(e,(0,o.default)({muiFormControl:n},t))})};0;return(0,a.default)(t,e),t};var o=r(n(3)),i=r(n(0)),a=r(n(17)),u=r(n(79));n(6)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(10)),u=r(n(11)),l=r(n(12)),s=r(n(13)),c=r(n(14)),d=r(n(0)),f=(r(n(1)),r(n(8))),p=r(n(210)),h=r(n(211)),v=r(n(9)),g=n(80),m=19,b={root:{position:"relative",width:"100%"},textarea:{width:"100%",height:"100%",resize:"none",font:"inherit",padding:0,cursor:"inherit",boxSizing:"border-box",lineHeight:"inherit",border:"none",outline:"none",background:"transparent"},shadow:{overflow:"hidden",visibility:"hidden",position:"absolute",height:"auto",whiteSpace:"pre-wrap"}};t.styles=b;var y=function(e){function t(e){var n;return(0,a.default)(this,t),(n=(0,l.default)(this,(0,s.default)(t).call(this))).handleRefInput=function(e){n.inputRef=e,(0,g.setRef)(n.props.textareaRef,e)},n.handleRefSinglelineShadow=function(e){n.singlelineShadowRef=e},n.handleRefShadow=function(e){n.shadowRef=e},n.handleChange=function(e){n.value=e.target.value,n.isControlled||(n.shadowRef.value=n.value,n.syncHeightWithShadow()),n.props.onChange&&n.props.onChange(e)},n.isControlled=null!=e.value,n.value=e.value||e.defaultValue||"",n.state={height:Number(e.rows)*m},"undefined"!=typeof window&&(n.handleResize=(0,p.default)(function(){n.syncHeightWithShadow()},166)),n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.syncHeightWithShadow()}},{key:"componentDidUpdate",value:function(){this.syncHeightWithShadow()}},{key:"componentWillUnmount",value:function(){this.handleResize.clear()}},{key:"syncHeightWithShadow",value:function(){var e=this.props;if(this.shadowRef){this.isControlled&&(this.shadowRef.value=null==e.value?"":String(e.value));var t=this.singlelineShadowRef.scrollHeight,n=this.shadowRef.scrollHeight;void 0!==n&&(Number(e.rowsMax)>=Number(e.rows)&&(n=Math.min(Number(e.rowsMax)*t,n)),n=Math.max(n,t),Math.abs(this.state.height-n)>1&&this.setState({height:n}))}}},{key:"render",value:function(){var e=this.props,t=e.classes,n=e.className,r=e.defaultValue,a=(e.onChange,e.rows),u=(e.rowsMax,e.textareaRef,e.value),l=e.style,s=(0,i.default)(e,["classes","className","defaultValue","onChange","rows","rowsMax","textareaRef","value","style"]);return d.default.createElement("div",{className:t.root},d.default.createElement(h.default,{target:"window",onResize:this.handleResize}),d.default.createElement("textarea",{"aria-hidden":"true",className:(0,f.default)(t.textarea,t.shadow),readOnly:!0,ref:this.handleRefSinglelineShadow,rows:"1",tabIndex:-1,value:""}),d.default.createElement("textarea",{"aria-hidden":"true",className:(0,f.default)(t.textarea,t.shadow),defaultValue:r,readOnly:!0,ref:this.handleRefShadow,rows:a,tabIndex:-1,value:u}),d.default.createElement("textarea",(0,o.default)({rows:a,className:(0,f.default)(t.textarea,n),defaultValue:r,value:u,onChange:this.handleChange,ref:this.handleRefInput,style:(0,o.default)({height:this.state.height},l)},s)))}}]),t}(d.default.Component);y.defaultProps={rows:1};var x=(0,v.default)(b,{name:"MuiPrivateTextarea"})(y);t.default=x},function(e,t){function n(e,t,n){var r,o,i,a,u;function l(){var s=Date.now()-a;s<t&&s>=0?r=setTimeout(l,t-s):(r=null,n||(u=e.apply(i,o),i=o=null))}null==t&&(t=100);var s=function(){i=this,o=arguments,a=Date.now();var s=n&&!r;return r||(r=setTimeout(l,t)),s&&(u=e.apply(i,o),i=o=null),u};return s.clear=function(){r&&(clearTimeout(r),r=null)},s.flush=function(){r&&(u=e.apply(i,o),i=o=null,clearTimeout(r),r=null)},s}n.debounce=n,e.exports=n},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(212)),i=r(n(213)),a=r(n(214)),u=r(n(216)),l=r(n(217)),s=r(n(81)),c=r(n(219)),d=r(n(221)),f=r(n(0));r(n(1)),r(n(7));var p,h=(p=null,function(){if(null!==p)return p;var e,t,n,r=!1;try{window.addEventListener("test",null,(e={},t="passive",n={get:function(){r=!0}},Object.defineProperty(e,t,n)))}catch(e){}return p=r,r}()),v={capture:!1,passive:!1};function g(e){return d({},v,e)}function m(e,t,n){var r=[e,t];return r.push(h?n:n.capture),r}function b(e,t,n,r){e.addEventListener.apply(e,m(t,n,r))}function y(e,t,n,r){e.removeEventListener.apply(e,m(t,n,r))}var x=function(e){function t(){return o(this,t),a(this,u(t).apply(this,arguments))}return l(t,e),i(t,[{key:"componentDidMount",value:function(){this.applyListeners(b)}},{key:"componentDidUpdate",value:function(e){this.applyListeners(y,e),this.applyListeners(b)}},{key:"componentWillUnmount",value:function(){this.applyListeners(y)}},{key:"applyListeners",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.props,n=t.target;if(n){var r=n;"string"==typeof n&&(r=window[n]),function(e,t){e.children,e.target;var n=c(e,["children","target"]);Object.keys(n).forEach(function(e){if("on"===e.substring(0,2)){var r=n[e],o=s(r),i="object"===o;if(i||"function"===o){var a="capture"===e.substr(-7).toLowerCase(),u=e.substring(2).toLowerCase();u=a?u.substring(0,u.length-7):u,i?t(u,r.handler,r.options):t(u,r,g({capture:a}))}}})}(t,e.bind(null,r))}}},{key:"render",value:function(){return this.props.children||null}}]),t}(f.PureComponent);x.propTypes={},t.withOptions=function(e,t){return{handler:e,options:g(t)}},t.default=x},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(81),o=n(215);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(218);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){var r=n(220);e.exports=function(e,t){if(null==e)return{};var n,o,i=r(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){"use strict";function r(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}Object.defineProperty(t,"__esModule",{value:!0}),t.hasValue=r,t.isFilled=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(r(e.value)&&""!==e.value||t&&r(e.defaultValue)&&""!==e.defaultValue)},t.isAdornedStart=function(e){return e.startAdornment}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(4)),u=r(n(0)),l=(r(n(1)),r(n(8))),s=(n(6),r(n(9))),c=n(30),d=(r(n(78)),function(e){return{root:{height:1,margin:0,border:"none",flexShrink:0,backgroundColor:e.palette.divider},absolute:{position:"absolute",bottom:0,left:0,width:"100%"},inset:{marginLeft:72},light:{backgroundColor:(0,c.fade)(e.palette.divider,.08)},middle:{marginLeft:2*e.spacing.unit,marginRight:2*e.spacing.unit}}});function f(e){var t,n=e.absolute,r=e.classes,s=e.className,c=e.component,d=e.inset,f=e.light,p=e.variant,h=(0,a.default)(e,["absolute","classes","className","component","inset","light","variant"]);return u.default.createElement(c,(0,o.default)({className:(0,l.default)(r.root,(t={},(0,i.default)(t,r.inset,d||"inset"===p),(0,i.default)(t,r.middle,"middle"===p),(0,i.default)(t,r.absolute,n),(0,i.default)(t,r.light,f),t),s)},h))}t.styles=d,f.defaultProps={absolute:!1,component:"hr",light:!1,variant:"fullWidth"};var p=(0,s.default)(d,{name:"MuiDivider"})(f);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"createGenerateClassName",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"createMuiTheme",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"jssPreset",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"MuiThemeProvider",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"createStyles",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"withStyles",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"withTheme",{enumerable:!0,get:function(){return c.default}});var o=r(n(63)),i=r(n(45)),a=r(n(61)),u=r(n(225)),l=r(n(228)),s=r(n(9)),c=r(n(229))},function(e,t,n){"use strict";var r=n(226),o=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.MuiThemeProviderOld=void 0;var i=o(n(3)),a=o(n(5)),u=o(n(10)),l=o(n(11)),s=o(n(12)),c=o(n(13)),d=o(n(14)),f=o(n(0)),p=o(n(1)),h=(o(n(7)),o(n(227))),v=n(6),g=r(n(46)),m=function(e){function t(e,n){var r;return(0,u.default)(this,t),(r=(0,s.default)(this,(0,c.default)(t).call(this))).broadcast=(0,h.default)(),r.outerTheme=g.default.initial(n),r.broadcast.setState(r.mergeOuterLocalTheme(e.theme)),r}return(0,d.default)(t,e),(0,l.default)(t,[{key:"getChildContext",value:function(){var e,t=this.props,n=t.disableStylesGeneration,r=t.sheetsCache,o=t.sheetsManager,i=this.context.muiThemeProviderOptions||{};return void 0!==n&&(i.disableStylesGeneration=n),void 0!==r&&(i.sheetsCache=r),void 0!==o&&(i.sheetsManager=o),e={},(0,a.default)(e,g.CHANNEL,this.broadcast),(0,a.default)(e,"muiThemeProviderOptions",i),e}},{key:"componentDidMount",value:function(){var e=this;this.unsubscribeId=g.default.subscribe(this.context,function(t){e.outerTheme=t,e.broadcast.setState(e.mergeOuterLocalTheme(e.props.theme))})}},{key:"componentDidUpdate",value:function(e){this.props.theme!==e.theme&&this.broadcast.setState(this.mergeOuterLocalTheme(this.props.theme))}},{key:"componentWillUnmount",value:function(){null!==this.unsubscribeId&&g.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"mergeOuterLocalTheme",value:function(e){return"function"==typeof e?e(this.outerTheme):this.outerTheme?(0,i.default)({},this.outerTheme,e):e}},{key:"render",value:function(){return this.props.children}}]),t}(f.default.Component);t.MuiThemeProviderOld=m,m.childContextTypes=(0,i.default)({},g.default.contextTypes,{muiThemeProviderOptions:p.default.object}),m.contextTypes=(0,i.default)({},g.default.contextTypes,{muiThemeProviderOptions:p.default.object}),v.ponyfillGlobal.__MUI_STYLES__||(v.ponyfillGlobal.__MUI_STYLES__={}),v.ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider||(v.ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider=m);var b=v.ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider;t.default=b},function(e,t){e.exports=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}},function(e,t,n){"use strict";n.r(t),t.default=function(e){var t={},n=1,r=e;return{getState:function(){return r},setState:function(e){r=e;for(var n=Object.keys(t),o=0,i=n.length;o<i;o++)t[n[o]]&&t[n[o]](e)},subscribe:function(e){if("function"!=typeof e)throw new Error("listener must be a function.");var r=n;return t[r]=e,n+=1,r},unsubscribe:function(e){t[e]=void 0}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,i=r(n(3)),a=r(n(4)),u=r(n(10)),l=r(n(11)),s=r(n(12)),c=r(n(13)),d=r(n(14)),f=r(n(0)),p=(r(n(1)),r(n(17))),h=n(6),v=r(n(45)),g=r(n(46));h.ponyfillGlobal.__MUI_STYLES__||(h.ponyfillGlobal.__MUI_STYLES__={}),h.ponyfillGlobal.__MUI_STYLES__.withTheme||(h.ponyfillGlobal.__MUI_STYLES__.withTheme=function(){return function(e){var t=function(t){function n(e,t){var r;return(0,u.default)(this,n),(r=(0,s.default)(this,(0,c.default)(n).call(this))).state={theme:g.default.initial(t)||o||(o=(0,v.default)({typography:{suppressWarning:!0}}))},r}return(0,d.default)(n,t),(0,l.default)(n,[{key:"componentDidMount",value:function(){var e=this;this.unsubscribeId=g.default.subscribe(this.context,function(t){e.setState({theme:t})})}},{key:"componentWillUnmount",value:function(){null!==this.unsubscribeId&&g.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"render",value:function(){var t=this.props,n=t.innerRef,r=(0,a.default)(t,["innerRef"]);return f.default.createElement(e,(0,i.default)({theme:this.state.theme,ref:n},r))}}]),n}(f.default.Component);return t.contextTypes=g.default.contextTypes,(0,p.default)(t,e),t}});var m=h.ponyfillGlobal.__MUI_STYLES__.withTheme;t.default=m},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=r(n(231)),a=r(n(238));var u=function(e,t){var n=function(t){return o.default.createElement(a.default,t,e)};return n.displayName="".concat(t,"Icon"),(n=(0,i.default)(n)).muiName="SvgIcon",n};t.default=u},function(e,t,n){"use strict";var r=n(18);t.__esModule=!0,t.default=void 0;var o=r(n(232)),i=r(n(236)),a=(r(n(82)),r(n(83)),function(e){return(0,o.default)(function(e,t){return!(0,i.default)(e,t)})(e)});t.default=a},function(e,t,n){"use strict";var r=n(18);t.__esModule=!0,t.default=void 0;var o=r(n(233)),i=n(0),a=(r(n(82)),r(n(83)),function(e){return function(t){var n=(0,i.createFactory)(t);return function(t){function r(){return t.apply(this,arguments)||this}(0,o.default)(r,t);var i=r.prototype;return i.shouldComponentUpdate=function(t){return e(this.props,t)},i.render=function(){return n(this.props)},r}(i.Component)}});t.default=a},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e,t){return function(n){return n[e]=t,n}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0};t.default=r},function(e,t,n){"use strict";var r=n(18);t.__esModule=!0,t.default=void 0;var o=r(n(237)).default;t.default=o},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(239))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(4)),u=r(n(0)),l=(r(n(1)),r(n(8))),s=(n(6),r(n(9))),c=n(49),d=function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:24,transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:20},fontSizeLarge:{fontSize:35}}};function f(e){var t,n=e.children,r=e.classes,s=e.className,d=e.color,f=e.component,p=e.fontSize,h=e.nativeColor,v=e.titleAccess,g=e.viewBox,m=(0,a.default)(e,["children","classes","className","color","component","fontSize","nativeColor","titleAccess","viewBox"]);return u.default.createElement(f,(0,o.default)({className:(0,l.default)(r.root,(t={},(0,i.default)(t,r["color".concat((0,c.capitalize)(d))],"inherit"!==d),(0,i.default)(t,r["fontSize".concat((0,c.capitalize)(p))],"default"!==p),t),s),focusable:"false",viewBox:g,color:h,"aria-hidden":v?"false":"true",role:v?"img":"presentation"},m),n,v?u.default.createElement("title",null,v):null)}t.styles=d,f.defaultProps={color:"inherit",component:"svg",fontSize:"default",viewBox:"0 0 24 24"},f.muiName="SvgIcon";var p=(0,s.default)(d,{name:"MuiSvgIcon"})(f);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(10)),i=r(n(11)),a=r(n(12)),u=r(n(13)),l=r(n(14)),s=r(n(0)),c=(r(n(1)),n(224)),d=(n(6),function(e){function t(){return(0,o.default)(this,t),(0,a.default)(this,(0,u.default)(t).apply(this,arguments))}return(0,l.default)(t,e),(0,i.default)(t,[{key:"render",value:function(){return this.props.children}}]),t}(s.default.Component));d.defaultProps={children:null};var f=(0,c.withStyles)(function(e){return{"@global":{html:{WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box"},"*, *::before, *::after":{boxSizing:"inherit"},body:{margin:0,backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}}}}},{name:"MuiCssBaseline"})(d);t.default=f},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(23),a=n.n(i);function u(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var l=n(1),s=n.n(l),c=o.a.createContext(null),d=function(e){function t(t){var n;n=e.call(this,t)||this;var r=t.store;return n.state={storeState:r.getState(),store:r},n}u(t,e);var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this.subscribe()},n.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this._isMounted=!1},n.componentDidUpdate=function(e){this.props.store!==e.store&&(this.unsubscribe&&this.unsubscribe(),this.subscribe())},n.subscribe=function(){var e=this,t=this.props.store;this.unsubscribe=t.subscribe(function(){var n=t.getState();e._isMounted&&e.setState(function(e){return e.storeState===n?null:{storeState:n}})});var n=t.getState();n!==this.state.storeState&&this.setState({storeState:n})},n.render=function(){var e=this.props.context||c;return o.a.createElement(e.Provider,{value:this.state},this.props.children)},t}(r.Component);d.propTypes={store:s.a.shape({subscribe:s.a.func.isRequired,dispatch:s.a.func.isRequired,getState:s.a.func.isRequired}),context:s.a.object,children:s.a.any};var f=d;function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function v(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var g=n(17),m=n.n(g),b=n(15),y=n.n(b),x=n(24);function S(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,a=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,l=n.methodName,s=void 0===l?"connectAdvanced":l,d=n.renderCountProp,f=void 0===d?void 0:d,g=n.shouldHandleStateChanges,b=void 0===g||g,x=n.storeKey,S=void 0===x?"store":x,w=n.withRef,P=void 0!==w&&w,O=n.forwardRef,E=void 0!==O&&O,C=n.context,M=void 0===C?c:C,D=v(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);y()(void 0===f,"renderCountProp is removed. render counting is built into the latest React dev tools profiling extension"),y()(!P,"withRef is removed. To access the wrapped instance, use a ref on the connected component");var T="To use a custom Redux store for specific components,  create a custom React context with React.createContext(), and pass the context object to React-Redux's Provider and specific components like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";y()("store"===S,"storeKey has been removed and does not do anything. "+T);var k=M;return function(t){var n=t.displayName||t.name||"Component",i=a(n),l=h({},D,{getDisplayName:a,methodName:s,renderCountProp:f,shouldHandleStateChanges:b,storeKey:S,displayName:i,wrappedComponentName:n,WrappedComponent:t}),c=D.pure,d=r.Component,v=t;c&&(d=r.PureComponent);var g=function(t){function n(n){var r,i,a,u,s,d,f,g,m;return r=t.call(this,n)||this,y()(E?!n.wrapperProps[S]:!n[S],"Passing redux store in props has been removed and does not do anything. "+T),r.selectDerivedProps=function(t,n,r){if(c&&i===n&&a===t)return u;r!==s&&(s=r,d=e(r.dispatch,l)),i=n,a=t;var o=d(t,n);return u===o?u:u=o},r.selectChildElement=function(e,t){return e===f&&t===g||(f=e,g=t,m=o.a.createElement(v,h({},e,{ref:t}))),m},r.renderWrappedComponent=r.renderWrappedComponent.bind(p(p(r))),r}u(n,t);var r=n.prototype;return r.renderWrappedComponent=function(e){y()(e,'Could not find "store" in the context of "'+i+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+i+" in connect options.");var t,n=e.storeState,r=e.store,o=this.props;E&&(o=this.props.wrapperProps,t=this.props.forwardedRef);var a=this.selectDerivedProps(n,o,r);return this.selectChildElement(a,t)},r.render=function(){var e=this.props.context||k;return o.a.createElement(e.Consumer,null,this.renderWrappedComponent)},n}(d);if(g.WrappedComponent=t,g.displayName=i,E){var x=o.a.forwardRef(function(e,t){return o.a.createElement(g,{wrapperProps:e,forwardedRef:t})});return x.displayName=i,x.WrappedComponent=t,m()(x,t)}return m()(g,t)}}var w=Object.prototype.hasOwnProperty;function P(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function O(e,t){if(P(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!w.call(t,n[o])||!P(e[n[o]],t[n[o]]))return!1;return!0}var E=n(36),C=function(){return Math.random().toString(36).substring(7).split("").join(".")},M={INIT:"@@redux/INIT"+C(),REPLACE:"@@redux/REPLACE"+C(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+C()}};function D(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function T(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(T)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],u=a,l=!1;function s(){u===a&&(u=a.slice())}function c(){if(l)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function d(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(l)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return s(),u.push(e),function(){if(t){if(l)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,s();var n=u.indexOf(e);u.splice(n,1)}}}function f(e){if(!D(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(l)throw new Error("Reducers may not dispatch actions.");try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++){(0,t[n])()}return e}return f({type:M.INIT}),(r={dispatch:f,subscribe:d,getState:c,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,f({type:M.REPLACE})}})[E.default]=function(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[E.default]=function(){return this},e},r}function k(e,t){return function(){return t(e.apply(this,arguments))}}function j(e,t){if("function"==typeof e)return k(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],a=e[i];"function"==typeof a&&(r[i]=k(a,t))}return r}function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function R(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function _(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){I(e,t,n[t])})}return e}({},n,{dispatch:r=R.apply(void 0,i)(n.dispatch)})}}}function N(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function A(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function B(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=A(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=A(o),o=r(t,n)),o},r}}var L=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:N(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?N(function(t){return j(e,t)}):void 0}];var F=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:N(function(){return{}})}];function W(e,t,n){return h({},n,e,t)}var U=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return W}}];function G(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function V(e,t,n,r,o){var i,a,u,l,s,c=o.areStatesEqual,d=o.areOwnPropsEqual,f=o.areStatePropsEqual,p=!1;function h(o,p){var h,v,g=!d(p,a),m=!c(o,i);return i=o,a=p,g&&m?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):g?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):m?(h=e(i,a),v=!f(h,u),u=h,v&&(s=n(u,l,a)),s):s}return function(o,c){return p?h(o,c):(u=e(i=o,a=c),l=t(r,a),s=n(u,l,a),p=!0,s)}}function z(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=v(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?V:G)(a,u,l,e,i)}function q(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Y(e,t){return e===t}var H,K,X,J,Z,Q,$,ee,te,ne,re,oe,ie=(X=(K=void 0===H?{}:H).connectHOC,J=void 0===X?S:X,Z=K.mapStateToPropsFactories,Q=void 0===Z?F:Z,$=K.mapDispatchToPropsFactories,ee=void 0===$?L:$,te=K.mergePropsFactories,ne=void 0===te?U:te,re=K.selectorFactory,oe=void 0===re?z:re,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,u=o.areStatesEqual,l=void 0===u?Y:u,s=o.areOwnPropsEqual,c=void 0===s?O:s,d=o.areStatePropsEqual,f=void 0===d?O:d,p=o.areMergedPropsEqual,g=void 0===p?O:p,m=v(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),b=q(e,Q,"mapStateToProps"),y=q(t,ee,"mapDispatchToProps"),x=q(n,ne,"mergeProps");return J(oe,h({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:b,initMapDispatchToProps:y,initMergeProps:x,pure:a,areStatesEqual:l,areOwnPropsEqual:c,areStatePropsEqual:f,areMergedPropsEqual:g},m))}),ae=function(e,t){return(ae=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */function ue(e,t){function n(){this.constructor=e}ae(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var le=function(){return(le=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};var se=n(38),ce=n.n(se),de=function(e){function t(t){return e.call(this,t)||this}return ue(t,e),t.prototype.render=function(){var e=this.props,t=e.sidebar,n=e.children;return o.a.createElement(ce.a,{xs:12,container:!0,spacing:16},o.a.createElement(ce.a,{item:!0},t),o.a.createElement(ce.a,{item:!0,xs:!0},n))},t}(o.a.Component),fe=n(85),pe=n.n(fe),he=n(39),ve=n.n(he),ge=n(37),me=n.n(ge),be=n(50),ye=n.n(be),xe=s.a.shape({trySubscribe:s.a.func.isRequired,tryUnsubscribe:s.a.func.isRequired,notifyNestedSubs:s.a.func.isRequired,isSubscribed:s.a.func.isRequired}),Se=s.a.shape({subscribe:s.a.func.isRequired,dispatch:s.a.func.isRequired,getState:s.a.func.isRequired});!function(e){var t;void 0===e&&(e="store");var n=e+"Subscription",o=function(t){u(i,t);var o=i.prototype;function i(n,r){var o;return(o=t.call(this,n,r)||this)[e]=n.store,o}return o.getChildContext=function(){var t;return(t={})[e]=this[e],t[n]=null,t},o.render=function(){return r.Children.only(this.props.children)},i}(r.Component);o.propTypes={store:Se.isRequired,children:s.a.element.isRequired},o.childContextTypes=((t={})[e]=Se.isRequired,t[n]=xe,t)}();var we=null,Pe={notify:function(){}};var Oe=function(){function e(e,t,n){this.store=e,this.parentSub=t,this.onStateChange=n,this.unsubscribe=null,this.listeners=Pe}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=we,e=we},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==we&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=Pe)},e}(),Ee=0,Ce={};function Me(){}function De(e,t){var n,o;void 0===t&&(t={});var i=t,a=i.getDisplayName,l=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,s=i.methodName,c=void 0===s?"connectAdvanced":s,d=i.renderCountProp,f=void 0===d?void 0:d,g=i.shouldHandleStateChanges,b=void 0===g||g,S=i.storeKey,w=void 0===S?"store":S,P=i.withRef,O=void 0!==P&&P,E=v(i,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),C=w+"Subscription",M=Ee++,D=((n={})[w]=Se,n[C]=xe,n),T=((o={})[C]=xe,o);return function(t){y()(Object(x.isValidElementType)(t),"You must pass a component to the function returned by "+c+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),i=h({},E,{getDisplayName:l,methodName:c,renderCountProp:f,shouldHandleStateChanges:b,storeKey:w,withRef:O,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){var r;return(r=n.call(this,e,t)||this).version=M,r.state={},r.renderCount=0,r.store=e[w]||t[w],r.propsMode=Boolean(e[w]),r.setWrappedInstance=r.setWrappedInstance.bind(p(p(r))),y()(r.store,'Could not find "'+w+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+w+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}u(a,n);var l=a.prototype;return l.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[C]=t||this.context[C],e},l.componentDidMount=function(){b&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},l.componentWillReceiveProps=function(e){this.selector.run(e)},l.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},l.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=Me,this.store=null,this.selector.run=Me,this.selector.shouldComponentUpdate=!1},l.getWrappedInstance=function(){return y()(O,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+c+"() call."),this.wrappedInstance},l.setWrappedInstance=function(e){this.wrappedInstance=e},l.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},l.initSubscription=function(){if(b){var e=(this.propsMode?this.props:this.context)[C];this.subscription=new Oe(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},l.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(Ce)):this.notifyNestedSubs()},l.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},l.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},l.addExtraProps=function(e){if(!(O||f||this.propsMode&&this.subscription))return e;var t=h({},e);return O&&(t.ref=this.setWrappedInstance),f&&(t[f]=this.renderCount++),this.propsMode&&this.subscription&&(t[C]=this.subscription),t},l.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=T,a.contextTypes=D,a.propTypes=D,m()(a,t)}}var Te=Object.prototype.hasOwnProperty;function ke(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function je(e,t){if(ke(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Te.call(t,n[o])||!ke(e[n[o]],t[n[o]]))return!1;return!0}function Ie(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function Re(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function _e(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=Re(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=Re(o),o=r(t,n)),o},r}}var Ne=[function(e){return"function"==typeof e?_e(e):void 0},function(e){return e?void 0:Ie(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?Ie(function(t){return j(e,t)}):void 0}];var Ae=[function(e){return"function"==typeof e?_e(e):void 0},function(e){return e?void 0:Ie(function(){return{}})}];function Be(e,t,n){return h({},n,e,t)}var Le=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return Be}}];function Fe(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function We(e,t,n,r,o){var i,a,u,l,s,c=o.areStatesEqual,d=o.areOwnPropsEqual,f=o.areStatePropsEqual,p=!1;function h(o,p){var h,v,g=!d(p,a),m=!c(o,i);return i=o,a=p,g&&m?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):g?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):m?(h=e(i,a),v=!f(h,u),u=h,v&&(s=n(u,l,a)),s):s}return function(o,c){return p?h(o,c):(u=e(i=o,a=c),l=t(r,a),s=n(u,l,a),p=!0,s)}}function Ue(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=v(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?We:Fe)(a,u,l,e,i)}function Ge(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Ve(e,t){return e===t}var ze=function(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?De:n,o=t.mapStateToPropsFactories,i=void 0===o?Ae:o,a=t.mapDispatchToPropsFactories,u=void 0===a?Ne:a,l=t.mergePropsFactories,s=void 0===l?Le:l,c=t.selectorFactory,d=void 0===c?Ue:c;return function(e,t,n,o){void 0===o&&(o={});var a=o,l=a.pure,c=void 0===l||l,f=a.areStatesEqual,p=void 0===f?Ve:f,g=a.areOwnPropsEqual,m=void 0===g?je:g,b=a.areStatePropsEqual,y=void 0===b?je:b,x=a.areMergedPropsEqual,S=void 0===x?je:x,w=v(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),P=Ge(e,i,"mapStateToProps"),O=Ge(t,u,"mapDispatchToProps"),E=Ge(n,s,"mergeProps");return r(d,h({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:P,initMapDispatchToProps:O,initMergeProps:E,pure:c,areStatesEqual:p,areOwnPropsEqual:m,areStatePropsEqual:y,areMergedPropsEqual:S},w))}}(),qe=n(86),Ye=n.n(qe);function He(e,t){e.prototype=Ye()(t.prototype),e.prototype.constructor=e,e.__proto__=t}var Ke=function(e,t){return e===t};var Xe=function(e,t){var n;void 0===t&&(t=Ke);var r,o=[],i=!1,a=function(e,n){return t(e,o[n],n)};return function(){for(var t=arguments.length,u=new Array(t),l=0;l<t;l++)u[l]=arguments[l];return i&&n===this&&u.length===o.length&&u.every(a)?r:(r=e.apply(this,u),i=!0,n=this,o=u,r)}},Je=function(e){var t=[],n=null,r=function(){for(var r=arguments.length,o=Array(r),i=0;i<r;i++)o[i]=arguments[i];t=o,n||(n=requestAnimationFrame(function(){n=null,e.apply(void 0,t)}))};return r.cancel=function(){n&&(cancelAnimationFrame(n),n=null)},r},Ze=!0,Qe="Invariant failed";var $e=function(e,t){if(!e)throw Ze?new Error(Qe):new Error(Qe+": "+(t||""))},et=function(e){var t=e.top,n=e.right,r=e.bottom,o=e.left;return{top:t,right:n,bottom:r,left:o,width:n-o,height:r-t,x:o,y:t,center:{x:(n+o)/2,y:(r+t)/2}}},tt=function(e,t){return{top:e.top-t.top,left:e.left-t.left,bottom:e.bottom+t.bottom,right:e.right+t.right}},nt=function(e,t){return{top:e.top+t.top,left:e.left+t.left,bottom:e.bottom-t.bottom,right:e.right-t.right}},rt={top:0,right:0,bottom:0,left:0},ot=function(e){var t=e.borderBox,n=e.margin,r=void 0===n?rt:n,o=e.border,i=void 0===o?rt:o,a=e.padding,u=void 0===a?rt:a,l=et(tt(t,r)),s=et(nt(t,i)),c=et(nt(s,u));return{marginBox:l,borderBox:et(t),paddingBox:s,contentBox:c,margin:r,border:i,padding:u}},it=function(e){var t=e.slice(0,-2);"px"!==e.slice(-2)&&$e(!1);var n=Number(t);return isNaN(n)&&$e(!1),n},at=function(e,t){var n,r,o=e.borderBox,i=e.border,a=e.margin,u=e.padding,l=(r=t,{top:(n=o).top+r.y,left:n.left+r.x,bottom:n.bottom+r.y,right:n.right+r.x});return ot({borderBox:l,border:i,margin:a,padding:u})},ut=function(e,t){return void 0===t&&(t={x:window.pageXOffset,y:window.pageYOffset}),at(e,t)},lt=function(e,t){var n={top:it(t.marginTop),right:it(t.marginRight),bottom:it(t.marginBottom),left:it(t.marginLeft)},r={top:it(t.paddingTop),right:it(t.paddingRight),bottom:it(t.paddingBottom),left:it(t.paddingLeft)},o={top:it(t.borderTopWidth),right:it(t.borderRightWidth),bottom:it(t.borderBottomWidth),left:it(t.borderLeftWidth)};return ot({borderBox:e,margin:n,padding:r,border:o})},st=function(e){var t=e.getBoundingClientRect(),n=window.getComputedStyle(e);return lt(t,n)};function ct(){return(ct=me.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n(87);var dt={x:0,y:0},ft=function(e,t){return{x:e.x+t.x,y:e.y+t.y}},pt=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},ht=function(e,t){return e.x===t.x&&e.y===t.y},vt=function(e){return{x:0!==e.x?-e.x:0,y:0!==e.y?-e.y:0}},gt=function(e,t,n){var r;return void 0===n&&(n=0),(r={})[e]=t,r["x"===e?"y":"x"]=n,r},mt=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},bt=function(e,t){return Math.min.apply(Math,t.map(function(t){return mt(e,t)}))},yt=function(e){return function(t){return{x:e(t.x),y:e(t.y)}}},xt=function(e,t){return{top:e.top+t.y,left:e.left+t.x,bottom:e.bottom+t.y,right:e.right+t.x}},St=function(e){return[{x:e.left,y:e.top},{x:e.right,y:e.top},{x:e.left,y:e.bottom},{x:e.right,y:e.bottom}]},wt=function(e,t){return t&&t.shouldClipSubject?function(e,t){var n=et({top:Math.max(t.top,e.top),right:Math.min(t.right,e.right),bottom:Math.min(t.bottom,e.bottom),left:Math.max(t.left,e.left)});return n.width<=0||n.height<=0?null:n}(t.pageMarginBox,e):et(e)},Pt=function(e){var t=e.page,n=e.withPlaceholder,r=e.axis,o=e.frame,i=function(e,t,n){var r;return n&&n.increasedBy?ct({},e,((r={})[t.end]=e[t.end]+n.increasedBy[t.line],r)):e}(function(e,t){return t?xt(e,t.scroll.diff.displacement):e}(t.marginBox,o),r,n);return{page:t,withPlaceholder:n,active:wt(i,o)}},Ot=function(e,t){e.frame||$e(!1);var n=e.frame,r=pt(t,n.scroll.initial),o=vt(r),i=ct({},n,{scroll:{initial:n.scroll.initial,current:t,diff:{value:r,displacement:o},max:n.scroll.max}});return ct({},e,{frame:i,subject:Pt({page:e.subject.page,withPlaceholder:e.subject.withPlaceholder,axis:e.axis,frame:i})})},Et=function(e){},Ct=function(e){};function Mt(e){return pe()(e)}function Dt(e,t){if(e.findIndex)return e.findIndex(t);for(var n=0;n<e.length;n++)if(t(e[n]))return n;return-1}function Tt(e,t){if(e.find)return e.find(t);var n=Dt(e,t);return-1!==n?e[n]:void 0}var kt=Xe(function(e){return e.reduce(function(e,t){return e[t.descriptor.id]=t,e},{})}),jt=Xe(function(e){return e.reduce(function(e,t){return e[t.descriptor.id]=t,e},{})}),It=Xe(function(e){return Mt(e)}),Rt=Xe(function(e){return Mt(e)}),_t=function(e,t){return function(n){return e<=n&&n<=t}},Nt=function(e){var t=_t(e.top,e.bottom),n=_t(e.left,e.right);return function(e){return t(e.y)&&t(e.y)&&n(e.x)&&n(e.x)}},At=Xe(function(e,t){return Rt(t).filter(function(t){return e===t.descriptor.droppableId}).sort(function(e,t){return e.descriptor.index-t.descriptor.index})}),Bt=function(e){var t=_t(e.top,e.bottom),n=_t(e.left,e.right);return function(r){if(t(r.top)&&t(r.bottom)&&n(r.left)&&n(r.right))return!0;var o=t(r.top)||t(r.bottom),i=n(r.left)||n(r.right);if(o&&i)return!0;var a=r.top<e.top&&r.bottom>e.bottom,u=r.left<e.left&&r.right>e.right;return!(!a||!u)||(a&&i||u&&o)}},Lt=function(e){var t=_t(e.top,e.bottom),n=_t(e.left,e.right);return function(e){return t(e.top)&&t(e.bottom)&&n(e.left)&&n(e.right)}},Ft={direction:"vertical",line:"y",crossAxisLine:"x",start:"top",end:"bottom",size:"height",crossAxisStart:"left",crossAxisEnd:"right",crossAxisSize:"width"},Wt={direction:"horizontal",line:"x",crossAxisLine:"y",start:"left",end:"right",size:"width",crossAxisStart:"top",crossAxisEnd:"bottom",crossAxisSize:"height"},Ut=function(e){var t=e.target,n=e.destination,r=e.viewport,o=e.withDroppableDisplacement,i=e.isVisibleThroughFrameFn,a=o?function(e,t){var n=t.frame?t.frame.scroll.diff.displacement:dt;return xt(e,n)}(t,n):t;return function(e,t,n){return!!t.subject.active&&n(t.subject.active)(e)}(a,n,i)&&function(e,t,n){return n(t)(e)}(a,r,i)},Gt=function(e){return Ut(ct({},e,{isVisibleThroughFrameFn:Bt}))},Vt=function(e){return Ut(ct({},e,{isVisibleThroughFrameFn:Lt}))},zt=function(e){var t=e.draggable,n=e.destination,r=e.previousImpact,o=e.viewport,i=t.descriptor.id,a=r.movement.map,u=Gt({target:t.page.marginBox,destination:n,viewport:o,withDroppableDisplacement:!0});return{draggableId:i,isVisible:u,shouldAnimate:function(e,t){return!!e&&(!t||t.shouldAnimate)}(u,a[i])}},qt=Xe(function(e){return e.reduce(function(e,t){return e[t.draggableId]=t,e},{})}),Yt=function(e,t){return e===Ft?"down"===t.vertical:"right"===t.horizontal},Ht=Xe(function(e,t,n){var r=n?1:-1,o=t[e.line]*r;return{value:o,point:gt(e.line,o)}}),Kt={displaced:[],map:{},displacedBy:{point:dt,value:0},willDisplaceForward:!1},Xt={movement:Kt,direction:null,destination:null,merge:null},Jt=function(e,t){return e.descriptor.droppableId===t.descriptor.id},Zt=function(e,t,n){return n?e!==n.combine.draggableId?t:n.whenEntered:t},Qt=function(e){var t=e.pageBorderBoxCenterWithDroppableScrollChange,n=e.previousImpact,r=e.draggable,o=e.destination,i=e.insideDestination,a=e.userDirection;if(!o.isCombineEnabled)return null;var u=o.axis,l=n.movement.map,s=n.movement.displacedBy.value,c=n.merge,d=Tt(i,function(e){var n=e.descriptor.id;if(n===r.descriptor.id)return!1;var o=Boolean(l[n])?s:0;return function(e){var t=e.id,n=e.currentCenter,r=e.axis,o=e.borderBox,i=e.displacedBy,a=e.currentUserDirection,u=e.oldMerge,l=o[r.start]+i,s=o[r.end]+i,c=.666*o[r.size],d=Zt(t,a,u),f=Yt(r,d),p=n[r.line];return f?_t(l,l+c)(p):_t(s-c,s)(p)}({id:n,currentCenter:t,axis:u,borderBox:e.page.borderBox,displacedBy:o,currentUserDirection:a,oldMerge:c})});return d?ct({},n,{destination:null,merge:{whenEntered:Zt(d.descriptor.id,a,c),combine:{draggableId:d.descriptor.id,droppableId:o.descriptor.id}}}):null},$t=function(e){var t=e.pageBorderBoxCenter,n=e.draggable,r=e.draggables,o=e.droppables,i=e.previousImpact,a=e.viewport,u=e.userDirection,l=function(e){var t=e.target,n=e.droppables,r=Tt(It(n),function(e){if(!e.isEnabled)return!1;var n=e.subject.active;return!!n&&Nt(n)(t)});return r?r.descriptor.id:null}({target:t,droppables:o});if(!l)return Xt;var s,c,d=o[l],f=Jt(n,d),p=At(d.descriptor.id,r),h=(s=t,(c=d.frame)?ft(s,c.scroll.diff.value):s),v=Qt({pageBorderBoxCenterWithDroppableScrollChange:h,previousImpact:i,draggable:n,destination:d,insideDestination:p,userDirection:u});return v||(f?function(e){var t=e.pageBorderBoxCenterWithDroppableScrollChange,n=e.draggable,r=e.home,o=e.insideHome,i=e.previousImpact,a=e.viewport,u=e.userDirection,l=r.axis,s=n.page.borderBox.center,c=t[l.line],d=c>s[l.line],f=!d,p=Yt(r.axis,u),h=d?!p:p,v=Ht(r.axis,n.displaceBy,f),g=v.value,m=o.filter(function(e){if(e===n)return!1;var t=e.page.borderBox,r=t[l.start],o=t[l.end];return d?!(e.descriptor.index<n.descriptor.index)&&(h?c>o+g:c>=r):!(e.descriptor.index>n.descriptor.index)&&(h?c<r+g:c<=o)}).map(function(e){return zt({draggable:e,destination:r,previousImpact:i,viewport:a.frame})}),b=d?m.reverse():m,y=function(e,t,n){return t?n?e+t:e-t:e}(n.descriptor.index,b.length,d);return{movement:{displaced:b,map:qt(b),willDisplaceForward:f,displacedBy:v},direction:l.direction,destination:{droppableId:r.descriptor.id,index:y},merge:null}}({pageBorderBoxCenterWithDroppableScrollChange:h,draggable:n,home:d,insideHome:p,previousImpact:i,viewport:a,userDirection:u}):function(e){var t=e.pageBorderBoxCenterWithDroppableScrollChange,n=e.draggable,r=e.destination,o=e.insideDestination,i=e.previousImpact,a=e.viewport,u=e.userDirection,l=r.axis,s=Yt(r.axis,u),c=Ht(r.axis,n.displaceBy,!0),d=t[l.line],f=c.value,p=o.filter(function(e){var t=e.page.borderBox,n=t[l.start],r=t[l.end];return s?d<=n+f:d<r}).map(function(e){return zt({draggable:e,destination:r,previousImpact:i,viewport:a.frame})}),h=o.length-p.length;return{movement:{displacedBy:c,displaced:p,map:qt(p),willDisplaceForward:!0},direction:l.direction,destination:{droppableId:r.descriptor.id,index:h},merge:null}}({pageBorderBoxCenterWithDroppableScrollChange:h,draggable:n,destination:d,insideDestination:p,previousImpact:i,viewport:a,userDirection:u}))},en=function(e){var t=e.scrollHeight,n=e.scrollWidth,r=e.height,o=e.width,i=pt({x:n,y:t},{x:o,y:r});return{x:Math.max(0,i.x),y:Math.max(0,i.y)}},tn=function(e){var t=e.descriptor,n=e.isEnabled,r=e.isCombineEnabled,o=e.isFixedOnPage,i=e.direction,a=e.client,u=e.page,l=e.closest,s=function(){if(!l)return null;var e=l.scrollSize,t=l.client,n=en({scrollHeight:e.scrollHeight,scrollWidth:e.scrollWidth,height:t.paddingBox.height,width:t.paddingBox.width});return{pageMarginBox:l.page.marginBox,frameClient:t,scrollSize:e,shouldClipSubject:l.shouldClipSubject,scroll:{initial:l.scroll,current:l.scroll,max:n,diff:{value:dt,displacement:dt}}}}(),c="vertical"===i?Ft:Wt;return{descriptor:t,isCombineEnabled:r,isFixedOnPage:o,axis:c,isEnabled:n,client:a,page:u,frame:s,subject:Pt({page:u,withPlaceholder:null,axis:c,frame:s})}},nn=function(e,t){return ct({},e,{scroll:ct({},e.scroll,{max:t})})},rn=function(e,t,n){var r=e.frame;e.subject.withPlaceholder&&$e(!1);var o=gt(e.axis.line,t[e.axis.line]),i=function(e,t,n){var r=e.axis,o=e.subject.page.contentBox[r.size],i=At(e.descriptor.id,n).reduce(function(e,t){return e+t.client.marginBox[r.size]},0)+t[r.line]-o;return i<=0?null:gt(r.line,i)}(e,o,n),a={placeholderSize:o,increasedBy:i,oldFrameMaxScroll:e.frame?e.frame.scroll.max:null};if(!r)return ct({},e,{subject:Pt({page:e.subject.page,withPlaceholder:a,axis:e.axis,frame:e.frame})});var u=i?ft(r.scroll.max,i):r.scroll.max,l=nn(r,u);return ct({},e,{subject:Pt({page:e.subject.page,withPlaceholder:a,axis:e.axis,frame:l}),frame:l})},on=function(e){var t=e.subject.withPlaceholder;t||$e(!1);var n=e.frame;if(!n)return ct({},e,{subject:Pt({page:e.subject.page,axis:e.axis,frame:null,withPlaceholder:null})});var r=t.oldFrameMaxScroll;r||$e(!1);var o=nn(n,r);return ct({},e,{subject:Pt({page:e.subject.page,axis:e.axis,frame:o,withPlaceholder:null}),frame:o})},an=function(e){var t=e.frame;return t||$e(!1),t},un=function(e){var t=e.merge,n=e.destination;return n?n.droppableId:t?t.combine.droppableId:null},ln=function(e,t){var n=un(t);return!!n&&n!==e.droppableId},sn=function(e,t){var n;return ct({},e,{droppables:ct({},e.droppables,(n={},n[t.descriptor.id]=t,n))})},cn=function(e){var t=e.dimensions,n=e.previousImpact,r=e.draggable,o=e.impact,i=function(e){var t=e.previousImpact,n=e.impact,r=e.dimensions,o=un(t),i=un(n);if(!o)return r;if(o===i)return r;var a=r.droppables[o];if(!a.subject.withPlaceholder)return r;var u=on(a);return sn(r,u)}({previousImpact:n,impact:o,dimensions:t});if(!ln(r.descriptor,o))return i;var a=un(o);if(!a)return i;var u=i.droppables[a];if(u.subject.withPlaceholder)return i;var l=rn(u,r.displaceBy,i.draggables);return sn(i,l)},dn=function(e){var t,n,r=e.state,o=e.published;Et("Processing dynamic changes");var i=function(e){var t=e.modified,n=e.existingDroppables,r=e.initialWindowScroll;return t.length?t.map(function(e){var t=n[e.descriptor.id];t||$e(!1);var o,i,a=t.subject.withPlaceholder?on(t):t,u=a.client,l=e.client,s=an(a),c=an(e),d=ot({borderBox:(a.axis,o=u.borderBox,i=l.borderBox,{top:o.top,left:o.left,right:o.left+i.width,bottom:o.top+i.height}),margin:u.margin,border:u.border,padding:u.padding}),f={client:s.frameClient,page:ut(s.frameClient,r),shouldClipSubject:s.shouldClipSubject,scrollSize:c.scrollSize,scroll:s.scroll.initial},p=tn({descriptor:e.descriptor,isEnabled:e.isEnabled,isCombineEnabled:e.isCombineEnabled,isFixedOnPage:e.isFixedOnPage,direction:e.axis.direction,client:d,page:ut(d,r),closest:f});return Ot(p,c.scroll.current)}):t}({modified:o.modified,existingDroppables:r.dimensions.droppables,initialWindowScroll:r.viewport.scroll.initial}),a=function(e){var t=e.additions,n=e.modified,r=e.viewport,o=r.scroll.diff.value,i=kt(n);return t.map(function(e){var t=e.descriptor.droppableId,n=i[t].frame;n||$e(!1);var a=n.scroll.diff.value,u=ft(o,a),l=at(e.client,u),s=ut(l,r.scroll.initial);return ct({},e,{placeholder:ct({},e.placeholder,{client:l}),client:l,page:s})})}({additions:o.additions,modified:i,viewport:r.viewport}),u={draggables:r.dimensions.draggables,droppables:ct({},r.dimensions.droppables,kt(i))},l=function(e){var t=e.existing,n=e.additions,r=e.removals,o=e.initialWindowScroll,i=It(t.droppables),a={};i.forEach(function(e){var i=e.axis,u=At(e.descriptor.id,t.draggables),l={},s=function(e,t){var n=l[e];l[e]=n?{indexChange:n.indexChange+t.indexChange,offset:ft(n.offset,t.offset)}:t},c=jt(r.map(function(e){return t.draggables[e]}).filter(function(t){return t.descriptor.droppableId===e.descriptor.id})),d=u.filter(function(e,t){if(!Boolean(c[e.descriptor.id]))return!0;var n=vt(gt(i.line,e.client.marginBox[i.size]));return u.slice(t).forEach(function(e){c[e.descriptor.id]||s(e.descriptor.id,{indexChange:-1,offset:n})}),!1}),f=n.filter(function(t){return t.descriptor.droppableId===e.descriptor.id}),p=d.slice(0);f.forEach(function(e){p.splice(e.descriptor.index,0,e)});var h=jt(f);p.forEach(function(e,t){if(Boolean(h[e.descriptor.id])){var n=gt(i.line,e.client.marginBox[i.size]);p.slice(t).forEach(function(e){h[e.descriptor.id]||s(e.descriptor.id,{indexChange:1,offset:n})})}}),p.forEach(function(e){if(!h[e.descriptor.id]){var t=l[e.descriptor.id];if(t){var n=at(e.client,t.offset),r=ut(n,o),i=e.descriptor.index+t.indexChange,u=ct({},e,{descriptor:ct({},e.descriptor,{index:i}),placeholder:ct({},e.placeholder,{client:n}),client:n,page:r});a[u.descriptor.id]=u}}})});var u=ct({},t.draggables,a,jt(n));return r.forEach(function(e){delete u[e]}),u}({existing:u,additions:a,removals:o.removals,initialWindowScroll:r.viewport.scroll.initial}),s=r.critical.draggable.id,c=r.dimensions.draggables[s],d=l[s],f=cn({previousImpact:r.impact,impact:r.impact,draggable:d,dimensions:{draggables:l,droppables:u.droppables}}),p={droppable:r.critical.droppable,draggable:d.descriptor},h=function(e){var t,n=e.initial,r=e.current,o=e.oldClientBorderBoxCenter,i=e.newClientBorderBoxCenter,a=e.viewport,u=pt(i,o),l={client:t={selection:ft(n.client.selection,u),borderBoxCenter:i,offset:dt},page:{selection:ft(t.selection,a.scroll.initial),borderBoxCenter:ft(t.selection,a.scroll.initial)}};return{current:function(){var e=vt(u),t=ft(r.client.offset,e),n={selection:ft(l.client.selection,t),borderBoxCenter:ft(l.client.borderBoxCenter,t),offset:t},o={selection:ft(n.selection,a.scroll.current),borderBoxCenter:ft(n.borderBoxCenter,a.scroll.current)};return ht(r.client.borderBoxCenter,n.borderBoxCenter)||$e(!1),{client:n,page:o}}(),initial:l}}({initial:r.initial,current:r.current,oldClientBorderBoxCenter:c.client.borderBox.center,newClientBorderBoxCenter:d.client.borderBox.center,viewport:r.viewport}),v=h.initial,g=h.current,m=function(e){var t=e.movement.displaced;if(!t.length)return e;var n=t.map(function(e){return e.shouldAnimate?ct({},e,{shouldAnimate:!1}):e});return ct({},e,{movement:ct({},e.movement,{displaced:n,map:qt(n)})})}($t({pageBorderBoxCenter:g.page.borderBoxCenter,draggable:f.draggables[r.critical.draggable.id],draggables:f.draggables,droppables:f.droppables,previousImpact:Xt,viewport:r.viewport,userDirection:r.userDirection}));Boolean("SNAP"===r.movementMode&&r.impact.destination&&!m.destination)&&$e(!1),Ct("Processing dynamic changes");var b=ct({phase:"DRAGGING"},r,((t={}).phase="DRAGGING",t.critical=p,t.current=g,t.initial=v,t.impact=m,t.dimensions=f,t.forceShouldAnimate=!1,t));return"COLLECTING"===r.phase?b:ct({phase:"DROP_PENDING"},b,((n={}).phase="DROP_PENDING",n.reason=r.reason,n.isWaiting=!1,n))},fn=function(e){var t=e.subject.active;return t||$e(!1),t},pn=function(e,t){var n=e.frame;return n?ft(t,n.scroll.diff.displacement):t},hn=function(e){var t=e.isInHomeList,n=e.proposedIndex,r=e.startIndexInHome;return!t||n<r},vn=function(e,t){return{movement:Kt,direction:t.axis.direction,destination:(n=e.descriptor,{index:n.index,droppableId:n.droppableId}),merge:null};var n},gn=function(e,t){return t.margin[e.start]+t.borderBox[e.size]/2},mn=function(e,t,n){return t[e.crossAxisStart]+n.margin[e.crossAxisStart]+n.borderBox[e.crossAxisSize]/2},bn=function(e){var t=e.axis,n=e.moveRelativeTo,r=e.isMoving;return gt(t.line,n.marginBox[t.end]+gn(t,r),mn(t,n.marginBox,r))},yn=function(e){var t=e.movement,n=e.draggable,r=e.draggables,o=e.droppable,i=At(o.descriptor.id,r),a=n.page,u=o.axis;if(!i.length)return function(e){var t=e.axis,n=e.moveInto,r=e.isMoving;return gt(t.line,n.contentBox[t.start]+gn(t,r),mn(t,n.contentBox,r))}({axis:u,moveInto:o.page,isMoving:a});var l=t.displaced,s=t.willDisplaceForward,c=t.displacedBy,d=Jt(n,o),f=l.length?r[l[0].draggableId]:null;if(!f){if(d)return n.page.borderBox.center;var p=i[i.length-1];return bn({axis:u,moveRelativeTo:p.page,isMoving:a})}var h=at(f.page,c.point);return s?function(e){var t=e.axis,n=e.moveRelativeTo,r=e.isMoving;return gt(t.line,n.marginBox[t.start]-function(e,t){return t.margin[e.end]+t.borderBox[e.size]/2}(t,r),mn(t,n.marginBox,r))}({axis:u,moveRelativeTo:h,isMoving:a}):bn({axis:u,moveRelativeTo:h,isMoving:a})},xn=function(e){var t=e.impact,n=e.draggable,r=e.droppable,o=e.draggables,i=t.merge,a=t.destination,u=n.page.borderBox.center;return r?a?yn({movement:t.movement,draggable:n,draggables:o,droppable:r}):i?function(e){var t=e.combine,n=e.movement,r=e.draggables,o=t.draggableId,i=Boolean(n.map[o]),a=r[o].page.borderBox.center;return i?ft(a,n.displacedBy.point):a}({movement:t.movement,combine:i.combine,draggables:o}):u:u},Sn=function(e){var t=xn(e),n=e.droppable;return n?pn(n,t):t},wn=function(e){var t=e.draggable,n=e.destination,r=e.newPageBorderBoxCenter,o=e.viewport,i=e.withDroppableDisplacement,a=e.onlyOnMainAxis,u=void 0!==a&&a,l=pt(r,t.page.borderBox.center),s={target:xt(t.page.borderBox,l),destination:n,withDroppableDisplacement:i,viewport:o};return u?function(e){return Ut(ct({},e,{isVisibleThroughFrameFn:(t=e.destination.axis,function(e){var n=_t(e.top,e.bottom),r=_t(e.left,e.right);return function(e){return t===Ft?n(e.top)&&n(e.bottom):r(e.left)&&r(e.right)}})}));var t}(s):Vt(s)},Pn=function(e){var t=e.previousPageBorderBoxCenter,n=e.destination,r=e.insideDestination,o=e.draggable,i=e.draggables,a=e.moveRelativeTo,u=e.previousImpact,l=e.viewport;return r.length&&!a?null:(a&&a.descriptor.droppableId!==n.descriptor.id&&$e(!1),Jt(o,n)?function(e){var t=e.moveIntoIndexOf,n=e.insideDestination,r=e.draggable,o=e.destination,i=e.previousImpact,a=e.viewport;if(!t)return null;var u=o.axis,l=r.descriptor.index,s=t.descriptor.index;if(l===s)return vn(r,o);var c=hn({isInHomeList:!0,proposedIndex:s,startIndexInHome:l}),d=(c?n.slice(s,l):n.slice(l+1,s+1).reverse()).map(function(e){return zt({draggable:e,destination:o,previousImpact:i,viewport:a.frame})});return d.length||$e(!1),{movement:{displacedBy:Ht(o.axis,r.displaceBy,c),displaced:d,map:qt(d),willDisplaceForward:c},direction:u.direction,destination:{droppableId:o.descriptor.id,index:s},merge:null}}({moveIntoIndexOf:a,insideDestination:r,draggable:o,destination:n,previousImpact:u,viewport:l}):function(e){var t=e.previousPageBorderBoxCenter,n=e.moveRelativeTo,r=e.insideDestination,o=e.draggable,i=e.draggables,a=e.destination,u=e.previousImpact,l=e.viewport,s=a.axis;if(!n||!r.length){var c={movement:Kt,direction:s.direction,destination:{droppableId:a.descriptor.id,index:0},merge:null},d=Sn({impact:c,draggable:o,droppable:a,draggables:i}),f=rn(a,o.displaceBy,i);return wn({draggable:o,destination:f,newPageBorderBoxCenter:d,viewport:l.frame,withDroppableDisplacement:!1,onlyOnMainAxis:!0})?c:null}var p=r.indexOf(n);-1===p&&$e(!1);var h=Boolean(t[a.axis.line]<n.page.borderBox.center[a.axis.line])?p:p+1,v=r.slice(h).map(function(e){return zt({draggable:e,destination:a,viewport:l.frame,previousImpact:u})});return{movement:{displacedBy:Ht(a.axis,o.displaceBy,!0),displaced:v,map:qt(v),willDisplaceForward:!0},direction:s.direction,destination:{droppableId:a.descriptor.id,index:h},merge:null}}({previousPageBorderBoxCenter:t,moveRelativeTo:a,insideDestination:r,draggable:o,draggables:i,destination:n,previousImpact:u,viewport:l}))},On=function(e){var t=e.pageBorderBoxCenter,n=e.draggable,r=function(e,t){return ft(e.scroll.diff.displacement,t)}(e.viewport,t),o=pt(r,n.page.borderBox.center);return ft(n.client.borderBox.center,o)},En=function(e){var t=e.isMovingForward,n=e.previousPageBorderBoxCenter,r=e.draggable,o=e.isOver,i=e.draggables,a=e.droppables,u=e.previousImpact,l=e.viewport,s=function(e){var t=e.isMovingForward,n=e.pageBorderBoxCenter,r=e.source,o=e.droppables,i=e.viewport,a=r.subject.active;if(!a)return null;var u=r.axis,l=_t(a[u.start],a[u.end]),s=It(o).filter(function(e){return e!==r}).filter(function(e){return e.isEnabled}).filter(function(e){return Boolean(e.subject.active)}).filter(function(e){return Bt(i.frame)(fn(e))}).filter(function(e){var n=fn(e);return t?a[u.crossAxisEnd]<n[u.crossAxisEnd]:n[u.crossAxisStart]<a[u.crossAxisStart]}).filter(function(e){var t=fn(e),n=_t(t[u.start],t[u.end]);return l(t[u.start])||l(t[u.end])||n(a[u.start])||n(a[u.end])}).sort(function(e,n){var r=fn(e)[u.crossAxisStart],o=fn(n)[u.crossAxisStart];return t?r-o:o-r}).filter(function(e,t,n){return fn(e)[u.crossAxisStart]===fn(n[0])[u.crossAxisStart]});if(!s.length)return null;if(1===s.length)return s[0];var c=s.filter(function(e){return _t(fn(e)[u.start],fn(e)[u.end])(n[u.line])});return 1===c.length?c[0]:c.length>1?c.sort(function(e,t){return fn(e)[u.start]-fn(t)[u.start]})[0]:s.sort(function(e,t){var r=bt(n,St(fn(e))),o=bt(n,St(fn(t)));return r!==o?r-o:fn(e)[u.start]-fn(t)[u.start]})[0]}({isMovingForward:t,pageBorderBoxCenter:n,source:o,droppables:a,viewport:l});if(!s)return null;var c=At(s.descriptor.id,i),d=function(e){var t=e.axis,n=e.pageBorderBoxCenter,r=e.viewport,o=e.destination;return e.insideDestination.filter(function(e){return Vt({target:e.page.borderBox,destination:o,viewport:r.frame,withDroppableDisplacement:!0})}).sort(function(e,r){var i=mt(n,pn(o,e.page.borderBox.center)),a=mt(n,pn(o,r.page.borderBox.center));return i<a?-1:a<i?1:e.page.borderBox[t.start]-r.page.borderBox[t.start]})[0]||null}({axis:s.axis,pageBorderBoxCenter:n,viewport:l,destination:s,insideDestination:c}),f=Pn({previousPageBorderBoxCenter:n,destination:s,draggable:r,draggables:i,moveRelativeTo:d,insideDestination:c,previousImpact:u,viewport:l});if(!f)return null;var p=Sn({impact:f,draggable:r,droppable:s,draggables:i});return{clientSelection:On({pageBorderBoxCenter:p,draggable:r,viewport:l}),impact:f,scrollJumpRequest:null}},Cn={vertical:"down",horizontal:"right"},Mn={vertical:"up",horizontal:"left"},Dn=function(e){var t=e.isMovingForward,n=e.isInHomeList,r=e.draggable,o=e.draggables,i=e.destination,a=e.insideDestination,u=e.previousImpact,l=u.destination?function(e){var t=e.isMovingForward,n=e.isInHomeList,r=e.previousImpact,o=e.draggable,i=e.insideDestination;if(r.merge)return null;var a=r.destination;a||$e(!1);var u=i.slice(),l=a.index;!n&&u.splice(a.index,0,o);var s=t?l+1:l-1;return s<0?null:s>u.length-1?null:{proposedIndex:s,modifyDisplacement:!0}}({isMovingForward:t,isInHomeList:n,draggable:r,previousImpact:u,insideDestination:a}):(u.merge||$e(!1),function(e){var t=e.isInHomeList,n=e.isMovingForward,r=e.draggable,o=e.destination,i=e.previousImpact,a=e.draggables,u=e.merge;if(!o.isCombineEnabled)return null;var l=i.movement,s=u.combine.draggableId,c=a[s].descriptor.index;if(!Boolean(l.map[s]))return hn({isInHomeList:t,proposedIndex:c,startIndexInHome:r.descriptor.index})?n?{proposedIndex:c+1,modifyDisplacement:!1}:{proposedIndex:c,modifyDisplacement:!0}:n?{proposedIndex:c,modifyDisplacement:!0}:{proposedIndex:c-1,modifyDisplacement:!1};var d=l.willDisplaceForward,f=d?c+1:c-1;return d?n?{proposedIndex:f,modifyDisplacement:!0}:{proposedIndex:f-1,modifyDisplacement:!1}:n?{proposedIndex:f+1,modifyDisplacement:!1}:{proposedIndex:f,modifyDisplacement:!0}}({isInHomeList:n,isMovingForward:t,draggable:r,destination:i,previousImpact:u,draggables:o,merge:u.merge}));if(null==l)return null;var s=l.proposedIndex,c=l.modifyDisplacement,d=r.descriptor.index,f=hn({isInHomeList:n,proposedIndex:s,startIndexInHome:d}),p=Ht(i.axis,r.displaceBy,f),h=a[s],v=function(){if(!c)return u.movement.displaced;var e,r=function(e){var t=e.isInHomeList,n=e.isMovingForward,r=e.proposedIndex,o=e.startIndexInHome;return t?n?r>o:r<o:!n}({isInHomeList:n,isMovingForward:t,proposedIndex:s,startIndexInHome:d}),o=u.movement.displaced;return r?(e=o,[{draggableId:h.descriptor.id,isVisible:!0,shouldAnimate:!0}].concat(e)):function(e){return e.slice(1)}(o)}();return{movement:{displacedBy:p,willDisplaceForward:f,displaced:v,map:qt(v)},direction:i.axis.direction,destination:{droppableId:i.descriptor.id,index:s},merge:null}},Tn=function(e,t){var n=pt(t,e.scroll.initial),r=vt(n);return{frame:et({top:t.y,bottom:t.y+e.frame.height,left:t.x,right:t.x+e.frame.width}),scroll:{initial:e.scroll.initial,max:e.scroll.max,current:t,diff:{value:n,displacement:r}}}},kn=function(e,t){return ct({},e,{movement:ct({},e.movement,{displaced:t,map:qt(t)})})},jn=function(e){var t=e.isMovingForward,n=e.draggable,r=e.destination,o=e.draggables,i=e.previousImpact,a=e.viewport,u=e.previousPageBorderBoxCenter,l=e.previousClientSelection;if(!r.isEnabled)return null;var s=At(r.descriptor.id,o),c=Jt(n,r),d=function(e){var t=e.isMovingForward,n=e.isInHomeList,r=e.draggable,o=e.destination,i=e.insideDestination,a=e.previousImpact;if(!o.isCombineEnabled)return null;if(a.merge)return null;var u=a.destination;u||$e(!1);var l,s=u.index,c=(l=i.slice(),n&&l.splice(r.descriptor.index,1),l.splice(u.index,0,r),l),d=t?s+1:s-1;if(d<0)return null;if(d>c.length-1)return null;var f=c[d],p={whenEntered:t?Cn:Mn,combine:{draggableId:f.descriptor.id,droppableId:o.descriptor.id}};return{movement:a.movement,destination:null,direction:o.axis.direction,merge:p}}({isInHomeList:c,isMovingForward:t,draggable:n,destination:r,insideDestination:s,previousImpact:i})||Dn({isMovingForward:t,isInHomeList:c,draggable:n,draggables:o,destination:r,insideDestination:s,previousImpact:i});if(!d)return null;var f=Sn({impact:d,draggable:n,droppable:r,draggables:o});if(wn({draggable:n,destination:r,newPageBorderBoxCenter:f,viewport:a.frame,withDroppableDisplacement:!1,onlyOnMainAxis:!0}))return{clientSelection:On({pageBorderBoxCenter:f,draggable:n,viewport:a}),impact:d,scrollJumpRequest:null};var p=pt(f,u);return{clientSelection:l,impact:function(e){var t=e.impact,n=e.viewport,r=e.destination,o=e.draggables,i=e.maxScrollChange,a=t.movement.displaced,u=Tn(n,ft(n.scroll.current,i)),l=r.frame?Ot(r,ft(r.frame.scroll.current,i)):r,s=a.map(function(e){return e.isVisible?e:zt({draggable:o[e.draggableId],destination:l,previousImpact:t,viewport:u.frame}).isVisible?{draggableId:e.draggableId,isVisible:!0,shouldAnimate:!1}:e});return kn(t,s)}({impact:d,viewport:a,destination:r,draggables:o,maxScrollChange:p}),scrollJumpRequest:p}},In=function(e){var t=e.state,n=e.type,r=function(e,t){var n=un(e);return n?t[n]:null}(t.impact,t.dimensions.droppables),o=Boolean(r),i=t.dimensions.droppables[t.critical.droppable.id],a=r||i,u=a.axis.direction,l="vertical"===u&&("MOVE_UP"===n||"MOVE_DOWN"===n)||"horizontal"===u&&("MOVE_LEFT"===n||"MOVE_RIGHT"===n);if(l&&!o)return null;var s="MOVE_DOWN"===n||"MOVE_RIGHT"===n,c=t.dimensions.draggables[t.critical.draggable.id],d=t.current.page.borderBoxCenter,f=t.dimensions,p=f.draggables,h=f.droppables,v=t.viewport;return l?jn({isMovingForward:s,draggable:c,destination:a,draggables:p,viewport:v,previousPageBorderBoxCenter:d,previousClientSelection:t.current.client.selection,previousImpact:t.impact}):En({isMovingForward:s,previousPageBorderBoxCenter:d,draggable:c,isOver:a,draggables:p,droppables:h,previousImpact:t.impact,viewport:v})};function Rn(e){return"DRAGGING"===e.phase||"COLLECTING"===e.phase}var _n,Nn,An=function(e,t){return 0===t?e:t>0?"down":"up"},Bn=function(e,t){return 0===t?e:t>0?"right":"left"},Ln=function(e){var t,n,r,o,i=e.state,a=e.clientSelection,u=e.dimensions,l=e.viewport,s=e.impact,c=e.scrollJumpRequest,d=l||i.viewport,f=d.scroll.current,p=u||i.dimensions,h=a||i.current.client.selection,v=pt(h,i.initial.client.selection),g={offset:v,selection:h,borderBoxCenter:ft(i.initial.client.borderBoxCenter,v)},m={selection:ft(g.selection,f),borderBoxCenter:ft(g.borderBoxCenter,f)},b={client:g,page:m},y=(t=i.userDirection,n=i.current.page.borderBoxCenter,r=b.page.borderBoxCenter,o=pt(r,n),{horizontal:Bn(t.horizontal,o.x),vertical:An(t.vertical,o.y)});if("COLLECTING"===i.phase)return ct({phase:"COLLECTING"},i,{dimensions:p,viewport:d,current:b,userDirection:y});var x=p.draggables[i.critical.draggable.id],S=s||$t({pageBorderBoxCenter:m.borderBoxCenter,draggable:x,draggables:p.draggables,droppables:p.droppables,previousImpact:i.impact,viewport:d,userDirection:y});return ct({},i,{current:b,userDirection:y,dimensions:cn({draggable:x,impact:S,previousImpact:i.impact,dimensions:p}),impact:S,viewport:d,scrollJumpRequest:c||null,forceShouldAnimate:!c&&null})},Fn=function(e){var t=e.impact,n=e.draggable,r=e.droppable,o=e.draggables,i=e.viewport,a=Sn({impact:t,draggable:n,draggables:o,droppable:r});return On({pageBorderBoxCenter:a,draggable:n,viewport:i})},Wn=function(e){var t=e.state,n=e.dimensions,r=e.viewport;"SNAP"!==t.movementMode&&$e(!1);var o=t.impact,i=r||t.viewport,a=n||t.dimensions,u=a.draggables,l=a.droppables,s=u[t.critical.draggable.id],c=un(o);c||$e(!1);var d=l[c],f=function(e){var t=e.impact,n=e.viewport,r=e.destination,o=e.draggables,i=t.movement.displaced.map(function(e){return zt({draggable:o[e.draggableId],destination:r,previousImpact:t,viewport:n.frame})});return kn(t,i)}({impact:o,viewport:i,destination:d,draggables:u}),p=Fn({impact:f,draggable:s,droppable:d,draggables:u,viewport:i});return Ln({impact:f,clientSelection:p,state:t,dimensions:a,viewport:i})},Un=function(e){return"SNAP"===e.movementMode},Gn=function(e,t,n){var r=sn(e.dimensions,t);return!Un(e)||n?Ln({state:e,dimensions:r}):Wn({state:e,dimensions:r})},Vn={phase:"IDLE"},zn=function(e,t){if(void 0===e&&(e=Vn),"CLEAN"===t.type)return Vn;if("INITIAL_PUBLISH"===t.type){"IDLE"!==e.phase&&$e(!1);var n=t.payload,r=n.critical,o=n.clientSelection,i=n.viewport,a=n.dimensions,u=n.movementMode,l=a.draggables[r.draggable.id],s=a.droppables[r.droppable.id],c={selection:o,borderBoxCenter:l.client.borderBox.center,offset:dt},d={client:c,page:{selection:ft(c.selection,i.scroll.initial),borderBoxCenter:ft(c.selection,i.scroll.initial)}};return{phase:"DRAGGING",isDragging:!0,critical:r,movementMode:u,dimensions:a,initial:d,current:d,isWindowScrollAllowed:It(a.droppables).every(function(e){return!e.isFixedOnPage}),impact:vn(l,s),viewport:i,userDirection:Cn,scrollJumpRequest:null,forceShouldAnimate:null}}var f;if("COLLECTION_STARTING"===t.type)return"COLLECTING"===e.phase||"DROP_PENDING"===e.phase?e:("DRAGGING"!==e.phase&&$e(!1),ct({phase:"COLLECTING"},e,((f={}).phase="COLLECTING",f)));if("PUBLISH_WHILE_DRAGGING"===t.type)return"COLLECTING"!==e.phase&&"DROP_PENDING"!==e.phase&&$e(!1),dn({state:e,published:t.payload});if("MOVE"===t.type){if("DROP_PENDING"===e.phase)return e;Rn(e)||$e(!1);var p=t.payload.client;return ht(p,e.current.client.selection)?e:Ln({state:e,clientSelection:p,impact:Un(e)?e.impact:null})}if("UPDATE_DROPPABLE_SCROLL"===t.type){if("DROP_PENDING"===e.phase)return e;if("COLLECTING"===e.phase)return e;Rn(e)||$e(!1);var h=t.payload,v=h.id,g=h.offset,m=e.dimensions.droppables[v];if(!m)return e;var b=Ot(m,g);return Gn(e,b,!1)}if("UPDATE_DROPPABLE_IS_ENABLED"===t.type){if("DROP_PENDING"===e.phase)return e;Rn(e)||$e(!1);var y=t.payload,x=y.id,S=y.isEnabled,w=e.dimensions.droppables[x];w||$e(!1),w.isEnabled===S&&$e(!1);var P=ct({},w,{isEnabled:S});return Gn(e,P,!0)}if("UPDATE_DROPPABLE_IS_COMBINE_ENABLED"===t.type){if("DROP_PENDING"===e.phase)return e;Rn(e)||$e(!1);var O=t.payload,E=O.id,C=O.isCombineEnabled,M=e.dimensions.droppables[E];M||$e(!1),M.isCombineEnabled===C&&$e(!1);var D=ct({},M,{isCombineEnabled:C});return Gn(e,D,!0)}if("MOVE_BY_WINDOW_SCROLL"===t.type){if("DROP_PENDING"===e.phase||"DROP_ANIMATING"===e.phase)return e;Rn(e)||$e(!1),e.isWindowScrollAllowed||$e(!1);var T=t.payload.newScroll;if(ht(e.viewport.scroll.current,T))return e;var k=Tn(e.viewport,T);return Un(e)?Wn({state:e,viewport:k}):Ln({state:e,viewport:k})}if("UPDATE_VIEWPORT_MAX_SCROLL"===t.type){Rn(e)||$e(!1);var j=t.payload.maxScroll,I=ct({},e.viewport,{scroll:ct({},e.viewport.scroll,{max:j})});return ct({phase:"DRAGGING"},e,{viewport:I})}if("MOVE_UP"===t.type||"MOVE_DOWN"===t.type||"MOVE_LEFT"===t.type||"MOVE_RIGHT"===t.type){if("COLLECTING"===e.phase||"DROP_PENDING"===e.phase)return e;"DRAGGING"!==e.phase&&$e(!1);var R=In({state:e,type:t.type});return R?Ln({state:e,impact:R.impact,clientSelection:R.clientSelection,scrollJumpRequest:R.scrollJumpRequest}):e}if("DROP_PENDING"===t.type){var _,N=t.payload.reason;return"COLLECTING"!==e.phase&&$e(!1),ct({phase:"DROP_PENDING"},e,((_={}).phase="DROP_PENDING",_.isWaiting=!0,_.reason=N,_))}if("DROP_ANIMATE"===t.type){var A=t.payload;return"DRAGGING"!==e.phase&&"DROP_PENDING"!==e.phase&&$e(!1),{phase:"DROP_ANIMATING",pending:A,dimensions:e.dimensions}}return"DROP_COMPLETE"===t.type?Vn:e},qn=function(e){return{type:"PUBLISH_WHILE_DRAGGING",payload:e}},Yn=function(){return{type:"COLLECTION_STARTING",payload:null}},Hn=function(e){return{type:"UPDATE_DROPPABLE_SCROLL",payload:e}},Kn=function(e){return{type:"UPDATE_DROPPABLE_IS_ENABLED",payload:e}},Xn=function(e){return{type:"UPDATE_DROPPABLE_IS_COMBINE_ENABLED",payload:e}},Jn=function(e){return{type:"MOVE",payload:e}},Zn=function(){return{type:"CLEAN",payload:null}},Qn=function(e){return{type:"DROP_COMPLETE",payload:e}},$n=function(e){return{type:"DROP",payload:e}},er=function(e){var t=e.getState,n=e.dispatch;return function(e){return function(r){if("DROP"===r.type){var o=t(),i=r.payload.reason;if("COLLECTING"!==o.phase){if("IDLE"!==o.phase){"DROP_PENDING"===o.phase&&o.isWaiting&&$e(!1),"DRAGGING"!==o.phase&&"DROP_PENDING"!==o.phase&&$e(!1);var a=o.critical,u=o.dimensions,l="DROP"===i?o.impact:Xt,s=u.draggables[o.critical.draggable.id],c=l?l.destination:null,d=l&&l.merge?l.merge.combine:null,f={index:a.draggable.index,droppableId:a.droppable.id},p={draggableId:s.descriptor.id,type:s.descriptor.type,source:f,mode:o.movementMode,destination:c,combine:d,reason:i},h=function(e){var t=e.impact,n=e.draggable,r=e.dimensions,o=e.viewport,i=r.draggables,a=r.droppables,u=un(t),l=u?a[u]:null,s=a[n.descriptor.droppableId],c=Fn({impact:t,draggable:n,draggables:i,droppable:l||s,viewport:o});return pt(c,n.client.borderBox.center)}({impact:l,draggable:s,dimensions:u,viewport:o.viewport});if(!ht(o.current.client.offset,h)||Boolean(p.combine)){var v=function(e){var t=e.current,n=e.destination,r=e.reason,o=mt(t,n);if(o<=0)return.33;if(o>=1500)return.55;var i=.33+o/1500*(.55-.33);return Number(("CANCEL"===r?.6*i:i).toFixed(2))}({current:o.current.client.offset,destination:h,reason:i});n(function(e){return{type:"DROP_ANIMATE",payload:e}}({newHomeClientOffset:h,dropDuration:v,result:p,impact:l}))}else n(Qn(p))}}else n({type:"DROP_PENDING",payload:{reason:i}})}else e(r)}}},tr=function(e){return e+1},nr=function(e,t){var n=e.droppableId===t.droppableId,r=tr(e.index),o=tr(t.index);return n?"\n      You have moved the item from position "+r+"\n      to position "+o+"\n    ":"\n    You have moved the item from position "+r+"\n    in list "+e.droppableId+"\n    to list "+t.droppableId+"\n    in position "+o+"\n  "},rr=function(e,t,n){return t.droppableId===n.droppableId?"\n      The item "+e+"\n      has been combined with "+n.draggableId:"\n      The item "+e+"\n      in list "+t.droppableId+"\n      has been combined with "+n.draggableId+"\n      in list "+n.droppableId+"\n    "},or=function(e){return"\n  The item has returned to its starting position\n  of "+tr(e.index)+"\n"},ir=function(e){return"\n  You have lifted an item in position "+tr(e.source.index)+".\n  Use the arrow keys to move, space bar to drop, and escape to cancel.\n"},ar=function(e){var t=e.destination;if(t)return nr(e.source,t);var n=e.combine;return n?rr(e.draggableId,e.source,n):"You are over an area that cannot be dropped on"},ur=function(e){if("CANCEL"===e.reason)return"\n      Movement cancelled.\n      "+or(e.source)+"\n    ";var t=e.destination,n=e.combine;return t?"\n      You have dropped the item.\n      "+nr(e.source,t)+"\n    ":n?"\n      You have dropped the item.\n      "+rr(e.draggableId,e.source,n)+"\n    ":"\n    The item has been dropped while not over a drop area.\n    "+or(e.source)+"\n  "},lr=function(){var e=[];return{add:function(t){var n=setTimeout(function(){return function(t){var n=Dt(e,function(e){return e.timerId===t});-1===n&&$e(!1),e.splice(n,1)[0].callback()}(n)}),r={timerId:n,callback:t};e.push(r)},flush:function(){if(e.length){var t=e.concat();e.length=0,t.forEach(function(e){clearTimeout(e.timerId),e.callback()})}}}},sr=function(e,t){Et(e),t(),Ct(e)},cr=function(e,t){return{draggableId:e.draggable.id,type:e.droppable.type,source:{droppableId:e.droppable.id,index:e.draggable.index},mode:t}},dr=function(e,t,n,r){if(e){var o=function(e){var t=!1,n=!1,r=setTimeout(function(){n=!0}),o=function(o){t||n||(t=!0,e(o),clearTimeout(r))};return o.wasCalled=function(){return t},o}(n);e(t,{announce:o}),o.wasCalled()||n(r(t))}else n(r(t))},fr=function(e,t){var n=function(e,t){var n=lr(),r=null,o=function(n){r||$e(!1),r=null,sr("onDragEnd",function(){return dr(e().onDragEnd,n,t,ur)})};return{beforeStart:function(t,n){r&&$e(!1),sr("onBeforeDragStart",function(){var r=e().onBeforeDragStart;r&&r(cr(t,n))})},start:function(o,i){r&&$e(!1);var a=cr(o,i);r={mode:i,lastCritical:o,lastLocation:a.source,lastCombine:null},n.add(function(){sr("onDragStart",function(){return dr(e().onDragStart,a,t,ir)})})},update:function(o,i){var a=i.destination,u=i.merge?i.merge.combine:null;r||$e(!1);var l=!function(e,t){if(e===t)return!0;var n=e.draggable.id===t.draggable.id&&e.draggable.droppableId===t.draggable.droppableId&&e.draggable.type===t.draggable.type&&e.draggable.index===t.draggable.index,r=e.droppable.id===t.droppable.id&&e.droppable.type===t.droppable.type;return n&&r}(o,r.lastCritical);l&&(r.lastCritical=o);var s,c,d=(s=r.lastLocation,c=a,!(null==s&&null==c||null!=s&&null!=c&&s.droppableId===c.droppableId&&s.index===c.index));d&&(r.lastLocation=a);var f=!function(e,t){return null==e&&null==t||null!=e&&null!=t&&e.draggableId===t.draggableId&&e.droppableId===t.droppableId}(r.lastCombine,u);if(f&&(r.lastCombine=u),l||d||f){var p=ct({},cr(o,r.mode),{combine:u,destination:a});n.add(function(){sr("onDragUpdate",function(){return dr(e().onDragUpdate,p,t,ar)})})}},flush:function(){r||$e(!1),n.flush()},drop:o,abort:function(){if(r){var e=ct({},cr(r.lastCritical,r.mode),{combine:null,destination:null,reason:"CANCEL"});o(e)}}}}(e,t);return function(e){return function(t){return function(r){if("INITIAL_PUBLISH"===r.type){var o=r.payload.critical;return n.beforeStart(o,r.payload.movementMode),t(r),void n.start(o,r.payload.movementMode)}if("DROP_COMPLETE"===r.type){var i=r.payload;return n.flush(),t(r),void n.drop(i)}if(t(r),"CLEAN"!==r.type){var a=e.getState();"DRAGGING"===a.phase&&n.update(a.critical,a.impact)}else n.abort()}}}},pr=function(e){return function(t){return function(n){if("DROP_ANIMATION_FINISHED"===n.type){var r=e.getState();"DROP_ANIMATING"!==r.phase&&$e(!1),e.dispatch(Qn(r.pending.result))}else t(n)}}},hr=function(e){return function(t){return function(n){if(t(n),"PUBLISH_WHILE_DRAGGING"===n.type){var r=e.getState();"DROP_PENDING"===r.phase&&(r.isWaiting||e.dispatch($n({reason:r.reason})))}}}},vr=function(){var e=document.documentElement;return e||$e(!1),en({scrollHeight:e.scrollHeight,scrollWidth:e.scrollWidth,width:e.clientWidth,height:e.clientHeight})},gr=function(e){return function(t){return function(n){var r=e.getState();t(n);var o=e.getState();if(o.isDragging&&function(e,t,n){return!(!function(e){return"MOVE"===e.type||"MOVE_UP"===e.type||"MOVE_RIGHT"===e.type||"MOVE_DOWN"===e.type||"MOVE_LEFT"===e.type||"MOVE_BY_WINDOW_SCROLL"===e.type}(n)||!Rn(e)||!Rn(t)||un(e.impact)===un(t.impact))}(r,o,n)){var i=function(e){var t=vr();return ht(e.scroll.max,t)?null:t}(o.viewport);i&&t({type:"UPDATE_VIEWPORT_MAX_SCROLL",payload:{maxScroll:i}})}}}},mr="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:R,br=function(e){var t,n,r=e.getDimensionMarshal,o=e.styleMarshal,i=e.getResponders,a=e.announce,u=e.getScroller;return T(zn,mr(_((n=o,function(){return function(e){return function(t){"INITIAL_PUBLISH"===t.type&&n.dragging(),"DROP_ANIMATE"===t.type&&n.dropping(t.payload.result.reason),"CLEAN"!==t.type&&"DROP_COMPLETE"!==t.type||n.resting(),e(t)}}}),(t=r,function(){return function(e){return function(n){"DROP_COMPLETE"!==n.type&&"CLEAN"!==n.type&&"DROP_ANIMATE"!==n.type||t().stopPublishing(),e(n)}}}),function(e){return function(t){var n=t.getState,r=t.dispatch;return function(t){return function(o){if("LIFT"===o.type){var i=e(),a=o.payload,u=a.id,l=a.clientSelection,s=a.movementMode,c=n();"DROP_ANIMATING"===c.phase&&r(Qn(c.pending.result)),"IDLE"!==n().phase&&$e(!1);var d={draggableId:u,scrollOptions:{shouldPublishImmediately:"SNAP"===s}},f=i.startPublishing(d),p=f.critical,h=f.dimensions,v=f.viewport;r({type:"INITIAL_PUBLISH",payload:{critical:p,dimensions:h,clientSelection:l,movementMode:s,viewport:v}})}else t(o)}}}}(r),er,pr,hr,gr,function(e){return function(t){return function(n){return function(r){if(function(e){return"DROP_COMPLETE"===e.type||"DROP_ANIMATE"===e.type||"CLEAN"===e.type}(r))return e().stop(),void n(r);if(function(e){return"COLLECTION_STARTING"===e.type}(r))return e().cancelPending(),void n(r);if("INITIAL_PUBLISH"===r.type){n(r);var o=t.getState();return"DRAGGING"!==o.phase&&$e(!1),void e().start(o)}n(r),e().scroll(t.getState())}}}}(u),fr(i,a))))},yr=function(){return{x:window.pageXOffset,y:window.pageYOffset}},xr=function(e){var t=e.critical,n=e.scrollOptions,r=e.entries;Et("Initial collection from DOM");var o=function(){var e=yr(),t=vr(),n=e.y,r=e.x,o=document.documentElement;o||$e(!1);var i=o.clientWidth,a=o.clientHeight;return{frame:et({top:n,left:r,right:r+i,bottom:n+a}),scroll:{initial:e,current:e,max:t,diff:{value:dt,displacement:dt}}}}(),i=o.scroll.current,a=t.droppable,u=Mt(r.droppables).filter(function(e){return e.descriptor.type===a.type}).map(function(e){return e.callbacks.getDimensionAndWatchScroll(i,n)}),l=Mt(r.draggables).filter(function(e){return e.descriptor.type===t.draggable.type}).map(function(e){return e.getDimension(i)}),s={draggables:jt(l),droppables:kt(u)};return Ct("Initial collection from DOM"),{dimensions:s,critical:t,viewport:o}},Sr=function(e,t){e.critical.draggable.type!==t.type&&$e(!1)},wr=function(e){var t={droppables:{},draggables:{}},n=null,r=function(e){var t=e.getEntries,n=e.callbacks,r=function(){},o={additions:{},removals:{},modified:{}},i=null,a=function(){r(),i||(i=requestAnimationFrame(function(){i=null,n.collectionStarting(),Et("Publish collection from DOM");var e=t(),r=o,a=r.additions,u=r.removals,l=r.modified,s=ve()(a).map(function(t){return e.draggables[t].getDimension(dt)}).sort(function(e,t){return e.descriptor.index-t.descriptor.index}),c=ve()(l).map(function(t){var n=e.droppables[t];return n||$e(!1),n.callbacks.recollect()}),d={additions:s,removals:ve()(u),modified:c};o={additions:{},removals:{},modified:{}},Ct("Publish collection from DOM"),n.publish(d)}))};return{add:function(e){o.additions[e.id]=e,o.modified[e.droppableId]=!0,o.removals[e.id]&&delete o.removals[e.id],a()},remove:function(e){o.removals[e.id]=e,o.modified[e.droppableId]=!0,o.additions[e.id]&&delete o.additions[e.id],a()},stop:function(){i&&(cancelAnimationFrame(i),i=null,o={additions:{},removals:{},modified:{}})}}}({callbacks:{publish:e.publishWhileDragging,collectionStarting:e.collectionStarting},getEntries:function(){return t}});return{registerDraggable:function(e,o){var i={descriptor:e,getDimension:o};t.draggables[e.id]=i,n&&(Sr(n,e),r.add(e))},updateDraggable:function(e,n,r){t.draggables[e.id]||$e(!1),delete t.draggables[e.id];var o={descriptor:n,getDimension:r};t.draggables[n.id]=o},unregisterDraggable:function(e){var o=t.draggables[e.id];o||$e(!1),o.descriptor===e&&(delete t.draggables[e.id],n&&(n.critical.draggable.id===e.id&&$e(!1),Sr(n,e),r.remove(e)))},registerDroppable:function(e,r){var o=e.id;t.droppables[o]={descriptor:e,callbacks:r},n&&$e(!1)},updateDroppable:function(e,r,o){t.droppables[e.id]||$e(!1),delete t.droppables[e.id];var i={descriptor:r,callbacks:o};t.droppables[r.id]=i,n&&$e(!1)},unregisterDroppable:function(e){var r=t.droppables[e.id];r||$e(!1),r.descriptor===e&&(delete t.droppables[e.id],n&&$e(!1))},updateDroppableIsEnabled:function(r,o){t.droppables[r]||$e(!1),n&&e.updateDroppableIsEnabled({id:r,isEnabled:o})},updateDroppableIsCombineEnabled:function(r,o){t.droppables[r]||$e(!1),n&&e.updateDroppableIsCombineEnabled({id:r,isCombineEnabled:o})},scrollDroppable:function(e,r){var o=t.droppables[e];o||$e(!1),n&&o.callbacks.scroll(r)},updateDroppableScroll:function(r,o){t.droppables[r]||$e(!1),n&&e.updateDroppableScroll({id:r,offset:o})},startPublishing:function(e){n&&$e(!1);var r=t.draggables[e.draggableId];r||$e(!1);var o=t.droppables[r.descriptor.droppableId];o||$e(!1);var i={draggable:r.descriptor,droppable:o.descriptor};return n={critical:i},xr({critical:i,entries:t,scrollOptions:e.scrollOptions})},stopPublishing:function(){if(n){r.stop();var e=n.critical.droppable;Mt(t.droppables).filter(function(t){return t.descriptor.type===e.type}).forEach(function(e){return e.callbacks.dragStopped()}),n=null}}}},Pr="cubic-bezier(.2,1,.1,1)",Or={drop:0,combining:.7},Er={drop:.75},Cr="0.2s "+"cubic-bezier(0.2, 0, 0, 1)",Mr={fluid:"opacity "+Cr,snap:"transform "+Cr+", opacity "+Cr,drop:function(e){var t=e+"s "+Pr;return"transform "+t+", opacity "+t},outOfTheWay:"transform "+Cr},Dr=function(e){return ht(e,dt)?null:"translate("+e.x+"px, "+e.y+"px)"},Tr={moveTo:Dr,drop:function(e,t){var n=Dr(e);return n?t?n+" scale("+Er.drop+")":n:null}},kr="data-react-beautiful-dnd-drag-handle",jr=function(e,t){return e.map(function(e){var n=e.styles[t];return n?e.selector+" { "+n+" }":""}).join(" ")},Ir=0,Rr=function(){var e=document.querySelector("head");return e||$e(!1),e},_r=function(){var e=document.createElement("style");return e.type="text/css",e},Nr=function(){var e=""+Ir++,t=function(e){var t,n,r,o=(t=e,function(e){return"["+e+'="'+t+'"]'}),i=(n="\n      cursor: -webkit-grab;\n      cursor: grab;\n    ",{selector:o(kr),styles:{always:"\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",resting:n,dragging:"pointer-events: none;",dropAnimating:n}}),a=[(r="\n      transition: "+Mr.outOfTheWay+";\n    ",{selector:o("data-react-beautiful-dnd-draggable"),styles:{dragging:r,dropAnimating:r,userCancel:r}}),i,{selector:o("data-react-beautiful-dnd-droppable"),styles:{always:"overflow-anchor: none;"}},{selector:"body",styles:{dragging:"\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "}}];return{always:jr(a,"always"),resting:jr(a,"resting"),dragging:jr(a,"dragging"),dropAnimating:jr(a,"dropAnimating"),userCancel:jr(a,"userCancel")}}(e),n=null,r=null,o=Xe(function(e,t){e||$e(!1),e.innerHTML=t});return{dragging:function(){return o(r,t.dragging)},dropping:function(e){o(r,"DROP"!==e?t.userCancel:t.dropAnimating)},resting:function(){return o(r,t.resting)},styleContext:e,mount:function(){(n||r)&&$e(!1),n=_r(),r=_r(),n.setAttribute("data-react-beautiful-dnd-always",e),r.setAttribute("data-react-beautiful-dnd-dynamic",e),Rr().appendChild(n),Rr().appendChild(r),o(n,t.always),o(r,t.resting)},unmount:function(){n&&r||$e(!1),Rr().removeChild(n),Rr().removeChild(r),n=null,r=null}}},Ar=function(e,t){return"IDLE"===e.phase||"DROP_ANIMATING"===e.phase&&(e.pending.result.draggableId!==t&&"DROP"===e.pending.result.reason)},Br=function(e){window.scrollBy(e.x,e.y)},Lr=0,Fr={position:"absolute",width:"1px",height:"1px",margin:"-1px",border:"0",padding:"0",overflow:"hidden",clip:"rect(0 0 0 0)","clip-path":"inset(100%)"},Wr=function(){return document.body||$e(!1),document.body},Ur=function(){var e="react-beautiful-dnd-announcement-"+Lr++,t=null;return{announce:function(e){t&&(t.textContent=e)},id:e,mount:function(){t&&$e(!1),(t=document.createElement("div")).id=e,t.setAttribute("aria-live","assertive"),t.setAttribute("role","log"),t.setAttribute("aria-atomic","true"),me()(t.style,Fr),Wr().appendChild(t)},unmount:function(){t||$e(!1),Wr().removeChild(t),t=null}}},Gr=Xe(function(e){return It(e).filter(function(e){return!!e.isEnabled&&!!e.frame})}),Vr=function(e){var t=e.center,n=e.destination,r=e.droppables;if(n){var o=r[n];return o.frame?o:null}return function(e,t){return Tt(Gr(t),function(t){return t.frame||$e(!1),Nt(t.frame.pageMarginBox)(e)})}(t,r)},zr=.25,qr=.05,Yr=28,Hr=function(e){return Math.pow(e,2)},Kr={stopDampeningAt:1200,accelerateAt:360},Xr=function(e){var t=e.startOfRange,n=e.endOfRange,r=e.current,o=n-t;return 0===o?0:(r-t)/o},Jr=Kr.accelerateAt,Zr=Kr.stopDampeningAt,Qr=function(e){var t=e.distanceToEdge,n=e.thresholds,r=e.dragStartTime,o=e.shouldUseTimeDampening,i=function(e,t){if(e>t.startScrollingFrom)return 0;if(e<=t.maxScrollValueAt)return Yr;if(e===t.startScrollingFrom)return 1;var n=Xr({startOfRange:t.maxScrollValueAt,endOfRange:t.startScrollingFrom,current:e}),r=Yr*Hr(1-n);return Math.ceil(r)}(t,n);return 0===i?0:o?Math.max(function(e,t){var n=t,r=Zr,o=ye()()-n;if(o>=Zr)return e;if(o<Jr)return 1;var i=Xr({startOfRange:Jr,endOfRange:r,current:o}),a=e*Hr(i);return Math.ceil(a)}(i,r),1):i},$r=function(e){var t=e.container,n=e.distanceToEdges,r=e.dragStartTime,o=e.axis,i=e.shouldUseTimeDampening,a=function(e,t){return{startScrollingFrom:e[t.size]*zr,maxScrollValueAt:e[t.size]*qr}}(t,o);return n[o.end]<n[o.start]?Qr({distanceToEdge:n[o.end],thresholds:a,dragStartTime:r,shouldUseTimeDampening:i}):-1*Qr({distanceToEdge:n[o.start],thresholds:a,dragStartTime:r,shouldUseTimeDampening:i})},eo=yt(function(e){return 0===e?0:e}),to=function(e){var t=e.dragStartTime,n=e.container,r=e.subject,o=e.center,i=e.shouldUseTimeDampening,a={top:o.y-n.top,right:n.right-o.x,bottom:n.bottom-o.y,left:o.x-n.left},u=$r({container:n,distanceToEdges:a,dragStartTime:t,axis:Ft,shouldUseTimeDampening:i}),l=$r({container:n,distanceToEdges:a,dragStartTime:t,axis:Wt,shouldUseTimeDampening:i}),s=eo({x:l,y:u});if(ht(s,dt))return null;var c=function(e){var t=e.container,n=e.subject,r=e.proposedScroll,o=n.height>t.height,i=n.width>t.width;return i||o?i&&o?null:{x:i?0:r.x,y:o?0:r.y}:r}({container:n,subject:r,proposedScroll:s});return c?ht(c,dt)?null:c:null},no=yt(function(e){return 0===e?0:e>0?1:-1}),ro=(_n=function(e,t){return e<0?e:e>t?e-t:0},function(e){var t=e.current,n=e.max,r=e.change,o=ft(t,r),i={x:_n(o.x,n.x),y:_n(o.y,n.y)};return ht(i,dt)?null:i}),oo=function(e){var t=e.max,n=e.current,r=e.change,o={x:Math.max(n.x,t.x),y:Math.max(n.y,t.y)},i=no(r),a=ro({max:o,current:n,change:i});return!a||(0!==i.x&&0===a.x||0!==i.y&&0===a.y)},io=function(e,t){return oo({current:e.scroll.current,max:e.scroll.max,change:t})},ao=function(e,t){var n=e.frame;return!!n&&oo({current:n.scroll.current,max:n.scroll.max,change:t})},uo=function(e){var t=e.state,n=e.dragStartTime,r=e.shouldUseTimeDampening,o=e.scrollWindow,i=e.scrollDroppable,a=t.current.page.borderBoxCenter,u=t.dimensions.draggables[t.critical.draggable.id].page.marginBox;if(t.isWindowScrollAllowed){var l=function(e){var t=e.viewport,n=e.subject,r=e.center,o=e.dragStartTime,i=e.shouldUseTimeDampening,a=to({dragStartTime:o,container:t.frame,subject:n,center:r,shouldUseTimeDampening:i});return a&&io(t,a)?a:null}({dragStartTime:n,viewport:t.viewport,subject:u,center:a,shouldUseTimeDampening:r});if(l)return void o(l)}var s=Vr({center:a,destination:un(t.impact),droppables:t.dimensions.droppables});if(s){var c=function(e){var t=e.droppable,n=e.subject,r=e.center,o=e.dragStartTime,i=e.shouldUseTimeDampening,a=t.frame;if(!a)return null;var u=to({dragStartTime:o,container:a.pageMarginBox,subject:n,center:r,shouldUseTimeDampening:i});return u&&ao(t,u)?u:null}({dragStartTime:n,droppable:s,subject:u,center:a,shouldUseTimeDampening:r});c&&i(s.descriptor.id,c)}},lo=function(e){var t=e.move,n=e.scrollDroppable,r=e.scrollWindow,o=function(e,t){if(!ao(e,t))return t;var r=function(e,t){var n=e.frame;return n&&ao(e,t)?ro({current:n.scroll.current,max:n.scroll.max,change:t}):null}(e,t);if(!r)return n(e.descriptor.id,t),null;var o=pt(t,r);return n(e.descriptor.id,o),pt(t,o)},i=function(e,t,n){if(!e)return n;if(!io(t,n))return n;var o=function(e,t){if(!io(e,t))return null;var n=e.scroll.max,r=e.scroll.current;return ro({current:r,max:n,change:t})}(t,n);if(!o)return r(n),null;var i=pt(n,o);return r(i),pt(n,i)};return function(e){var n=e.scrollJumpRequest;if(n){var r=un(e.impact);r||$e(!1);var a=o(e.dimensions.droppables[r],n);if(a){var u=e.viewport,l=i(e.isWindowScrollAllowed,u,a);l&&function(e,n){var r=ft(e.current.client.selection,n);t({client:r})}(e,l)}}}},so=function(e){var t=e.scrollDroppable,n=e.scrollWindow,r=e.move,o=function(e){var t=e.scrollWindow,n=e.scrollDroppable,r=Je(t),o=Je(n),i=null,a=function(e){i||$e(!1);var t=i,n=t.shouldUseTimeDampening,a=t.dragStartTime;uo({state:e,scrollWindow:r,scrollDroppable:o,dragStartTime:a,shouldUseTimeDampening:n})},u=function(){i||$e(!1),r.cancel(),o.cancel()};return{start:function(e){Et("starting fluid scroller"),i&&$e(!1);var t=ye()(),n=!1,r=function(){n=!0};uo({state:e,dragStartTime:0,shouldUseTimeDampening:!1,scrollWindow:r,scrollDroppable:r}),i={dragStartTime:t,shouldUseTimeDampening:n},Ct("starting fluid scroller"),n&&a(e)},stop:function(){i&&(u(),i=null)},cancelPending:u,scroll:a}}({scrollWindow:n,scrollDroppable:t}),i=lo({move:r,scrollWindow:n,scrollDroppable:t});return{scroll:function(e){"DRAGGING"===e.phase&&("FLUID"!==e.movementMode?e.scrollJumpRequest&&i(e):o.scroll(e))},cancelPending:o.cancelPending,start:o.start,stop:o.stop}},co=function(e){return"private-react-beautiful-dnd-key-do-not-use-"+e},fo=co("store"),po=co("droppable-id"),ho=co("droppable-type"),vo=co("dimension-marshal"),go=co("style-context"),mo=co("can-lift"),bo=function(e){},yo=function(e){function t(t,n){var r;(r=e.call(this,t,n)||this).store=void 0,r.dimensionMarshal=void 0,r.styleMarshal=void 0,r.autoScroller=void 0,r.announcer=void 0,r.unsubscribe=void 0,r.canLift=function(e){return Ar(r.store.getState(),e)},r.onFatalError=function(e){bo(e),"IDLE"!==r.store.getState().phase&&r.store.dispatch(Zn())},r.onWindowError=function(e){return r.onFatalError(e)},r.announcer=Ur(),r.styleMarshal=Nr(),r.store=br({getDimensionMarshal:function(){return r.dimensionMarshal},styleMarshal:r.styleMarshal,getResponders:function(){return{onBeforeDragStart:r.props.onBeforeDragStart,onDragStart:r.props.onDragStart,onDragEnd:r.props.onDragEnd,onDragUpdate:r.props.onDragUpdate}},announce:r.announcer.announce,getScroller:function(){return r.autoScroller}});var o=j({publishWhileDragging:qn,updateDroppableScroll:Hn,updateDroppableIsEnabled:Kn,updateDroppableIsCombineEnabled:Xn,collectionStarting:Yn},r.store.dispatch);return r.dimensionMarshal=wr(o),r.autoScroller=so(ct({scrollWindow:Br,scrollDroppable:r.dimensionMarshal.scrollDroppable},j({move:Jn},r.store.dispatch))),r}He(t,e);var n=t.prototype;return n.getChildContext=function(){var e;return(e={})[fo]=this.store,e[vo]=this.dimensionMarshal,e[go]=this.styleMarshal.styleContext,e[mo]=this.canLift,e},n.componentDidMount=function(){window.addEventListener("error",this.onWindowError),this.styleMarshal.mount(),this.announcer.mount()},n.componentDidCatch=function(e){if(this.onFatalError(e),-1===e.message.indexOf("Invariant failed"))throw e;this.setState({})},n.componentWillUnmount=function(){window.removeEventListener("error",this.onWindowError),"IDLE"!==this.store.getState().phase&&this.store.dispatch(Zn()),this.styleMarshal.unmount(),this.announcer.unmount()},n.render=function(){return this.props.children},t}(o.a.Component);yo.childContextTypes=((Nn={})[fo]=s.a.shape({dispatch:s.a.func.isRequired,subscribe:s.a.func.isRequired,getState:s.a.func.isRequired}).isRequired,Nn[vo]=s.a.object.isRequired,Nn[go]=s.a.string.isRequired,Nn[mo]=s.a.func.isRequired,Nn);var xo,So=function(e){return function(t){return e===t}},wo=So("scroll"),Po=So("auto"),Oo=(So("visible"),function(e,t){return t(e.overflowX)||t(e.overflowY)}),Eo=function(e){var t=window.getComputedStyle(e),n={overflowX:t.overflowX,overflowY:t.overflowY};return Oo(n,wo)||Oo(n,Po)},Co=function e(t){return null==t?null:t===document.body?null:t===document.documentElement?null:Eo(t)?t:e(t.parentElement)},Mo=function(e){return{x:e.scrollLeft,y:e.scrollTop}},Do=function(e){return{closestScrollable:Co(e),isFixedOnPage:function e(t){return!!t&&("fixed"===window.getComputedStyle(t).position||e(t.parentElement))}(e)}},To=function(e){var t=e.ref,n=e.descriptor,r=e.env,o=e.windowScroll,i=e.direction,a=e.isDropDisabled,u=e.isCombineEnabled,l=e.shouldClipSubject,s=r.closestScrollable,c=function(e,t){var n=st(e);if(!t)return n;if(e!==t)return n;var r=n.paddingBox.top-t.scrollTop,o=n.paddingBox.left-t.scrollLeft,i=r+t.scrollHeight,a=o+t.scrollWidth,u=tt({top:r,right:a,bottom:i,left:o},n.border);return ot({borderBox:u,margin:n.margin,border:n.border,padding:n.padding})}(t,s),d=ut(c,o),f=function(){if(!s)return null;var e=st(s),t={scrollHeight:s.scrollHeight,scrollWidth:s.scrollWidth};return{client:e,page:ut(e,o),scroll:Mo(s),scrollSize:t,shouldClipSubject:l}}();return tn({descriptor:n,isEnabled:!a,isCombineEnabled:u,isFixedOnPage:r.isFixedOnPage,direction:i,client:c,page:d,closest:f})},ko=function(e){return e&&e.env.closestScrollable||null},jo={passive:!1},Io={passive:!0},Ro=function(e){return e.shouldPublishImmediately?jo:Io},_o=function(e,t){if(!e)return t();var n=e.style.display;e.style.display="none";var r=t();return e.style.display=n,r},No=function(e){function t(t,n){var r;(r=e.call(this,t,n)||this).dragging=void 0,r.callbacks=void 0,r.publishedDescriptor=null,r.getClosestScroll=function(){var e=r.dragging;return e&&e.env.closestScrollable?Mo(e.env.closestScrollable):dt},r.memoizedUpdateScroll=Xe(function(e,t){r.publishedDescriptor||$e(!1);var n={x:e,y:t};r.context[vo].updateDroppableScroll(r.publishedDescriptor.id,n)}),r.updateScroll=function(){var e=r.getClosestScroll();r.memoizedUpdateScroll(e.x,e.y)},r.scheduleScrollUpdate=Je(r.updateScroll),r.onClosestScroll=function(){var e=r.dragging,t=ko(r.dragging);e&&t||$e(!1),e.scrollOptions.shouldPublishImmediately?r.updateScroll():r.scheduleScrollUpdate()},r.scroll=function(e){var t=ko(r.dragging);t||$e(!1),t.scrollTop+=e.y,t.scrollLeft+=e.x},r.dragStopped=function(){var e=r.dragging;e||$e(!1);var t=ko(e);r.dragging=null,t&&(r.scheduleScrollUpdate.cancel(),t.removeEventListener("scroll",r.onClosestScroll,Ro(e.scrollOptions)))},r.getMemoizedDescriptor=Xe(function(e,t){return{id:e,type:t}}),r.publish=function(){var e=r.context[vo],t=r.getMemoizedDescriptor(r.props.droppableId,r.props.type);if(!r.publishedDescriptor)return e.registerDroppable(t,r.callbacks),void(r.publishedDescriptor=t);r.publishedDescriptor!==t&&(e.updateDroppable(r.publishedDescriptor,t,r.callbacks),r.publishedDescriptor=t)},r.unpublish=function(){r.publishedDescriptor||$e(!1),r.context[vo].unregisterDroppable(r.publishedDescriptor),r.publishedDescriptor=null},r.recollect=function(){var e=r.dragging,t=ko(e);return e&&t||$e(!1),_o(r.props.getPlaceholderRef(),function(){return To({ref:e.ref,descriptor:e.descriptor,env:e.env,windowScroll:dt,direction:r.props.direction,isDropDisabled:r.props.isDropDisabled,isCombineEnabled:r.props.isCombineEnabled,shouldClipSubject:!r.props.ignoreContainerClipping})})},r.getDimensionAndWatchScroll=function(e,t){r.dragging&&$e(!1);var n=r.publishedDescriptor;n||$e(!1);var o=r.props.getDroppableRef();o||$e(!1);var i=Do(o),a={ref:o,descriptor:n,env:i,scrollOptions:t};r.dragging=a;var u=To({ref:o,descriptor:n,env:i,windowScroll:e,direction:r.props.direction,isDropDisabled:r.props.isDropDisabled,isCombineEnabled:r.props.isCombineEnabled,shouldClipSubject:!r.props.ignoreContainerClipping});return i.closestScrollable&&i.closestScrollable.addEventListener("scroll",r.onClosestScroll,Ro(a.scrollOptions)),u};var o={getDimensionAndWatchScroll:r.getDimensionAndWatchScroll,recollect:r.recollect,dragStopped:r.dragStopped,scroll:r.scroll};return r.callbacks=o,r}He(t,e);var n=t.prototype;return n.componentDidMount=function(){this.publish()},n.componentDidUpdate=function(e){if(this.publish(),this.dragging){var t=this.props.isDropDisabled!==e.isDropDisabled,n=this.props.isCombineEnabled!==e.isCombineEnabled;if(t||n){var r=this.context[vo];t&&r.updateDroppableIsEnabled(this.props.droppableId,!this.props.isDropDisabled),n&&r.updateDroppableIsCombineEnabled(this.props.droppableId,this.props.isCombineEnabled)}}},n.componentWillUnmount=function(){this.dragging&&this.dragStopped(),this.unpublish()},n.render=function(){return this.props.children},t}(o.a.Component);No.contextTypes=((xo={})[vo]=s.a.object.isRequired,xo);var Ao,Bo,Lo=function(e){function t(){return e.apply(this,arguments)||this}return He(t,e),t.prototype.render=function(){var e=this.props.placeholder,t=e.client,n=e.display,r=e.tagName,i={display:n,boxSizing:"border-box",width:t.borderBox.width,height:t.borderBox.height,marginTop:t.margin.top,marginRight:t.margin.right,marginBottom:t.margin.bottom,marginLeft:t.margin.left,flexShrink:"0",flexGrow:"0",pointerEvents:"none"};return o.a.createElement(r,{style:i,ref:this.props.innerRef})},t}(r.PureComponent),Fo=function(e){e&&e instanceof HTMLElement||$e(!1)},Wo=function(e){function t(t,n){var r;return(r=e.call(this,t,n)||this).styleContext=void 0,r.ref=null,r.placeholderRef=null,r.setPlaceholderRef=function(e){r.placeholderRef=e},r.getPlaceholderRef=function(){return r.placeholderRef},r.setRef=function(e){null!==e&&e!==r.ref&&(r.ref=e,Fo(e))},r.getDroppableRef=function(){return r.ref},r.styleContext=n[go],r}He(t,e);var n=t.prototype;return n.getChildContext=function(){var e;return(e={})[po]=this.props.droppableId,e[ho]=this.props.type,e},n.componentDidMount=function(){Fo(this.ref),this.warnIfPlaceholderNotMounted()},n.componentDidUpdate=function(){this.warnIfPlaceholderNotMounted()},n.componentWillUnmount=function(){this.ref=null,this.placeholderRef=null},n.warnIfPlaceholderNotMounted=function(){},n.getPlaceholder=function(){return this.props.placeholder?o.a.createElement(Lo,{placeholder:this.props.placeholder,innerRef:this.setPlaceholderRef}):null},n.render=function(){var e=this.props,t=e.children,n=e.direction,r=e.type,i=e.droppableId,a=e.isDropDisabled,u=e.isCombineEnabled,l=e.ignoreContainerClipping,s=e.isDraggingOver,c=e.draggingOverWith,d={innerRef:this.setRef,placeholder:this.getPlaceholder(),droppableProps:{"data-react-beautiful-dnd-droppable":this.styleContext}},f={isDraggingOver:s,draggingOverWith:c};return o.a.createElement(No,{droppableId:i,type:r,direction:n,ignoreContainerClipping:l,isDropDisabled:a,isCombineEnabled:u,getDroppableRef:this.getDroppableRef,getPlaceholderRef:this.getPlaceholderRef},t(d,f))},t}(r.Component);Wo.contextTypes=((Ao={})[go]=s.a.string.isRequired,Ao),Wo.childContextTypes=((Bo={})[po]=s.a.string.isRequired,Bo[ho]=s.a.string.isRequired,Bo);var Uo,Go=function(e,t){return e===t},Vo={isDraggingOver:!1,draggingOverWith:null,placeholder:null},zo=ze(function(){var e=Xe(function(e,t,n){return{isDraggingOver:e,draggingOverWith:t,placeholder:n}}),t=function(t,n,r){if(un(r)!==t)return Vo;var o=ln(n.descriptor,r)?n.placeholder:null;return e(!0,n.descriptor.id,o)};return function(e,n){if(n.isDropDisabled)return Vo;var r=n.droppableId;if(e.isDragging){var o=e.dimensions.draggables[e.critical.draggable.id];return t(r,o,e.impact)}if("DROP_ANIMATING"===e.phase){var i=e.dimensions.draggables[e.pending.result.draggableId];return t(r,i,e.pending.impact)}return Vo}},null,null,{storeKey:fo,pure:!0,areStatePropsEqual:Go})(Wo);zo.defaultProps={type:"DEFAULT",direction:"vertical",isDropDisabled:!1,isCombineEnabled:!1,ignoreContainerClipping:!1};var qo=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).publishedDescriptor=null,t.getMemoizedDescriptor=Xe(function(e,t,n,r){return{id:e,index:t,droppableId:n,type:r}}),t.publish=function(){var e=t.context[vo],n=t.getMemoizedDescriptor(t.props.draggableId,t.props.index,t.props.droppableId,t.props.type);if(!t.publishedDescriptor)return e.registerDraggable(n,t.getDimension),void(t.publishedDescriptor=n);n!==t.publishedDescriptor&&(e.updateDraggable(t.publishedDescriptor,n,t.getDimension),t.publishedDescriptor=n)},t.unpublish=function(){t.publishedDescriptor||$e(!1),t.context[vo].unregisterDraggable(t.publishedDescriptor),t.publishedDescriptor=null},t.getDimension=function(e){void 0===e&&(e=dt);var n=t.props.getDraggableRef(),r=t.publishedDescriptor;n||$e(!1),r||$e(!1);var o=window.getComputedStyle(n),i=n.getBoundingClientRect(),a=lt(i,o),u=ut(a,e);return{descriptor:r,placeholder:{client:a,tagName:n.tagName.toLowerCase(),display:o.display},displaceBy:{x:a.marginBox.width,y:a.marginBox.height},client:a,page:u}},t}He(t,e);var n=t.prototype;return n.componentDidMount=function(){this.publish()},n.componentDidUpdate=function(){this.publish()},n.componentWillUnmount=function(){this.unpublish()},n.render=function(){return this.props.children},t}(r.Component);qo.contextTypes=((Uo={})[vo]=s.a.object.isRequired,Uo);var Yo,Ho,Ko,Xo,Jo,Zo,Qo,$o,ei=function(e){return e?e.ownerDocument.defaultView:window},ti=function(e){!function(e){return"undefined"!=typeof SVGElement&&e instanceof SVGElement}(e)||$e(!1)},ni=function(e){if(e.hasAttribute(kr))return ti(e),e;var t=e.querySelector("[data-react-beautiful-dnd-drag-handle]");return ti(e),t||$e(!1),t instanceof HTMLElement||$e(!1),t},ri=null,oi={capture:!0},ii=(Yo=!1,Ho=function(){Yo&&(Yo=!1,window.removeEventListener("focus",Ko,oi))},Ko=function(){Ho(),ri=null},(Xo=function(){Yo||(Yo=!0,window.addEventListener("focus",Ko,oi))}).cancel=function(){return Ho()},Xo),ai=function(e){ri=e,ii()},ui=function(e,t){if(ri&&e===ri){ri=null,ii.cancel();var n=ni(t);n&&n.focus()}},li={input:!0,button:!0,textarea:!0,select:!0,option:!0,optgroup:!0,video:!0,audio:!0},si=function(e,t){if(t.canDragInteractiveElements)return!0;var n=e.target,r=e.currentTarget;return!(n instanceof Element&&r instanceof Element)||!function e(t,n){if(null==n)return!1;if(Boolean(li[n.tagName.toLowerCase()]))return!0;var r=n.getAttribute("contenteditable");return"true"===r||""===r||n!==t&&e(t,n.parentElement)}(r,n)},ci=function(e){var t=Xe(function(t,n){var r={x:t,y:n};e.onMove(r)}),n=Je(function(e){return t(e.x,e.y)}),r=Je(e.onMoveUp),o=Je(e.onMoveDown),i=Je(e.onMoveRight),a=Je(e.onMoveLeft),u=Je(e.onWindowScroll);return{move:n,moveUp:r,moveDown:o,moveRight:i,moveLeft:a,windowScrollMove:u,cancel:function(){n.cancel(),r.cancel(),o.cancel(),i.cancel(),a.cancel(),u.cancel()}}},di=((Jo={})[13]=!0,Jo[9]=!0,Jo),fi=function(e){di[e.keyCode]&&e.preventDefault()},pi=function(e,t){return ct({},e,t)},hi=function(e,t,n){t.forEach(function(t){var r=pi(n,t.options);e.addEventListener(t.eventName,t.fn,r)})},vi=function(e,t,n){t.forEach(function(t){var r=pi(n,t.options);e.removeEventListener(t.eventName,t.fn,r)})},gi={capture:!0},mi=function(e){var t=!1,n=function(){t&&(t=!1,vi(e(),r,gi))},r=[{eventName:"click",fn:function(e){e.preventDefault(),n()}},{eventName:"mousedown",fn:n},{eventName:"touchstart",fn:n}];return{preventNext:function(){t&&n(),t||(t=!0,hi(e(),r,gi))},abort:n}},bi=function(){var e=!1;return{handle:function(){e&&$e(!1),e=!0},isHandled:function(){return e},reset:function(){e=!1}}},yi=(Zo="visibilitychange","undefined"==typeof document?Zo:Tt([Zo,"ms"+Zo,"webkit"+Zo,"moz"+Zo,"o"+Zo],function(e){return"on"+e in document})||Zo),xi=function(){},Si=bi(),wi=function(e){var t=e.callbacks,n=e.getWindow,r=e.canStartCapturing,o={isDragging:!1,pending:null},i=function(e){o=e},a=function(){return Boolean(o.pending||o.isDragging)},u=ci(t),l=mi(n),s=function(e,t){void 0===e&&(e=xi),void 0===t&&(t=!0),u.cancel(),v(),Si.reset(),t&&l.preventNext(),i({isDragging:!1,pending:null}),e()},c=function(){s(xi,!1)},d=function(e){void 0===e&&(e=xi),o.pending?c():o.isDragging&&s(e)},f=function(){d(t.onCancel)},p=[{eventName:"mousemove",fn:function(e){var n=e.button,r=e.clientX,a=e.clientY;if(0===n){var l,s,d={x:r,y:a};if(o.isDragging)return e.preventDefault(),void u.move(d);if(o.pending||(c(),$e(!1)),l=o.pending,s=d,Math.abs(s.x-l.x)>=5||Math.abs(s.y-l.y)>=5)e.preventDefault(),function(e){void 0===e&&(e=xi),i({pending:null,isDragging:!0}),e()}(function(){return t.onLift({clientSelection:d,movementMode:"FLUID"})})}}},{eventName:"mouseup",fn:function(e){o.pending?c():(e.preventDefault(),s(t.onDrop))}},{eventName:"mousedown",fn:function(e){o.isDragging&&e.preventDefault(),s(t.onCancel)}},{eventName:"keydown",fn:function(e){if(o.isDragging)return 27===e.keyCode?(e.preventDefault(),void f()):void fi(e);f()}},{eventName:"resize",fn:f},{eventName:"scroll",options:{passive:!0,capture:!1},fn:function(){o.pending?c():u.windowScrollMove()}},{eventName:"webkitmouseforcechanged",fn:function(e){if(null!=e.webkitForce&&null!=MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN){var t=MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN;e.webkitForce>=t&&f()}}},{eventName:yi,fn:f}],h=function(){var e=n();hi(e,p,{capture:!0})},v=function(){var e=n();vi(e,p,{capture:!0})};return{onMouseDown:function(e){Si.isHandled()||(a()&&$e(!1),r(e)&&0===e.button&&(e.ctrlKey||e.metaKey||e.shiftKey||e.altKey||(Si.handle(),e.preventDefault(),function(e){i({pending:e,isDragging:!1}),h()}({x:e.clientX,y:e.clientY}))))},kill:d,isCapturing:a,isDragging:function(){return o.isDragging},unmount:function(){d(),l.abort()}}},Pi=((Qo={})[34]=!0,Qo[33]=!0,Qo[36]=!0,Qo[35]=!0,Qo),Oi=function(){},Ei=function(e){var t=e.callbacks,n=e.getWindow,r=e.getDraggableRef,o=e.canStartCapturing,i={isDragging:!1},a=function(e){i=e},u=function(e){void 0===e&&(e=Oi),d.cancel(),h(),a({isDragging:!1}),e()},l=function(){i.isDragging&&u()},s=function(){u(t.onCancel)},c=function(){return i.isDragging},d=ci(t),f=[{eventName:"mousedown",fn:s},{eventName:"mouseup",fn:s},{eventName:"click",fn:s},{eventName:"touchstart",fn:s},{eventName:"resize",fn:s},{eventName:"wheel",fn:s,options:{passive:!0}},{eventName:"scroll",options:{capture:!1},fn:t.onWindowScroll},{eventName:yi,fn:s}],p=function(){hi(n(),f,{capture:!0})},h=function(){vi(n(),f,{capture:!0})};return{onKeyDown:function(e){if(!c()){if(e.defaultPrevented)return;if(!o(e))return;if(32!==e.keyCode)return;var n=r();n||$e(!1);var i=et(n.getBoundingClientRect()).center;return e.preventDefault(),void 0===(l=function(){return t.onLift({clientSelection:i,movementMode:"SNAP"})})&&(l=Oi),a({isDragging:!0}),p(),void l()}var l;return 27===e.keyCode?(e.preventDefault(),void s()):32===e.keyCode?(e.preventDefault(),void u(t.onDrop)):40===e.keyCode?(e.preventDefault(),void d.moveDown()):38===e.keyCode?(e.preventDefault(),void d.moveUp()):39===e.keyCode?(e.preventDefault(),void d.moveRight()):37===e.keyCode?(e.preventDefault(),void d.moveLeft()):void(Pi[e.keyCode]?e.preventDefault():fi(e))},kill:l,isDragging:c,isCapturing:c,unmount:l}},Ci=bi(),Mi=function(){},Di=function(){var e={preventTouchMove:Mi,releaseTouchMove:Mi};if("undefined"==typeof window)return e;if(!("ontouchstart"in window))return e;var t=!1;window.addEventListener("touchmove",function(e){t&&(e.defaultPrevented||e.preventDefault())},{passive:!1,capture:!1});return{preventTouchMove:function(){t=!0},releaseTouchMove:function(){t=!1}}}(),Ti={isDragging:!1,pending:null,hasMoved:!1,longPressTimerId:null},ki=function(e){var t=e.callbacks,n=e.getWindow,r=e.canStartCapturing,o=Ti,i=function(e){o=ct({},o,e)},a=function(){return Boolean(o.pending||o.isDragging||o.longPressTimerId)},u=ci(t),l=mi(n),s=function(){var e=o.pending;e||(d(),$e(!1)),i({isDragging:!0,hasMoved:!1,pending:null,longPressTimerId:null}),t.onLift({clientSelection:e,movementMode:"FLUID"})},c=function(e){void 0===e&&(e=Mi),u.cancel(),Ci.reset(),Di.releaseTouchMove(),g(),l.preventNext(),i(Ti),e()},d=function(){o.longPressTimerId&&clearTimeout(o.longPressTimerId),u.cancel(),Ci.reset(),Di.releaseTouchMove(),g(),i(Ti)},f=function(e){void 0===e&&(e=Mi),o.pending?d():o.isDragging&&c(e)},p=function(){f(t.onCancel)},h=[{eventName:"touchmove",options:{passive:!1},fn:function(e){if(o.isDragging){o.hasMoved||i({hasMoved:!0});var t=e.touches[0],n={x:t.clientX,y:t.clientY};e.preventDefault(),u.move(n)}else d()}},{eventName:"touchend",fn:function(e){o.isDragging?(e.preventDefault(),c(t.onDrop)):d()}},{eventName:"touchcancel",fn:function(e){o.isDragging?(e.preventDefault(),c(t.onCancel)):d()}},{eventName:"touchstart",fn:p},{eventName:"orientationchange",fn:p},{eventName:"resize",fn:p},{eventName:"scroll",options:{passive:!0,capture:!1},fn:function(){o.pending?d():u.windowScrollMove()}},{eventName:"contextmenu",fn:function(e){e.preventDefault()}},{eventName:"keydown",fn:function(e){o.isDragging?(27===e.keyCode&&e.preventDefault(),p()):p()}},{eventName:"touchforcechange",fn:function(e){o.hasMoved?e.preventDefault():e.touches[0].force>=.15&&p()}},{eventName:yi,fn:p}],v=function(){hi(n(),h,{capture:!0})},g=function(){vi(n(),h,{capture:!0})};return{onTouchStart:function(e){Ci.isHandled()||(a()&&$e(!1),r(e)&&(Ci.handle(),Di.preventTouchMove(),function(e){var t=e.touches[0],n={x:t.clientX,y:t.clientY},r=setTimeout(s,150);i({longPressTimerId:r,pending:n,isDragging:!1,hasMoved:!1}),v()}(e)))},kill:f,isCapturing:a,isDragging:function(){return o.isDragging},unmount:function(){f(),l.abort()}}},ji=function(e){e.preventDefault()},Ii=function(e){function t(t,n){var r;(r=e.call(this,t,n)||this).mouseSensor=void 0,r.keyboardSensor=void 0,r.touchSensor=void 0,r.sensors=void 0,r.styleContext=void 0,r.canLift=void 0,r.isFocused=!1,r.lastDraggableRef=void 0,r.onFocus=function(){r.isFocused=!0},r.onBlur=function(){r.isFocused=!1},r.onKeyDown=function(e){r.mouseSensor.isCapturing()||r.touchSensor.isCapturing()||r.keyboardSensor.onKeyDown(e)},r.onMouseDown=function(e){r.keyboardSensor.isCapturing()||r.mouseSensor.isCapturing()||r.mouseSensor.onMouseDown(e)},r.onTouchStart=function(e){r.mouseSensor.isCapturing()||r.keyboardSensor.isCapturing()||r.touchSensor.onTouchStart(e)},r.canStartCapturing=function(e){return!r.isAnySensorCapturing()&&(!!r.canLift(r.props.draggableId)&&si(e,r.props))},r.isAnySensorCapturing=function(){return r.sensors.some(function(e){return e.isCapturing()})},r.getProvided=Xe(function(e){return e?{onMouseDown:r.onMouseDown,onKeyDown:r.onKeyDown,onTouchStart:r.onTouchStart,onFocus:r.onFocus,onBlur:r.onBlur,tabIndex:0,"data-react-beautiful-dnd-drag-handle":r.styleContext,"aria-roledescription":"Draggable item. Press space bar to lift",draggable:!1,onDragStart:ji}:null});var o={callbacks:r.props.callbacks,getDraggableRef:r.props.getDraggableRef,getWindow:function(){return ei(r.props.getDraggableRef())},canStartCapturing:r.canStartCapturing};return r.mouseSensor=wi(o),r.keyboardSensor=Ei(o),r.touchSensor=ki(o),r.sensors=[r.mouseSensor,r.keyboardSensor,r.touchSensor],r.styleContext=n[go],r.canLift=n[mo],r}He(t,e);var n=t.prototype;return n.componentDidMount=function(){var e=this.props.getDraggableRef();if(this.lastDraggableRef=e,e||$e(!1),this.props.isEnabled){var t=ni(e);ui(this.props.draggableId,t)}},n.componentDidUpdate=function(e){var t=this,n=this.props.getDraggableRef();(n!==this.lastDraggableRef&&(this.lastDraggableRef=n,n&&this.isFocused&&this.props.isEnabled&&ni(n).focus()),this.isAnySensorCapturing())&&(e.isEnabled&&!this.props.isEnabled&&this.sensors.forEach(function(e){if(e.isCapturing()){var n=e.isDragging();e.kill(),n&&t.props.callbacks.onCancel()}}),e.isDragging&&!this.props.isDragging&&this.sensors.forEach(function(e){e.isCapturing()&&e.kill()}))},n.componentWillUnmount=function(){var e=this;this.sensors.forEach(function(t){var n=t.isDragging();t.unmount(),n&&e.props.callbacks.onCancel()}),!!e.props.isEnabled&&!!e.isFocused&&(e.props.isDragging||e.props.isDropAnimating)&&ai(this.props.draggableId)},n.render=function(){var e=this.props,t=e.children,n=e.isEnabled;return t(this.getProvided(n))},t}(r.Component);Ii.contextTypes=(($o={})[go]=s.a.string.isRequired,$o[mo]=s.a.func.isRequired,$o);var Ri,_i={dragging:5e3,dropAnimating:4500},Ni=function(e,t){return t?Mr.drop(t.duration):e?Mr.snap:Mr.fluid},Ai=function(e,t){return e?t?Or.drop:Or.combining:null},Bi=function(e){return null!=e.forceShouldAnimate?e.forceShouldAnimate:"SNAP"===e.mode},Li=function(e){function t(t,n){var i;(i=e.call(this,t,n)||this).callbacks=void 0,i.styleContext=void 0,i.ref=null,i.onMoveEnd=function(){i.props.dragging&&i.props.dragging.dropping&&i.props.dropAnimationFinished()},i.onLift=function(e){Et("LIFT"),i.ref||$e(!1),i.props.isDragDisabled&&$e(!1);var t=e.clientSelection,n=e.movementMode,r=i.props;(0,r.lift)({id:r.draggableId,clientSelection:t,movementMode:n}),Ct("LIFT")},i.setRef=function(e){null!==e&&e!==i.ref&&(i.ref=e,Fo(e))},i.getDraggableRef=function(){return i.ref},i.getDraggingStyle=Xe(function(e){var t=e.dimension.client,n=e.offset,r=e.combineWith,o=e.dropping,i=Boolean(r),a=Bi(e),u=Boolean(o),l=u?Tr.drop(n,i):Tr.moveTo(n);return{position:"fixed",top:t.marginBox.top,left:t.marginBox.left,boxSizing:"border-box",width:t.borderBox.width,height:t.borderBox.height,transition:Ni(a,o),transform:l,opacity:Ai(i,u),zIndex:u?_i.dropAnimating:_i.dragging,pointerEvents:"none"}}),i.getSecondaryStyle=Xe(function(e){return{transform:Tr.moveTo(e.offset),transition:e.shouldAnimateDisplacement?null:"none"}}),i.getDraggingProvided=Xe(function(e,t){var n=i.getDraggingStyle(e),r=Boolean(e.dropping);return{innerRef:i.setRef,draggableProps:{"data-react-beautiful-dnd-draggable":i.styleContext,style:n,onTransitionEnd:r?i.onMoveEnd:null},dragHandleProps:t}}),i.getSecondaryProvided=Xe(function(e,t){var n=i.getSecondaryStyle(e);return{innerRef:i.setRef,draggableProps:{"data-react-beautiful-dnd-draggable":i.styleContext,style:n,onTransitionEnd:null},dragHandleProps:t}}),i.getDraggingSnapshot=Xe(function(e){return{isDragging:!0,isDropAnimating:Boolean(e.dropping),dropAnimation:e.dropping,mode:e.mode,draggingOver:e.draggingOver,combineWith:e.combineWith,combineTargetFor:null}}),i.getSecondarySnapshot=Xe(function(e){return{isDragging:!1,isDropAnimating:!1,dropAnimation:null,mode:null,draggingOver:null,combineTargetFor:e.combineTargetFor,combineWith:null}}),i.renderChildren=function(e){var t=i.props.dragging,n=i.props.secondary,a=i.props.children;if(t){var u=a(i.getDraggingProvided(t,e),i.getDraggingSnapshot(t)),l=o.a.createElement(Lo,{placeholder:t.dimension.placeholder});return o.a.createElement(r.Fragment,null,u,l)}n||$e(!1);var s=a(i.getSecondaryProvided(n,e),i.getSecondarySnapshot(n));return o.a.createElement(r.Fragment,null,s)};var a={onLift:i.onLift,onMove:function(e){return t.move({client:e})},onDrop:function(){return t.drop({reason:"DROP"})},onCancel:function(){return t.drop({reason:"CANCEL"})},onMoveUp:t.moveUp,onMoveDown:t.moveDown,onMoveRight:t.moveRight,onMoveLeft:t.moveLeft,onWindowScroll:function(){return t.moveByWindowScroll({newScroll:yr()})}};return i.callbacks=a,i.styleContext=n[go],i}He(t,e);var n=t.prototype;return n.componentWillUnmount=function(){this.ref=null},n.render=function(){var e=this.props,t=e.draggableId,n=e.index,r=e.dragging,i=e.isDragDisabled,a=e.disableInteractiveElementBlocking,u=this.context[po],l=this.context[ho],s=Boolean(r),c=Boolean(r&&r.dropping);return o.a.createElement(qo,{key:t,draggableId:t,droppableId:u,type:l,index:n,getDraggableRef:this.getDraggableRef},o.a.createElement(Ii,{draggableId:t,isDragging:s,isDropAnimating:c,isEnabled:!i,callbacks:this.callbacks,getDraggableRef:this.getDraggableRef,canDragInteractiveElements:a},this.renderChildren))},t}(r.Component);Li.contextTypes=((Ri={})[po]=s.a.string.isRequired,Ri[ho]=s.a.string.isRequired,Ri[go]=s.a.string.isRequired,Ri);var Fi=function(e){return e.merge?e.merge.combine.draggableId:null},Wi={secondary:{offset:dt,combineTargetFor:null,shouldAnimateDisplacement:!0},dragging:null},Ui=ze(function(){var e=Xe(function(e,t){return{x:e,y:t}}),t=Xe(function(e,t,n){return void 0===t&&(t=null),{secondary:{offset:e,combineTargetFor:t,shouldAnimateDisplacement:n},dragging:null}}),n=Xe(function(e,t,n,r,o,i){return{dragging:{mode:t,dropping:null,offset:e,dimension:n,draggingOver:r,combineWith:o,forceShouldAnimate:i},secondary:null}}),r=function(n,r,o){var i=o.movement.map[n],a=o.movement,u=o.merge,l=Boolean(u&&u.combine.draggableId===n),s=a.displacedBy.point,c=e(s.x,s.y);return l?t(i?c:dt,r,!i||i.shouldAnimate):i&&i.isVisible?t(c,null,i.shouldAnimate):null};return function(t,o){return function(t,r){if(t.isDragging){if(t.critical.draggable.id!==r.draggableId)return null;var o=t.current.client.offset,i=t.dimensions.draggables[r.draggableId],a=t.movementMode,u=un(t.impact),l=Fi(t.impact),s=t.forceShouldAnimate;return n(e(o.x,o.y),a,i,u,l,s)}if("DROP_ANIMATING"===t.phase){var c=t.pending;if(c.result.draggableId!==r.draggableId)return null;var d=un(c.impact),f=Fi(c.impact),p=c.dropDuration,h=c.result.mode;return{dragging:{offset:c.newHomeClientOffset,dimension:t.dimensions.draggables[r.draggableId],draggingOver:d,combineWith:f,mode:h,forceShouldAnimate:null,dropping:{duration:p,curve:Pr,moveTo:c.newHomeClientOffset,opacity:f?Or.drop:null,scale:f?Er.drop:null}},secondary:null}}return null}(t,o)||function(e,t){return e.isDragging?e.critical.draggable.id===t.draggableId?null:r(t.draggableId,e.critical.draggable.id,e.impact):"DROP_ANIMATING"===e.phase?e.pending.result.draggableId===t.draggableId?null:r(t.draggableId,e.pending.result.draggableId,e.pending.impact):null}(t,o)||Wi}},{lift:function(e){return{type:"LIFT",payload:e}},move:Jn,moveUp:function(){return{type:"MOVE_UP",payload:null}},moveDown:function(){return{type:"MOVE_DOWN",payload:null}},moveLeft:function(){return{type:"MOVE_LEFT",payload:null}},moveRight:function(){return{type:"MOVE_RIGHT",payload:null}},moveByWindowScroll:function(e){return{type:"MOVE_BY_WINDOW_SCROLL",payload:e}},drop:$n,dropAnimationFinished:function(){return{type:"DROP_ANIMATION_FINISHED",payload:null}}},null,{storeKey:fo,pure:!0,areStatePropsEqual:Go})(Li);Ui.defaultProps={isDragDisabled:!1,disableInteractiveElementBlocking:!1};var Gi,Vi,zi,qi=function(e){function t(t){var n=e.call(this,t)||this;return n.onDragEnd=function(e){window.console.log(e)},n}return ue(t,e),t.prototype.render=function(){var e=this.props.children;return o.a.createElement(yo,{onDragEnd:this.onDragEnd},o.a.createElement(zo,{droppableId:"droppable"},function(t,n){return o.a.createElement("div",{ref:t.innerRef},e.map(function(e,t){var n=e.key||t;return o.a.createElement(Ui,{key:n,draggableId:n.toString(),index:t},function(t,n){return o.a.createElement("div",le({ref:t.innerRef},t.draggableProps,t.dragHandleProps),e)})}),t.placeholder)}))},t}(o.a.Component),Yi=n(90),Hi=n.n(Yi),Ki=n(91),Xi=n.n(Ki),Ji=n(92),Zi=n.n(Ji),Qi=n(88),$i=n.n(Qi);!function(e){e.Small="small",e.Medium="medium",e.Large="large"}(Gi||(Gi={})),function(e){e.Default="default",e.Primary="primary",e.Secondary="secondary"}(Vi||(Vi={})),function(e){e.Flat="flat",e.Outlined="outlined",e.Contained="contained"}(zi||(zi={}));!function(e){function t(t){var n=e.call(this,t)||this;return n.onClick=function(e){var t=n.props.onClick;t&&(e.preventDefault(),e.stopPropagation(),t())},n}ue(t,e),t.prototype.render=function(){var e=this.props,t=e.variant,n=e.color,r=e.size,i=e.href,a=e.disabled,u=e.children;return o.a.createElement($i.a,{variant:t||zi.Outlined,color:n||Vi.Default,disabled:!!a,href:i,size:r||Gi.Small,onClick:this.onClick},u)}}(o.a.Component);var ea=n(89),ta=n.n(ea),na=function(e){function t(t){var n=e.call(this,t)||this;return n.onClick=function(e){var t=n.props.onClick;t&&(e.preventDefault(),e.stopPropagation(),t())},n}return ue(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=e.color,r=e.href,i=e.disabled,a=e.children;return o.a.createElement(ta.a,{className:t,color:n||Vi.Default,disabled:!!i,href:r,onClick:this.onClick},a)},t}(o.a.Component),ra=n(224),oa=function(e){function t(t){var n=e.call(this,t)||this;return n.onChange=function(){},n}return ue(t,e),t.prototype.render=function(){var e=this.props,t=e.classes,n=e.placeholder,r=e.children;return o.a.createElement(Hi.a,{className:t.root,elevation:1},o.a.createElement(Xi.a,{className:t.input,placeholder:n}),o.a.createElement(Zi.a,{className:t.divider}),o.a.createElement(na,{onClick:this.onChange,color:Vi.Primary,className:t.iconButton,"aria-label":"Directions"},r))},t}(o.a.Component),ia=Object(ra.withStyles)({root:{padding:"2px 4px",display:"flex",alignItems:"center",width:400},input:{marginLeft:8,flex:1},iconButton:{padding:10},divider:{width:1,height:28,margin:4}})(oa),aa=n(93),ua=n.n(aa),la=function(e){function t(t){return e.call(this,t)||this}return ue(t,e),t.prototype.render=function(){return o.a.createElement(ia,{placeholder:"Добавить пункт на карту"},o.a.createElement(ua.a,null))},t}(o.a.Component),sa=function(e){function t(t){return e.call(this,t)||this}return ue(t,e),t.prototype.render=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(la,null),o.a.createElement(qi,null,o.a.createElement("div",{key:"1"},"Sidebar 1"),o.a.createElement("div",{key:"2"},"Sidebar 2"),o.a.createElement("div",{key:"3"},"Sidebar 3")))},t}(o.a.Component),ca=n(94),da=n.n(ca),fa=function(e){function t(t){return e.call(this,t)||this}return ue(t,e),t.prototype.render=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(da.a,null),o.a.createElement(de,{sidebar:o.a.createElement(sa,null)},"app"))},t}(o.a.Component),pa=ie(function(e,t){return{points:e.points}},{})(fa);var ha=T(function(e,t){switch(t.type){case"INIT_APP":return le({},e,{points:t.points});default:return e}});ha.dispatch({type:"INIT_APP",points:new Array}),a.a.render(o.a.createElement(f,{store:ha},o.a.createElement(pa,null)),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2luZGV4LmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL1N0eWxlUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9SdWxlTGlzdC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdERPTVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvdG9Dc3NWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9jcmVhdGVSdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1pbi1icm93c2VyL2Rpc3QvbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC91bWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0dyaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3Qva2V5cy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy90b0Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9zaGVldHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL3ByZWZpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZU11aVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvdGhlbWVMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9kYXRlL25vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2NvbXBvbmVudFByb3BUeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXhhY3RQcm9wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZ2V0RGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9wb255ZmlsbEdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9TaGVldHNSZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9pc09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvbGlua1J1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvU3R5bGVTaGVldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2pzc1ByZXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9rZXljb2RlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvY2hhaW5Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvcmVhY3RIZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9ub2RlX21vZHVsZXMvcmVjb21wb3NlL3NldERpc3BsYXlOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvbm9kZV9tb2R1bGVzL3JlY29tcG9zZS93cmFwRGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9udW1iZXIvaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JY29uQnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9QYXBlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvSW5wdXRCYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9EaXZpZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvQWRkQ2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Dc3NCYXNlbGluZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9HcmlkL0dyaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9nZXREeW5hbWljU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL1NoZWV0c01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvY2xvbmVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvbW9kdWxlSWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvSnNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL1BsdWdpbnNSZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9wbHVnaW5zL3J1bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL1NpbXBsZVJ1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcnVsZXMvS2V5ZnJhbWVzUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9ydWxlcy9Db25kaXRpb25hbFJ1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcnVsZXMvRm9udEZhY2VSdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL1ZpZXdwb3J0UnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9wbHVnaW5zL29ic2VydmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3BsdWdpbnMvZnVuY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3JlbmRlcmVycy9Eb21SZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9yZW5kZXJlcnMvVmlydHVhbFJlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvcmVhY3RKc3NDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtZ2xvYmFsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLW5lc3RlZC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1uZXN0ZWQvbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLWNhbWVsLWNhc2UvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLWRlZmF1bHQtdW5pdC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1kZWZhdWx0LXVuaXQvbGliL2RlZmF1bHRVbml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXZlbmRvci1wcmVmaXhlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2xpYi9zdXBwb3J0ZWQtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2xpYi9zdXBwb3J0ZWQtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wcm9wcy1zb3J0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL21lcmdlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXBsYWluLW9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNvYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvaW5kaWdvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvcGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3NoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvc3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3RyYW5zaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvZ2V0U3R5bGVzQ3JlYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2RhdGUvbm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL251bWJlci9pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24vQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL0J1dHRvbkJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Ob1Nzci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTm9Tc3IvTm9Tc3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UvZm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL1RvdWNoUmlwcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uQmFzZS9jcmVhdGVSaXBwbGVIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JY29uQnV0dG9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1BhcGVyL1BhcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEJhc2UvSW5wdXRCYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Gb3JtQ29udHJvbC93aXRoRm9ybUNvbnRyb2xDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEJhc2UvVGV4dGFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYm91bmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9kaXN0L3JlYWN0LWV2ZW50LWxpc3RlbmVyLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZXZlbnQtbGlzdGVuZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2ZW50LWxpc3RlbmVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2ZW50LWxpc3RlbmVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZXZlbnQtbGlzdGVuZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2ZW50LWxpc3RlbmVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEJhc2UvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0RpdmlkZXIvRGl2aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvTXVpVGhlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icmNhc3QvZGlzdC9icmNhc3QuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy93aXRoVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy91dGlscy9jcmVhdGVTdmdJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zaG91bGRVcGRhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zZXRTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9ub2RlX21vZHVsZXMvcmVjb21wb3NlL2dldERpc3BsYXlOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3ZnSWNvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3ZnSWNvbi9TdmdJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Dc3NCYXNlbGluZS9Dc3NCYXNlbGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9MYXlvdXQudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhZi1zY2hkL2Rpc3QvcmFmLXNjaGQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWJveC1tb2RlbC9kaXN0L2Nzcy1ib3gtbW9kZWwuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvZGlzdC9yZWFjdC1iZWF1dGlmdWwtZG5kLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvU29ydGVkTGlzdC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL01vZGVscy9TaXplLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9CdXR0b24udHN4Iiwid2VicGFjazovLy8uL3NyYy9VSS9JY29uQnV0dG9uLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvQ29udHJvbC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQ29udHJvbHMudHN4Iiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1NpZGViYXIudHN4Iiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0FwcC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0FjdGlvbnMvSW5pdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy9SZWR1Y2Vycy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlJlYWN0Iiwib2JqIiwiZGVmYXVsdCIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9jb21wb25lbnRQcm9wVHlwZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2NvbXBvbmVudFByb3BUeXBlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsImEiLCJfZXhhY3RQcm9wX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfZXhhY3RQcm9wX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsIl9nZXREaXNwbGF5TmFtZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX2dldERpc3BsYXlOYW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsIl9wb255ZmlsbEdsb2JhbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX3BvbnlmaWxsR2xvYmFsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCIsIndhcm5pbmciLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJpbm5lciIsImpvaW4iLCJ1bmRlZmluZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwic2hlZXRzTWFuYWdlciIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfZXh0ZW5kczMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfaW5oZXJpdHMyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJfdXRpbHMiLCJfanNzIiwiX3JlYWN0SnNzQ29udGV4dCIsIl9qc3NQcmVzZXQiLCJfbWVyZ2VDbGFzc2VzIiwiX211bHRpS2V5U3RvcmUiLCJfY3JlYXRlTXVpVGhlbWUiLCJfdGhlbWVMaXN0ZW5lciIsIl9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsIl9nZXRTdHlsZXNDcmVhdG9yIiwiX2dldFRoZW1lUHJvcHMiLCJqc3MiLCJnZW5lcmF0ZUNsYXNzTmFtZSIsImluZGV4Q291bnRlciIsIk1hcCIsIm5vb3BUaGVtZSIsImRlZmF1bHRUaGVtZSIsInR5cG9ncmFwaHkiLCJzdXBwcmVzc1dhcm5pbmciLCJwb255ZmlsbEdsb2JhbCIsIl9fTVVJX1NUWUxFU19fIiwid2l0aFN0eWxlcyIsInN0eWxlc09yQ3JlYXRvciIsIm9wdGlvbnMiLCJDb21wb25lbnQiLCJfZXh0ZW5kczIiLCJfb3B0aW9ucyR3aXRoVGhlbWUiLCJ3aXRoVGhlbWUiLCJfb3B0aW9ucyRmbGlwIiwiZmxpcCIsInN0eWxlU2hlZXRPcHRpb25zIiwic3R5bGVzQ3JlYXRvciIsImxpc3RlblRvVGhlbWUiLCJ0aGVtaW5nRW5hYmxlZCIsImluZGV4IiwiV2l0aFN0eWxlcyIsIl9SZWFjdCRDb21wb25lbnQiLCJwcm9wcyIsImNvbnRleHQiLCJfdGhpcyIsInVuc3Vic2NyaWJlSWQiLCJtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucyIsInNoZWV0c0NhY2hlIiwiZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24iLCJzdHlsZXNDcmVhdG9yU2F2ZWQiLCJzaGVldE9wdGlvbnMiLCJ0aGVtZSIsImluaXRpYWwiLCJhdHRhY2giLCJjYWNoZUNsYXNzZXMiLCJsYXN0UHJvcCIsImxhc3RKU1MiLCJfdGhpczIiLCJzdWJzY3JpYmUiLCJvbGRUaGVtZSIsInNldFN0YXRlIiwiZGV0YWNoIiwidW5zdWJzY3JpYmUiLCJnZW5lcmF0ZSIsInNoZWV0TWFuYWdlciIsInNoZWV0IiwiYmFzZUNsYXNzZXMiLCJuZXdDbGFzc2VzIiwicmVmcyIsInNldCIsImNyZWF0ZVNoZWV0Iiwic2hlZXRzUmVnaXN0cnkiLCJhZGQiLCJzdHlsZXMiLCJtZXRhIiwiY3JlYXRlU3R5bGVTaGVldCIsImNsYXNzTmFtZVByZWZpeCIsImRpcmVjdGlvbiIsImxpbmsiLCJkaXNwbGF5TmFtZSIsImRlbGV0ZSIsInJlbW92ZVN0eWxlU2hlZXQiLCJyZW1vdmUiLCJfdGhpcyRwcm9wcyIsImlubmVyUmVmIiwib3RoZXIiLCJtb3JlIiwiY3JlYXRlRWxlbWVudCIsImdldENsYXNzZXMiLCJyZWYiLCJjb250ZXh0VHlwZXMiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3R5cGVvZiIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJiIiwiZSIsImYiLCJlcnJvciIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJSZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiVFlQRV9TVEFUSUNTIiwiRm9yd2FyZFJlZiIsIiQkdHlwZW9mIiwicmVuZGVyIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiaXRlcmF0b3IiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3dhcm5pbmcyIiwiX3RvQ3NzMiIsIl90b0Nzc1ZhbHVlMiIsIlN0eWxlUnVsZSIsInN0eWxlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaXNQcm9jZXNzZWQiLCJSZW5kZXJlciIsInNlbGVjdG9yIiwic2VsZWN0b3JUZXh0IiwicmVuZGVyZXIiLCJpc0VtcHR5IiwicGx1Z2lucyIsIm9uQ2hhbmdlVmFsdWUiLCJpc0RlZmluZWQiLCJyZW5kZXJhYmxlIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImF0dGFjaGVkIiwianNvbiIsInRvSlNPTiIsInByb3AiLCJvcHRzIiwiYWxsb3dFbXB0eSIsInNldFNlbGVjdG9yIiwicmVwbGFjZVJ1bGUiLCJnbG9iYWwiLCJjdHgiLCJoaWRlIiwiaGFzIiwiJGV4cG9ydCIsIm93biIsIm91dCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJleHBQcm90byIsIkMiLCJGdW5jdGlvbiIsInZpcnR1YWwiLCJSIiwiVSIsIl9jcmVhdGVSdWxlMiIsIl9saW5rUnVsZTIiLCJfU3R5bGVSdWxlMiIsIl9lc2NhcGUyIiwiUnVsZUxpc3QiLCJtYXAiLCJyYXciLCJ1cGRhdGUiLCJkYXRhIiwiX29wdGlvbnMiLCJvblVwZGF0ZSIsImRlY2wiLCJfb3B0aW9uczIiLCJwYXJlbnQiLCJydWxlIiwiY2xhc3NOYW1lIiwicmVnaXN0ZXIiLCJzcGxpY2UiLCJ1bnJlZ2lzdGVyIiwic2xpY2UiLCJmb3JFYWNoIiwib25Qcm9jZXNzUnVsZSIsImNzc1J1bGVzIiwiZ2V0VW5lc2NhcGVkS2V5c01hcCIsImNzc1J1bGUiLCJfa2V5IiwiZ2V0S2V5Iiwic3RyIiwiY3NzIiwidG9TdHJpbmciLCJSZWFjdERPTSIsIl90eXBlb2YyIiwiaWdub3JlSW1wb3J0YW50IiwiY3NzVmFsdWUiLCJieSIsInJlc3VsdCIsImRlY2xDb3B5IiwiX2Nsb25lU3R5bGUyIiwib25DcmVhdGVSdWxlIiwiaXNCcm93c2VyIiwid2luZG93IiwiZG9jdW1lbnQiLCJub2RlVHlwZSIsImlzTWVyZ2VhYmxlT2JqZWN0IiwiaXNOb25OdWxsT2JqZWN0Iiwic3RyaW5nVmFsdWUiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJpc1JlYWN0RWxlbWVudCIsImlzU3BlY2lhbCIsImZvciIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwiY2xvbmUiLCJkZWVwbWVyZ2UiLCJ2YWwiLCJkZWZhdWx0QXJyYXlNZXJnZSIsImVsZW1lbnQiLCJhcnJheU1lcmdlIiwic291cmNlSXNBcnJheSIsInRhcmdldElzQXJyYXkiLCJzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoIiwiZGVzdGluYXRpb24iLCJtZXJnZU9iamVjdCIsImFsbCIsImFycmF5IiwicmVkdWNlIiwicHJldiIsIm5leHQiLCJmYWN0b3J5IiwiY29udmVydEhleFRvUkdCIiwicmdiVG9IZXgiLCJjb2xvciIsInZhbHVlcyIsImRlY29tcG9zZUNvbG9yIiwiaGV4IiwicmVjb21wb3NlQ29sb3IiLCJnZXRDb250cmFzdFJhdGlvIiwiZm9yZWdyb3VuZCIsImJhY2tncm91bmQiLCJsdW1BIiwiZ2V0THVtaW5hbmNlIiwibHVtQiIsIk1hdGgiLCJtYXgiLCJtaW4iLCJlbXBoYXNpemUiLCJjb2VmZmljaWVudCIsImRhcmtlbiIsImxpZ2h0ZW4iLCJmYWRlIiwiY2xhbXAiLCJzdWJzdHIiLCJyZSIsIlJlZ0V4cCIsImNvbG9ycyIsIm1hdGNoIiwicGFyc2VJbnQiLCJjaGFyQXQiLCJtYXJrZXIiLCJzdWJzdHJpbmciLCJzcGxpdCIsInBhcnNlRmxvYXQiLCJkZWNvbXBvc2VkQ29sb3IiLCJyZ2IiLCJwb3ciLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiX19nIiwiaXQiLCJleGVjIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsIk8iLCJyb290IiwiX3BvbnlmaWxsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfR3JpZCIsImciLCJSZWZlcmVuY2VFcnJvciIsIl9vcHRpb25zJGluZGVudCIsImluZGVudCIsImZhbGxiYWNrcyIsImZhbGxiYWNrIiwiaW5kZW50U3RyIiwiX3Byb3AiLCJfdmFsdWUiLCJfcHJvcDIiLCJfdmFsdWUyIiwiX3RvQ3NzVmFsdWUiLCJfU2hlZXRzUmVnaXN0cnkiLCJfU2hlZXRzUmVnaXN0cnkyIiwiX2lzSW5Ccm93c2VyIiwianMiLCJqc0Nzc01hcCIsIk1veiIsIm1zIiwiV2Via2l0IiwiX2RlZXBtZXJnZSIsIl9pc1BsYWluT2JqZWN0IiwiX2NyZWF0ZUJyZWFrcG9pbnRzIiwiX2NyZWF0ZU1peGlucyIsIl9jcmVhdGVQYWxldHRlIiwiX2NyZWF0ZVR5cG9ncmFwaHkiLCJfc2hhZG93cyIsIl9zaGFwZSIsIl9zcGFjaW5nIiwiX3RyYW5zaXRpb25zIiwiX3pJbmRleCIsIl9kZWZhdWx0IiwiX29wdGlvbnMkYnJlYWtwb2ludHMiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlIiwicGFsZXR0ZUlucHV0Iiwic2hhZG93c0lucHV0Iiwic2hhZG93cyIsIl9vcHRpb25zJHNwYWNpbmciLCJzcGFjaW5nIiwic3BhY2luZ0lucHV0IiwiX29wdGlvbnMkdHlwb2dyYXBoeSIsInR5cG9ncmFwaHlJbnB1dCIsIm92ZXJyaWRlcyIsInNoYXBlIiwidHJhbnNpdGlvbnMiLCJ6SW5kZXgiLCJDSEFOTkVMIiwiZ2V0U3RhdGUiLCJjYiIsInN1YnNjcmlwdGlvbklkIiwiaXNPYmplY3QiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImNhcGl0YWxpemUiLCJzdHJpbmciLCJ0b1VwcGVyQ2FzZSIsImNvbnRhaW5zIiwiZmluZEluZGV4IiwiZmluZCIsImFyciIsInByZWQiLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJfbGVuIiwiZnVuY3MiLCJhY2MiLCJmdW5jIiwiX2xlbjIiLCJfa2V5MiIsImV2ZXJ5IiwicHJlZFR5cGUiLCJjb21wb25lbnRQcm9wVHlwZSIsImlzUmVxdWlyZWQiLCJzcGVjaWFsUHJvcGVydHkiLCJnZXRGdW5jdGlvbk5hbWUiLCJmbk5hbWVNYXRjaFJlZ2V4IiwiZm4iLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0cyIsIlNoZWV0c01hbmFnZXIiLCJTaGVldHNSZWdpc3RyeSIsInRvQ3NzVmFsdWUiLCJnZXREeW5hbWljU3R5bGVzIiwiX2dldER5bmFtaWNTdHlsZXMiLCJfU2hlZXRzTWFuYWdlciIsIl9SdWxlTGlzdCIsIl9zaGVldHMiLCJfSnNzMiIsInJlZ2lzdHJ5IiwiZmlsdGVyIiwiX3N5bWJvbE9ic2VydmFibGUiLCJfc3ltYm9sT2JzZXJ2YWJsZTIiLCJydWxlcyIsIl9tb2R1bGVJZDIiLCJydWxlQ291bnRlciIsInByZWZpeCIsImpzc0lkIiwiaWQiLCJfUnVsZUxpc3QyIiwiU3R5bGVTaGVldCIsIl9uYW1lIiwiZGVwbG95ZWQiLCJsaW5rZWQiLCJwcm9jZXNzIiwiZGVwbG95IiwicXVldWUiLCJpbnNlcnRSdWxlIiwiYWRkZWQiLCJfbmFtZTIiLCJhZGRSdWxlIiwiZGVsZXRlUnVsZSIsImdldFJ1bGVzIiwiX2pzc0dsb2JhbCIsIl9qc3NOZXN0ZWQiLCJfanNzQ2FtZWxDYXNlIiwiX2pzc0RlZmF1bHRVbml0IiwiX2pzc1ZlbmRvclByZWZpeGVyIiwiX2pzc1Byb3BzU29ydCIsIl9icmVha3BvaW50cyR2YWx1ZXMiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwiX2JyZWFrcG9pbnRzJHVuaXQiLCJ1bml0IiwiX2JyZWFrcG9pbnRzJHN0ZXAiLCJzdGVwIiwidXAiLCJiZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJlbmRJbmRleCIsImRvd24iLCJ1cHBlcmJvdW5kIiwib25seSIsIndpZHRoIiwiX29wdGlvbnMkZGFuZ2Vyb3VzbHlVIiwiZGFuZ2Vyb3VzbHlVc2VHbG9iYWxDU1MiLCJfb3B0aW9ucyRwcm9kdWN0aW9uUHIiLCJwcm9kdWN0aW9uUHJlZml4IiwiX29wdGlvbnMkc2VlZCIsInNlZWQiLCJzdHlsZVNoZWV0Iiwic2FmZVByZWZpeCIsImVzY2FwZVJlZ2V4IiwiU3RyaW5nIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJBdHRyaWJ1dGVzIiwiaXMiLCJjb2YiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInNoYXJlZCIsInVpZCIsIl9CdXR0b25CYXNlIiwia2V5Q29kZSIsInNlYXJjaElucHV0IiwiaGFzS2V5Q29kZSIsIndoaWNoIiwiY2hhckNvZGUiLCJuYW1lcyIsImZvdW5kTmFtZWRLZXkiLCJzZWFyY2giLCJjb2RlcyIsInRvTG93ZXJDYXNlIiwiYWxpYXNlcyIsImNoYXJDb2RlQXQiLCJpc0V2ZW50S2V5IiwiZXZlbnQiLCJuYW1lT3JDb2RlIiwiY29kZSIsImJhY2tzcGFjZSIsInRhYiIsImVudGVyIiwic2hpZnQiLCJjdHJsIiwiYWx0IiwicGF1c2UvYnJlYWsiLCJjYXBzIGxvY2siLCJlc2MiLCJzcGFjZSIsInBhZ2UgdXAiLCJwYWdlIGRvd24iLCJob21lIiwibGVmdCIsInJpZ2h0IiwiaW5zZXJ0IiwiY29tbWFuZCIsImxlZnQgY29tbWFuZCIsInJpZ2h0IGNvbW1hbmQiLCJudW1wYWQgKiIsIm51bXBhZCArIiwibnVtcGFkIC0iLCJudW1wYWQgLiIsIm51bXBhZCAvIiwibnVtIGxvY2siLCJzY3JvbGwgbG9jayIsIm15IGNvbXB1dGVyIiwibXkgY2FsY3VsYXRvciIsIjsiLCI9IiwiLCIsIi0iLCIuIiwiLyIsImAiLCJbIiwiXFwiLCJdIiwiJyIsIndpbmRvd3MiLCLih6ciLCLijKUiLCLijIMiLCLijJgiLCJjdGwiLCJjb250cm9sIiwib3B0aW9uIiwicGF1c2UiLCJicmVhayIsImNhcHMiLCJyZXR1cm4iLCJlc2NhcGUiLCJzcGMiLCJzcGFjZWJhciIsInBndXAiLCJwZ2RuIiwiaW5zIiwiZGVsIiwiY21kIiwiZnJvbUNoYXJDb2RlIiwidGl0bGUiLCJhbGlhcyIsIm5vZGUiLCJvd25lckRvY3VtZW50IiwiY29tcG9uZW50V2lsbE1vdW50Iiwic3RhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwicHJldlN0YXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIm5leHRTdGF0ZSIsInByZXZQcm9wcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJwb2x5ZmlsbCIsImlzUmVhY3RDb21wb25lbnQiLCJmb3VuZFdpbGxNb3VudE5hbWUiLCJmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lIiwiZm91bmRXaWxsVXBkYXRlTmFtZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50TmFtZSIsIm5ld0FwaU5hbWUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJtYXliZVNuYXBzaG90Iiwic25hcHNob3QiLCJfX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nIiwicHJvcFR5cGUxIiwicHJvcFR5cGUyIiwiY3JlYXRlQ29udGV4dCIsImNsb25lRWxlbWVudFdpdGhDbGFzc05hbWUiLCJjbG9uZUNoaWxkcmVuV2l0aENsYXNzTmFtZSIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJjaGlsZCIsImlzVmFsaWRFbGVtZW50IiwiaXNNdWlFbGVtZW50IiwibXVpTmFtZXMiLCJtdWlOYW1lIiwic2V0UmVmIiwiY3VycmVudCIsIl9jbGFzc25hbWVzIiwiY2xvbmVFbGVtZW50IiwiX3NldFN0YXRpYyIsIl9nZXREaXNwbGF5TmFtZSIsIkJhc2VDb21wb25lbnQiLCJob2NOYW1lIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwib2JzZXJ2YWJsZSIsIl9CdXR0b24iLCJfSWNvbkJ1dHRvbiIsIl9QYXBlciIsIl9JbnB1dEJhc2UiLCJfRGl2aWRlciIsIkZyYWdtZW50IiwiZmlsbCIsIl9Dc3NCYXNlbGluZSIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsInNoaW0iLCJwcm9wTmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZXJyIiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsIm51bWJlciIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJoIiwiayIsInEiLCJ1IiwidiIsInR5cGVPZiIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzTWVtbyIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsIl93aXRoU3R5bGVzIiwiR1VUVEVSUyIsIkdSSURfU0laRVMiLCJjb250YWluZXIiLCJib3hTaXppbmciLCJkaXNwbGF5IiwiZmxleFdyYXAiLCJpdGVtIiwibWFyZ2luIiwiemVyb01pbldpZHRoIiwibWluV2lkdGgiLCJkaXJlY3Rpb24teHMtY29sdW1uIiwiZmxleERpcmVjdGlvbiIsImRpcmVjdGlvbi14cy1jb2x1bW4tcmV2ZXJzZSIsImRpcmVjdGlvbi14cy1yb3ctcmV2ZXJzZSIsIndyYXAteHMtbm93cmFwIiwid3JhcC14cy13cmFwLXJldmVyc2UiLCJhbGlnbi1pdGVtcy14cy1jZW50ZXIiLCJhbGlnbkl0ZW1zIiwiYWxpZ24taXRlbXMteHMtZmxleC1zdGFydCIsImFsaWduLWl0ZW1zLXhzLWZsZXgtZW5kIiwiYWxpZ24taXRlbXMteHMtYmFzZWxpbmUiLCJhbGlnbi1jb250ZW50LXhzLWNlbnRlciIsImFsaWduQ29udGVudCIsImFsaWduLWNvbnRlbnQteHMtZmxleC1zdGFydCIsImFsaWduLWNvbnRlbnQteHMtZmxleC1lbmQiLCJhbGlnbi1jb250ZW50LXhzLXNwYWNlLWJldHdlZW4iLCJhbGlnbi1jb250ZW50LXhzLXNwYWNlLWFyb3VuZCIsImp1c3RpZnkteHMtY2VudGVyIiwianVzdGlmeUNvbnRlbnQiLCJqdXN0aWZ5LXhzLWZsZXgtZW5kIiwianVzdGlmeS14cy1zcGFjZS1iZXR3ZWVuIiwianVzdGlmeS14cy1zcGFjZS1hcm91bmQiLCJqdXN0aWZ5LXhzLXNwYWNlLWV2ZW5seSIsImJyZWFrcG9pbnQiLCImID4gJGl0ZW0iLCJwYWRkaW5nIiwiZ2VuZXJhdGVHdXR0ZXIiLCJhY2N1bXVsYXRvciIsImdsb2JhbFN0eWxlcyIsInNpemUiLCJyb3VuZCIsImZsZXhCYXNpcyIsImZsZXhHcm93IiwibWF4V2lkdGgiLCJnZW5lcmF0ZUdyaWQiLCJHcmlkIiwiX2NsYXNzTmFtZXMiLCJjbGFzc05hbWVQcm9wIiwiY29tcG9uZW50IiwianVzdGlmeSIsIndyYXAiLCJzb3VyY2VLZXlzIiwiX3NldFByb3RvdHlwZU9mIiwidG8iLCJleHRyYWN0ZWQiLCJfd2FybmluZyIsImNsb25lU3R5bGUiLCJ0eXBlT2ZTdHlsZSIsIl9pc09ic2VydmFibGUyIiwibmV3U3R5bGUiLCJfaXNPYnNlcnZhYmxlIiwiQ1NTIiwiX2lzSW5Ccm93c2VyMiIsIl9TdHlsZVNoZWV0MiIsIl9QbHVnaW5zUmVnaXN0cnkyIiwiX3J1bGVzMiIsIl9vYnNlcnZhYmxlczIiLCJfZnVuY3Rpb25zMiIsIl9zaGVldHMyIiwiX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lMiIsIl9jcmVhdGVSdWxlMyIsIl9Eb21SZW5kZXJlcjIiLCJfVmlydHVhbFJlbmRlcmVyMiIsImRlZmF1bHRQbHVnaW5zIiwiaW5zdGFuY2VDb3VudGVyIiwiSnNzIiwidXNlIiwic2V0dXAiLCJpbnNlcnRpb25Qb2ludCIsIm9uUHJvY2Vzc1NoZWV0IiwicnVsZU9wdGlvbnMiLCJwbHVnaW4iLCJQbHVnaW5zUmVnaXN0cnkiLCJob29rcyIsIm9uUHJvY2Vzc1N0eWxlIiwibmV4dFN0eWxlIiwicHJvY2Vzc2VkVmFsdWUiLCJfU2ltcGxlUnVsZTIiLCJfS2V5ZnJhbWVzUnVsZTIiLCJfQ29uZGl0aW9uYWxSdWxlMiIsIl9Gb250RmFjZVJ1bGUyIiwiX1ZpZXdwb3J0UnVsZTIiLCJAY2hhcnNldCIsIkBpbXBvcnQiLCJAbmFtZXNwYWNlIiwiQGtleWZyYW1lcyIsIkBtZWRpYSIsIkBzdXBwb3J0cyIsIkBmb250LWZhY2UiLCJAdmlld3BvcnQiLCJALW1zLXZpZXdwb3J0IiwiUnVsZUNsYXNzIiwidGVzdCIsIlNpbXBsZVJ1bGUiLCJLZXlmcmFtZXNSdWxlIiwiZnJhbWVzIiwiQ29uZGl0aW9uYWxSdWxlIiwiX3RvQ3NzIiwiRm9udEZhY2VSdWxlIiwiVmlld3BvcnRSdWxlIiwic3R5bGUkIiwic3R5bGVSdWxlIiwiX2xvb3AiLCJuZXh0VmFsdWUiLCJub3ciLCJEYXRlIiwiZm5WYWx1ZXNOcyIsImZuU3R5bGVOcyIsImZuU3R5bGUiLCJtZW1vaXplIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm1lc3NhZ2UiLCJleHRyYWN0S2V5IiwiQ1NTUnVsZVR5cGVzIiwiY3NzVGV4dCIsImZyb20iLCJpc0F0dGFjaGVkIiwiZ2V0SGVhZCIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwidGV4dENvbnRlbnQiLCJyZW1vdmVDaGlsZCIsImZpbmRQcmV2Tm9kZSIsImZpbmRIaWdoZXJTaGVldCIsImZpbmRIaWdoZXN0U2hlZXQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJjb21tZW50IiwidGV4dCIsImNoaWxkTm9kZXMiLCJub2RlVmFsdWUiLCJ0cmltIiwiZmluZENvbW1lbnROb2RlIiwibmV4dFNpYmxpbmciLCJnZXROb25jZSIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJEb21SZW5kZXJlciIsImhhc0luc2VydGVkUnVsZXMiLCJfcmVmIiwibWVkaWEiLCJzZXRBdHRyaWJ1dGUiLCJub25jZSIsInBhcmVudE5vZGUiLCJwcmV2Tm9kZSIsImluc2VydEJlZm9yZSIsImluc2VydGlvblBvaW50RWxlbWVudCIsIl9wYXJlbnROb2RlIiwiaW5zZXJ0U3R5bGUiLCJfaW5kZXgiLCJuZXdDc3NSdWxlIiwiVmlydHVhbFJlbmRlcmVyIiwicHJvcEtleSIsIkdsb2JhbENvbnRhaW5lclJ1bGUiLCJwcmVmaXhLZXkiLCJHbG9iYWxQcmVmaXhlZFJ1bGUiLCJhZGRTY29wZSIsImhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUiLCJoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUiLCJjcmVhdGVSdWxlIiwic2VwYXJhdG9yUmVnRXhwIiwic2NvcGUiLCJwYXJ0cyIsInNjb3BlZCIsImdldFJlcGxhY2VSZWYiLCJnZXRSdWxlIiwiaGFzQW5kIiwicmVwbGFjZVBhcmVudFJlZnMiLCJuZXN0ZWRQcm9wIiwicGFyZW50UHJvcCIsInBhcmVudFNlbGVjdG9ycyIsIm5lc3RlZFNlbGVjdG9ycyIsImoiLCJuZXN0ZWQiLCJwYXJlbnRSZWdFeHAiLCJnZXRPcHRpb25zIiwibmVzdGluZ0xldmVsIiwicmVwbGFjZVJlZiIsImlzTmVzdGVkIiwiaXNOZXN0ZWRDb25kaXRpb25hbCIsInJlZlJlZ0V4cCIsImNvbnZlcnRDYXNlIiwiaHlwaGVuYXRlZFByb3AiLCJfaHlwaGVuYXRlU3R5bGVOYW1lMiIsIl9oeXBoZW5hdGVTdHlsZU5hbWUiLCJjb252ZXJ0ZWQiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwiY2FjaGUiLCJjYW1lbENhc2VkT3B0aW9ucyIsImFkZENhbWVsQ2FzZWRWZXJzaW9uIiwiaXRlcmF0ZSIsIl9kZWZhdWx0VW5pdHMiLCJyZWdFeHAiLCJuZXdPYmoiLCJ1bml0cyIsImNvbnZlcnRlZFZhbHVlIiwiaW5uZXJQcm9wIiwiX2lubmVyUHJvcCIsImFuaW1hdGlvbi1kZWxheSIsImFuaW1hdGlvbi1kdXJhdGlvbiIsImJhY2tncm91bmQtcG9zaXRpb24iLCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXgiLCJiYWNrZ3JvdW5kLXBvc2l0aW9uLXkiLCJiYWNrZ3JvdW5kLXNpemUiLCJib3JkZXIiLCJib3JkZXItYm90dG9tIiwiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cyIsImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzIiwiYm9yZGVyLWJvdHRvbS13aWR0aCIsImJvcmRlci1sZWZ0IiwiYm9yZGVyLWxlZnQtd2lkdGgiLCJib3JkZXItcmFkaXVzIiwiYm9yZGVyLXJpZ2h0IiwiYm9yZGVyLXJpZ2h0LXdpZHRoIiwiYm9yZGVyLXNwYWNpbmciLCJib3JkZXItdG9wIiwiYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyIsImJvcmRlci10b3AtcmlnaHQtcmFkaXVzIiwiYm9yZGVyLXRvcC13aWR0aCIsImJvcmRlci13aWR0aCIsImJvcmRlci1hZnRlci13aWR0aCIsImJvcmRlci1iZWZvcmUtd2lkdGgiLCJib3JkZXItZW5kLXdpZHRoIiwiYm9yZGVyLWhvcml6b250YWwtc3BhY2luZyIsImJvcmRlci1zdGFydC13aWR0aCIsImJvcmRlci12ZXJ0aWNhbC1zcGFjaW5nIiwiYm90dG9tIiwiYm94LXNoYWRvdyIsImNvbHVtbi1nYXAiLCJjb2x1bW4tcnVsZSIsImNvbHVtbi1ydWxlLXdpZHRoIiwiY29sdW1uLXdpZHRoIiwiZmxleC1iYXNpcyIsImZvbnQtc2l6ZSIsImZvbnQtc2l6ZS1kZWx0YSIsImhlaWdodCIsImxldHRlci1zcGFjaW5nIiwibG9naWNhbC1oZWlnaHQiLCJsb2dpY2FsLXdpZHRoIiwibWFyZ2luLWFmdGVyIiwibWFyZ2luLWJlZm9yZSIsIm1hcmdpbi1ib3R0b20iLCJtYXJnaW4tbGVmdCIsIm1hcmdpbi1yaWdodCIsIm1hcmdpbi10b3AiLCJtYXgtaGVpZ2h0IiwibWF4LXdpZHRoIiwibWFyZ2luLWVuZCIsIm1hcmdpbi1zdGFydCIsIm1hc2stcG9zaXRpb24teCIsIm1hc2stcG9zaXRpb24teSIsIm1hc2stc2l6ZSIsIm1heC1sb2dpY2FsLWhlaWdodCIsIm1heC1sb2dpY2FsLXdpZHRoIiwibWluLWhlaWdodCIsIm1pbi13aWR0aCIsIm1pbi1sb2dpY2FsLWhlaWdodCIsIm1pbi1sb2dpY2FsLXdpZHRoIiwibW90aW9uIiwibW90aW9uLW9mZnNldCIsIm91dGxpbmUiLCJvdXRsaW5lLW9mZnNldCIsIm91dGxpbmUtd2lkdGgiLCJwYWRkaW5nLWJvdHRvbSIsInBhZGRpbmctbGVmdCIsInBhZGRpbmctcmlnaHQiLCJwYWRkaW5nLXRvcCIsInBhZGRpbmctYWZ0ZXIiLCJwYWRkaW5nLWJlZm9yZSIsInBhZGRpbmctZW5kIiwicGFkZGluZy1zdGFydCIsInBlcnNwZWN0aXZlLW9yaWdpbi14IiwicGVyc3BlY3RpdmUtb3JpZ2luLXkiLCJwZXJzcGVjdGl2ZSIsInNoYXBlLW1hcmdpbiIsInRleHQtaW5kZW50IiwidGV4dC1zdHJva2UiLCJ0ZXh0LXN0cm9rZS13aWR0aCIsInRvcCIsInRyYW5zZm9ybS1vcmlnaW4iLCJ0cmFuc2Zvcm0tb3JpZ2luLXgiLCJ0cmFuc2Zvcm0tb3JpZ2luLXkiLCJ0cmFuc2Zvcm0tb3JpZ2luLXoiLCJ0cmFuc2l0aW9uLWRlbGF5IiwidHJhbnNpdGlvbi1kdXJhdGlvbiIsInZlcnRpY2FsLWFsaWduIiwid29yZC1zcGFjaW5nIiwiYm94LXNoYWRvdy14IiwiYm94LXNoYWRvdy15IiwiYm94LXNoYWRvdy1ibHVyIiwiYm94LXNoYWRvdy1zcHJlYWQiLCJmb250LWxpbmUtaGVpZ2h0IiwidGV4dC1zaGFkb3cteCIsInRleHQtc2hhZG93LXkiLCJ0ZXh0LXNoYWRvdy1ibHVyIiwidmVuZG9yIiwiY2hhbmdlUHJvcCIsInN1cHBvcnRlZFByb3AiLCJzdXBwb3J0ZWRQcm9wZXJ0eSIsImNoYW5nZVZhbHVlIiwic3VwcG9ydGVkVmFsdWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9wcmVmaXgyIiwiX3N1cHBvcnRlZFByb3BlcnR5MiIsIl9zdXBwb3J0ZWRWYWx1ZTIiLCJlbCIsIl9jYW1lbGl6ZTIiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b1VwcGVyIiwiY2FjaGVLZXkiLCJzb3J0IiwicHJvcDAiLCJwcm9wMSIsIm5leHRDbGFzc2VzIiwia2V5MSIsImtleTIiLCJzdWJDYWNoZSIsImlzT2JqZWN0T2JqZWN0IiwiY3RvciIsInByb3QiLCJfdG9vbGJhciIsImd1dHRlcnMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInRvb2xiYXIiLCJtaW5IZWlnaHQiLCJfcGFsZXR0ZSRwcmltYXJ5IiwicHJpbWFyeSIsImxpZ2h0IiwiX2luZGlnbyIsIm1haW4iLCJkYXJrIiwiX3BhbGV0dGUkc2Vjb25kYXJ5Iiwic2Vjb25kYXJ5IiwiX3BpbmsiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJfcGFsZXR0ZSRlcnJvciIsIl9yZWQiLCJfcGFsZXR0ZSR0eXBlIiwiX3BhbGV0dGUkY29udHJhc3RUaHJlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJfcGFsZXR0ZSR0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0IiwiZ2V0Q29udHJhc3RUZXh0IiwiY29udHJhc3RUZXh0IiwiX2NvbG9yTWFuaXB1bGF0b3IiLCJhdWdtZW50Q29sb3IiLCJtYWluU2hhZGUiLCJsaWdodFNoYWRlIiwiZGFya1NoYWRlIiwiYWRkTGlnaHRPckRhcmsiLCJ0eXBlcyIsImNvbW1vbiIsIl9jb21tb24iLCJncmV5IiwiX2dyZXkiLCJkaXNhYmxlZCIsImhpbnQiLCJkaXZpZGVyIiwicGFwZXIiLCJ3aGl0ZSIsImFjdGlvbiIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWQiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJpY29uIiwiaW50ZW50Iiwic2hhZGUiLCI1MCIsIjEwMCIsIjIwMCIsIjMwMCIsIjQwMCIsIjUwMCIsIjYwMCIsIjcwMCIsIjgwMCIsIjkwMCIsIkExMDAiLCJibGFjayIsIl9yZWYkZm9udEZhbWlseSIsImZvbnRGYW1pbHkiLCJkZWZhdWx0Rm9udEZhbWlseSIsIl9yZWYkZm9udFNpemUiLCJmb250U2l6ZSIsIl9yZWYkZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodExpZ2h0IiwiX3JlZiRmb250V2VpZ2h0UmVndWxhIiwiZm9udFdlaWdodFJlZ3VsYXIiLCJfcmVmJGZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0TWVkaXVtIiwiX3JlZiRodG1sRm9udFNpemUiLCJodG1sRm9udFNpemUiLCJfcmVmJHVzZU5leHRWYXJpYW50cyIsInVzZU5leHRWYXJpYW50cyIsIkJvb2xlYW4iLCJfX01VSV9VU0VfTkVYVF9UWVBPR1JBUEhZX1ZBUklBTlRTX18iLCJhbGxWYXJpYW50cyIsImNvZWYiLCJweFRvUmVtIiwiYnVpbGRWYXJpYW50IiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwiY2FzaW5nIiwibmV4dFZhcmlhbnRzIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTFOZXh0IiwiYm9keTJOZXh0IiwiYnV0dG9uTmV4dCIsImNhc2VBbGxDYXBzIiwiY2FwdGlvbk5leHQiLCJvdmVybGluZSIsIm9sZFZhcmlhbnRzIiwiZGlzcGxheTQiLCJtYXJnaW5MZWZ0IiwiZGlzcGxheTMiLCJkaXNwbGF5MiIsImRpc3BsYXkxIiwiaGVhZGxpbmUiLCJzdWJoZWFkaW5nIiwiYm9keTIiLCJib2R5MSIsImNhcHRpb24iLCJidXR0b24iLCJ0ZXh0VHJhbnNmb3JtIiwic2hhZG93S2V5VW1icmFPcGFjaXR5Iiwic2hhZG93S2V5UGVudW1icmFPcGFjaXR5Iiwic2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkiLCJjcmVhdGVTaGFkb3ciLCJib3JkZXJSYWRpdXMiLCJpc051bWJlciIsImlzU3RyaW5nIiwiZm9ybWF0TXMiLCJkdXJhdGlvbiIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsInNob3J0ZXN0Iiwic2hvcnRlciIsInNob3J0Iiwic3RhbmRhcmQiLCJjb21wbGV4IiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwibWlsbGlzZWNvbmRzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiZGVsYXkiLCJhbmltYXRlZFByb3AiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJjb25zdGFudCIsIm1vYmlsZVN0ZXBwZXIiLCJhcHBCYXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsInN0eWxlc1dpdGhPdmVycmlkZXMiLCJwYXJhbXMiLCJjb21wb25lbnROYW1lSW5FcnJvciIsIiR2YWx1ZXMiLCJhRnVuY3Rpb24iLCJ0aGF0IiwiY3JlYXRlRGVzYyIsInZhbHVlT2YiLCJiaXRtYXAiLCJnZXRLZXlzIiwidG9JT2JqZWN0IiwiaXNFbnVtIiwiaXNFbnRyaWVzIiwiYXJyYXlJbmRleE9mIiwiSUVfUFJPVE8iLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJ0b0ludGVnZXIiLCJzdG9yZSIsImNvcHlyaWdodCIsInB4IiwicmFuZG9tIiwidG9PYmplY3QiLCJmYWlscyIsIktFWSIsImV4cCIsImdPUFMiLCJwSUUiLCIkYXNzaWduIiwiQSIsIksiLCJUIiwiYUxlbiIsImdldFN5bWJvbHMiLCJnZXRUaW1lIiwiJE9iamVjdCIsIkQiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsImlzSW50ZWdlciIsImlzRmluaXRlIiwiX2hlbHBlcnMiLCJ0cmFuc2l0aW9uIiwiJjpob3ZlciIsInRleHREZWNvcmF0aW9uIiwiYmFja2dyb3VuZENvbG9yIiwiQG1lZGlhIChob3Zlcjogbm9uZSkiLCImJGRpc2FibGVkIiwibGFiZWwiLCJ0ZXh0UHJpbWFyeSIsInRleHRTZWNvbmRhcnkiLCJmbGF0IiwiZmxhdFByaW1hcnkiLCJmbGF0U2Vjb25kYXJ5Iiwib3V0bGluZWQiLCJvdXRsaW5lZFByaW1hcnkiLCJvdXRsaW5lZFNlY29uZGFyeSIsImNvbnRhaW5lZCIsImJveFNoYWRvdyIsIiYkZm9jdXNWaXNpYmxlIiwiJjphY3RpdmUiLCJjb250YWluZWRQcmltYXJ5IiwiY29udGFpbmVkU2Vjb25kYXJ5IiwicmFpc2VkIiwicmFpc2VkUHJpbWFyeSIsInJhaXNlZFNlY29uZGFyeSIsImZhYiIsImV4dGVuZGVkRmFiIiwiZm9jdXNWaXNpYmxlIiwiY29sb3JJbmhlcml0IiwibWluaSIsInNpemVTbWFsbCIsInNpemVMYXJnZSIsImZ1bGxXaWR0aCIsIkJ1dHRvbiIsImRpc2FibGVGb2N1c1JpcHBsZSIsImZvY3VzVmlzaWJsZUNsYXNzTmFtZSIsInZhcmlhbnQiLCJmb2N1c1JpcHBsZSIsIl9nZXRQcm90b3R5cGVPZjMiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiIsIl9yZWFjdERvbSIsIl9rZXljb2RlIiwiX293bmVyV2luZG93IiwiX05vU3NyIiwiX2ZvY3VzVmlzaWJsZSIsIl9Ub3VjaFJpcHBsZSIsIl9jcmVhdGVSaXBwbGVIYW5kbGVyIiwicG9zaXRpb24iLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsImN1cnNvciIsInVzZXJTZWxlY3QiLCJ2ZXJ0aWNhbEFsaWduIiwiLW1vei1hcHBlYXJhbmNlIiwiLXdlYmtpdC1hcHBlYXJhbmNlIiwiJjo6LW1vei1mb2N1cy1pbm5lciIsImJvcmRlclN0eWxlIiwicG9pbnRlckV2ZW50cyIsIkJ1dHRvbkJhc2UiLCJrZXlEb3duIiwiZm9jdXNWaXNpYmxlQ2hlY2tUaW1lIiwiZm9jdXNWaXNpYmxlTWF4Q2hlY2tUaW1lcyIsImhhbmRsZU1vdXNlRG93biIsImNsZWFyVGltZW91dCIsImZvY3VzVmlzaWJsZVRpbWVvdXQiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsInByZXZlbnREZWZhdWx0IiwiaGFuZGxlVG91Y2hTdGFydCIsImhhbmRsZVRvdWNoRW5kIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlQ29udGV4dE1lbnUiLCJoYW5kbGVCbHVyIiwib25SaXBwbGVSZWYiLCJyaXBwbGUiLCJvbkZvY3VzVmlzaWJsZUhhbmRsZXIiLCJvbkZvY3VzVmlzaWJsZSIsImhhbmRsZUtleURvd24iLCJvbktleURvd24iLCJvbkNsaWNrIiwicGVyc2lzdCIsInN0b3AiLCJjdXJyZW50VGFyZ2V0IiwidGFnTmFtZSIsImhyZWYiLCJoYW5kbGVLZXlVcCIsInB1bHNhdGUiLCJvbktleVVwIiwiaGFuZGxlRm9jdXMiLCJkZXRlY3RGb2N1c1Zpc2libGUiLCJvbkZvY3VzIiwiZmluZERPTU5vZGUiLCJsaXN0ZW5Gb3JGb2N1c0tleXMiLCJmb2N1cyIsImRpc2FibGVSaXBwbGUiLCJfdGhpcyRwcm9wczIiLCJidXR0b25SZWYiLCJjZW50ZXJSaXBwbGUiLCJkaXNhYmxlVG91Y2hSaXBwbGUiLCJ0YWJJbmRleCIsIm9uQmx1ciIsIm9uTW91c2VEb3duIiwib25Nb3VzZUxlYXZlIiwib25Nb3VzZVVwIiwib25Ub3VjaEVuZCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFN0YXJ0IiwiVG91Y2hSaXBwbGVQcm9wcyIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsInJvbGUiLCJvbkNvbnRleHRNZW51IiwiY2VudGVyIiwibGFzdERpc2FibGVkIiwiX293bmVyRG9jdW1lbnQiLCJkb2MiLCJkZWZhdWx0VmlldyIsInBhcmVudFZpZXciLCJOb1NzciIsIm1vdW50ZWQiLCJkZWZlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiYXR0ZW1wdCIsInNldFRpbWVvdXQiLCJhY3RpdmVFbGVtZW50Iiwic2hhZG93Um9vdCIsImZpbmRBY3RpdmVFbGVtZW50IiwiaW50ZXJuYWwiLCJmb2N1c0tleVByZXNzZWQiLCJ3aW4iLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlS2V5VXBFdmVudCIsImtleVVwRXZlbnRUaW1lb3V0IiwiRk9DVVNfS0VZUyIsImlzRm9jdXNLZXkiLCJERUxBWV9SSVBQTEUiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiX1RyYW5zaXRpb25Hcm91cCIsIl9SaXBwbGUiLCJEVVJBVElPTiIsIm92ZXJmbG93Iiwib3BhY2l0eSIsInJpcHBsZVZpc2libGUiLCJ0cmFuc2Zvcm0iLCJhbmltYXRpb24iLCJyaXBwbGVQdWxzYXRlIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJjaGlsZExlYXZpbmciLCJjaGlsZFB1bHNhdGUiLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXIiLCIwJSIsIjEwMCUiLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZXhpdCIsIkBrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlIiwiNTAlIiwiVG91Y2hSaXBwbGUiLCJfUmVhY3QkUHVyZUNvbXBvbmVudCIsIm5leHRLZXkiLCJyaXBwbGVzIiwiX29wdGlvbnMkcHVsc2F0ZSIsIl9vcHRpb25zJGNlbnRlciIsIl9vcHRpb25zJGZha2VFbGVtZW50IiwiZmFrZUVsZW1lbnQiLCJpZ25vcmluZ01vdXNlRG93biIsInJpcHBsZVgiLCJyaXBwbGVZIiwicmlwcGxlU2l6ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRYIiwiY2xpZW50WSIsInRvdWNoZXMiLCJzcXJ0Iiwic2l6ZVgiLCJhYnMiLCJjbGllbnRXaWR0aCIsInNpemVZIiwiY2xpZW50SGVpZ2h0Iiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwic3RhcnRUaW1lciIsInRpbWVvdXQiLCJleGl0IiwiUHVyZUNvbXBvbmVudCIsImFycmF5V2l0aG91dEhvbGVzIiwiaXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJhcnIyIiwiaXRlciIsIl9yZWFjdExpZmVjeWNsZXNDb21wYXQiLCJfQ2hpbGRNYXBwaW5nIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlRyYW5zaXRpb25Hcm91cCIsImhhbmRsZUV4aXRlZCIsImZpcnN0UmVuZGVyIiwiX3Byb3RvIiwiZ2V0Q2hpbGRDb250ZXh0IiwidHJhbnNpdGlvbkdyb3VwIiwiaXNNb3VudGluZyIsImFwcGVhcmVkIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInByZXZDaGlsZE1hcHBpbmciLCJnZXRJbml0aWFsQ2hpbGRNYXBwaW5nIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJnZXRDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsImNoaWxkRmFjdG9yeSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiYXBwZWFyIiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaW4iLCJnZXRQcm9wIiwibmV4dENoaWxkTWFwcGluZyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsInBlbmRpbmdOZXh0S2V5IiwiX1RyYW5zaXRpb24iLCJSaXBwbGUiLCJ2aXNpYmxlIiwibGVhdmluZyIsImhhbmRsZUVudGVyIiwiaGFuZGxlRXhpdCIsIl9jbGFzc05hbWVzMiIsIl90aGlzJHN0YXRlIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlU3R5bGVzIiwiY2hpbGRDbGFzc05hbWUiLCJvbkVudGVyIiwib25FeGl0IiwiRVhJVElORyIsIkVOVEVSRUQiLCJFTlRFUklORyIsIkVYSVRFRCIsIlVOTU9VTlRFRCIsImRlc2MiLCJUcmFuc2l0aW9uIiwiaW5pdGlhbFN0YXR1cyIsInBhcmVudEdyb3VwIiwiYXBwZWFyU3RhdHVzIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsInN0YXR1cyIsIm5leHRDYWxsYmFjayIsInVwZGF0ZVN0YXR1cyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJvbkVudGVyZWQiLCJfdGhpczMiLCJvbkV4aXRpbmciLCJjYW5jZWwiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJoYW5kbGVyIiwiYWRkRW5kTGlzdGVuZXIiLCJjaGlsZFByb3BzIiwibm9vcCIsInRyYW5zaXRpb25UaW1lb3V0IiwidHJhbnNpdGlvblR5cGUiLCJ0aW1lb3V0UHJvcE5hbWUiLCJlbmFibGVkUHJvcE5hbWUiLCJjbGFzc05hbWVzU2hhcGUiLCJ0aW1lb3V0c1NoYXBlIiwiZW50ZXJEb25lIiwiZW50ZXJBY3RpdmUiLCJleGl0RG9uZSIsImV4aXRBY3RpdmUiLCJjcmVhdGVSaXBwbGVIYW5kbGVyIiwiZXZlbnROYW1lIiwiaWdub3JlIiwiZGVmYXVsdFByZXZlbnRlZCIsInRleHRBbGlnbiIsImZsZXgiLCJjb2xvclByaW1hcnkiLCJjb2xvclNlY29uZGFyeSIsIkljb25CdXR0b24iLCJlbGV2YXRpb25zIiwic2hhZG93Iiwicm91bmRlZCIsIlBhcGVyIiwic3F1YXJlIiwiZWxldmF0aW9uIiwiX2Zvcm1Db250cm9sU3RhdGUiLCJfRm9ybUNvbnRyb2xDb250ZXh0IiwiX3dpdGhGb3JtQ29udHJvbENvbnRleHQiLCJfcmVhY3RIZWxwZXJzIiwiX1RleHRhcmVhIiwiX3V0aWxzMiIsInBsYWNlaG9sZGVyIiwicGxhY2Vob2xkZXJIaWRkZW4iLCJwbGFjZWhvbGRlclZpc2libGUiLCJmb3JtQ29udHJvbCIsImZvY3VzZWQiLCJhZG9ybmVkU3RhcnQiLCJhZG9ybmVkRW5kIiwibWFyZ2luRGVuc2UiLCJtdWx0aWxpbmUiLCJpbnB1dCIsImZvbnQiLCImOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIiwiJjo6LW1vei1wbGFjZWhvbGRlciIsIiY6LW1zLWlucHV0LXBsYWNlaG9sZGVyIiwiJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyIiwiJjpmb2N1cyIsIiY6aW52YWxpZCIsIiY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24iLCJsYWJlbFtkYXRhLXNocmluaz1mYWxzZV0gKyAkZm9ybUNvbnRyb2wgJiIsIiY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyIiwiJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCJpbnB1dE1hcmdpbkRlbnNlIiwicGFkZGluZ1RvcCIsImlucHV0TXVsdGlsaW5lIiwicmVzaXplIiwiaW5wdXRUeXBlIiwiaW5wdXRUeXBlU2VhcmNoIiwiaW5wdXRBZG9ybmVkU3RhcnQiLCJpbnB1dEFkb3JuZWRFbmQiLCJJbnB1dEJhc2UiLCJtdWlGb3JtQ29udHJvbCIsInN0YXRlcyIsInN0b3BQcm9wYWdhdGlvbiIsImhhbmRsZUNoYW5nZSIsImlzQ29udHJvbGxlZCIsImNoZWNrRGlydHkiLCJpbnB1dFJlZiIsIm9uQ2hhbmdlIiwiaGFuZGxlUmVmSW5wdXQiLCJyZWZQcm9wIiwiaW5wdXRQcm9wcyIsImhhbmRsZUNsaWNrIiwiaXNGaWxsZWQiLCJvbkZpbGxlZCIsIm9uRW1wdHkiLCJhdXRvQ29tcGxldGUiLCJhdXRvRm9jdXMiLCJkZWZhdWx0VmFsdWUiLCJlbmRBZG9ybm1lbnQiLCJpbnB1dENvbXBvbmVudCIsIl90aGlzJHByb3BzMiRpbnB1dFBybyIsImlucHV0UHJvcHNDbGFzc05hbWUiLCJpbnB1dFByb3BzUHJvcCIsInJlYWRPbmx5IiwicmVuZGVyUHJlZml4Iiwicm93cyIsInJvd3NNYXgiLCJzdGFydEFkb3JubWVudCIsImZjcyIsImlucHV0Q2xhc3NOYW1lIiwiSW5wdXRDb21wb25lbnQiLCJ0ZXh0YXJlYVJlZiIsIlByb3ZpZGVyIiwiYXJpYS1pbnZhbGlkIiwicmVxdWlyZWQiLCJFbmhhbmNlZENvbXBvbmVudCIsIkNvbnN1bWVyIiwiX2RlYm91bmNlIiwiX3JlYWN0RXZlbnRMaXN0ZW5lciIsIlJPV1NfSEVJR0hUIiwidGV4dGFyZWEiLCJ2aXNpYmlsaXR5Iiwid2hpdGVTcGFjZSIsIlRleHRhcmVhIiwiaGFuZGxlUmVmU2luZ2xlbGluZVNoYWRvdyIsInNpbmdsZWxpbmVTaGFkb3dSZWYiLCJoYW5kbGVSZWZTaGFkb3ciLCJzaGFkb3dSZWYiLCJzeW5jSGVpZ2h0V2l0aFNoYWRvdyIsImhhbmRsZVJlc2l6ZSIsImNsZWFyIiwic2Nyb2xsSGVpZ2h0IiwibmV3SGVpZ2h0Iiwib25SZXNpemUiLCJhcmlhLWhpZGRlbiIsImRlYm91bmNlIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVzdGFtcCIsImxhdGVyIiwibGFzdCIsImRlYm91bmNlZCIsImNhbGxOb3ciLCJmbHVzaCIsIl9pbnRlcm9wRGVmYXVsdCIsImV4IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfaW5oZXJpdHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJwYXNzaXZlT3B0aW9uIiwiYXR0ciIsInN1cHBvcnRzUGFzc2l2ZU9wdGlvbiIsImRlZmF1bHRFdmVudE9wdGlvbnMiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIm1lcmdlRGVmYXVsdEV2ZW50T3B0aW9ucyIsImdldEV2ZW50TGlzdGVuZXJBcmdzIiwib24iLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiRXZlbnRMaXN0ZW5lciIsImFwcGx5TGlzdGVuZXJzIiwib25Pck9mZiIsIml0ZXJhdGVlIiwiZXZlbnRQcm9wcyIsImZvckVhY2hMaXN0ZW5lciIsIndpdGhPcHRpb25zIiwiaGFzVmFsdWUiLCJTU1IiLCJpc0Fkb3JuZWRTdGFydCIsImZsZXhTaHJpbmsiLCJhYnNvbHV0ZSIsImluc2V0IiwibWlkZGxlIiwibWFyZ2luUmlnaHQiLCJEaXZpZGVyIiwiX011aVRoZW1lUHJvdmlkZXIiLCJfY3JlYXRlU3R5bGVzIiwiX3dpdGhUaGVtZSIsIk11aVRoZW1lUHJvdmlkZXJPbGQiLCJfYnJjYXN0IiwiYnJvYWRjYXN0Iiwib3V0ZXJUaGVtZSIsIm1lcmdlT3V0ZXJMb2NhbFRoZW1lIiwibG9jYWxUaGVtZSIsIk11aVRoZW1lUHJvdmlkZXIiLCJpbml0aWFsU3RhdGUiLCJsaXN0ZW5lcnMiLCJfc3RhdGUiLCJsZW4iLCJsaXN0ZW5lciIsImN1cnJlbnRJZCIsIldpdGhUaGVtZSIsIl9wdXJlIiwiX1N2Z0ljb24iLCJwYXRoIiwiSWNvbiIsIl9zaG91bGRVcGRhdGUiLCJfc2hhbGxvd0VxdWFsIiwiaG9jIiwiX2luaGVyaXRzTG9vc2UyIiwiY3JlYXRlRmFjdG9yeSIsIl9Db21wb25lbnQiLCJTaG91bGRVcGRhdGUiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJ4IiwieSIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImNvbG9yQWN0aW9uIiwiY29sb3JFcnJvciIsImNvbG9yRGlzYWJsZWQiLCJmb250U2l6ZUluaGVyaXQiLCJmb250U2l6ZVNtYWxsIiwiZm9udFNpemVMYXJnZSIsIlN2Z0ljb24iLCJuYXRpdmVDb2xvciIsInRpdGxlQWNjZXNzIiwidmlld0JveCIsImZvY3VzYWJsZSIsIl9zdHlsZXMiLCJDc3NCYXNlbGluZSIsIkBnbG9iYWwiLCJodG1sIiwiV2Via2l0Rm9udFNtb290aGluZyIsIk1vek9zeEZvbnRTbW9vdGhpbmciLCIqLCAqOjpiZWZvcmUsICo6OmFmdGVyIiwiYm9keSIsIkBtZWRpYSBwcmludCIsIl9pbmhlcml0c0xvb3NlIiwiUmVhY3RSZWR1eENvbnRleHQiLCJleHRlcm5hbF9SZWFjdF9kZWZhdWx0IiwiUHJvdmlkZXJfUHJvdmlkZXIiLCJzdG9yZVN0YXRlIiwiX2lzTW91bnRlZCIsIm5ld1N0b3JlU3RhdGUiLCJwcm92aWRlclN0YXRlIiwicG9zdE1vdW50U3RvcmVTdGF0ZSIsIkNvbnRleHQiLCJleHRlcm5hbF9SZWFjdF8iLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJkaXNwYXRjaCIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiIsIl9yZWYyJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmMiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYyJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYyJHNob3VsZEhhbmRsZVN0YSIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYyJHN0b3JlS2V5Iiwic3RvcmVLZXkiLCJfcmVmMiR3aXRoUmVmIiwid2l0aFJlZiIsIl9yZWYyJGZvcndhcmRSZWYiLCJmb3J3YXJkUmVmIiwiX3JlZjIkY29udGV4dCIsImNvbm5lY3RPcHRpb25zIiwiYnJvd3Nlcl9kZWZhdWx0IiwiY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwiT3V0ZXJCYXNlQ29tcG9uZW50IiwiRmluYWxXcmFwcGVkQ29tcG9uZW50IiwiQ29ubmVjdCIsIl9PdXRlckJhc2VDb21wb25lbnQiLCJsYXN0UHJvcHMiLCJsYXN0U3RhdGUiLCJsYXN0RGVyaXZlZFByb3BzIiwibGFzdFN0b3JlIiwic291cmNlU2VsZWN0b3IiLCJsYXN0Q2hpbGRQcm9wcyIsImxhc3RGb3J3YXJkUmVmIiwibGFzdENoaWxkRWxlbWVudCIsIndyYXBwZXJQcm9wcyIsInNlbGVjdERlcml2ZWRQcm9wcyIsInNlbGVjdENoaWxkRWxlbWVudCIsInJlbmRlcldyYXBwZWRDb21wb25lbnQiLCJmb3J3YXJkZWRSZWYiLCJkZXJpdmVkUHJvcHMiLCJDb250ZXh0VG9Vc2UiLCJmb3J3YXJkZWQiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19janNfZGVmYXVsdCIsInNoYWxsb3dFcXVhbCIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJpc1N1YnNjcmliZWQiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwiZXMiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiX2RlZmluZVByb3BlcnR5IiwiY29tcG9zZSIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsIm93bktleXMiLCJzeW0iLCJfb2JqZWN0U3ByZWFkIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwiY29ubmVjdF9tYXBTdGF0ZVRvUHJvcHMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwiY29ubmVjdF9tZXJnZVByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiY29ubmVjdF9jb25uZWN0IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX18iLCJfX2Fzc2lnbiIsIl9zdXBlciIsIkxheW91dCIsIl9hIiwic2lkZWJhciIsIkdyaWRfZGVmYXVsdCIsInN1YnNjcmlwdGlvblNoYXBlIiwidHJ5U3Vic2NyaWJlIiwidHJ5VW5zdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwic3RvcmVTaGFwZSIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsInN1YnNjcmlwdGlvbktleSIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwib25TdGF0ZUNoYW5nZSIsImFkZE5lc3RlZFN1YiIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwiY29ubmVjdEFkdmFuY2VkX2Nvbm5lY3RBZHZhbmNlZCIsIl9jb250ZXh0VHlwZXMiLCJfY2hpbGRDb250ZXh0VHlwZXMiLCJyZWFjdF9pcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZW5kZXJDb3VudCIsInByb3BzTW9kZSIsInNldFdyYXBwZWRJbnN0YW5jZSIsImluaXRTZWxlY3RvciIsImluaXRTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJydW4iLCJmb3JjZVVwZGF0ZSIsImdldFdyYXBwZWRJbnN0YW5jZSIsIndyYXBwZWRJbnN0YW5jZSIsIm1ha2VTZWxlY3RvclN0YXRlZnVsIiwibm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlIiwiYWRkRXh0cmFQcm9wcyIsIndpdGhFeHRyYXMiLCJzaGFsbG93RXF1YWxfaGFzT3duIiwic2hhbGxvd0VxdWFsX2lzIiwic2hhbGxvd0VxdWFsX3NoYWxsb3dFcXVhbCIsIndyYXBNYXBUb1Byb3BzX3dyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJ3cmFwTWFwVG9Qcm9wc19nZXREZXBlbmRzT25Pd25Qcm9wcyIsIndyYXBNYXBUb1Byb3BzX3dyYXBNYXBUb1Byb3BzRnVuYyIsImVzX2Nvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwiZXNfY29ubmVjdF9tYXBTdGF0ZVRvUHJvcHMiLCJtZXJnZVByb3BzX2RlZmF1bHRNZXJnZVByb3BzIiwiZXNfY29ubmVjdF9tZXJnZVByb3BzIiwibWVyZ2VQcm9wc193cmFwTWVyZ2VQcm9wc0Z1bmMiLCJzZWxlY3RvckZhY3RvcnlfaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInNlbGVjdG9yRmFjdG9yeV9wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInNlbGVjdG9yRmFjdG9yeV9maW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiY29ubmVjdF9tYXRjaCIsImNvbm5lY3Rfc3RyaWN0RXF1YWwiLCJlc19jb25uZWN0X2Nvbm5lY3QiLCJpbmhlcml0c0xvb3NlX2luaGVyaXRzTG9vc2UiLCJjcmVhdGVfZGVmYXVsdCIsInNpbXBsZUlzRXF1YWwiLCJtZW1vaXplX29uZV9lc20iLCJyZXN1bHRGbiIsImlzRXF1YWwiLCJsYXN0VGhpcyIsImxhc3RSZXN1bHQiLCJsYXN0QXJncyIsImNhbGxlZE9uY2UiLCJpc05ld0FyZ0VxdWFsVG9MYXN0IiwibmV3QXJnIiwibmV3QXJncyIsInJhZl9zY2hkX2VzbSIsImZyYW1lSWQiLCJ3cmFwcGVyRm4iLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlzUHJvZHVjdGlvbiIsInRpbnlfaW52YXJpYW50X2VzbSIsImdldFJlY3QiLCJleHBhbmQiLCJleHBhbmRCeSIsInNocmluayIsInNocmlua0J5Iiwibm9TcGFjaW5nIiwiY3JlYXRlQm94IiwiYm9yZGVyQm94IiwiX3JlZjIkbWFyZ2luIiwiX3JlZjIkYm9yZGVyIiwiX3JlZjIkcGFkZGluZyIsIm1hcmdpbkJveCIsInBhZGRpbmdCb3giLCJjb250ZW50Qm94IiwiY3NzX2JveF9tb2RlbF9lc21fcGFyc2UiLCJvZmZzZXQiLCJvcmlnaW5hbCIsImNoYW5nZSIsInNoaWZ0QnkiLCJzaGlmdGVkIiwid2l0aFNjcm9sbCIsInNjcm9sbCIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJjYWxjdWxhdGVCb3giLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJwYWRkaW5nQm90dG9tIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJnZXRCb3giLCJleHRlbmRzX2V4dGVuZHMiLCJhc3NpZ25fZGVmYXVsdCIsIm9yaWdpbiIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX2FkZCIsInBvaW50MSIsInBvaW50MiIsInN1YnRyYWN0IiwibmVnYXRlIiwicG9pbnQiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9wYXRjaCIsImxpbmUiLCJvdGhlclZhbHVlIiwiZGlzdGFuY2UiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9jbG9zZXN0IiwicG9pbnRzIiwib2Zmc2V0QnlQb3NpdGlvbiIsImdldENvcm5lcnMiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9jbGlwIiwiZnJhbWUiLCJzaG91bGRDbGlwU3ViamVjdCIsInN1YmplY3QiLCJleGVjdXRlQ2xpcCIsInBhZ2VNYXJnaW5Cb3giLCJnZXRTdWJqZWN0IiwicGFnZSIsIndpdGhQbGFjZWhvbGRlciIsImF4aXMiLCJpbmNyZWFzZWQiLCJpbmNyZWFzZWRCeSIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX2luY3JlYXNlIiwiZGlmZiIsImRpc3BsYWNlbWVudCIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX3Njcm9sbCIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX3Njcm9sbERyb3BwYWJsZSIsImRyb3BwYWJsZSIsIm5ld1Njcm9sbCIsInNjcm9sbGFibGUiLCJzY3JvbGxEaWZmIiwic2Nyb2xsRGlzcGxhY2VtZW50IiwiZmluaXNoIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fdmFsdWVzIiwidmFsdWVzX2RlZmF1bHQiLCJsaXN0IiwicHJlZGljYXRlIiwidG9Ecm9wcGFibGVNYXAiLCJkcm9wcGFibGVzIiwicHJldmlvdXMiLCJ0b0RyYWdnYWJsZU1hcCIsImRyYWdnYWJsZXMiLCJ0b0Ryb3BwYWJsZUxpc3QiLCJ0b0RyYWdnYWJsZUxpc3QiLCJpc1dpdGhpbiIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiaXNQb3NpdGlvbkluRnJhbWUiLCJpc1dpdGhpblZlcnRpY2FsIiwiaXNXaXRoaW5Ib3Jpem9udGFsIiwiZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZSIsImRyb3BwYWJsZUlkIiwiZHJhZ2dhYmxlIiwiaXNQYXJ0aWFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lIiwiaXNQYXJ0aWFsbHlWaXNpYmxlVmVydGljYWxseSIsImlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseSIsImlzQmlnZ2VyVmVydGljYWxseSIsImlzQmlnZ2VySG9yaXpvbnRhbGx5IiwiaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZSIsInZlcnRpY2FsIiwiY3Jvc3NBeGlzTGluZSIsImNyb3NzQXhpc1N0YXJ0IiwiY3Jvc3NBeGlzRW5kIiwiY3Jvc3NBeGlzU2l6ZSIsImhvcml6b250YWwiLCJpc1Zpc2libGUiLCJ0b0JlRGlzcGxhY2VkIiwidmlld3BvcnQiLCJ3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50IiwiaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4iLCJkaXNwbGFjZWRUYXJnZXQiLCJnZXREcm9wcGFibGVEaXNwbGFjZWQiLCJpc1Zpc2libGVJbkRyb3BwYWJsZSIsImlzVmlzaWJsZUluVmlld3BvcnQiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9pc1BhcnRpYWxseVZpc2libGUiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9pc1RvdGFsbHlWaXNpYmxlIiwiZ2V0RGlzcGxhY2VtZW50IiwicHJldmlvdXNJbXBhY3QiLCJtb3ZlbWVudCIsImRyYWdnYWJsZUlkIiwic2hvdWxkQW5pbWF0ZSIsImdldFNob3VsZEFuaW1hdGUiLCJnZXREaXNwbGFjZW1lbnRNYXAiLCJkaXNwbGFjZWQiLCJpc1VzZXJNb3ZpbmdGb3J3YXJkIiwiZ2V0RGlzcGxhY2VkQnkiLCJkaXNwbGFjZUJ5Iiwid2lsbERpc3BsYWNlRm9yd2FyZCIsIm1vZGlmaWVyIiwibm9Nb3ZlbWVudCIsImRpc3BsYWNlZEJ5Iiwibm9JbXBhY3QiLCJtZXJnZSIsImlzSG9tZU9mIiwiZ2V0V2hlbkVudGVyZWQiLCJvbGRNZXJnZSIsImNvbWJpbmUiLCJ3aGVuRW50ZXJlZCIsImdldENvbWJpbmVJbXBhY3QiLCJjdXJyZW50Q2VudGVyIiwicGFnZUJvcmRlckJveENlbnRlcldpdGhEcm9wcGFibGVTY3JvbGxDaGFuZ2UiLCJpbnNpZGVEZXN0aW5hdGlvbiIsInVzZXJEaXJlY3Rpb24iLCJpc0NvbWJpbmVFbmFibGVkIiwiY2FuQmVEaXNwbGFjZWRCeSIsImN1cnJlbnRVc2VyRGlyZWN0aW9uIiwidHdvVGhpcmRzT2ZTaXplIiwiaXNNb3ZpbmdGb3J3YXJkIiwidGFyZ2V0Q2VudGVyIiwiaXNDb21iaW5pbmdXaXRoIiwiZ2V0RHJhZ0ltcGFjdCIsInBhZ2VCb3JkZXJCb3hDZW50ZXIiLCJkZXN0aW5hdGlvbklkIiwibWF5YmUiLCJpc0VuYWJsZWQiLCJnZXREcm9wcGFibGVPdmVyIiwiaXNXaXRoaW5Ib21lRHJvcHBhYmxlIiwid2l0aE1lcmdlIiwiaW5zaWRlSG9tZSIsIm9yaWdpbmFsQ2VudGVyIiwiaXNJbkZyb250T2ZTdGFydCIsImlzTW92aW5nVG93YXJkU3RhcnQiLCJkaW1lbnNpb24iLCJvcmRlcmVkIiwicmV2ZXJzZSIsInN0YXJ0SW5kZXgiLCJhbW91bnRPZkRpc3BsYWNlZCIsImdldE5ld0luZGV4IiwiaW5Ib21lTGlzdCIsIm5ld0luZGV4IiwiaW5Gb3JlaWduTGlzdCIsImdldE1heFNjcm9sbCIsInNjcm9sbFdpZHRoIiwibWF4U2Nyb2xsIiwiZ2V0RHJvcHBhYmxlRGltZW5zaW9uIiwiaXNGaXhlZE9uUGFnZSIsImNsaWVudCIsImNsb3Nlc3QkJDEiLCJjbG9zZXN0Iiwic2Nyb2xsU2l6ZSIsImZyYW1lQ2xpZW50IiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fd2l0aE1heFNjcm9sbCIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX2FkZFBsYWNlaG9sZGVyIiwicGxhY2Vob2xkZXJTaXplIiwicmVxdWlyZWRHcm93dGgiLCJhdmFpbGFibGVTcGFjZSIsIm5lZWRzVG9Hcm93QnkiLCJzdW0iLCJnZXRSZXF1aXJlZEdyb3d0aEZvclBsYWNlaG9sZGVyIiwib2xkRnJhbWVNYXhTY3JvbGwiLCJuZXdGcmFtZSIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX3JlbW92ZVBsYWNlaG9sZGVyIiwib2xkTWF4U2Nyb2xsIiwiZ2V0RnJhbWUiLCJ3aGF0SXNEcmFnZ2VkT3ZlciIsImltcGFjdCIsInNob3VsZFVzZVBsYWNlaG9sZGVyIiwiaXNPdmVyIiwicGF0Y2hEcm9wcGFibGVNYXAiLCJkaW1lbnNpb25zIiwidXBkYXRlZCIsImdldERpbWVuc2lvbk1hcFdpdGhQbGFjZWhvbGRlciIsImJhc2UiLCJsYXN0RHJvcHBhYmxlIiwiY2xlYXJVbnVzZWRQbGFjZWhvbGRlciIsInBhdGNoZWQiLCJwdWJsaXNoV2hpbGVEcmFnZ2luZyIsInB1Ymxpc2hlZCIsImFkanVzdGVkIiwibW9kaWZpZWQiLCJleGlzdGluZ0Ryb3BwYWJsZXMiLCJpbml0aWFsV2luZG93U2Nyb2xsIiwicHJvdmlkZWQiLCJvbGQiLCJmcmVzaCIsImV4aXN0aW5nIiwib2xkQ2xpZW50IiwibmV3Q2xpZW50Iiwib2xkU2Nyb2xsYWJsZSIsIm5ld1Njcm9sbGFibGUiLCJ3aXRoU2l6ZUNoYW5nZWQiLCJhZGp1c3RNb2RpZmllZERyb3BwYWJsZXMiLCJhZGRpdGlvbnMiLCJtb2RpZmllZERyb3BwYWJsZXMiLCJ3aW5kb3dTY3JvbGxDaGFuZ2UiLCJtb2RpZmllZE1hcCIsImRyb3BwYWJsZVNjcm9sbENoYW5nZSIsInRvdGFsQ2hhbmdlIiwiYWRqdXN0QWRkaXRpb25zRm9yU2Nyb2xsQ2hhbmdlcyIsImFkZGVkRHJhZ2dhYmxlcyIsInJlbW92ZWREcmFnZ2FibGVzIiwicmVtb3ZhbHMiLCJ0b1NoaWZ0IiwiYWRkU2hpZnQiLCJpbmRleENoYW5nZSIsIndpdGhSZW1vdmFscyIsIm9mZnNldCQkMSIsInNpYmxpbmciLCJ3aXRoQWRkaXRpb25zIiwiYWRkaXRpb25NYXAiLCJtb3ZlZCIsImRyYWdnYWJsZU1hcCIsImdldERyYWdnYWJsZU1hcCIsImRyYWdnaW5nIiwiY3JpdGljYWwiLCJfZ2V0RHJhZ1Bvc2l0aW9ucyIsIm9sZEluaXRpYWwiLCJvbGRDdXJyZW50Iiwib2xkQ2xpZW50Qm9yZGVyQm94Q2VudGVyIiwibmV3Q2xpZW50Qm9yZGVyQm94Q2VudGVyIiwic2VsZWN0aW9uIiwiYm9yZGVyQm94Q2VudGVyIiwiZ2V0RHJhZ1Bvc2l0aW9ucyIsIndpdGhvdXRBbmltYXRpb24iLCJ3aXRoTm9BbmltYXRlZERpc3BsYWNlbWVudCIsIm1vdmVtZW50TW9kZSIsImRyYWdnaW5nU3RhdGUiLCJwaGFzZSIsImZvcmNlU2hvdWxkQW5pbWF0ZSIsInJlYXNvbiIsImlzV2FpdGluZyIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX2dldEtub3duQWN0aXZlIiwiZ2V0V2lsbERpc3BsYWNlRm9yd2FyZCIsImlzSW5Ib21lTGlzdCIsInByb3Bvc2VkSW5kZXgiLCJzdGFydEluZGV4SW5Ib21lIiwiZ2V0SG9tZUltcGFjdCIsImRpc3RhbmNlRnJvbVN0YXJ0VG9Cb3JkZXJCb3hDZW50ZXIiLCJib3giLCJnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIiLCJpc01vdmluZyIsImdvQWZ0ZXIiLCJtb3ZlUmVsYXRpdmVUbyIsIndoZW5SZW9yZGVyaW5nIiwiZHJhZ2dhYmxlUGFnZSIsIm1vdmVJbnRvIiwiZ29JbnRvU3RhcnQiLCJpc092ZXJIb21lIiwiZGlzcGxhY2VkQ2xvc2VzdCIsImRpc3RhbmNlRnJvbUVuZFRvQm9yZGVyQm94Q2VudGVyIiwiZ29CZWZvcmUiLCJnZXRSZXN1bHRXaXRob3V0RHJvcHBhYmxlRGlzcGxhY2VtZW50IiwiZ3JvdXBpbmdXaXRoIiwiaXNEaXNwbGFjZWQiLCJ3aGVuQ29tYmluaW5nIiwiZ2V0UGFnZUJvcmRlckJveENlbnRlciIsIndpdGhvdXREaXNwbGFjZW1lbnQiLCJpc1RvdGFsbHlWaXNpYmxlSW5OZXdMb2NhdGlvbiIsIm5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIiLCJfcmVmJG9ubHlPbk1haW5BeGlzIiwib25seU9uTWFpbkF4aXMiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9pc1RvdGFsbHlWaXNpYmxlT25BeGlzIiwibW92ZVRvTmV3RHJvcHBhYmxlIiwicHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyIiwibW92ZUludG9JbmRleE9mIiwiaG9tZUluZGV4IiwidGFyZ2V0SW5kZXgiLCJ0b0hvbWVMaXN0IiwicHJvcG9zZWQiLCJ0b0ZvcmVpZ25MaXN0IiwiZ2V0Q2xpZW50RnJvbVBhZ2VCb3JkZXJCb3hDZW50ZXIiLCJ3aXRob3V0UGFnZVNjcm9sbENoYW5nZSIsIndpdGhWaWV3cG9ydERpc3BsYWNlbWVudCIsIm1vdmVDcm9zc0F4aXMiLCJpc0JldHdlZW5Tb3VyY2VDbGlwcGVkIiwiY2FuZGlkYXRlcyIsImFjdGl2ZU9mVGFyZ2V0IiwiaXNCZXR3ZWVuRGVzdGluYXRpb25DbGlwcGVkIiwiZmlyc3QiLCJzZWNvbmQiLCJpc1dpdGhpbkRyb3BwYWJsZSIsImdldEJlc3RDcm9zc0F4aXNEcm9wcGFibGUiLCJkaXN0YW5jZVRvQSIsImRpc3RhbmNlVG9CIiwiZ2V0Q2xvc2VzdERyYWdnYWJsZSIsImNsaWVudFNlbGVjdGlvbiIsInNjcm9sbEp1bXBSZXF1ZXN0IiwiZm9yd2FyZCIsImJhY2t3YXJkIiwibW92ZVRvTmV4dEluZGV4IiwiaW5zdHJ1Y3Rpb24iLCJpbml0aWFsSW5zaWRlIiwiY3VycmVudEluZGV4IiwibW9kaWZ5RGlzcGxhY2VtZW50IiwiZnJvbVJlb3JkZXIiLCJjb21iaW5lSWQiLCJjb21iaW5lSW5kZXgiLCJpc0Rpc3BsYWNlZEZvcndhcmQiLCJ2aXN1YWxJbmRleCIsImZyb21Db21iaW5lIiwiYXRQcm9wb3NlZEluZGV4IiwiaXNJbmNyZWFzaW5nRGlzcGxhY2VtZW50IiwiZ2V0SXNJbmNyZWFzaW5nRGlzcGxhY2VtZW50IiwibGFzdERpc3BsYWNlZCIsInJlbW92ZUNsb3Nlc3QiLCJzY3JvbGxWaWV3cG9ydCIsIndpdGhOZXdEaXNwbGFjZW1lbnQiLCJtb3ZlVG9OZXh0UGxhY2UiLCJwcmV2aW91c0NsaWVudFNlbGVjdGlvbiIsIm9yaWdpbmFsSW5zaWRlRGVzdGluYXRpb24iLCJzaGFsbG93IiwiY3VycmVudEluc2lkZURlc3RpbmF0aW9uIiwibW92ZVRvTmV4dENvbWJpbmUiLCJkaXN0YW5jZSQkMSIsIm1heFNjcm9sbENoYW5nZSIsInNjcm9sbGVkVmlld3BvcnQiLCJzY3JvbGxlZERyb3BwYWJsZSIsImVudHJ5Iiwic3BlY3VsYXRpdmVseUluY3JlYXNlIiwibW92ZUluRGlyZWN0aW9uIiwiaXNBY3R1YWxseU92ZXIiLCJnZXREcm9wcGFibGVPdmVyJDEiLCJpc01haW5BeGlzTW92ZW1lbnRBbGxvd2VkIiwiaXNNb3ZpbmdPbk1haW5BeGlzIiwiX3N0YXRlJGRpbWVuc2lvbnMiLCJpc01vdmVtZW50QWxsb3dlZCIsImdldFJlbWFpbmRlciIsIl9EcmFnRHJvcENvbnRleHQkY2hpbCIsImdldFZlcnRpY2FsIiwiZ2V0SG9yaXpvbnRhbCIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX3VwZGF0ZSIsIm9sZFBhZ2VCb3JkZXJCb3hDZW50ZXIiLCJmb3JjZWRDbGllbnRTZWxlY3Rpb24iLCJmb3JjZWREaW1lbnNpb25zIiwiZm9yY2VkVmlld3BvcnQiLCJmb3JjZWRJbXBhY3QiLCJjdXJyZW50V2luZG93U2Nyb2xsIiwibmV3SW1wYWN0IiwiZ2V0Q2xpZW50Qm9yZGVyQm94Q2VudGVyIiwicmVmcmVzaFNuYXAiLCJuZWVkc1Zpc2liaWxpdHlDaGVjayIsInJlY29tcHV0ZURpc3BsYWNlbWVudFZpc2liaWxpdHkiLCJpc1NuYXBwaW5nIiwicG9zdERyb3BwYWJsZUNoYW5nZSIsImlzRW5hYmxlZENoYW5naW5nIiwiaWRsZSIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX3JlZHVjZXIiLCJfYWN0aW9uJHBheWxvYWQiLCJwYXlsb2FkIiwiaXNEcmFnZ2luZyIsImlzV2luZG93U2Nyb2xsQWxsb3dlZCIsIl9jbGllbnRTZWxlY3Rpb24iLCJfYWN0aW9uJHBheWxvYWQyIiwic2Nyb2xsZWQiLCJfYWN0aW9uJHBheWxvYWQzIiwiX2lkIiwiX3RhcmdldCIsIl9hY3Rpb24kcGF5bG9hZDQiLCJfaWQyIiwiX3RhcmdldDIiLCJfdXBkYXRlZCIsIl92aWV3cG9ydCIsIndpdGhNYXhTY3JvbGwiLCJfcmVzdWx0MiIsInBlbmRpbmciLCJwdWJsaXNoV2hpbGVEcmFnZ2luZyQxIiwiY29sbGVjdGlvblN0YXJ0aW5nIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fdXBkYXRlRHJvcHBhYmxlU2Nyb2xsIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX21vdmUiLCJjbGVhbiIsImNvbXBsZXRlRHJvcCIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX2Ryb3AiLCJkcm9wJDEiLCJuZXdIb21lQ2xpZW50T2Zmc2V0IiwibmV3Q2xpZW50Q2VudGVyIiwiZ2V0TmV3SG9tZUNsaWVudE9mZnNldCIsImRyb3BEdXJhdGlvbiIsImdldERyb3BEdXJhdGlvbiIsImFuaW1hdGVEcm9wIiwid2l0aExvY2F0aW9uIiwic3RhcnRQb3NpdGlvbiIsImVuZFBvc2l0aW9uIiwid2l0aENvbWJpbmUiLCJyZXR1cm5lZFRvU3RhcnQiLCJwcmVzZXQiLCJnZXRBc3luY01hcnNoYWwiLCJlbnRyaWVzIiwidGltZXJJZCIsImV4ZWN1dGUiLCJ3aXRoVGltaW5ncyIsImdldERyYWdTdGFydCIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX2V4ZWN1dGUiLCJyZXNwb25kZXIiLCJhbm5vdW5jZSIsImdldERlZmF1bHRNZXNzYWdlIiwid2lsbEV4cGlyZSIsIndhc0NhbGxlZCIsImlzRXhwaXJlZCIsInRpbWVvdXRJZCIsImdldEV4cGlyaW5nQW5ub3VuY2UiLCJyZXNwb25kZXJzIiwiZ2V0UmVzcG9uZGVycyIsInB1Ymxpc2hlciIsImFzeW5jTWFyc2hhbCIsImRyb3AiLCJvbkRyYWdFbmQiLCJiZWZvcmVTdGFydCIsIm9uQmVmb3JlRHJhZ1N0YXJ0IiwibGFzdENyaXRpY2FsIiwibGFzdExvY2F0aW9uIiwibGFzdENvbWJpbmUiLCJvbkRyYWdTdGFydCIsImhhc0NyaXRpY2FsQ2hhbmdlZCIsImlzRHJhZ2dhYmxlRXF1YWwiLCJpc0Ryb3BwYWJsZUVxdWFsIiwiaXNDcml0aWNhbEVxdWFsIiwiaGFzTG9jYXRpb25DaGFuZ2VkIiwiaGFzR3JvdXBpbmdDaGFuZ2VkIiwiaXNDb21iaW5lRXF1YWwiLCJvbkRyYWdVcGRhdGUiLCJhYm9ydCIsImdldFB1Ymxpc2hlciIsImRyb3BBbmltYXRpb25GaW5pc2giLCJwZW5kaW5nRHJvcCIsInBvc3RBY3Rpb25TdGF0ZSIsImdldE1heFdpbmRvd1Njcm9sbCIsInVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsT25EZXN0aW5hdGlvbkNoYW5nZSIsInNob3VsZENoZWNrT25BY3Rpb24iLCJ3YXNEZXN0aW5hdGlvbkNoYW5nZSIsImdldFVwZGF0ZWRWaWV3cG9ydE1heCIsImNvbXBvc2VFbmhhbmNlcnMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJjcmVhdGVTdG9yZSQxIiwiZ2V0TWFyc2hhbCIsIm1hcnNoYWwiLCJnZXREaW1lbnNpb25NYXJzaGFsIiwic3R5bGVNYXJzaGFsIiwiZ2V0U2Nyb2xsZXIiLCJkcm9wcGluZyIsInJlc3RpbmciLCJzdG9wUHVibGlzaGluZyIsInJlcXVlc3QiLCJzY3JvbGxPcHRpb25zIiwic2hvdWxkUHVibGlzaEltbWVkaWF0ZWx5IiwiX21hcnNoYWwkc3RhcnRQdWJsaXNoIiwic3RhcnRQdWJsaXNoaW5nIiwibGlmdCQxIiwic2hvdWxkRW5kIiwic2hvdWxkQ2FuY2VsUGVuZGluZyIsImNhbmNlbFBlbmRpbmciLCJhdXRvU2Nyb2xsIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fZ2V0V2luZG93U2Nyb2xsIiwiZ2V0SW5pdGlhbFB1Ymxpc2giLCJnZXRWaWV3cG9ydCIsIndpbmRvd1Njcm9sbCIsImNhbGxiYWNrcyIsImdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsIiwiZ2V0RGltZW5zaW9uIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fdGhyb3dJZkFkZE9yUmVtb3ZlT2ZXcm9uZ1R5cGUiLCJjb2xsZWN0aW9uIiwiY3JlYXRlRGltZW5zaW9uTWFyc2hhbCIsImdldEVudHJpZXMiLCJhZHZhbmNlZFVzYWdlV2FybmluZyIsInN0YWdpbmciLCJjb2xsZWN0IiwiX3N0YWdpbmciLCJrZXlzX2RlZmF1bHQiLCJyZWNvbGxlY3QiLCJwdWJsaXNoIiwiY3JlYXRlUHVibGlzaGVyIiwicmVnaXN0ZXJEcmFnZ2FibGUiLCJ1cGRhdGVEcmFnZ2FibGUiLCJ1bnJlZ2lzdGVyRHJhZ2dhYmxlIiwicmVnaXN0ZXJEcm9wcGFibGUiLCJkcm9wcGFibGVDYWxsYmFja3MiLCJ1cGRhdGVEcm9wcGFibGUiLCJ1bnJlZ2lzdGVyRHJvcHBhYmxlIiwidXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkIiwidXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCIsInNjcm9sbERyb3BwYWJsZSIsInVwZGF0ZURyb3BwYWJsZVNjcm9sbCIsImRyYWdTdG9wcGVkIiwiY3VydmVzIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fY29tYmluZSIsImNvbWJpbmluZyIsIm91dE9mVGhlV2F5VGltaW5nIiwib3V0T2ZUaGVXYXlUaW1lIiwiZmx1aWQiLCJzbmFwIiwidGltaW5nIiwib3V0T2ZUaGVXYXkiLCJtb3ZlVG8iLCJ0cmFuc2Zvcm1zIiwiaXNDb21iaW5pbmciLCJ0cmFuc2xhdGUiLCJkcmFnSGFuZGxlIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fcHJlZml4IiwiZ2V0U3R5bGVzIiwiY291bnQiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9nZXRIZWFkIiwiY3JlYXRlU3R5bGVFbCIsImNyZWF0ZVN0eWxlTWFyc2hhbCIsInN0eWxlQ29udGV4dCIsImdyYWJDdXJzb3IiLCJnZXRTZWxlY3RvciIsImF0dHJpYnV0ZSIsImRyYWdIYW5kbGUkJDEiLCJhbHdheXMiLCJkcm9wQW5pbWF0aW5nIiwidXNlckNhbmNlbCIsImdldFN0eWxlcyQxIiwiZHluYW1pYyIsInNldFN0eWxlIiwiaW5uZXJIVE1MIiwibW91bnQiLCJ1bm1vdW50IiwiY2FuU3RhcnREcmFnIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fc2Nyb2xsV2luZG93Iiwic2Nyb2xsQnkiLCJjb3VudCQxIiwidmlzdWFsbHlIaWRkZW4iLCJjbGlwIiwiY2xpcC1wYXRoIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fZ2V0Qm9keSIsImNyZWF0ZUFubm91bmNlciIsImdldFNjcm9sbGFibGVEcm9wcGFibGVzIiwiZ2V0QmVzdFNjcm9sbGFibGVEcm9wcGFibGUiLCJfZGltZW5zaW9uIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fZ2V0U2Nyb2xsYWJsZURyb3BwYWJsZU92ZXIiLCJjb25maWciLCJwZXJjZW50YWdlIiwic3RvcERhbXBlbmluZ0F0IiwiYWNjZWxlcmF0ZUF0IiwiZ2V0UGVyY2VudGFnZSIsInN0YXJ0T2ZSYW5nZSIsImVuZE9mUmFuZ2UiLCJyYW5nZSIsInN0b3BBdCIsImdldFZhbHVlIiwiZGlzdGFuY2VUb0VkZ2UiLCJ0aHJlc2hvbGRzIiwiZHJhZ1N0YXJ0VGltZSIsInNob3VsZFVzZVRpbWVEYW1wZW5pbmciLCJzdGFydFNjcm9sbGluZ0Zyb20iLCJtYXhTY3JvbGxWYWx1ZUF0IiwicGVyY2VudGFnZUZyb21NYXhTY3JvbGxWYWx1ZUF0IiwiZ2V0VmFsdWVGcm9tRGlzdGFuY2UiLCJwcm9wb3NlZFNjcm9sbCIsInJ1blRpbWUiLCJub3dfZGVmYXVsdCIsImJldHdlZW5BY2NlbGVyYXRlQXRBbmRTdG9wQXRQZXJjZW50YWdlIiwiZGFtcGVuVmFsdWVCeVRpbWUiLCJnZXRTY3JvbGxPbkF4aXMiLCJkaXN0YW5jZVRvRWRnZXMiLCJnZXREaXN0YW5jZVRocmVzaG9sZHMiLCJjbGVhbiQzIiwiZ2V0U2Nyb2xsIiwibGltaXRlZCIsImlzVG9vQmlnVmVydGljYWxseSIsImlzVG9vQmlnSG9yaXpvbnRhbGx5IiwiYWRqdXN0Rm9yU2l6ZUxpbWl0cyIsInNtYWxsZXN0U2lnbmVkIiwiZ2V0T3ZlcmxhcCIsInRhcmdldFNjcm9sbCIsIm92ZXJsYXAiLCJjYW5QYXJ0aWFsbHlTY3JvbGwiLCJyYXdNYXgiLCJzbWFsbGVzdENoYW5nZSIsImNhblNjcm9sbFdpbmRvdyIsImNhblNjcm9sbERyb3BwYWJsZSIsInNjcm9sbCQxIiwic2Nyb2xsV2luZG93IiwiX2NoYW5nZSIsImdldFdpbmRvd1Njcm9sbENoYW5nZSIsImdldERyb3BwYWJsZVNjcm9sbENoYW5nZSIsImNyZWF0ZUp1bXBTY3JvbGxlciIsIm1vdmUiLCJzY3JvbGxEcm9wcGFibGVBc011Y2hBc0l0Q2FuIiwiZ2V0RHJvcHBhYmxlT3ZlcmxhcCIsIndoYXRUaGVEcm9wcGFibGVDYW5TY3JvbGwiLCJzY3JvbGxXaW5kb3dBc011Y2hBc0l0Q2FuIiwiZ2V0V2luZG93T3ZlcmxhcCIsIndoYXRUaGVXaW5kb3dDYW5TY3JvbGwiLCJkcm9wcGFibGVSZW1haW5kZXIiLCJ3aW5kb3dSZW1haW5kZXIiLCJtb3ZlQnlPZmZzZXQiLCJjcmVhdGVBdXRvU2Nyb2xsZXIiLCJmbHVpZFNjcm9sbGVyIiwic2NoZWR1bGVXaW5kb3dTY3JvbGwiLCJzY2hlZHVsZURyb3BwYWJsZVNjcm9sbCIsInRyeVNjcm9sbCIsIl9kcmFnZ2luZyIsIndhc1Njcm9sbE5lZWRlZCIsImZha2VTY3JvbGxDYWxsYmFjayIsImNyZWF0ZUZsdWlkU2Nyb2xsZXIiLCJqdW1wU2Nyb2xsIiwicHJlZml4JDEiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9zdG9yZUtleSIsImRyb3BwYWJsZUlkS2V5IiwiZHJvcHBhYmxlVHlwZUtleSIsImRpbWVuc2lvbk1hcnNoYWxLZXkiLCJzdHlsZUNvbnRleHRLZXkiLCJjYW5MaWZ0Q29udGV4dEtleSIsInByaW50RmF0YWxEZXZFcnJvciIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX0RyYWdEcm9wQ29udGV4dCIsIkRyYWdEcm9wQ29udGV4dCIsImRpbWVuc2lvbk1hcnNoYWwiLCJhdXRvU2Nyb2xsZXIiLCJhbm5vdW5jZXIiLCJjYW5MaWZ0Iiwib25GYXRhbEVycm9yIiwib25XaW5kb3dFcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiX0Ryb3BwYWJsZURpbWVuc2lvblB1IiwiaXNFcXVhbCQyIiwiaXNTY3JvbGwiLCJpc0F1dG8iLCJpc0VpdGhlciIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImlzRWxlbWVudFNjcm9sbGFibGUiLCJnZXRDbG9zZXN0U2Nyb2xsYWJsZSIsInBhcmVudEVsZW1lbnQiLCJnZXRTY3JvbGwkMSIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJnZXRFbnYiLCJjbG9zZXN0U2Nyb2xsYWJsZSIsImdldElzRml4ZWQiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9nZXREaW1lbnNpb24iLCJlbnYiLCJpc0Ryb3BEaXNhYmxlZCIsInRhcmdldFJlZiIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX2dldENsaWVudCIsImdldENsb3Nlc3RTY3JvbGxhYmxlJDEiLCJkZWxheWVkIiwiZ2V0TGlzdGVuZXJPcHRpb25zIiwid2l0aG91dFBsYWNlaG9sZGVyIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fRHJvcHBhYmxlRGltZW5zaW9uUHVibGlzaGVyIiwiRHJvcHBhYmxlRGltZW5zaW9uUHVibGlzaGVyIiwicHVibGlzaGVkRGVzY3JpcHRvciIsImdldENsb3Nlc3RTY3JvbGwiLCJtZW1vaXplZFVwZGF0ZVNjcm9sbCIsInVwZGF0ZVNjcm9sbCIsInNjaGVkdWxlU2Nyb2xsVXBkYXRlIiwib25DbG9zZXN0U2Nyb2xsIiwiZ2V0TWVtb2l6ZWREZXNjcmlwdG9yIiwidW5wdWJsaXNoIiwiZ2V0UGxhY2Vob2xkZXJSZWYiLCJpZ25vcmVDb250YWluZXJDbGlwcGluZyIsImdldERyb3BwYWJsZVJlZiIsImlzRGlzYWJsZWRDaGFuZ2VkIiwiaXNDb21iaW5lQ2hhbmdlZCIsIl9Ecm9wcGFibGUkY29udGV4dFR5cCIsIl9Ecm9wcGFibGUkY2hpbGRDb250ZSIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX1BsYWNlaG9sZGVyIiwiX1B1cmVDb21wb25lbnQiLCJQbGFjZWhvbGRlciIsInRocm93SWZSZWZJc0ludmFsaWQiLCJIVE1MRWxlbWVudCIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX0Ryb3BwYWJsZSIsIkRyb3BwYWJsZSIsInBsYWNlaG9sZGVyUmVmIiwic2V0UGxhY2Vob2xkZXJSZWYiLCJ3YXJuSWZQbGFjZWhvbGRlck5vdE1vdW50ZWQiLCJnZXRQbGFjZWhvbGRlciIsImlzRHJhZ2dpbmdPdmVyIiwiZHJhZ2dpbmdPdmVyV2l0aCIsImRyb3BwYWJsZVByb3BzIiwiZGF0YS1yZWFjdC1iZWF1dGlmdWwtZG5kLWRyb3BwYWJsZSIsIl9EcmFnZ2FibGVEaW1lbnNpb25QdSIsImlzU3RyaWN0RXF1YWwiLCJkZWZhdWx0TWFwUHJvcHMiLCJDb25uZWN0ZWREcm9wcGFibGUiLCJnZXRNYXBQcm9wcyIsImdldERyYWdnaW5nT3ZlclByb3BzIiwiX2RyYWdnYWJsZSIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX0RyYWdnYWJsZURpbWVuc2lvblB1Ymxpc2hlciIsIkRyYWdnYWJsZURpbWVuc2lvblB1Ymxpc2hlciIsImdldERyYWdnYWJsZVJlZiIsImNvbXB1dGVkU3R5bGVzIiwiaXNCb3VuZCIsInVuYmluZCIsIm9uV2luZG93Rm9jdXNDaGFuZ2UiLCJfcHJldmVudGVkS2V5cyIsIl9zY3JvbGxKdW1wS2V5cyIsIl9EcmFnSGFuZGxlJGNvbnRleHRUeSIsImdldFdpbmRvd0Zyb21SZWYiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV90aHJvd0lmU1ZHIiwiU1ZHRWxlbWVudCIsImlzU1ZHIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fZ2V0RHJhZ0hhbmRsZVJlZiIsImRyYWdnYWJsZVJlZiIsImhhc0F0dHJpYnV0ZSIsInJldGFpbmluZ0ZvY3VzRm9yIiwibGlzdGVuZXJPcHRpb25zIiwiY2xlYXJSZXRlbnRpb25PbkZvY3VzQ2hhbmdlIiwicmV0YWluZXIiLCJkcmFnSGFuZGxlUmVmIiwiaW50ZXJhY3RpdmVUYWdOYW1lcyIsInNlbGVjdCIsIm9wdGdyb3VwIiwidmlkZW8iLCJhdWRpbyIsInNob3VsZEFsbG93RHJhZ2dpbmdGcm9tVGFyZ2V0IiwiY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMiLCJpc0FuSW50ZXJhY3RpdmVFbGVtZW50IiwiY3JlYXRlU2NoZWR1bGVyIiwibWVtb2l6ZWRNb3ZlIiwib25Nb3ZlIiwibW92ZVVwIiwib25Nb3ZlVXAiLCJtb3ZlRG93biIsIm9uTW92ZURvd24iLCJtb3ZlUmlnaHQiLCJvbk1vdmVSaWdodCIsIm1vdmVMZWZ0Iiwib25Nb3ZlTGVmdCIsIndpbmRvd1Njcm9sbE1vdmUiLCJvbldpbmRvd1Njcm9sbCIsInByZXZlbnRlZEtleXMiLCJwcmV2ZW50U3RhbmRhcmRLZXlFdmVudHMiLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9nZXRPcHRpb25zIiwiZnJvbUJpbmRpbmciLCJiaW5kRXZlbnRzIiwiYmluZGluZ3MiLCJzaGFyZWRPcHRpb25zIiwiYmluZGluZyIsInVuYmluZEV2ZW50cyIsImNyZWF0ZVBvc3REcmFnRXZlbnRQcmV2ZW50ZXIiLCJnZXRXaW5kb3ciLCJwcmV2ZW50TmV4dCIsImNyZWF0ZUV2ZW50TWFyc2hhbCIsImlzTW91c2VEb3duSGFuZGxlZCIsImhhbmRsZSIsImlzSGFuZGxlZCIsInJlc2V0Iiwic3VwcG9ydGVkRXZlbnROYW1lIiwicmVhY3RfYmVhdXRpZnVsX2RuZF9lc21fbm9vcCIsIm1vdXNlRG93bk1hcnNoYWwiLCJjcmVhdGVNb3VzZVNlbnNvciIsImNhblN0YXJ0Q2FwdHVyaW5nIiwibmV3U3RhdGUiLCJpc0NhcHR1cmluZyIsInNjaGVkdWxlIiwicG9zdERyYWdFdmVudFByZXZlbnRlciIsInN0b3BEcmFnZ2luZyIsInNob3VsZEJsb2NrQ2xpY2siLCJ1bmJpbmRXaW5kb3dFdmVudHMiLCJzdG9wUGVuZGluZ0RyYWciLCJraWxsIiwib25DYW5jZWwiLCJ3aW5kb3dCaW5kaW5ncyIsInN0YXJ0RHJhZ2dpbmciLCJvbkxpZnQiLCJvbkRyb3AiLCJ3ZWJraXRGb3JjZSIsIk1vdXNlRXZlbnQiLCJXRUJLSVRfRk9SQ0VfQVRfRk9SQ0VfTU9VU0VfRE9XTiIsImZvcmNlUHJlc3NUaHJlc2hvbGQiLCJiaW5kV2luZG93RXZlbnRzIiwiY3RybEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsInN0YXJ0UGVuZGluZ0RyYWciLCJzY3JvbGxKdW1wS2V5cyIsIm5vb3AkMSIsImNyZWF0ZUtleWJvYXJkU2Vuc29yIiwicG9zdERyYWdGbiIsInRvdWNoU3RhcnRNYXJzaGFsIiwibm9vcCQyIiwid2Via2l0SGFjayIsInN0dWIiLCJwcmV2ZW50VG91Y2hNb3ZlIiwicmVsZWFzZVRvdWNoTW92ZSIsImlzQmxvY2tpbmciLCJyZWFjdF9iZWF1dGlmdWxfZG5kX2VzbV9pbml0aWFsIiwiaGFzTW92ZWQiLCJsb25nUHJlc3NUaW1lcklkIiwiY3JlYXRlVG91Y2hTZW5zb3IiLCJwYXJ0aWFsIiwiX2V2ZW50JHRvdWNoZXMkIiwiZm9yY2UiLCJ0b3VjaCIsInByZXZlbnRIdG1sNURuZCIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX0RyYWdIYW5kbGUiLCJEcmFnSGFuZGxlIiwibW91c2VTZW5zb3IiLCJrZXlib2FyZFNlbnNvciIsInRvdWNoU2Vuc29yIiwic2Vuc29ycyIsImlzRm9jdXNlZCIsImxhc3REcmFnZ2FibGVSZWYiLCJpc0FueVNlbnNvckNhcHR1cmluZyIsInNvbWUiLCJzZW5zb3IiLCJnZXRQcm92aWRlZCIsImRhdGEtcmVhY3QtYmVhdXRpZnVsLWRuZC1kcmFnLWhhbmRsZSIsImFyaWEtcm9sZWRlc2NyaXB0aW9uIiwid2FzRHJhZ2dpbmciLCJpc0Ryb3BBbmltYXRpbmciLCJfRHJhZ2dhYmxlJGNvbnRleHRUeXAiLCJ6SW5kZXhPcHRpb25zIiwiZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uIiwic2hvdWxkQW5pbWF0ZURyYWdNb3ZlbWVudCIsImdldERyYWdnaW5nT3BhY2l0eSIsImdldFNob3VsZERyYWdnaW5nQW5pbWF0ZSIsInJlYWN0X2JlYXV0aWZ1bF9kbmRfZXNtX0RyYWdnYWJsZSIsIkRyYWdnYWJsZSIsIm9uTW92ZUVuZCIsImRyb3BBbmltYXRpb25GaW5pc2hlZCIsImlzRHJhZ0Rpc2FibGVkIiwibGlmdCIsImdldERyYWdnaW5nU3R5bGUiLCJjb21iaW5lV2l0aCIsImdldFNlY29uZGFyeVN0eWxlIiwic2hvdWxkQW5pbWF0ZURpc3BsYWNlbWVudCIsImdldERyYWdnaW5nUHJvdmlkZWQiLCJkcmFnSGFuZGxlUHJvcHMiLCJpc0Ryb3BwaW5nIiwiZHJhZ2dhYmxlUHJvcHMiLCJkYXRhLXJlYWN0LWJlYXV0aWZ1bC1kbmQtZHJhZ2dhYmxlIiwiZ2V0U2Vjb25kYXJ5UHJvdmlkZWQiLCJnZXREcmFnZ2luZ1NuYXBzaG90IiwiZHJvcEFuaW1hdGlvbiIsImRyYWdnaW5nT3ZlciIsImNvbWJpbmVUYXJnZXRGb3IiLCJnZXRTZWNvbmRhcnlTbmFwc2hvdCIsInJlbmRlckNoaWxkcmVuIiwiX2NoaWxkIiwibW92ZUJ5V2luZG93U2Nyb2xsIiwiZGlzYWJsZUludGVyYWN0aXZlRWxlbWVudEJsb2NraW5nIiwiZ2V0Q29tYmluZVdpdGgiLCJkZWZhdWx0TWFwUHJvcHMkMSIsIkNvbm5lY3RlZERyYWdnYWJsZSIsIm1lbW9pemVkT2Zmc2V0IiwiZ2V0U2Vjb25kYXJ5UHJvcHMiLCJnZXREcmFnZ2luZ1Byb3BzIiwiZ2V0U2Vjb25kYXJ5TW92ZW1lbnQiLCJvd25JZCIsImRyYWdnaW5nSWQiLCJpc0NvbWJpbmVkV2l0aCIsIl9kcmFnZ2luZ092ZXIiLCJfY29tYmluZVdpdGgiLCJfbW9kZSIsImN1cnZlIiwic2NhbGUiLCJkcmFnZ2luZ1NlbGVjdG9yIiwic2Vjb25kYXJ5U2VsZWN0b3IiLCJTaXplIiwiQnV0dG9uQ29sb3IiLCJCdXR0b25WYXJpYW50IiwiU29ydGVkTGlzdCIsImNvbnNvbGUiLCJsb2ciLCJjaGlsZHMiLCJCdXR0b25fZGVmYXVsdCIsIk91dGxpbmVkIiwiRGVmYXVsdCIsIlNtYWxsIiwiSWNvbkJ1dHRvbl9kZWZhdWx0IiwiQ29udHJvbF9Db250cm9sIiwiQ29udHJvbCIsIlBhcGVyX2RlZmF1bHQiLCJJbnB1dEJhc2VfZGVmYXVsdCIsIkRpdmlkZXJfZGVmYXVsdCIsIlVJX0ljb25CdXR0b24iLCJQcmltYXJ5IiwiYXJpYS1sYWJlbCIsIlVJX0NvbnRyb2wiLCJjb3JlX3N0eWxlcyIsImljb25CdXR0b24iLCJDb250cm9scyIsIkFkZENpcmNsZV9kZWZhdWx0IiwiU2lkZWJhciIsIkNvbXBvbmVudHNfQ29udHJvbHMiLCJVSV9Tb3J0ZWRMaXN0IiwiQXBwX0FwcCIsIkFwcCIsIkNzc0Jhc2VsaW5lX2RlZmF1bHQiLCJVSV9MYXlvdXQiLCJDb21wb25lbnRzX1NpZGViYXIiLCJDb21wb25lbnRzX0FwcCIsInNyY19zdG9yZSIsImV4dGVybmFsX1JlYWN0RE9NX2RlZmF1bHQiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlB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V0FDSCxPQUFPNHNELEdBQUEsR0FDRnp4QyxFQUFLLENBQ1JzNUMsT0FBUWg3QixFQUFPZzdCLFNBRW5CLFFBQ0UsT0FBT3Q1QyxLRFRiMnZFLEdBQU0xbkMsU0RPMkIsQ0FDL0JwakQsS0FBTSxXQUNOeTBELE9BQVEsSUFBSTE5RCxRQ1BkZzBGLEVBQUEvMEYsRUFBU3dLLE9BQ1BraUQsRUFBQTFzRCxFQUFBbUgsY0FBQ2ttRCxFQUFRLENBQUN4aEIsTUFBT2lwRCxJQUNmcG9DLEVBQUExc0QsRUFBQW1ILGNBQUMwdEYsR0FBRyxPQUVOempGLFNBQVM0akYsZUFBZSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9wdWJsaWMvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyNDEpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIGRlZmF1bHQ6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsInZhciBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlID0gcmVxdWlyZShcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllczsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiLyoqIEBsaWNlbnNlIE1hdGVyaWFsLVVJIHYzLjAuMC1hbHBoYS4xXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29tcG9uZW50UHJvcFR5cGUgfSBmcm9tICcuL2NvbXBvbmVudFByb3BUeXBlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXhhY3RQcm9wIH0gZnJvbSAnLi9leGFjdFByb3AnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZXREaXNwbGF5TmFtZSB9IGZyb20gJy4vZ2V0RGlzcGxheU5hbWUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwb255ZmlsbEdsb2JhbCB9IGZyb20gJy4vcG9ueWZpbGxHbG9iYWwnO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc2hlZXRzTWFuYWdlciA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbnZhciBfanNzID0gcmVxdWlyZShcImpzc1wiKTtcblxudmFyIF9yZWFjdEpzc0NvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlYWN0SnNzQ29udGV4dFwiKSk7XG5cbnZhciBfanNzUHJlc2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9qc3NQcmVzZXRcIikpO1xuXG52YXIgX21lcmdlQ2xhc3NlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWVyZ2VDbGFzc2VzXCIpKTtcblxudmFyIF9tdWx0aUtleVN0b3JlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tdWx0aUtleVN0b3JlXCIpKTtcblxudmFyIF9jcmVhdGVNdWlUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlTXVpVGhlbWVcIikpO1xuXG52YXIgX3RoZW1lTGlzdGVuZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RoZW1lTGlzdGVuZXJcIikpO1xuXG52YXIgX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZVwiKSk7XG5cbnZhciBfZ2V0U3R5bGVzQ3JlYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0U3R5bGVzQ3JlYXRvclwiKSk7XG5cbnZhciBfZ2V0VGhlbWVQcm9wcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0VGhlbWVQcm9wc1wiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4vLyBEZWZhdWx0IEpTUyBpbnN0YW5jZS5cbnZhciBqc3MgPSAoMCwgX2pzcy5jcmVhdGUpKCgwLCBfanNzUHJlc2V0LmRlZmF1bHQpKCkpOyAvLyBVc2UgYSBzaW5nbGV0b24gb3IgdGhlIHByb3ZpZGVkIG9uZSBieSB0aGUgY29udGV4dC5cbi8vXG4vLyBUaGUgY291bnRlci1iYXNlZCBhcHByb2FjaCBkb2Vzbid0IHRvbGVyYXRlIGFueSBtaXN0YWtlLlxuLy8gSXQncyBtdWNoIHNhZmVyIHRvIHVzZSB0aGUgc2FtZSBjb3VudGVyIGV2ZXJ5d2hlcmUuXG5cbnZhciBnZW5lcmF0ZUNsYXNzTmFtZSA9ICgwLCBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuZGVmYXVsdCkoKTsgLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgYXQgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGRzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG5cbnZhciBpbmRleENvdW50ZXIgPSAtMTBlMTA7IC8vIEV4cG9ydGVkIGZvciB0ZXN0IHB1cnBvc2VzXG5cbnZhciBzaGVldHNNYW5hZ2VyID0gbmV3IE1hcCgpOyAvLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cblxuZXhwb3J0cy5zaGVldHNNYW5hZ2VyID0gc2hlZXRzTWFuYWdlcjtcbnZhciBub29wVGhlbWUgPSB7fTsgLy8gSW4gb3JkZXIgdG8gaGF2ZSBzZWxmLXN1cHBvcnRpbmcgY29tcG9uZW50cywgd2UgcmVseSBvbiBkZWZhdWx0IHRoZW1lIHdoZW4gbm90IHByb3ZpZGVkLlxuXG52YXIgZGVmYXVsdFRoZW1lID0gKDAsIF9jcmVhdGVNdWlUaGVtZS5kZWZhdWx0KSh7XG4gIHR5cG9ncmFwaHk6IHtcbiAgICBzdXBwcmVzc1dhcm5pbmc6IHRydWVcbiAgfVxufSk7IC8vIExpbmsgYSBzdHlsZSBzaGVldCB3aXRoIGEgY29tcG9uZW50LlxuLy8gSXQgZG9lcyBub3QgbW9kaWZ5IHRoZSBjb21wb25lbnQgcGFzc2VkIHRvIGl0O1xuLy8gaW5zdGVhZCwgaXQgcmV0dXJucyBhIG5ldyBjb21wb25lbnQsIHdpdGggYSBgY2xhc3Nlc2AgcHJvcGVydHkuXG5cbnZhciB3aXRoU3R5bGVzT2xkID0gZnVuY3Rpb24gd2l0aFN0eWxlc09sZChzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICB2YXIgX29wdGlvbnMkd2l0aFRoZW1lID0gb3B0aW9ucy53aXRoVGhlbWUsXG4gICAgICAgIHdpdGhUaGVtZSA9IF9vcHRpb25zJHdpdGhUaGVtZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoVGhlbWUsXG4gICAgICAgIF9vcHRpb25zJGZsaXAgPSBvcHRpb25zLmZsaXAsXG4gICAgICAgIGZsaXAgPSBfb3B0aW9ucyRmbGlwID09PSB2b2lkIDAgPyBudWxsIDogX29wdGlvbnMkZmxpcCxcbiAgICAgICAgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgICAgc3R5bGVTaGVldE9wdGlvbnMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShvcHRpb25zLCBbXCJ3aXRoVGhlbWVcIiwgXCJmbGlwXCIsIFwibmFtZVwiXSk7XG4gICAgdmFyIHN0eWxlc0NyZWF0b3IgPSAoMCwgX2dldFN0eWxlc0NyZWF0b3IuZGVmYXVsdCkoc3R5bGVzT3JDcmVhdG9yKTtcbiAgICB2YXIgbGlzdGVuVG9UaGVtZSA9IHN0eWxlc0NyZWF0b3IudGhlbWluZ0VuYWJsZWQgfHwgdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IHdpdGhUaGVtZTtcbiAgICBpbmRleENvdW50ZXIgKz0gMTtcbiAgICBzdHlsZXNDcmVhdG9yLm9wdGlvbnMuaW5kZXggPSBpbmRleENvdW50ZXI7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGluZGV4Q291bnRlciA8IDAsIFsnTWF0ZXJpYWwtVUk6IHlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBpbmRleENvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcblxuICAgIHZhciBXaXRoU3R5bGVzID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAgICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFdpdGhTdHlsZXMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcztcblxuICAgICAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBXaXRoU3R5bGVzKTtcbiAgICAgICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFdpdGhTdHlsZXMpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcbiAgICAgICAgX3RoaXMuanNzID0gY29udGV4dFtfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuanNzXSB8fCBqc3M7XG4gICAgICAgIF90aGlzLnNoZWV0c01hbmFnZXIgPSBzaGVldHNNYW5hZ2VyO1xuICAgICAgICBfdGhpcy51bnN1YnNjcmliZUlkID0gbnVsbDtcbiAgICAgICAgdmFyIG11aVRoZW1lUHJvdmlkZXJPcHRpb25zID0gY29udGV4dC5tdWlUaGVtZVByb3ZpZGVyT3B0aW9ucztcblxuICAgICAgICBpZiAobXVpVGhlbWVQcm92aWRlck9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAobXVpVGhlbWVQcm92aWRlck9wdGlvbnMuc2hlZXRzTWFuYWdlcikge1xuICAgICAgICAgICAgX3RoaXMuc2hlZXRzTWFuYWdlciA9IG11aVRoZW1lUHJvdmlkZXJPcHRpb25zLnNoZWV0c01hbmFnZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuc2hlZXRzQ2FjaGUgPSBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucy5zaGVldHNDYWNoZTtcbiAgICAgICAgICBfdGhpcy5kaXNhYmxlU3R5bGVzR2VuZXJhdGlvbiA9IG11aVRoZW1lUHJvdmlkZXJPcHRpb25zLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uO1xuICAgICAgICB9IC8vIEF0dGFjaCB0aGUgc3R5bGVzQ3JlYXRvciB0byB0aGUgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudCBhcyBpbiB0aGUgY29udGV4dFxuICAgICAgICAvLyBvZiByZWFjdC1ob3QtbG9hZGVyIHRoZSBob29rcyBjYW4gYmUgZXhlY3V0ZWQgaW4gYSBkaWZmZXJlbnQgY2xvc3VyZSBjb250ZXh0OlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2FlYXJvbi9yZWFjdC1ob3QtbG9hZGVyL2Jsb2IvbWFzdGVyL3NyYy9wYXRjaC5kZXYuanMjTDEwN1xuXG5cbiAgICAgICAgX3RoaXMuc3R5bGVzQ3JlYXRvclNhdmVkID0gc3R5bGVzQ3JlYXRvcjtcbiAgICAgICAgX3RoaXMuc2hlZXRPcHRpb25zID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAgZ2VuZXJhdGVDbGFzc05hbWU6IGdlbmVyYXRlQ2xhc3NOYW1lXG4gICAgICAgIH0sIGNvbnRleHRbX3JlYWN0SnNzQ29udGV4dC5kZWZhdWx0LnNoZWV0T3B0aW9uc10pOyAvLyBXZSB1c2UgfHwgYXMgdGhlIGZ1bmN0aW9uIGNhbGwgaXMgbGF6eSBldmFsdWF0ZWQuXG5cbiAgICAgICAgX3RoaXMudGhlbWUgPSBsaXN0ZW5Ub1RoZW1lID8gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5pbml0aWFsKGNvbnRleHQpIHx8IGRlZmF1bHRUaGVtZSA6IG5vb3BUaGVtZTtcblxuICAgICAgICBfdGhpcy5hdHRhY2goX3RoaXMudGhlbWUpO1xuXG4gICAgICAgIF90aGlzLmNhY2hlQ2xhc3NlcyA9IHtcbiAgICAgICAgICAvLyBDYWNoZSBmb3IgdGhlIGZpbmFsaXplZCBjbGFzc2VzIHZhbHVlLlxuICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIGNsYXNzZXMgcHJvcCBwb2ludGVyLlxuICAgICAgICAgIGxhc3RQcm9wOiBudWxsLFxuICAgICAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIHJlbmRlcmVkIGNsYXNzZXMgcG9pbnRlci5cbiAgICAgICAgICBsYXN0SlNTOiB7fVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFdpdGhTdHlsZXMsIFt7XG4gICAgICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICBpZiAoIWxpc3RlblRvVGhlbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlSWQgPSBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LnN1YnNjcmliZSh0aGlzLmNvbnRleHQsIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICAgICAgdmFyIG9sZFRoZW1lID0gX3RoaXMyLnRoZW1lO1xuICAgICAgICAgICAgX3RoaXMyLnRoZW1lID0gdGhlbWU7XG5cbiAgICAgICAgICAgIF90aGlzMi5hdHRhY2goX3RoaXMyLnRoZW1lKTsgLy8gUmVyZW5kZXIgdGhlIGNvbXBvbmVudCBzbyB0aGUgdW5kZXJseWluZyBjb21wb25lbnQgZ2V0cyB0aGUgdGhlbWUgdXBkYXRlLlxuICAgICAgICAgICAgLy8gQnkgdGhlbWUgdXBkYXRlIHdlIG1lYW4gcmVjZWl2aW5nIGFuZCBhcHBseWluZyB0aGUgbmV3IGNsYXNzIG5hbWVzLlxuXG5cbiAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7fSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczIuZGV0YWNoKG9sZFRoZW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgICAvLyByZWFjdC1ob3QtbG9hZGVyIHNwZWNpZmljIGxvZ2ljXG4gICAgICAgICAgaWYgKHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkID09PSBzdHlsZXNDcmVhdG9yIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmRldGFjaCh0aGlzLnRoZW1lKTtcbiAgICAgICAgICB0aGlzLnN0eWxlc0NyZWF0b3JTYXZlZCA9IHN0eWxlc0NyZWF0b3I7XG4gICAgICAgICAgdGhpcy5hdHRhY2godGhpcy50aGVtZSk7XG4gICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgICAgdGhpcy5kZXRhY2godGhpcy50aGVtZSk7XG5cbiAgICAgICAgICBpZiAodGhpcy51bnN1YnNjcmliZUlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LnVuc3Vic2NyaWJlKHRoaXMuY29udGV4dCwgdGhpcy51bnN1YnNjcmliZUlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldENsYXNzZXNcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENsYXNzZXMoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNsYXNzZXMgfHwge307XG4gICAgICAgICAgfSAvLyBUcmFja3MgaWYgZWl0aGVyIHRoZSByZW5kZXJlZCBjbGFzc2VzIG9yIGNsYXNzZXMgcHJvcCBoYXMgY2hhbmdlZCxcbiAgICAgICAgICAvLyByZXF1aXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgZmluYWxpemVkIGNsYXNzZXMgb2JqZWN0LlxuXG5cbiAgICAgICAgICB2YXIgZ2VuZXJhdGUgPSBmYWxzZTtcblxuICAgICAgICAgIHZhciBzaGVldE1hbmFnZXIgPSBfbXVsdGlLZXlTdG9yZS5kZWZhdWx0LmdldCh0aGlzLnNoZWV0c01hbmFnZXIsIHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkLCB0aGlzLnRoZW1lKTtcblxuICAgICAgICAgIGlmIChzaGVldE1hbmFnZXIuc2hlZXQuY2xhc3NlcyAhPT0gdGhpcy5jYWNoZUNsYXNzZXMubGFzdEpTUykge1xuICAgICAgICAgICAgdGhpcy5jYWNoZUNsYXNzZXMubGFzdEpTUyA9IHNoZWV0TWFuYWdlci5zaGVldC5jbGFzc2VzO1xuICAgICAgICAgICAgZ2VuZXJhdGUgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNsYXNzZXMgIT09IHRoaXMuY2FjaGVDbGFzc2VzLmxhc3RQcm9wKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlQ2xhc3Nlcy5sYXN0UHJvcCA9IHRoaXMucHJvcHMuY2xhc3NlcztcbiAgICAgICAgICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZ2VuZXJhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVDbGFzc2VzLnZhbHVlID0gKDAsIF9tZXJnZUNsYXNzZXMuZGVmYXVsdCkoe1xuICAgICAgICAgICAgICBiYXNlQ2xhc3NlczogdGhpcy5jYWNoZUNsYXNzZXMubGFzdEpTUyxcbiAgICAgICAgICAgICAgbmV3Q2xhc3NlczogdGhpcy5wcm9wcy5jbGFzc2VzLFxuICAgICAgICAgICAgICBDb21wb25lbnQ6IENvbXBvbmVudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVDbGFzc2VzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJhdHRhY2hcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaCh0aGVtZSkge1xuICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlc0NyZWF0b3JTYXZlZCA9IHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkO1xuXG4gICAgICAgICAgdmFyIHNoZWV0TWFuYWdlciA9IF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuZ2V0KHRoaXMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvclNhdmVkLCB0aGVtZSk7XG5cbiAgICAgICAgICBpZiAoIXNoZWV0TWFuYWdlcikge1xuICAgICAgICAgICAgc2hlZXRNYW5hZ2VyID0ge1xuICAgICAgICAgICAgICByZWZzOiAwLFxuICAgICAgICAgICAgICBzaGVldDogbnVsbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgX211bHRpS2V5U3RvcmUuZGVmYXVsdC5zZXQodGhpcy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yU2F2ZWQsIHRoZW1lLCBzaGVldE1hbmFnZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaGVldE1hbmFnZXIucmVmcyA9PT0gMCkge1xuICAgICAgICAgICAgdmFyIHNoZWV0O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zaGVldHNDYWNoZSkge1xuICAgICAgICAgICAgICBzaGVldCA9IF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuZ2V0KHRoaXMuc2hlZXRzQ2FjaGUsIHN0eWxlc0NyZWF0b3JTYXZlZCwgdGhlbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXNoZWV0KSB7XG4gICAgICAgICAgICAgIHNoZWV0ID0gdGhpcy5jcmVhdGVTaGVldCh0aGVtZSk7XG4gICAgICAgICAgICAgIHNoZWV0LmF0dGFjaCgpO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLnNoZWV0c0NhY2hlKSB7XG4gICAgICAgICAgICAgICAgX211bHRpS2V5U3RvcmUuZGVmYXVsdC5zZXQodGhpcy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvclNhdmVkLCB0aGVtZSwgc2hlZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNoZWV0TWFuYWdlci5zaGVldCA9IHNoZWV0O1xuICAgICAgICAgICAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gdGhpcy5jb250ZXh0W19yZWFjdEpzc0NvbnRleHQuZGVmYXVsdC5zaGVldHNSZWdpc3RyeV07XG5cbiAgICAgICAgICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgICAgICAgICBzaGVldHNSZWdpc3RyeS5hZGQoc2hlZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNoZWV0TWFuYWdlci5yZWZzICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNyZWF0ZVNoZWV0XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVTaGVldCh0aGVtZSkge1xuICAgICAgICAgIHZhciBzdHlsZXMgPSB0aGlzLnN0eWxlc0NyZWF0b3JTYXZlZC5jcmVhdGUodGhlbWUsIG5hbWUpO1xuICAgICAgICAgIHZhciBtZXRhID0gbmFtZTtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFtZXRhKSB7XG4gICAgICAgICAgICAvLyBQcm92aWRlIGEgYmV0dGVyIERYIG91dHNpZGUgcHJvZHVjdGlvbi5cbiAgICAgICAgICAgIG1ldGEgPSAoMCwgX3V0aWxzLmdldERpc3BsYXlOYW1lKShDb21wb25lbnQpO1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJywgWydNYXRlcmlhbC1VSTogdGhlIGNvbXBvbmVudCBkaXNwbGF5TmFtZSBpcyBpbnZhbGlkLiBJdCBuZWVkcyB0byBiZSBhIHN0cmluZy4nLCBcIlBsZWFzZSBmaXggdGhlIGZvbGxvd2luZyBjb21wb25lbnQ6IFwiLmNvbmNhdChDb21wb25lbnQsIFwiLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzaGVldCA9IHRoaXMuanNzLmNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgICAgICAgIG1ldGE6IG1ldGEsXG4gICAgICAgICAgICBjbGFzc05hbWVQcmVmaXg6IG1ldGEsXG4gICAgICAgICAgICBmbGlwOiB0eXBlb2YgZmxpcCA9PT0gJ2Jvb2xlYW4nID8gZmxpcCA6IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcsXG4gICAgICAgICAgICBsaW5rOiBmYWxzZVxuICAgICAgICAgIH0sIHRoaXMuc2hlZXRPcHRpb25zLCB0aGlzLnN0eWxlc0NyZWF0b3JTYXZlZC5vcHRpb25zLCB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZVxuICAgICAgICAgIH0sIHN0eWxlU2hlZXRPcHRpb25zKSk7XG4gICAgICAgICAgcmV0dXJuIHNoZWV0O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJkZXRhY2hcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCh0aGVtZSkge1xuICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNoZWV0TWFuYWdlciA9IF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuZ2V0KHRoaXMuc2hlZXRzTWFuYWdlciwgdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQsIHRoZW1lKTtcblxuICAgICAgICAgIHNoZWV0TWFuYWdlci5yZWZzIC09IDE7XG5cbiAgICAgICAgICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICAgICAgICAgIF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuZGVsZXRlKHRoaXMuc2hlZXRzTWFuYWdlciwgdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQsIHRoZW1lKTtcblxuICAgICAgICAgICAgdGhpcy5qc3MucmVtb3ZlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuc2hlZXQpO1xuICAgICAgICAgICAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gdGhpcy5jb250ZXh0W19yZWFjdEpzc0NvbnRleHQuZGVmYXVsdC5zaGVldHNSZWdpc3RyeV07XG5cbiAgICAgICAgICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgICAgICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyLnNoZWV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wcy5jbGFzc2VzLFxuICAgICAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiaW5uZXJSZWZcIl0pO1xuICAgICAgICAgIHZhciBtb3JlID0gKDAsIF9nZXRUaGVtZVByb3BzLmRlZmF1bHQpKHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGlzLnRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pOyAvLyBQcm92aWRlIHRoZSB0aGVtZSB0byB0aGUgd3JhcHBlZCBjb21wb25lbnQuXG4gICAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuICAgICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICAgIG1vcmUudGhlbWUgPSB0aGlzLnRoZW1lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgbW9yZSwge1xuICAgICAgICAgICAgY2xhc3NlczogdGhpcy5nZXRDbGFzc2VzKCksXG4gICAgICAgICAgICByZWY6IGlubmVyUmVmXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XSk7XG4gICAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgICB9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBXaXRoU3R5bGVzLnByb3BUeXBlcyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgICAgICovXG4gICAgICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGRlY29yYXRlZCBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGlubmVyUmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pXG4gICAgfSA6IHZvaWQgMDtcbiAgICBXaXRoU3R5bGVzLmNvbnRleHRUeXBlcyA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoKF9leHRlbmRzMiA9IHtcbiAgICAgIG11aVRoZW1lUHJvdmlkZXJPcHRpb25zOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG4gICAgfSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2V4dGVuZHMyLCBfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuanNzLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2V4dGVuZHMyLCBfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuc2hlZXRPcHRpb25zLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2V4dGVuZHMyLCBfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuc2hlZXRzUmVnaXN0cnksIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QpLCBfZXh0ZW5kczIpLCBsaXN0ZW5Ub1RoZW1lID8gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5jb250ZXh0VHlwZXMgOiB7fSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgV2l0aFN0eWxlcy5kaXNwbGF5TmFtZSA9IFwiV2l0aFN0eWxlcyhcIi5jb25jYXQoKDAsIF91dGlscy5nZXREaXNwbGF5TmFtZSkoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgICgwLCBfaG9pc3ROb25SZWFjdFN0YXRpY3MuZGVmYXVsdCkoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFdpdGhTdHlsZXM7XG4gIH07XG59O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cblxuaWYgKCFfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18pIHtcbiAgX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fID0ge307XG59XG5cbmlmICghX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fLndpdGhTdHlsZXMpIHtcbiAgX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fLndpdGhTdHlsZXMgPSB3aXRoU3R5bGVzT2xkO1xufVxuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIF91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9TVFlMRVNfXy53aXRoU3R5bGVzKHN0eWxlcywgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSwgb3B0aW9ucykpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi4xJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGU6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICByZW5kZXI6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldFN0YXRpY3MgPSBUWVBFX1NUQVRJQ1NbdGFyZ2V0Q29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IFRZUEVfU1RBVElDU1tzb3VyY2VDb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBkZWZhdWx0OiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX3RvQ3NzID0gcmVxdWlyZSgnLi4vdXRpbHMvdG9Dc3MnKTtcblxudmFyIF90b0NzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzcyk7XG5cbnZhciBfdG9Dc3NWYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3RvQ3NzVmFsdWUnKTtcblxudmFyIF90b0Nzc1ZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ3NzVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTdHlsZVJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAnc3R5bGUnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB2YXIgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBSZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXIsXG4gICAgICAgIHNlbGVjdG9yID0gb3B0aW9ucy5zZWxlY3RvcjtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzZWxlY3RvcikgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB0aGlzLnJlbmRlcmVyID0gc2hlZXQgPyBzaGVldC5yZW5kZXJlciA6IG5ldyBSZW5kZXJlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzZWxlY3RvciBzdHJpbmcuXG4gICAqIEF0dGVudGlvbjogdXNlIHRoaXMgd2l0aCBjYXV0aW9uLiBNb3N0IGJyb3dzZXJzIGRpZG4ndCBpbXBsZW1lbnRcbiAgICogc2VsZWN0b3JUZXh0IHNldHRlciwgc28gdGhpcyBtYXkgcmVzdWx0IGluIHJlcmVuZGVyaW5nIG9mIGVudGlyZSBTdHlsZSBTaGVldC5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoU3R5bGVSdWxlLCBbe1xuICAgIGtleTogJ3Byb3AnLFxuXG5cbiAgICAvKipcbiAgICAgKiBHZXQgb3Igc2V0IGEgc3R5bGUgcHJvcGVydHkuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb3AobmFtZSwgdmFsdWUpIHtcbiAgICAgIC8vIEl0J3MgYSBnZXR0ZXIuXG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07XG5cbiAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG4gICAgICBpZiAodGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuXG4gICAgICB2YWx1ZSA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vbkNoYW5nZVZhbHVlKHZhbHVlLCBuYW1lLCB0aGlzKTtcblxuICAgICAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZTtcbiAgICAgIHZhciBpc0RlZmluZWQgPSBuYW1lIGluIHRoaXMuc3R5bGU7XG5cbiAgICAgIC8vIFZhbHVlIGlzIGVtcHR5IGFuZCB3YXNuJ3QgZGVmaW5lZCBiZWZvcmUuXG4gICAgICBpZiAoaXNFbXB0eSAmJiAhaXNEZWZpbmVkKSByZXR1cm4gdGhpcztcblxuICAgICAgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuICAgICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuXG4gICAgICBpZiAocmVtb3ZlKSBkZWxldGUgdGhpcy5zdHlsZVtuYW1lXTtlbHNlIHRoaXMuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcblxuICAgICAgLy8gUmVuZGVyYWJsZSBpcyBkZWZpbmVkIGlmIFN0eWxlU2hlZXQgb3B0aW9uIGBsaW5rYCBpcyB0cnVlLlxuICAgICAgaWYgKHRoaXMucmVuZGVyYWJsZSkge1xuICAgICAgICBpZiAocmVtb3ZlKSB0aGlzLnJlbmRlcmVyLnJlbW92ZVByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSk7ZWxzZSB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuXG4gICAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1J1bGUgaXMgbm90IGxpbmtlZC4gTWlzc2luZyBzaGVldCBvcHRpb24gXCJsaW5rOiB0cnVlXCIuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSBydWxlIHRvIGFuIGVsZW1lbnQgaW5saW5lLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseVRvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlUbyhyZW5kZXJhYmxlKSB7XG4gICAgICB2YXIganNvbiA9IHRoaXMudG9KU09OKCk7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIGpzb24pIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShyZW5kZXJhYmxlLCBwcm9wLCBqc29uW3Byb3BdKTtcbiAgICAgIH1yZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAgICogRmFsbGJhY2tzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgICAqIFVzZWZ1bCBmb3IgaW5saW5lIHN0eWxlcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9KU09OJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgdmFyIGpzb24gPSB7fTtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnN0eWxlW3Byb3BdO1xuICAgICAgICBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSAhPT0gJ29iamVjdCcpIGpzb25bcHJvcF0gPSB2YWx1ZTtlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkganNvbltwcm9wXSA9ICgwLCBfdG9Dc3NWYWx1ZTJbJ2RlZmF1bHQnXSkodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcbiAgICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7IGFsbG93RW1wdHk6IHRydWUgfSkgOiBvcHRpb25zO1xuICAgICAgcmV0dXJuICgwLCBfdG9Dc3MyWydkZWZhdWx0J10pKHRoaXMuc2VsZWN0b3IsIHRoaXMuc3R5bGUsIG9wdHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlbGVjdG9yJyxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuXG4gICAgICB0aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuXG4gICAgICBpZiAoIXRoaXMucmVuZGVyYWJsZSkgcmV0dXJuO1xuXG4gICAgICB2YXIgaGFzQ2hhbmdlZCA9IHRoaXMucmVuZGVyZXIuc2V0U2VsZWN0b3IodGhpcy5yZW5kZXJhYmxlLCBzZWxlY3Rvcik7XG5cbiAgICAgIC8vIElmIHNlbGVjdG9yIHNldHRlciBpcyBub3QgaW1wbGVtZW50ZWQsIHJlcmVuZGVyIHRoZSBydWxlLlxuICAgICAgaWYgKCFoYXNDaGFuZ2VkICYmIHRoaXMucmVuZGVyYWJsZSkge1xuICAgICAgICB2YXIgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyZXIucmVwbGFjZVJ1bGUodGhpcy5yZW5kZXJhYmxlLCB0aGlzKTtcbiAgICAgICAgaWYgKHJlbmRlcmFibGUpIHRoaXMucmVuZGVyYWJsZSA9IHJlbmRlcmFibGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICAgKi9cbiAgICAsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3RvclRleHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0eWxlUnVsZTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU3R5bGVSdWxlOyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVztcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGtleSwgb3duLCBvdXQ7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG93biAmJiBoYXMoZXhwb3J0cywga2V5KSkgY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbiAoQykge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDKCk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmIChJU19QUk9UTykge1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmICh0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKSBoaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2NyZWF0ZVJ1bGUgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZVJ1bGUnKTtcblxudmFyIF9jcmVhdGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVJ1bGUpO1xuXG52YXIgX2xpbmtSdWxlID0gcmVxdWlyZSgnLi91dGlscy9saW5rUnVsZScpO1xuXG52YXIgX2xpbmtSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmtSdWxlKTtcblxudmFyIF9TdHlsZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1N0eWxlUnVsZScpO1xuXG52YXIgX1N0eWxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVJ1bGUpO1xuXG52YXIgX2VzY2FwZSA9IHJlcXVpcmUoJy4vdXRpbHMvZXNjYXBlJyk7XG5cbnZhciBfZXNjYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VzY2FwZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBDb250YWlucyBydWxlcyBvYmplY3RzIGFuZCBhbGxvd3MgYWRkaW5nL3JlbW92aW5nIGV0Yy5cbiAqIElzIHVzZWQgZm9yIGUuZy4gYnkgYFN0eWxlU2hlZXRgIG9yIGBDb25kaXRpb25hbFJ1bGVgLlxuICovXG52YXIgUnVsZUxpc3QgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLy8gT3JpZ2luYWwgc3R5bGVzIG9iamVjdC5cbiAgZnVuY3Rpb24gUnVsZUxpc3Qob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUnVsZUxpc3QpO1xuXG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcblxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKG5hbWUsIGRhdGEpIHtcbiAgICAgIHZhciBfb3B0aW9ucyA9IF90aGlzLm9wdGlvbnMsXG4gICAgICAgICAgcGx1Z2lucyA9IF9vcHRpb25zLmpzcy5wbHVnaW5zLFxuICAgICAgICAgIHNoZWV0ID0gX29wdGlvbnMuc2hlZXQ7XG5cbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGx1Z2lucy5vblVwZGF0ZShkYXRhLCBfdGhpcy5nZXQobmFtZSksIHNoZWV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBfdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBwbHVnaW5zLm9uVXBkYXRlKG5hbWUsIF90aGlzLmluZGV4W2luZGV4XSwgc2hlZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuXG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuXG5cbiAgX2NyZWF0ZUNsYXNzKFJ1bGVMaXN0LCBbe1xuICAgIGtleTogJ2FkZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICB2YXIgX29wdGlvbnMyID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHBhcmVudCA9IF9vcHRpb25zMi5wYXJlbnQsXG4gICAgICAgICAgc2hlZXQgPSBfb3B0aW9uczIuc2hlZXQsXG4gICAgICAgICAganNzID0gX29wdGlvbnMyLmpzcyxcbiAgICAgICAgICBSZW5kZXJlciA9IF9vcHRpb25zMi5SZW5kZXJlcixcbiAgICAgICAgICBnZW5lcmF0ZUNsYXNzTmFtZSA9IF9vcHRpb25zMi5nZW5lcmF0ZUNsYXNzTmFtZTtcblxuXG4gICAgICBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBzaGVldDogc2hlZXQsXG4gICAgICAgIGpzczoganNzLFxuICAgICAgICBSZW5kZXJlcjogUmVuZGVyZXIsXG4gICAgICAgIGdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZVxuICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmICghb3B0aW9ucy5zZWxlY3RvciAmJiB0aGlzLmNsYXNzZXNbbmFtZV0pIHtcbiAgICAgICAgb3B0aW9ucy5zZWxlY3RvciA9ICcuJyArICgwLCBfZXNjYXBlMlsnZGVmYXVsdCddKSh0aGlzLmNsYXNzZXNbbmFtZV0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhd1tuYW1lXSA9IGRlY2w7XG5cbiAgICAgIHZhciBydWxlID0gKDAsIF9jcmVhdGVSdWxlMlsnZGVmYXVsdCddKShuYW1lLCBkZWNsLCBvcHRpb25zKTtcblxuICAgICAgdmFyIGNsYXNzTmFtZSA9IHZvaWQgMDtcblxuICAgICAgaWYgKCFvcHRpb25zLnNlbGVjdG9yICYmIHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGdlbmVyYXRlQ2xhc3NOYW1lKHJ1bGUsIHNoZWV0KTtcbiAgICAgICAgcnVsZS5zZWxlY3RvciA9ICcuJyArICgwLCBfZXNjYXBlMlsnZGVmYXVsdCddKShjbGFzc05hbWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUsIGNsYXNzTmFtZSk7XG5cbiAgICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICAgIHRoaXMuaW5kZXguc3BsaWNlKGluZGV4LCAwLCBydWxlKTtcblxuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcFtuYW1lXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgICAgdGhpcy51bnJlZ2lzdGVyKHJ1bGUpO1xuICAgICAgdGhpcy5pbmRleC5zcGxpY2UodGhpcy5pbmRleE9mKHJ1bGUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleE9mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1biBgb25Qcm9jZXNzUnVsZSgpYCBwbHVnaW5zIG9uIGV2ZXJ5IHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Byb2Nlc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzKCkge1xuICAgICAgdmFyIHBsdWdpbnMgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnM7XG4gICAgICAvLyBXZSBuZWVkIHRvIGNsb25lIGFycmF5IGJlY2F1c2UgaWYgd2UgbW9kaWZ5IHRoZSBpbmRleCBzb21ld2hlcmUgZWxzZSBkdXJpbmcgYSBsb29wXG4gICAgICAvLyB3ZSBlbmQgdXAgd2l0aCB2ZXJ5IGhhcmQtdG8tdHJhY2stZG93biBzaWRlIGVmZmVjdHMuXG5cbiAgICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgcnVsZSBpbiBgLm1hcGAgYW5kIGAuY2xhc3Nlc2AgbWFwcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVnaXN0ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlcihydWxlLCBjbGFzc05hbWUpIHtcbiAgICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG4gICAgICBpZiAocnVsZSBpbnN0YW5jZW9mIF9TdHlsZVJ1bGUyWydkZWZhdWx0J10pIHtcbiAgICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgICBpZiAoY2xhc3NOYW1lKSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldID0gY2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXIgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1bnJlZ2lzdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlcihydWxlKSB7XG4gICAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuICAgICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuY2xhc3Nlc1tydWxlLmtleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaW5rJyxcblxuXG4gICAgLyoqXG4gICAgICogTGluayByZW5kZXJhYmxlIHJ1bGVzIHdpdGggQ1NTUnVsZUxpc3QuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmsoY3NzUnVsZXMpIHtcbiAgICAgIHZhciBtYXAgPSB0aGlzLm9wdGlvbnMuc2hlZXQucmVuZGVyZXIuZ2V0VW5lc2NhcGVkS2V5c01hcCh0aGlzLmluZGV4KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NSdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY3NzUnVsZSA9IGNzc1J1bGVzW2ldO1xuICAgICAgICB2YXIgX2tleSA9IHRoaXMub3B0aW9ucy5zaGVldC5yZW5kZXJlci5nZXRLZXkoY3NzUnVsZSk7XG4gICAgICAgIGlmIChtYXBbX2tleV0pIF9rZXkgPSBtYXBbX2tleV07XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5tYXBbX2tleV07XG4gICAgICAgIGlmIChydWxlKSAoMCwgX2xpbmtSdWxlMlsnZGVmYXVsdCddKShydWxlLCBjc3NSdWxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICAgIHZhciBjc3MgPSBydWxlLnRvU3RyaW5nKG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIE5vIG5lZWQgdG8gcmVuZGVyIGFuIGVtcHR5IHJ1bGUuXG4gICAgICAgIGlmICghY3NzICYmICFsaW5rKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoc3RyKSBzdHIgKz0gJ1xcbic7XG4gICAgICAgIHN0ciArPSBjc3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJ1bGVMaXN0O1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBSdWxlTGlzdDsiLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NOyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YyKG9iaik7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gdG9Dc3NWYWx1ZTtcbnZhciBqb2luID0gZnVuY3Rpb24gam9pbih2YWx1ZSwgYnkpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSB2YWx1ZXMgdG8gc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cbmZ1bmN0aW9uIHRvQ3NzVmFsdWUodmFsdWUpIHtcbiAgdmFyIGlnbm9yZUltcG9ydGFudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuXG4gIHZhciBjc3NWYWx1ZSA9ICcnO1xuXG4gIC8vIFN1cHBvcnQgc3BhY2Ugc2VwYXJhdGVkIHZhbHVlcyB2aWEgYFtbJzVweCcsICcxMHB4J11dYC5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgICAgaWYgKGNzc1ZhbHVlKSBjc3NWYWx1ZSArPSAnLCAnO1xuICAgICAgY3NzVmFsdWUgKz0gam9pbih2YWx1ZVtpXSwgJyAnKTtcbiAgICB9XG4gIH0gZWxzZSBjc3NWYWx1ZSA9IGpvaW4odmFsdWUsICcsICcpO1xuXG4gIC8vIEFkZCAhaW1wb3J0YW50LCBiZWNhdXNlIGl0IHdhcyBpZ25vcmVkLlxuICBpZiAoIWlnbm9yZUltcG9ydGFudCAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgY3NzVmFsdWUgKz0gJyAhaW1wb3J0YW50JztcbiAgfVxuXG4gIHJldHVybiBjc3NWYWx1ZTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVSdWxlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9TdHlsZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9TdHlsZVJ1bGUnKTtcblxudmFyIF9TdHlsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVSdWxlKTtcblxudmFyIF9jbG9uZVN0eWxlID0gcmVxdWlyZSgnLi4vdXRpbHMvY2xvbmVTdHlsZScpO1xuXG52YXIgX2Nsb25lU3R5bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xvbmVTdHlsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVSdWxlKCkge1xuICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3VubmFtZWQnO1xuICB2YXIgZGVjbCA9IGFyZ3VtZW50c1sxXTtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHNbMl07XG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcblxuICB2YXIgZGVjbENvcHkgPSAoMCwgX2Nsb25lU3R5bGUyWydkZWZhdWx0J10pKGRlY2wpO1xuXG4gIHZhciBydWxlID0ganNzLnBsdWdpbnMub25DcmVhdGVSdWxlKG5hbWUsIGRlY2xDb3B5LCBvcHRpb25zKTtcbiAgaWYgKHJ1bGUpIHJldHVybiBydWxlO1xuXG4gIC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cbiAgaWYgKG5hbWVbMF0gPT09ICdAJykge1xuICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoZmFsc2UsICdbSlNTXSBVbmtub3duIGF0LXJ1bGUgJXMnLCBuYW1lKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXShuYW1lLCBkZWNsQ29weSwgb3B0aW9ucyk7XG59IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yod2luZG93KSkgPT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmIGRvY3VtZW50Lm5vZGVUeXBlID09PSA5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Jyb3dzZXI7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuZGVlcG1lcmdlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNNZXJnZWFibGVPYmplY3QgPSBmdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKVxuXHRcdCYmICFpc1NwZWNpYWwodmFsdWUpXG59O1xuXG5mdW5jdGlvbiBpc05vbk51bGxPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1NwZWNpYWwodmFsdWUpIHtcblx0dmFyIHN0cmluZ1ZhbHVlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuXHRyZXR1cm4gc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG5cdFx0fHwgc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IERhdGVdJ1xuXHRcdHx8IGlzUmVhY3RFbGVtZW50KHZhbHVlKVxufVxuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjVhYzk2M2ZiNzkxZDEyOThlN2YzOTYyMzYzODNiYzk1NWY5MTZjMS9zcmMvaXNvbW9ycGhpYy9jbGFzc2ljL2VsZW1lbnQvUmVhY3RFbGVtZW50LmpzI0wyMS1MMjVcbnZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xuXG5mdW5jdGlvbiBpc1JlYWN0RWxlbWVudCh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodmFsdWUsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChvcHRpb25zLmNsb25lICE9PSBmYWxzZSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSlcblx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zKVxuXHRcdDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0cmV0dXJuIHRhcmdldC5jb25jYXQoc291cmNlKS5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChlbGVtZW50LCBvcHRpb25zKVxuXHR9KVxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0T2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdGlmICghb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblxuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5hcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdH1cblxuXHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdH0sIHt9KVxufTtcblxudmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5yZXR1cm4gZGVlcG1lcmdlXzE7XG5cbn0pKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNvbnZlcnRIZXhUb1JHQiA9IGNvbnZlcnRIZXhUb1JHQjtcbmV4cG9ydHMucmdiVG9IZXggPSByZ2JUb0hleDtcbmV4cG9ydHMuZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMucmVjb21wb3NlQ29sb3IgPSByZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMuZ2V0Q29udHJhc3RSYXRpbyA9IGdldENvbnRyYXN0UmF0aW87XG5leHBvcnRzLmdldEx1bWluYW5jZSA9IGdldEx1bWluYW5jZTtcbmV4cG9ydHMuZW1waGFzaXplID0gZW1waGFzaXplO1xuZXhwb3J0cy5mYWRlID0gZmFkZTtcbmV4cG9ydHMuZGFya2VuID0gZGFya2VuO1xuZXhwb3J0cy5saWdodGVuID0gbGlnaHRlbjtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh2YWx1ZSA+PSBtaW4gJiYgdmFsdWUgPD0gbWF4LCBcIk1hdGVyaWFsLVVJOiB0aGUgdmFsdWUgcHJvdmlkZWQgXCIuY29uY2F0KHZhbHVlLCBcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobWluLCBcIiwgXCIpLmNvbmNhdChtYXgsIFwiXS5cIikpIDogdm9pZCAwO1xuXG4gIGlmICh2YWx1ZSA8IG1pbikge1xuICAgIHJldHVybiBtaW47XG4gIH1cblxuICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZnVuY3Rpb24gY29udmVydEhleFRvUkdCKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChjb2xvci5sZW5ndGggLyAzLCBcIn1cIiksICdnJyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIG4gKyBuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IFwicmdiKFwiLmNvbmNhdChjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KG4sIDE2KTtcbiAgfSkuam9pbignLCAnKSwgXCIpXCIpIDogJyc7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIFBhc3MgaGV4IHN0cmFpZ2h0IHRocm91Z2hcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludFRvSGV4KGMpIHtcbiAgICB2YXIgaGV4ID0gYy50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBcIjBcIi5jb25jYXQoaGV4KSA6IGhleDtcbiAgfVxuXG4gIHZhciBfZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvciksXG4gICAgICB2YWx1ZXMgPSBfZGVjb21wb3NlQ29sb3IudmFsdWVzO1xuXG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gaW50VG9IZXgobik7XG4gIH0pO1xuICByZXR1cm4gXCIjXCIuY29uY2F0KHZhbHVlcy5qb2luKCcnKSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5cblxuZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGNvbnZlcnRIZXhUb1JHQihjb2xvcikpO1xuICB9XG5cbiAgdmFyIG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKS5zcGxpdCgnLCcpO1xuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoW1wiTWF0ZXJpYWwtVUk6IHVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cIiksICdXZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5mdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICB2YXIgdHlwZSA9IGNvbG9yLnR5cGU7XG4gIHZhciB2YWx1ZXMgPSBjb2xvci52YWx1ZXM7XG5cbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4sIGkpIHtcbiAgICAgIHJldHVybiBpIDwgMyA/IHBhcnNlSW50KG4sIDEwKSA6IG47XG4gICAgfSk7XG4gIH1cblxuICBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMV0sIFwiJVwiKTtcbiAgICB2YWx1ZXNbMl0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMl0sIFwiJVwiKTtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdChjb2xvci50eXBlLCBcIihcIikuY29uY2F0KHZhbHVlcy5qb2luKCcsICcpLCBcIilcIik7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgdmFyIGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIHZhciBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5cblxuZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIHZhciBkZWNvbXBvc2VkQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG5cbiAgaWYgKGRlY29tcG9zZWRDb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIHZhciByZ2IgPSBkZWNvbXBvc2VkQ29sb3IudmFsdWVzLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG5cbiAgICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogTWF0aC5wb3coKHZhbCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gICAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbiAgfSAvLyBlbHNlIGlmIChkZWNvbXBvc2VkQ29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpXG5cblxuICByZXR1cm4gZGVjb21wb3NlZENvbG9yLnZhbHVlc1syXSAvIDEwMDtcbn1cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvdXIsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yKSB7XG4gIHZhciBjb2VmZmljaWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMC4xNTtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjUgPyBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSA6IGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbn1cbi8qKlxuICogU2V0IHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5cbmZ1bmN0aW9uIGZhZGUoY29sb3IsIHZhbHVlKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShjb2xvciwgXCJNYXRlcmlhbC1VSTogbWlzc2luZyBjb2xvciBhcmd1bWVudCBpbiBmYWRlKFwiLmNvbmNhdChjb2xvciwgXCIsIFwiKS5jb25jYXQodmFsdWUsIFwiKS5cIikpIDogdm9pZCAwO1xuICBpZiAoIWNvbG9yKSByZXR1cm4gY29sb3I7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuXG4gIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuXG5mdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShjb2xvciwgXCJNYXRlcmlhbC1VSTogbWlzc2luZyBjb2xvciBhcmd1bWVudCBpbiBkYXJrZW4oXCIuY29uY2F0KGNvbG9yLCBcIiwgXCIpLmNvbmNhdChjb2VmZmljaWVudCwgXCIpLlwiKSkgOiB2b2lkIDA7XG4gIGlmICghY29sb3IpIHJldHVybiBjb2xvcjtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNvbG9yLCBcIk1hdGVyaWFsLVVJOiBtaXNzaW5nIGNvbG9yIGFyZ3VtZW50IGluIGxpZ2h0ZW4oXCIuY29uY2F0KGNvbG9yLCBcIiwgXCIpLmNvbmNhdChjb2VmZmljaWVudCwgXCIpLlwiKSkgOiB2b2lkIDA7XG4gIGlmICghY29sb3IpIHJldHVybiBjb2xvcjtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0dyaWQuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfR3JpZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR3JpZFwiKSk7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpOyIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSB0b0NzcztcblxudmFyIF90b0Nzc1ZhbHVlID0gcmVxdWlyZSgnLi90b0Nzc1ZhbHVlJyk7XG5cbnZhciBfdG9Dc3NWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzc1ZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIEluZGVudCBhIHN0cmluZy5cbiAqIGh0dHA6Ly9qc3BlcmYuY29tL2FycmF5LWpvaW4tdnMtZm9yXG4gKi9cbmZ1bmN0aW9uIGluZGVudFN0cihzdHIsIGluZGVudCkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmRlbnQ7IGluZGV4KyspIHtcbiAgICByZXN1bHQgKz0gJyAgJztcbiAgfXJldHVybiByZXN1bHQgKyBzdHI7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBSdWxlIHRvIENTUyBzdHJpbmcuXG4gKi9cblxuZnVuY3Rpb24gdG9Dc3Moc2VsZWN0b3IsIHN0eWxlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgaWYgKCFzdHlsZSkgcmV0dXJuIHJlc3VsdDtcblxuICB2YXIgX29wdGlvbnMkaW5kZW50ID0gb3B0aW9ucy5pbmRlbnQsXG4gICAgICBpbmRlbnQgPSBfb3B0aW9ucyRpbmRlbnQgPT09IHVuZGVmaW5lZCA/IDAgOiBfb3B0aW9ucyRpbmRlbnQ7XG4gIHZhciBmYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3M7XG5cblxuICBpbmRlbnQrKztcblxuICAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG4gIGlmIChmYWxsYmFja3MpIHtcbiAgICAvLyBBcnJheSBzeW50YXgge2ZhbGxiYWNrczogW3twcm9wOiB2YWx1ZX1dfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGZhbGxiYWNrcykpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBmYWxsYmFja3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBmYWxsYmFjayA9IGZhbGxiYWNrc1tpbmRleF07XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZmFsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBmYWxsYmFja1twcm9wXTtcbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9ICdcXG4nICsgaW5kZW50U3RyKHByb3AgKyAnOiAnICsgKDAsIF90b0Nzc1ZhbHVlMlsnZGVmYXVsdCddKSh2YWx1ZSkgKyAnOycsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcbiAgICAgICAgaWYgKF92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0ICs9ICdcXG4nICsgaW5kZW50U3RyKF9wcm9wICsgJzogJyArICgwLCBfdG9Dc3NWYWx1ZTJbJ2RlZmF1bHQnXSkoX3ZhbHVlKSArICc7JywgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcbiAgICBpZiAoX3ZhbHVlMiAhPSBudWxsICYmIF9wcm9wMiAhPT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIHJlc3VsdCArPSAnXFxuJyArIGluZGVudFN0cihfcHJvcDIgKyAnOiAnICsgKDAsIF90b0Nzc1ZhbHVlMlsnZGVmYXVsdCddKShfdmFsdWUyKSArICc7JywgaW5kZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuICBpZiAoIXJlc3VsdCAmJiAhb3B0aW9ucy5hbGxvd0VtcHR5KSByZXR1cm4gcmVzdWx0O1xuXG4gIGluZGVudC0tO1xuICByZXN1bHQgPSBpbmRlbnRTdHIoc2VsZWN0b3IgKyAnIHsnICsgcmVzdWx0ICsgJ1xcbicsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1NoZWV0c1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9TaGVldHNSZWdpc3RyeScpO1xuXG52YXIgX1NoZWV0c1JlZ2lzdHJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NoZWV0c1JlZ2lzdHJ5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIFRoaXMgaXMgYSBnbG9iYWwgc2hlZXRzIHJlZ2lzdHJ5LiBPbmx5IERvbVJlbmRlcmVyIHdpbGwgYWRkIHNoZWV0cyB0byBpdC5cbiAqIE9uIHRoZSBzZXJ2ZXIgb25lIHNob3VsZCB1c2UgYW4gb3duIFNoZWV0c1JlZ2lzdHJ5IGluc3RhbmNlIGFuZCBhZGQgdGhlXG4gKiBzaGVldHMgdG8gaXQsIGJlY2F1c2UgeW91IG5lZWQgdG8gbWFrZSBzdXJlIHRvIGNyZWF0ZSBhIG5ldyByZWdpc3RyeSBmb3JcbiAqIGVhY2ggcmVxdWVzdCBpbiBvcmRlciB0byBub3QgbGVhayBzaGVldHMgYWNyb3NzIHJlcXVlc3RzLlxuICovXG5leHBvcnRzWydkZWZhdWx0J10gPSBuZXcgX1NoZWV0c1JlZ2lzdHJ5MlsnZGVmYXVsdCddKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2lzSW5Ccm93c2VyID0gcmVxdWlyZSgnaXMtaW4tYnJvd3NlcicpO1xuXG52YXIgX2lzSW5Ccm93c2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSW5Ccm93c2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIganMgPSAnJzsgLyoqXG4gICAgICAgICAgICAgICogRXhwb3J0IGphdmFzY3JpcHQgc3R5bGUgYW5kIGNzcyBzdHlsZSB2ZW5kb3IgcHJlZml4ZXMuXG4gICAgICAgICAgICAgICogQmFzZWQgb24gXCJ0cmFuc2Zvcm1cIiBzdXBwb3J0IHRlc3QuXG4gICAgICAgICAgICAgICovXG5cbnZhciBjc3MgPSAnJztcblxuLy8gV2Ugc2hvdWxkIG5vdCBkbyBhbnl0aGluZyBpZiByZXF1aXJlZCBzZXJ2ZXJzaWRlLlxuaWYgKF9pc0luQnJvd3NlcjJbJ2RlZmF1bHQnXSkge1xuICAvLyBPcmRlciBtYXR0ZXJzLiBXZSBuZWVkIHRvIGNoZWNrIFdlYmtpdCB0aGUgbGFzdCBvbmUgYmVjYXVzZVxuICAvLyBvdGhlciB2ZW5kb3JzIHVzZSB0byBhZGQgV2Via2l0IHByZWZpeGVzIHRvIHNvbWUgcHJvcGVydGllc1xuICB2YXIganNDc3NNYXAgPSB7XG4gICAgTW96OiAnLW1vei0nLFxuICAgIC8vIElFIGRpZCBpdCB3cm9uZyBhZ2FpbiAuLi5cbiAgICBtczogJy1tcy0nLFxuICAgIE86ICctby0nLFxuICAgIFdlYmtpdDogJy13ZWJraXQtJ1xuICB9O1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGU7XG4gIHZhciB0ZXN0UHJvcCA9ICdUcmFuc2Zvcm0nO1xuXG4gIGZvciAodmFyIGtleSBpbiBqc0Nzc01hcCkge1xuICAgIGlmIChrZXkgKyB0ZXN0UHJvcCBpbiBzdHlsZSkge1xuICAgICAganMgPSBrZXk7XG4gICAgICBjc3MgPSBqc0Nzc01hcFtrZXldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHR5cGUge3tqczogU3RyaW5nLCBjc3M6IFN0cmluZ319XG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzWydkZWZhdWx0J10gPSB7IGpzOiBqcywgY3NzOiBjc3MgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2RlZXBtZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXBtZXJnZVwiKSk7XG5cbnZhciBfaXNQbGFpbk9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlzLXBsYWluLW9iamVjdFwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2NyZWF0ZUJyZWFrcG9pbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVCcmVha3BvaW50c1wiKSk7XG5cbnZhciBfY3JlYXRlTWl4aW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVNaXhpbnNcIikpO1xuXG52YXIgX2NyZWF0ZVBhbGV0dGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVBhbGV0dGVcIikpO1xuXG52YXIgX2NyZWF0ZVR5cG9ncmFwaHkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVR5cG9ncmFwaHlcIikpO1xuXG52YXIgX3NoYWRvd3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NoYWRvd3NcIikpO1xuXG52YXIgX3NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zaGFwZVwiKSk7XG5cbnZhciBfc3BhY2luZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3BhY2luZ1wiKSk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RyYW5zaXRpb25zXCIpKTtcblxudmFyIF96SW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3pJbmRleFwiKSk7XG5cbi8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG5mdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgX29wdGlvbnMkYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzLFxuICAgICAgYnJlYWtwb2ludHNJbnB1dCA9IF9vcHRpb25zJGJyZWFrcG9pbnRzID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJGJyZWFrcG9pbnRzLFxuICAgICAgX29wdGlvbnMkbWl4aW5zID0gb3B0aW9ucy5taXhpbnMsXG4gICAgICBtaXhpbnNJbnB1dCA9IF9vcHRpb25zJG1peGlucyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRtaXhpbnMsXG4gICAgICBfb3B0aW9ucyRwYWxldHRlID0gb3B0aW9ucy5wYWxldHRlLFxuICAgICAgcGFsZXR0ZUlucHV0ID0gX29wdGlvbnMkcGFsZXR0ZSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRwYWxldHRlLFxuICAgICAgc2hhZG93c0lucHV0ID0gb3B0aW9ucy5zaGFkb3dzLFxuICAgICAgX29wdGlvbnMkc3BhY2luZyA9IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgIHNwYWNpbmdJbnB1dCA9IF9vcHRpb25zJHNwYWNpbmcgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkc3BhY2luZyxcbiAgICAgIF9vcHRpb25zJHR5cG9ncmFwaHkgPSBvcHRpb25zLnR5cG9ncmFwaHksXG4gICAgICB0eXBvZ3JhcGh5SW5wdXQgPSBfb3B0aW9ucyR0eXBvZ3JhcGh5ID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHR5cG9ncmFwaHksXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKG9wdGlvbnMsIFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwicGFsZXR0ZVwiLCBcInNoYWRvd3NcIiwgXCJzcGFjaW5nXCIsIFwidHlwb2dyYXBoeVwiXSk7XG4gIHZhciBwYWxldHRlID0gKDAsIF9jcmVhdGVQYWxldHRlLmRlZmF1bHQpKHBhbGV0dGVJbnB1dCk7XG4gIHZhciBicmVha3BvaW50cyA9ICgwLCBfY3JlYXRlQnJlYWtwb2ludHMuZGVmYXVsdCkoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX3NwYWNpbmcuZGVmYXVsdCwgc3BhY2luZ0lucHV0KTtcbiAgdmFyIG11aVRoZW1lID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgbWl4aW5zOiAoMCwgX2NyZWF0ZU1peGlucy5kZWZhdWx0KShicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIG92ZXJyaWRlczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBzdHlsZXNcbiAgICBwYWxldHRlOiBwYWxldHRlLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBJbmplY3QgY3VzdG9tIHByb3BlcnRpZXNcbiAgICBzaGFkb3dzOiBzaGFkb3dzSW5wdXQgfHwgX3NoYWRvd3MuZGVmYXVsdCxcbiAgICB0eXBvZ3JhcGh5OiAoMCwgX2NyZWF0ZVR5cG9ncmFwaHkuZGVmYXVsdCkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KVxuICB9LCAoMCwgX2RlZXBtZXJnZS5kZWZhdWx0KSh7XG4gICAgc2hhcGU6IF9zaGFwZS5kZWZhdWx0LFxuICAgIHNwYWNpbmc6IHNwYWNpbmcsXG4gICAgdHJhbnNpdGlvbnM6IF90cmFuc2l0aW9ucy5kZWZhdWx0LFxuICAgIHpJbmRleDogX3pJbmRleC5kZWZhdWx0XG4gIH0sIG90aGVyLCB7XG4gICAgaXNNZXJnZWFibGVPYmplY3Q6IF9pc1BsYWluT2JqZWN0LmRlZmF1bHRcbiAgfSkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHN0YXRlc1dhcm5pbmcgPSBbJ2Rpc2FibGVkJywgJ2ZvY3VzZWQnLCAnc2VsZWN0ZWQnLCAnY2hlY2tlZCddO1xuXG4gICAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gdHJhdmVyc2Uobm9kZSwgcGFyZW50S2V5KSB7XG4gICAgICB2YXIgZGVwdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gICAgICB2YXIga2V5OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXG4gICAgICBmb3IgKGtleSBpbiBub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVba2V5XTtcblxuICAgICAgICBpZiAoZGVwdGggPT09IDEpIHtcbiAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ011aScpID09PSAwICYmIGNoaWxkKSB7XG4gICAgICAgICAgICB0cmF2ZXJzZShjaGlsZCwga2V5LCBkZXB0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZXNXYXJuaW5nLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoZmFsc2UsIFtcIk1hdGVyaWFsLVVJOiB0aGUgYFwiLmNvbmNhdChwYXJlbnRLZXksIFwiYCBjb21wb25lbnQgaW5jcmVhc2VzIFwiKSArIFwidGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBpbnRlcm5hbCBzdGF0ZS5cIiksICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgJ0luc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJHJ1bGVOYW1lIHN5bnRheDonLCBKU09OLnN0cmluZ2lmeSgoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgXCImJFwiLmNvbmNhdChrZXkpLCBjaGlsZCksIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL2N1c3RvbWl6YXRpb24vb3ZlcnJpZGVzI2ludGVybmFsLXN0YXRlcyddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0cmF2ZXJzZShvdGhlci5vdmVycmlkZXMpO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKG11aVRoZW1lLnNoYWRvd3MubGVuZ3RoID09PSAyNSwgJ01hdGVyaWFsLVVJOiB0aGUgc2hhZG93cyBhcnJheSBwcm92aWRlZCB0byBjcmVhdGVNdWlUaGVtZSBzaG91bGQgc3VwcG9ydCAyNSBlbGV2YXRpb25zLicpIDogdm9pZCAwO1xuICByZXR1cm4gbXVpVGhlbWU7XG59XG5cbnZhciBfZGVmYXVsdCA9IGNyZWF0ZU11aVRoZW1lO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5DSEFOTkVMID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG4vLyBTYW1lIHZhbHVlIHVzZWQgYnkgcmVhY3QtanNzXG52YXIgQ0hBTk5FTCA9ICdfX1RIRU1JTkdfXyc7XG5leHBvcnRzLkNIQU5ORUwgPSBDSEFOTkVMO1xudmFyIHRoZW1lTGlzdGVuZXIgPSB7XG4gIGNvbnRleHRUeXBlczogKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIENIQU5ORUwsIGZ1bmN0aW9uICgpIHt9KSxcbiAgaW5pdGlhbDogZnVuY3Rpb24gaW5pdGlhbChjb250ZXh0KSB7XG4gICAgaWYgKCFjb250ZXh0W0NIQU5ORUxdKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGV4dFtDSEFOTkVMXS5nZXRTdGF0ZSgpO1xuICB9LFxuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjb250ZXh0LCBjYikge1xuICAgIGlmICghY29udGV4dFtDSEFOTkVMXSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRleHRbQ0hBTk5FTF0uc3Vic2NyaWJlKGNiKTtcbiAgfSxcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGNvbnRleHQsIHN1YnNjcmlwdGlvbklkKSB7XG4gICAgaWYgKGNvbnRleHRbQ0hBTk5FTF0pIHtcbiAgICAgIGNvbnRleHRbQ0hBTk5FTF0udW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uSWQpO1xuICAgIH1cbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IHRoZW1lTGlzdGVuZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbmV4cG9ydHMuY29udGFpbnMgPSBjb250YWlucztcbmV4cG9ydHMuZmluZEluZGV4ID0gZmluZEluZGV4O1xuZXhwb3J0cy5maW5kID0gZmluZDtcbmV4cG9ydHMuY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uO1xuXG52YXIgX3R5cGVvZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG4vLyBJdCBzaG91bGQgdG8gYmUgbm90ZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzbid0IGVxdWl2YWxlbnQgdG8gYHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplYC5cbi8vXG4vLyBBIHN0cmljdCBjYXBpdGFsaXphdGlvbiBzaG91bGQgdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkIGEgdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IGNhcGl0YWxpemUoc3RyaW5nKSBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LicpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMob2JqLCBwcmVkKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcmVkKS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG9ialtrZXldID09PSBwcmVkW2tleV07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcmVkKSB7XG4gIHZhciBwcmVkVHlwZSA9ICgwLCBfdHlwZW9mMi5kZWZhdWx0KShwcmVkKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChwcmVkVHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhIXByZWQoYXJyW2ldLCBpLCBhcnIpID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG5cbiAgICBpZiAocHJlZFR5cGUgPT09ICdvYmplY3QnICYmIGNvbnRhaW5zKGFycltpXSwgcHJlZCkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cblxuICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddLmluZGV4T2YocHJlZFR5cGUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGFyci5pbmRleE9mKHByZWQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZmluZChhcnIsIHByZWQpIHtcbiAgdmFyIGluZGV4ID0gZmluZEluZGV4KGFyciwgcHJlZCk7XG4gIHJldHVybiBpbmRleCA+IC0xID8gYXJyW2luZGV4XSA6IHVuZGVmaW5lZDtcbn1cbi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb25zIHRvIGNoYWluXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bnVsbH1cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBmdW5jKSB7XG4gICAgaWYgKGZ1bmMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicsICdNYXRlcmlhbC1VSTogaW52YWxpZCBBcmd1bWVudCBUeXBlLCBtdXN0IG9ubHkgcHJvdmlkZSBmdW5jdGlvbnMsIHVuZGVmaW5lZCwgb3IgbnVsbC4nKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9LCBmdW5jdGlvbiAoKSB7fSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2RhdGUvbm93XCIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xuXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG4vKipcbiAqIEEgZmFjdG9yeSB0aGF0IHJldHVybnMgYSBwcm9wVHlwZXMgdmFsaWRhdG9yIHRoYXQgb25seSBhY2NlcHRzIHZhbHVlcyB0aGF0XG4gKiBhcmUgYWxzbyBhY2NlcHRlZCBieSBSZWFjdC5jcmVhdGVFbGVtZW50XG4gKiBlLmcuIFwiZGl2XCIsIGZ1bmN0aW9uYWwsIGNsYXNzIGNvbXBvbmVudHMsIGZvcndhcmRSZWYgZXRjLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNSZXF1aXJlZCBJZiBgdHJ1ZWAgcmV0dXJucyBhIHZhbGlkYXRvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgd2lsbCB0aHJvdyBpZiBudWxsaXNoIHZhbHVlcyBhcmUgcGFzc2VkXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRQcm9wKGlzUmVxdWlyZWQpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tcG9uZW50UHJvcFR5cGUocHJvcHMsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wID0gcHJvcHNba2V5XTtcbiAgICB2YXIgcHJvcE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwga2V5O1xuICAgIHZhciBtZXNzYWdlO1xuXG4gICAgaWYgKHByb3AgPT0gbnVsbCkge1xuICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgbWVzc2FnZSA9IFwiVGhlIFwiLmNvbmNhdChsb2NhdGlvbiwgXCIgYFwiKS5jb25jYXQocHJvcE5hbWUsIFwiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gYFwiKS5jb25jYXQoY29tcG9uZW50TmFtZSwgXCJgLCBcIikgKyBcImJ1dCBpdHMgdmFsdWUgaXMgYFwiLmNvbmNhdCgoMCwgX3R5cGVvZjIuZGVmYXVsdCkocHJvcCksIFwiYC5cIik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghUmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUocHJvcCkpIHtcbiAgICAgIHZhciBwcmVjaXNlVHlwZSA9ICgwLCBfdHlwZW9mMi5kZWZhdWx0KShwcm9wKTtcbiAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWQgXCIuY29uY2F0KGxvY2F0aW9uLCBcIiBgXCIpLmNvbmNhdChwcm9wTmFtZSwgXCJgIG9mIHR5cGUgYFwiKS5jb25jYXQocHJlY2lzZVR5cGUsIFwiYCBcIikgKyBcInN1cHBsaWVkIHRvIGBcIi5jb25jYXQoY29tcG9uZW50TmFtZSwgXCJgLCBleHBlY3RlZCBhIGNvbXBvbmVudC5cIik7XG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2UgIT0gbnVsbCkge1xuICAgICAgLy8gY2hhbmdlIGVycm9yIG1lc3NhZ2Ugc2xpZ2h0bHkgb24gZXZlcnkgY2hlY2sgdG8gcHJldmVudCBjYWNoaW5nIHdoZW4gdGVzdGluZ1xuICAgICAgLy8gd2hpY2ggd291bGQgbm90IHRyaWdnZXIgY29uc29sZSBlcnJvcnMgb24gc3Vic2VxdWVudCBmYWlsc1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIlwiLmNvbmNhdChtZXNzYWdlKS5jb25jYXQocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/IERhdGUubm93KCkgOiAnJykpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG52YXIgY29tcG9uZW50UHJvcFR5cGUgPSBjcmVhdGVDb21wb25lbnRQcm9wKGZhbHNlKTtcbmNvbXBvbmVudFByb3BUeXBlLmlzUmVxdWlyZWQgPSBjcmVhdGVDb21wb25lbnRQcm9wKHRydWUpO1xudmFyIF9kZWZhdWx0ID0gY29tcG9uZW50UHJvcFR5cGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnNwZWNpYWxQcm9wZXJ0eSA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbi8vIFRoaXMgbW9kdWxlIGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9haXJibmIvcHJvcC10eXBlcy1leGFjdCByZXBvc2l0b3J5LlxuLy8gSG93ZXZlciwgaW4gb3JkZXIgdG8gcmVkdWNlIHRoZSBudW1iZXIgb2YgZGVwZW5kZW5jaWVzIGFuZCB0byByZW1vdmUgc29tZSBleHRyYSBzYWZlIGNoZWNrc1xuLy8gdGhlIG1vZHVsZSB3YXMgZm9ya2VkLlxuLy8gT25seSBleHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlcy5cbnZhciBzcGVjaWFsUHJvcGVydHkgPSBcImV4YWN0LXByb3A6IFxcdTIwMEJcIjtcbmV4cG9ydHMuc3BlY2lhbFByb3BlcnR5ID0gc3BlY2lhbFByb3BlcnR5O1xuXG5mdW5jdGlvbiBleGFjdFByb3AocHJvcFR5cGVzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBwcm9wVHlwZXM7XG4gIH1cblxuICByZXR1cm4gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgcHJvcFR5cGVzLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgc3BlY2lhbFByb3BlcnR5LCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgdW5zdXBwb3J0ZWRQcm9wcyA9IE9iamVjdC5rZXlzKHByb3BzKS5maWx0ZXIoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHJldHVybiAhcHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3ApO1xuICAgIH0pO1xuXG4gICAgaWYgKHVuc3VwcG9ydGVkUHJvcHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIlRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgbm90IHN1cHBvcnRlZDogXCIuY29uY2F0KHVuc3VwcG9ydGVkUHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBcImBcIi5jb25jYXQocHJvcCwgXCJgXCIpO1xuICAgICAgfSkuam9pbignLCAnKSwgXCIuIFBsZWFzZSByZW1vdmUgdGhlbS5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSk7XG59XG5cbnZhciBfZGVmYXVsdCA9IGV4YWN0UHJvcDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRGdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbk5hbWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBGb3JrIG9mIHJlY29tcG9zZS9nZXREaXNwbGF5TmFtZSB3aXRoIGFkZGVkIElFIDExIHN1cHBvcnRcbi8vIFNpbXBsaWZpZWQgcG9seWZpbGwgZm9yIElFIDExIHN1cHBvcnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9KYW1lc01HcmVlbmUvRnVuY3Rpb24ubmFtZS9ibG9iLzU4YjMxNGQ0YTk4MzExMGMzNjgyZjEyMjhmODQ1ZDM5Y2NjYTE4MTcvRnVuY3Rpb24ubmFtZS5qcyNMM1xudmFyIGZuTmFtZU1hdGNoUmVnZXggPSAvXlxccypmdW5jdGlvbig/Olxcc3xcXHMqXFwvXFwqLipcXCpcXC9cXHMqKSsoW14oXFxzL10qKVxccyovO1xuXG5mdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWUoZm4pIHtcbiAgdmFyIG1hdGNoID0gXCJcIi5jb25jYXQoZm4pLm1hdGNoKGZuTmFtZU1hdGNoUmVnZXgpO1xuICB2YXIgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICByZXR1cm4gbmFtZSB8fCAnJztcbn1cblxuZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSB7XG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICBpZiAoIUNvbXBvbmVudCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8IGdldEZ1bmN0aW9uTmFtZShDb21wb25lbnQpIHx8ICdDb21wb25lbnQnO1xufVxuXG52YXIgX2RlZmF1bHQgPSBnZXREaXNwbGF5TmFtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBfZGVmYXVsdCA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aCA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3JlYXRlID0gZXhwb3J0cy5jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSA9IGV4cG9ydHMuc2hlZXRzID0gZXhwb3J0cy5SdWxlTGlzdCA9IGV4cG9ydHMuU2hlZXRzTWFuYWdlciA9IGV4cG9ydHMuU2hlZXRzUmVnaXN0cnkgPSBleHBvcnRzLnRvQ3NzVmFsdWUgPSBleHBvcnRzLmdldER5bmFtaWNTdHlsZXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfZ2V0RHluYW1pY1N0eWxlcyA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0RHluYW1pY1N0eWxlcycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2dldER5bmFtaWNTdHlsZXMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXREeW5hbWljU3R5bGVzKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF90b0Nzc1ZhbHVlID0gcmVxdWlyZSgnLi91dGlscy90b0Nzc1ZhbHVlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAndG9Dc3NWYWx1ZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ3NzVmFsdWUpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX1NoZWV0c1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9TaGVldHNSZWdpc3RyeScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1NoZWV0c1JlZ2lzdHJ5Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2hlZXRzUmVnaXN0cnkpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX1NoZWV0c01hbmFnZXIgPSByZXF1aXJlKCcuL1NoZWV0c01hbmFnZXInKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTaGVldHNNYW5hZ2VyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2hlZXRzTWFuYWdlcilbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfUnVsZUxpc3QgPSByZXF1aXJlKCcuL1J1bGVMaXN0Jyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnUnVsZUxpc3QnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SdWxlTGlzdClbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfc2hlZXRzID0gcmVxdWlyZSgnLi9zaGVldHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdzaGVldHMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGVldHMpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX0pzcyA9IHJlcXVpcmUoJy4vSnNzJyk7XG5cbnZhciBfSnNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0pzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEpzcy5cbiAqL1xudmFyIGNyZWF0ZSA9IGV4cG9ydHMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBfSnNzMlsnZGVmYXVsdCddKG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBBIGdsb2JhbCBKc3MgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZSgpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBTaGVldHMgcmVnaXN0cnkgdG8gYWNjZXNzIHRoZW0gYWxsIGF0IG9uZSBwbGFjZS5cbiAqL1xudmFyIFNoZWV0c1JlZ2lzdHJ5ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2hlZXRzUmVnaXN0cnkpO1xuXG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c1JlZ2lzdHJ5LCBbe1xuICAgIGtleTogJ2FkZCcsXG5cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgU3R5bGUgU2hlZXQuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgICAgdmFyIHJlZ2lzdHJ5ID0gdGhpcy5yZWdpc3RyeTtcbiAgICAgIHZhciBpbmRleCA9IHNoZWV0Lm9wdGlvbnMuaW5kZXg7XG5cblxuICAgICAgaWYgKHJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpICE9PSAtMSkgcmV0dXJuO1xuXG4gICAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgcmVnaXN0cnkucHVzaChzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBhIHBvc2l0aW9uLlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgICAgcmVnaXN0cnkuc3BsaWNlKGksIDAsIHNoZWV0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgcmVnaXN0cnkuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgU3R5bGUgU2hlZXQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShzaGVldCkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5yZWdpc3RyeS5pbmRleE9mKHNoZWV0KTtcbiAgICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGFsbCBhdHRhY2hlZCBzaGVldHMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmZpbHRlcihmdW5jdGlvbiAoc2hlZXQpIHtcbiAgICAgICAgcmV0dXJuIHNoZWV0LmF0dGFjaGVkO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChzaGVldCkge1xuICAgICAgICByZXR1cm4gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleCcsXG5cblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgaGlnaGVzdCBpbmRleCBudW1iZXIuXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5sZW5ndGggPT09IDAgPyAwIDogdGhpcy5yZWdpc3RyeVt0aGlzLnJlZ2lzdHJ5Lmxlbmd0aCAtIDFdLm9wdGlvbnMuaW5kZXg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c1JlZ2lzdHJ5O1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTaGVldHNSZWdpc3RyeTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc3ltYm9sT2JzZXJ2YWJsZSA9IHJlcXVpcmUoJ3N5bWJvbC1vYnNlcnZhYmxlJyk7XG5cbnZhciBfc3ltYm9sT2JzZXJ2YWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2xPYnNlcnZhYmxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHZhbHVlW19zeW1ib2xPYnNlcnZhYmxlMlsnZGVmYXVsdCddXSAmJiB2YWx1ZSA9PT0gdmFsdWVbX3N5bWJvbE9ic2VydmFibGUyWydkZWZhdWx0J11dKCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBsaW5rUnVsZTtcbi8qKlxuICogTGluayBydWxlIHdpdGggQ1NTU3R5bGVSdWxlIGFuZCBuZXN0ZWQgcnVsZXMgd2l0aCBjb3JyZXNwb25kaW5nIG5lc3RlZCBjc3NSdWxlcyBpZiBib3RoIGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gbGlua1J1bGUocnVsZSwgY3NzUnVsZSkge1xuICBydWxlLnJlbmRlcmFibGUgPSBjc3NSdWxlO1xuICBpZiAocnVsZS5ydWxlcyAmJiBjc3NSdWxlLmNzc1J1bGVzKSBydWxlLnJ1bGVzLmxpbmsoY3NzUnVsZS5jc3NSdWxlcyk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9TdHlsZVNoZWV0ID0gcmVxdWlyZSgnLi4vU3R5bGVTaGVldCcpO1xuXG52YXIgX1N0eWxlU2hlZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVTaGVldCk7XG5cbnZhciBfbW9kdWxlSWQgPSByZXF1aXJlKCcuL21vZHVsZUlkJyk7XG5cbnZhciBfbW9kdWxlSWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9kdWxlSWQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBtYXhSdWxlcyA9IDFlMTA7XG5cblxudmFyIGVudiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WO1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuICogV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldGVkLlxuICogV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbiAqL1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBydWxlQ291bnRlciA9IDA7XG4gIHZhciBkZWZhdWx0UHJlZml4ID0gZW52ID09PSAncHJvZHVjdGlvbicgPyAnYycgOiAnJztcblxuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGUsIHNoZWV0KSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcblxuICAgIGlmIChydWxlQ291bnRlciA+IG1heFJ1bGVzKSB7XG4gICAgICAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCAnW0pTU10gWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4gUnVsZSBjb3VudGVyIGlzIGF0ICVzLicsIHJ1bGVDb3VudGVyKTtcbiAgICB9XG5cbiAgICB2YXIgcHJlZml4ID0gZGVmYXVsdFByZWZpeDtcbiAgICB2YXIganNzSWQgPSAnJztcblxuICAgIGlmIChzaGVldCkge1xuICAgICAgcHJlZml4ID0gc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXggfHwgZGVmYXVsdFByZWZpeDtcbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmpzcy5pZCAhPSBudWxsKSBqc3NJZCArPSBzaGVldC5vcHRpb25zLmpzcy5pZDtcbiAgICB9XG5cbiAgICBpZiAoZW52ID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiAnJyArIHByZWZpeCArIF9tb2R1bGVJZDJbJ2RlZmF1bHQnXSArIGpzc0lkICsgcnVsZUNvdW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHJ1bGUua2V5ICsgJy0nICsgX21vZHVsZUlkMlsnZGVmYXVsdCddICsgKGpzc0lkICYmICctJyArIGpzc0lkKSArICctJyArIHJ1bGVDb3VudGVyO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfbGlua1J1bGUgPSByZXF1aXJlKCcuL3V0aWxzL2xpbmtSdWxlJyk7XG5cbnZhciBfbGlua1J1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGlua1J1bGUpO1xuXG52YXIgX1J1bGVMaXN0ID0gcmVxdWlyZSgnLi9SdWxlTGlzdCcpO1xuXG52YXIgX1J1bGVMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1J1bGVMaXN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cbnZhciBTdHlsZVNoZWV0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVTaGVldCk7XG5cbiAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIF90aGlzLnJ1bGVzLnVwZGF0ZShuYW1lLCBkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnJ1bGVzLnVwZGF0ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9O1xuXG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmxpbmtlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xhc3NlcyA9IHt9O1xuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzaGVldDogdGhpcyxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3Nlc1xuICAgIH0pO1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgb3B0aW9ucy5SZW5kZXJlcih0aGlzKTtcbiAgICB0aGlzLnJ1bGVzID0gbmV3IF9SdWxlTGlzdDJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX25hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChfbmFtZSwgc3R5bGVzW19uYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogQXR0YWNoIHJlbmRlcmFibGUgdG8gdGhlIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhTdHlsZVNoZWV0LCBbe1xuICAgIGtleTogJ2F0dGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAgIGlmICh0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgdGhpcy5kZXBsb3koKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYXR0YWNoKCk7XG4gICAgICBpZiAoIXRoaXMubGlua2VkICYmIHRoaXMub3B0aW9ucy5saW5rKSB0aGlzLmxpbmsoKTtcbiAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHJlbmRlcmFibGUgZnJvbSByZW5kZXIgdHJlZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGV0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgICAgaWYgKCF0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICAgIHRoaXMucmVuZGVyZXIuZGV0YWNoKCk7XG4gICAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBydWxlIHRvIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAgICogV2lsbCBpbnNlcnQgYSBydWxlIGFsc28gYWZ0ZXIgdGhlIHN0eWxlc2hlZXQgaGFzIGJlZW4gcmVuZGVyZWQgZmlyc3QgdGltZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgdmFyIHF1ZXVlID0gdGhpcy5xdWV1ZTtcblxuICAgICAgLy8gUGx1Z2lucyBjYW4gY3JlYXRlIHJ1bGVzLlxuICAgICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIHJpZ2h0IG9yZGVyLCB3ZSBuZWVkIHRvIHF1ZXVlIGFsbCBgLmFkZFJ1bGVgIGNhbGxzLFxuICAgICAgLy8gd2hpY2ggaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCBgcnVsZXMuYWRkKClgIGNhbGwuXG5cbiAgICAgIGlmICh0aGlzLmF0dGFjaGVkICYmICFxdWV1ZSkgdGhpcy5xdWV1ZSA9IFtdO1xuXG4gICAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgcmV0dXJuIHJ1bGU7XG4gICAgICAgIC8vIERvbid0IGluc2VydCBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgICAvLyBJdCB3aWxsIGJlIGluc2VydGVkIGFsbCB0b2dldGhlciB3aGVuIC5hdHRhY2ggaXMgY2FsbGVkLlxuICAgICAgICBpZiAocXVldWUpIHF1ZXVlLnB1c2gocnVsZSk7ZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGUpO1xuICAgICAgICAgIGlmICh0aGlzLnF1ZXVlKSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2godGhpcy5pbnNlcnRSdWxlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBjYW4ndCBhZGQgcnVsZXMgdG8gYSBkZXRhY2hlZCBzdHlsZSBub2RlLlxuICAgICAgLy8gV2Ugd2lsbCByZWRlcGxveSB0aGUgc2hlZXQgb25jZSB1c2VyIHdpbGwgYXR0YWNoIGl0LlxuICAgICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuXG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgcnVsZSBpbnRvIHRoZSBTdHlsZVNoZWV0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luc2VydFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUpIHtcbiAgICAgIHZhciByZW5kZXJhYmxlID0gdGhpcy5yZW5kZXJlci5pbnNlcnRSdWxlKHJ1bGUpO1xuICAgICAgaWYgKHJlbmRlcmFibGUgJiYgdGhpcy5vcHRpb25zLmxpbmspICgwLCBfbGlua1J1bGUyWydkZWZhdWx0J10pKHJ1bGUsIHJlbmRlcmFibGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgYWRkIHJ1bGVzLlxuICAgICAqIFdpbGwgcmVuZGVyIGFsc28gYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRSdWxlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJ1bGVzKHN0eWxlcywgb3B0aW9ucykge1xuICAgICAgdmFyIGFkZGVkID0gW107XG4gICAgICBmb3IgKHZhciBfbmFtZTIgaW4gc3R5bGVzKSB7XG4gICAgICAgIGFkZGVkLnB1c2godGhpcy5hZGRSdWxlKF9uYW1lMiwgc3R5bGVzW19uYW1lMl0sIG9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhZGRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBydWxlIGJ5IG5hbWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBydWxlIGJ5IG5hbWUuXG4gICAgICogUmV0dXJucyBgdHJ1ZWA6IGlmIHJ1bGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIHRoZSBET00uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVSdWxlKG5hbWUpIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG5cbiAgICAgIGlmICghcnVsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICB0aGlzLnJ1bGVzLnJlbW92ZShydWxlKTtcblxuICAgICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgcnVsZS5yZW5kZXJhYmxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmRlbGV0ZVJ1bGUocnVsZS5yZW5kZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5kZXhPZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXBsb3kgcHVyZSBDU1Mgc3RyaW5nIHRvIGEgcmVuZGVyYWJsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVwbG95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVwbG95KCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5kZXBsb3koKTtcbiAgICAgIHRoaXMuZGVwbG95ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGluayByZW5kZXJhYmxlIENTUyBydWxlcyBmcm9tIHNoZWV0IHdpdGggdGhlaXIgY29ycmVzcG9uZGluZyBtb2RlbHMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xpbmsnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaW5rKCkge1xuICAgICAgdmFyIGNzc1J1bGVzID0gdGhpcy5yZW5kZXJlci5nZXRSdWxlcygpO1xuXG4gICAgICAvLyBJcyB1bmRlZmluZWQgd2hlbiBWaXJ0dWFsUmVuZGVyZXIgaXMgdXNlZC5cbiAgICAgIGlmIChjc3NSdWxlcykgdGhpcy5ydWxlcy5saW5rKGNzc1J1bGVzKTtcbiAgICAgIHRoaXMubGlua2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0eWxlU2hlZXQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2pzc0dsb2JhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzcy1nbG9iYWxcIikpO1xuXG52YXIgX2pzc05lc3RlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzcy1uZXN0ZWRcIikpO1xuXG52YXIgX2pzc0NhbWVsQ2FzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzcy1jYW1lbC1jYXNlXCIpKTtcblxudmFyIF9qc3NEZWZhdWx0VW5pdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzcy1kZWZhdWx0LXVuaXRcIikpO1xuXG52YXIgX2pzc1ZlbmRvclByZWZpeGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwianNzLXZlbmRvci1wcmVmaXhlclwiKSk7XG5cbnZhciBfanNzUHJvcHNTb3J0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwianNzLXByb3BzLXNvcnRcIikpO1xuXG4vLyBTdWJzZXQgb2YganNzLXByZXNldC1kZWZhdWx0IHdpdGggb25seSB0aGUgcGx1Z2lucyB0aGUgTWF0ZXJpYWwtVUkgY29tcG9uZW50cyBhcmUgdXNpbmcuXG5mdW5jdGlvbiBqc3NQcmVzZXQoKSB7XG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogWygwLCBfanNzR2xvYmFsLmRlZmF1bHQpKCksICgwLCBfanNzTmVzdGVkLmRlZmF1bHQpKCksICgwLCBfanNzQ2FtZWxDYXNlLmRlZmF1bHQpKCksICgwLCBfanNzRGVmYXVsdFVuaXQuZGVmYXVsdCkoKSwgLy8gRGlzYWJsZSB0aGUgdmVuZG9yIHByZWZpeGVyIHNlcnZlci1zaWRlLCBpdCBkb2VzIG5vdGhpbmcuXG4gICAgLy8gVGhpcyB3YXksIHdlIGNhbiBnZXQgYSBwZXJmb3JtYW5jZSBib29zdC5cbiAgICAvLyBJbiB0aGUgZG9jdW1lbnRhdGlvbiwgd2UgYXJlIHVzaW5nIGBhdXRvcHJlZml4ZXJgIHRvIHNvbHZlIHRoaXMgcHJvYmxlbS5cbiAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiAoMCwgX2pzc1ZlbmRvclByZWZpeGVyLmRlZmF1bHQpKCksICgwLCBfanNzUHJvcHNTb3J0LmRlZmF1bHQpKCldXG4gIH07XG59XG5cbnZhciBfZGVmYXVsdCA9IGpzc1ByZXNldDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyZWFrcG9pbnRzO1xuZXhwb3J0cy5rZXlzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxudmFyIGtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5leHBvcnRzLmtleXMgPSBrZXlzO1xuXG5mdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICB2YXIgX2JyZWFrcG9pbnRzJHZhbHVlcyA9IGJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgIHZhbHVlcyA9IF9icmVha3BvaW50cyR2YWx1ZXMgPT09IHZvaWQgMCA/IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjBcbiAgfSA6IF9icmVha3BvaW50cyR2YWx1ZXMsXG4gICAgICBfYnJlYWtwb2ludHMkdW5pdCA9IGJyZWFrcG9pbnRzLnVuaXQsXG4gICAgICB1bml0ID0gX2JyZWFrcG9pbnRzJHVuaXQgPT09IHZvaWQgMCA/ICdweCcgOiBfYnJlYWtwb2ludHMkdW5pdCxcbiAgICAgIF9icmVha3BvaW50cyRzdGVwID0gYnJlYWtwb2ludHMuc3RlcCxcbiAgICAgIHN0ZXAgPSBfYnJlYWtwb2ludHMkc3RlcCA9PT0gdm9pZCAwID8gNSA6IF9icmVha3BvaW50cyRzdGVwLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShicmVha3BvaW50cywgW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl0pO1xuXG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWUpLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpICsgMTtcbiAgICB2YXIgdXBwZXJib3VuZCA9IHZhbHVlc1trZXlzW2VuZEluZGV4XV07XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICAvLyB4bCBkb3duIGFwcGxpZXMgdG8gYWxsIHNpemVzXG4gICAgICByZXR1cm4gdXAoJ3hzJyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHVwcGVyYm91bmQgPT09ICdudW1iZXInICYmIGVuZEluZGV4ID4gMCA/IHVwcGVyYm91bmQgOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtYXgtd2lkdGg6XCIuY29uY2F0KHZhbHVlIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpICsgMTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1cChzdGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlc1tzdGFydF0pLmNvbmNhdCh1bml0LCBcIikgYW5kIFwiKSArIFwiKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWVzW2tleXNbZW5kSW5kZXhdXSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpZHRoKGtleSkge1xuICAgIHJldHVybiB2YWx1ZXNba2V5XTtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBrZXlzOiBrZXlzLFxuICAgIHZhbHVlczogdmFsdWVzLFxuICAgIHVwOiB1cCxcbiAgICBkb3duOiBkb3duLFxuICAgIGJldHdlZW46IGJldHdlZW4sXG4gICAgb25seTogb25seSxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgb3RoZXIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIGVzY2FwZVJlZ2V4ID0gLyhbW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2BcXHNdKS9nO1xuXG5mdW5jdGlvbiBzYWZlUHJlZml4KGNsYXNzTmFtZVByZWZpeCkge1xuICB2YXIgcHJlZml4ID0gU3RyaW5nKGNsYXNzTmFtZVByZWZpeCk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShwcmVmaXgubGVuZ3RoIDwgMjU2LCBcIk1hdGVyaWFsLVVJOiB0aGUgY2xhc3MgbmFtZSBwcmVmaXggaXMgdG9vIGxvbmc6IFwiLmNvbmNhdChwcmVmaXgsIFwiLlwiKSkgOiB2b2lkIDA7IC8vIFNhbml0aXplIHRoZSBzdHJpbmcgYXMgd2lsbCBiZSB1c2VkIHRvIHByZWZpeCB0aGUgZ2VuZXJhdGVkIGNsYXNzIG5hbWUuXG5cbiAgcmV0dXJuIHByZWZpeC5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnLScpO1xufSAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbi8vIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXQuXG4vLyBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuLy9cbi8vIEl0J3MgaW5zcGlyZWQgYnlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9ibG9iLzRlNmEwNWRkM2Y3YjY1NzJmZGQzYWIyMTY4NjFkOWU0NDZjMjAzMzEvc3JjL3V0aWxzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzXG5cblxuZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGRhbmdlcm91c2x5VSA9IG9wdGlvbnMuZGFuZ2Vyb3VzbHlVc2VHbG9iYWxDU1MsXG4gICAgICBkYW5nZXJvdXNseVVzZUdsb2JhbENTUyA9IF9vcHRpb25zJGRhbmdlcm91c2x5VSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRkYW5nZXJvdXNseVUsXG4gICAgICBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPSBvcHRpb25zLnByb2R1Y3Rpb25QcmVmaXgsXG4gICAgICBwcm9kdWN0aW9uUHJlZml4ID0gX29wdGlvbnMkcHJvZHVjdGlvblByID09PSB2b2lkIDAgPyAnanNzJyA6IF9vcHRpb25zJHByb2R1Y3Rpb25QcixcbiAgICAgIF9vcHRpb25zJHNlZWQgPSBvcHRpb25zLnNlZWQsXG4gICAgICBzZWVkID0gX29wdGlvbnMkc2VlZCA9PT0gdm9pZCAwID8gJycgOiBfb3B0aW9ucyRzZWVkO1xuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGUsIHN0eWxlU2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShydWxlQ291bnRlciA8IDFlMTAsIFsnTWF0ZXJpYWwtVUk6IHlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBydWxlQ291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignJykpIDogdm9pZCAwO1xuXG4gICAgaWYgKGRhbmdlcm91c2x5VXNlR2xvYmFsQ1NTICYmIHN0eWxlU2hlZXQgJiYgc3R5bGVTaGVldC5vcHRpb25zLm5hbWUpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzYWZlUHJlZml4KHN0eWxlU2hlZXQub3B0aW9ucy5uYW1lKSwgXCItXCIpLmNvbmNhdChydWxlLmtleSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcm9kdWN0aW9uUHJlZml4KS5jb25jYXQoc2VlZCkuY29uY2F0KHJ1bGVDb3VudGVyKTtcbiAgICB9IC8vIEhlbHAgd2l0aCBkZWJ1Z2dhYmlsaXR5LlxuXG5cbiAgICBpZiAoc3R5bGVTaGVldCAmJiBzdHlsZVNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4KSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoc2FmZVByZWZpeChzdHlsZVNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4KSwgXCItXCIpLmNvbmNhdChydWxlLmtleSwgXCItXCIpLmNvbmNhdChzZWVkKS5jb25jYXQocnVsZUNvdW50ZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChydWxlLmtleSwgXCItXCIpLmNvbmNhdChzZWVkKS5jb25jYXQocnVsZUNvdW50ZXIpO1xuICB9O1xufSIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9CdXR0b25CYXNlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0J1dHRvbkJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvbkJhc2VcIikpOyIsIi8vIFNvdXJjZTogaHR0cDovL2pzZmlkZGxlLm5ldC92V3g4Vi9cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTYwMzE5NS9mdWxsLWxpc3Qtb2YtamF2YXNjcmlwdC1rZXljb2Rlc1xuXG4vKipcbiAqIENvbmVuaWVuY2UgbWV0aG9kIHJldHVybnMgY29ycmVzcG9uZGluZyB2YWx1ZSBmb3IgZ2l2ZW4ga2V5TmFtZSBvciBrZXlDb2RlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGtleUNvZGUge051bWJlcn0gb3Iga2V5TmFtZSB7U3RyaW5nfVxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGtleUNvZGUoc2VhcmNoSW5wdXQpIHtcbiAgLy8gS2V5Ym9hcmQgRXZlbnRzXG4gIGlmIChzZWFyY2hJbnB1dCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHNlYXJjaElucHV0KSB7XG4gICAgdmFyIGhhc0tleUNvZGUgPSBzZWFyY2hJbnB1dC53aGljaCB8fCBzZWFyY2hJbnB1dC5rZXlDb2RlIHx8IHNlYXJjaElucHV0LmNoYXJDb2RlXG4gICAgaWYgKGhhc0tleUNvZGUpIHNlYXJjaElucHV0ID0gaGFzS2V5Q29kZVxuICB9XG5cbiAgLy8gTnVtYmVyc1xuICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBzZWFyY2hJbnB1dCkgcmV0dXJuIG5hbWVzW3NlYXJjaElucHV0XVxuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSAoY2FzdCB0byBzdHJpbmcpXG4gIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoSW5wdXQpXG5cbiAgLy8gY2hlY2sgY29kZXNcbiAgdmFyIGZvdW5kTmFtZWRLZXkgPSBjb2Rlc1tzZWFyY2gudG9Mb3dlckNhc2UoKV1cbiAgaWYgKGZvdW5kTmFtZWRLZXkpIHJldHVybiBmb3VuZE5hbWVkS2V5XG5cbiAgLy8gY2hlY2sgYWxpYXNlc1xuICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbc2VhcmNoLnRvTG93ZXJDYXNlKCldXG4gIGlmIChmb3VuZE5hbWVkS2V5KSByZXR1cm4gZm91bmROYW1lZEtleVxuXG4gIC8vIHdlaXJkIGNoYXJhY3Rlcj9cbiAgaWYgKHNlYXJjaC5sZW5ndGggPT09IDEpIHJldHVybiBzZWFyY2guY2hhckNvZGVBdCgwKVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBDb21wYXJlcyBhIGtleWJvYXJkIGV2ZW50IHdpdGggYSBnaXZlbiBrZXlDb2RlIG9yIGtleU5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgS2V5Ym9hcmQgZXZlbnQgdGhhdCBzaG91bGQgYmUgdGVzdGVkXG4gKiBAcGFyYW0ge01peGVkfSBrZXlDb2RlIHtOdW1iZXJ9IG9yIGtleU5hbWUge1N0cmluZ31cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5rZXlDb2RlLmlzRXZlbnRLZXkgPSBmdW5jdGlvbiBpc0V2ZW50S2V5KGV2ZW50LCBuYW1lT3JDb2RlKSB7XG4gIGlmIChldmVudCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIGV2ZW50KSB7XG4gICAgdmFyIGtleUNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlIHx8IGV2ZW50LmNoYXJDb2RlXG4gICAgaWYgKGtleUNvZGUgPT09IG51bGwgfHwga2V5Q29kZSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgbmFtZU9yQ29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGNoZWNrIGNvZGVzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGNvZGVzW25hbWVPckNvZGUudG9Mb3dlckNhc2UoKV1cbiAgICAgIGlmIChmb3VuZE5hbWVkS2V5KSB7IHJldHVybiBmb3VuZE5hbWVkS2V5ID09PSBrZXlDb2RlOyB9XG4gICAgXG4gICAgICAvLyBjaGVjayBhbGlhc2VzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbbmFtZU9yQ29kZS50b0xvd2VyQ2FzZSgpXVxuICAgICAgaWYgKGZvdW5kTmFtZWRLZXkpIHsgcmV0dXJuIGZvdW5kTmFtZWRLZXkgPT09IGtleUNvZGU7IH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lT3JDb2RlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG5hbWVPckNvZGUgPT09IGtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBrZXlDb2RlO1xuXG4vKipcbiAqIEdldCBieSBuYW1lXG4gKlxuICogICBleHBvcnRzLmNvZGVbJ2VudGVyJ10gLy8gPT4gMTNcbiAqL1xuXG52YXIgY29kZXMgPSBleHBvcnRzLmNvZGUgPSBleHBvcnRzLmNvZGVzID0ge1xuICAnYmFja3NwYWNlJzogOCxcbiAgJ3RhYic6IDksXG4gICdlbnRlcic6IDEzLFxuICAnc2hpZnQnOiAxNixcbiAgJ2N0cmwnOiAxNyxcbiAgJ2FsdCc6IDE4LFxuICAncGF1c2UvYnJlYWsnOiAxOSxcbiAgJ2NhcHMgbG9jayc6IDIwLFxuICAnZXNjJzogMjcsXG4gICdzcGFjZSc6IDMyLFxuICAncGFnZSB1cCc6IDMzLFxuICAncGFnZSBkb3duJzogMzQsXG4gICdlbmQnOiAzNSxcbiAgJ2hvbWUnOiAzNixcbiAgJ2xlZnQnOiAzNyxcbiAgJ3VwJzogMzgsXG4gICdyaWdodCc6IDM5LFxuICAnZG93bic6IDQwLFxuICAnaW5zZXJ0JzogNDUsXG4gICdkZWxldGUnOiA0NixcbiAgJ2NvbW1hbmQnOiA5MSxcbiAgJ2xlZnQgY29tbWFuZCc6IDkxLFxuICAncmlnaHQgY29tbWFuZCc6IDkzLFxuICAnbnVtcGFkIConOiAxMDYsXG4gICdudW1wYWQgKyc6IDEwNyxcbiAgJ251bXBhZCAtJzogMTA5LFxuICAnbnVtcGFkIC4nOiAxMTAsXG4gICdudW1wYWQgLyc6IDExMSxcbiAgJ251bSBsb2NrJzogMTQ0LFxuICAnc2Nyb2xsIGxvY2snOiAxNDUsXG4gICdteSBjb21wdXRlcic6IDE4MixcbiAgJ215IGNhbGN1bGF0b3InOiAxODMsXG4gICc7JzogMTg2LFxuICAnPSc6IDE4NyxcbiAgJywnOiAxODgsXG4gICctJzogMTg5LFxuICAnLic6IDE5MCxcbiAgJy8nOiAxOTEsXG4gICdgJzogMTkyLFxuICAnWyc6IDIxOSxcbiAgJ1xcXFwnOiAyMjAsXG4gICddJzogMjIxLFxuICBcIidcIjogMjIyXG59XG5cbi8vIEhlbHBlciBhbGlhc2VzXG5cbnZhciBhbGlhc2VzID0gZXhwb3J0cy5hbGlhc2VzID0ge1xuICAnd2luZG93cyc6IDkxLFxuICAn4oenJzogMTYsXG4gICfijKUnOiAxOCxcbiAgJ+KMgyc6IDE3LFxuICAn4oyYJzogOTEsXG4gICdjdGwnOiAxNyxcbiAgJ2NvbnRyb2wnOiAxNyxcbiAgJ29wdGlvbic6IDE4LFxuICAncGF1c2UnOiAxOSxcbiAgJ2JyZWFrJzogMTksXG4gICdjYXBzJzogMjAsXG4gICdyZXR1cm4nOiAxMyxcbiAgJ2VzY2FwZSc6IDI3LFxuICAnc3BjJzogMzIsXG4gICdzcGFjZWJhcic6IDMyLFxuICAncGd1cCc6IDMzLFxuICAncGdkbic6IDM0LFxuICAnaW5zJzogNDUsXG4gICdkZWwnOiA0NixcbiAgJ2NtZCc6IDkxXG59XG5cbi8qIVxuICogUHJvZ3JhbWF0aWNhbGx5IGFkZCB0aGUgZm9sbG93aW5nXG4gKi9cblxuLy8gbG93ZXIgY2FzZSBjaGFyc1xuZm9yIChpID0gOTc7IGkgPCAxMjM7IGkrKykgY29kZXNbU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpIC0gMzJcblxuLy8gbnVtYmVyc1xuZm9yICh2YXIgaSA9IDQ4OyBpIDwgNTg7IGkrKykgY29kZXNbaSAtIDQ4XSA9IGlcblxuLy8gZnVuY3Rpb24ga2V5c1xuZm9yIChpID0gMTsgaSA8IDEzOyBpKyspIGNvZGVzWydmJytpXSA9IGkgKyAxMTFcblxuLy8gbnVtcGFkIGtleXNcbmZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSBjb2Rlc1snbnVtcGFkICcraV0gPSBpICsgOTZcblxuLyoqXG4gKiBHZXQgYnkgY29kZVxuICpcbiAqICAgZXhwb3J0cy5uYW1lWzEzXSAvLyA9PiAnRW50ZXInXG4gKi9cblxudmFyIG5hbWVzID0gZXhwb3J0cy5uYW1lcyA9IGV4cG9ydHMudGl0bGUgPSB7fSAvLyB0aXRsZSBmb3IgYmFja3dhcmQgY29tcGF0XG5cbi8vIENyZWF0ZSByZXZlcnNlIG1hcHBpbmdcbmZvciAoaSBpbiBjb2RlcykgbmFtZXNbY29kZXNbaV1dID0gaVxuXG4vLyBBZGQgYWxpYXNlc1xuZm9yICh2YXIgYWxpYXMgaW4gYWxpYXNlcykge1xuICBjb2Rlc1thbGlhc10gPSBhbGlhc2VzW2FsaWFzXVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59XG5cbnZhciBfZGVmYXVsdCA9IG93bmVyRG9jdW1lbnQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICBpZiAoc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICAvLyBVc2UgdGhlIHNldFN0YXRlKCkgdXBkYXRlciB0byBlbnN1cmUgc3RhdGUgaXNuJ3Qgc3RhbGUgaW4gY2VydGFpbiBlZGdlIGNhc2VzLlxuICBmdW5jdGlvbiB1cGRhdGVyKHByZXZTdGF0ZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCA/IHN0YXRlIDogbnVsbDtcbiAgfVxuICAvLyBCaW5kaW5nIFwidGhpc1wiIGlzIGltcG9ydGFudCBmb3Igc2hhbGxvdyByZW5kZXJlciBzdXBwb3J0LlxuICB0aGlzLnNldFN0YXRlKHVwZGF0ZXIuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3QgPSB0aGlzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLnByb3BzID0gcHJldlByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBwcmV2U3RhdGU7XG4gIH1cbn1cblxuLy8gUmVhY3QgbWF5IHdhcm4gYWJvdXQgY1dNL2NXUlAvY1dVIG1ldGhvZHMgYmVpbmcgZGVwcmVjYXRlZC5cbi8vIEFkZCBhIGZsYWcgdG8gc3VwcHJlc3MgdGhlc2Ugd2FybmluZ3MgZm9yIHRoaXMgc3BlY2lhbCBjYXNlLlxuY29tcG9uZW50V2lsbE1vdW50Ll9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBpZiAoIXByb3RvdHlwZSB8fCAhcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHBvbHlmaWxsIGNsYXNzIGNvbXBvbmVudHMnKTtcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIC8vIElmIG5ldyBjb21wb25lbnQgQVBJcyBhcmUgZGVmaW5lZCwgXCJ1bnNhZmVcIiBsaWZlY3ljbGVzIHdvbid0IGJlIGNhbGxlZC5cbiAgLy8gRXJyb3IgaWYgYW55IG9mIHRoZXNlIGxpZmVjeWNsZXMgYXJlIHByZXNlbnQsXG4gIC8vIEJlY2F1c2UgdGhleSB3b3VsZCB3b3JrIGRpZmZlcmVudGx5IGJldHdlZW4gb2xkZXIgYW5kIG5ld2VyICgxNi4zKykgdmVyc2lvbnMgb2YgUmVhY3QuXG4gIHZhciBmb3VuZFdpbGxNb3VudE5hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH1cbiAgaWYgKFxuICAgIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsXG4gICkge1xuICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lO1xuICAgIHZhciBuZXdBcGlOYW1lID1cbiAgICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJ1xuICAgICAgICA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcblxuICAgIHRocm93IEVycm9yKFxuICAgICAgJ1Vuc2FmZSBsZWdhY3kgbGlmZWN5Y2xlcyB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgbmV3IGNvbXBvbmVudCBBUElzLlxcblxcbicgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgJyB1c2VzICcgK1xuICAgICAgICBuZXdBcGlOYW1lICtcbiAgICAgICAgJyBidXQgYWxzbyBjb250YWlucyB0aGUgZm9sbG93aW5nIGxlZ2FjeSBsaWZlY3ljbGVzOicgK1xuICAgICAgICAoZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbE1vdW50TmFtZSA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsXG4gICAgICAgICAgPyAnXFxuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZVxuICAgICAgICAgIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKSArXG4gICAgICAgICdcXG5cXG5UaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcydcbiAgICApO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXTSBhbmQgY1dSUCB0byBpbnZva2UgdGhlIG5ldyBzdGF0aWMgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGVzZSBsaWZlY3ljbGVzIGlmIGdEU0ZQIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGNvbXBvbmVudFdpbGxNb3VudDtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXVSB0byBpbnZva2UgdGhlIG5ldyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoYXQgbGlmZWN5Y2xlIGlmIGdTQlUgZXhpc3RzLlxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHBvbHlmaWxsIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgZm9yIGNvbXBvbmVudHMgdGhhdCBkbyBub3QgZGVmaW5lIGNvbXBvbmVudERpZFVwZGF0ZSgpIG9uIHRoZSBwcm90b3R5cGUnXG4gICAgICApO1xuICAgIH1cblxuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcblxuICAgIHZhciBjb21wb25lbnREaWRVcGRhdGUgPSBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlO1xuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVBvbHlmaWxsKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlLFxuICAgICAgbWF5YmVTbmFwc2hvdFxuICAgICkge1xuICAgICAgLy8gMTYuMysgd2lsbCBub3QgZXhlY3V0ZSBvdXIgd2lsbC11cGRhdGUgbWV0aG9kO1xuICAgICAgLy8gSXQgd2lsbCBwYXNzIGEgc25hcHNob3QgdmFsdWUgdG8gZGlkLXVwZGF0ZSB0aG91Z2guXG4gICAgICAvLyBPbGRlciB2ZXJzaW9ucyB3aWxsIHJlcXVpcmUgb3VyIHBvbHlmaWxsZWQgd2lsbC11cGRhdGUgdmFsdWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSBib3RoIGNhc2VzLCBidXQgY2FuJ3QganVzdCBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIFwibWF5YmVTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBmb3IgPD0gMTUueCB2ZXJzaW9ucyB0aGlzIG1pZ2h0IGJlIGEgXCJwcmV2Q29udGV4dFwiIG9iamVjdC5cbiAgICAgIC8vIFdlIGFsc28gY2FuJ3QganVzdCBjaGVjayBcIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGdldC1zbmFwc2hvdCBtaWdodCByZXR1cm4gYSBmYWxzeSB2YWx1ZS5cbiAgICAgIC8vIFNvIGNoZWNrIGZvciB0aGUgZXhwbGljaXQgX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIGZsYWcgdG8gZGV0ZXJtaW5lIGJlaGF2aW9yLlxuICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWdcbiAgICAgICAgPyB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XG4gICAgICAgIDogbWF5YmVTbmFwc2hvdDtcblxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlLmNhbGwodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn1cblxuZXhwb3J0IHsgcG9seWZpbGwgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBjaGFpblByb3BUeXBlcyhwcm9wVHlwZTEsIHByb3BUeXBlMikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgICByZXR1cm4gcHJvcFR5cGUxLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSB8fCBwcm9wVHlwZTIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBjaGFpblByb3BUeXBlcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG52YXIgRm9ybUNvbnRyb2xDb250ZXh0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlQ29udGV4dCgpO1xuXG52YXIgX2RlZmF1bHQgPSBGb3JtQ29udHJvbENvbnRleHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNsb25lRWxlbWVudFdpdGhDbGFzc05hbWUgPSBjbG9uZUVsZW1lbnRXaXRoQ2xhc3NOYW1lO1xuZXhwb3J0cy5jbG9uZUNoaWxkcmVuV2l0aENsYXNzTmFtZSA9IGNsb25lQ2hpbGRyZW5XaXRoQ2xhc3NOYW1lO1xuZXhwb3J0cy5pc011aUVsZW1lbnQgPSBpc011aUVsZW1lbnQ7XG5leHBvcnRzLnNldFJlZiA9IHNldFJlZjtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbmZ1bmN0aW9uIGNsb25lRWxlbWVudFdpdGhDbGFzc05hbWUoY2hpbGQsIGNsYXNzTmFtZSkge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2hpbGQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNoaWxkcmVuV2l0aENsYXNzTmFtZShjaGlsZHJlbiwgY2xhc3NOYW1lKSB7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2xvbmVFbGVtZW50V2l0aENsYXNzTmFtZShjaGlsZCwgY2xhc3NOYW1lKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgJiYgbXVpTmFtZXMuaW5kZXhPZihlbGVtZW50LnR5cGUubXVpTmFtZSkgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufSIsImZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zZXRTdGF0aWMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NldFN0YXRpY1wiKSk7XG5cbnZhciBzZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uIHNldERpc3BsYXlOYW1lKGRpc3BsYXlOYW1lKSB7XG4gIHJldHVybiAoMCwgX3NldFN0YXRpYy5kZWZhdWx0KSgnZGlzcGxheU5hbWUnLCBkaXNwbGF5TmFtZSk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBzZXREaXNwbGF5TmFtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9nZXREaXNwbGF5TmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0RGlzcGxheU5hbWVcIikpO1xuXG52YXIgd3JhcERpc3BsYXlOYW1lID0gZnVuY3Rpb24gd3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsIGhvY05hbWUpIHtcbiAgcmV0dXJuIGhvY05hbWUgKyBcIihcIiArICgwLCBfZ2V0RGlzcGxheU5hbWUuZGVmYXVsdCkoQmFzZUNvbXBvbmVudCkgKyBcIilcIjtcbn07XG5cbnZhciBfZGVmYXVsdCA9IHdyYXBEaXNwbGF5TmFtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3ZhbHVlc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vbnVtYmVyL2lzLWludGVnZXJcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQnV0dG9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0J1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQnV0dG9uXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9JY29uQnV0dG9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0ljb25CdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ljb25CdXR0b25cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1BhcGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1BhcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYXBlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSW5wdXRCYXNlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0lucHV0QmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSW5wdXRCYXNlXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EaXZpZGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0RpdmlkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RpdmlkZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZmlsbDogXCJub25lXCIsXG4gIGQ6IFwiTTAgMGgyNHYyNEgwelwiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem01IDExaC00djRoLTJ2LTRIN3YtMmg0VjdoMnY0aDR2MnpcIlxufSkpLCAnQWRkQ2lyY2xlJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0Nzc0Jhc2VsaW5lLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Nzc0Jhc2VsaW5lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Dc3NCYXNlbGluZVwiKSk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi43LjBcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfY3JlYXRlQnJlYWtwb2ludHMgPSByZXF1aXJlKFwiLi4vc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzXCIpO1xuXG52YXIgX3JlcXVpcmVQcm9wRmFjdG9yeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeVwiKSk7XG5cbi8vIEEgZ3JpZCBjb21wb25lbnQgdXNpbmcgdGhlIGZvbGxvd2luZyBsaWJzIGFzIGluc3BpcmF0aW9uLlxuLy9cbi8vIEZvciB0aGUgaW1wbGVtZW50YXRpb246XG4vLyAtIGh0dHA6Ly92NC1hbHBoYS5nZXRib290c3RyYXAuY29tL2xheW91dC9mbGV4Ym94LWdyaWQvXG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlzdG9mZXJqb3NlcGgvZmxleGJveGdyaWQvYmxvYi9tYXN0ZXIvc3JjL2Nzcy9mbGV4Ym94Z3JpZC5jc3Ncbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL3JveWxlZTA3MDQvcmVhY3QtZmxleGJveC1ncmlkXG4vLyAtIGh0dHBzOi8vbWF0ZXJpYWwuYW5ndWxhcmpzLm9yZy9sYXRlc3QvbGF5b3V0L2ludHJvZHVjdGlvblxuLy9cbi8vIEZvbGxvdyB0aGlzIGZsZXhib3ggR3VpZGUgdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIHVuZGVybHlpbmcgbW9kZWw6XG4vLyAtIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2EtZ3VpZGUtdG8tZmxleGJveC9cbnZhciBHVVRURVJTID0gWzAsIDgsIDE2LCAyNCwgMzIsIDQwXTtcbnZhciBHUklEX1NJWkVTID0gWydhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR3JpZChnbG9iYWxTdHlsZXMsIHRoZW1lLCBicmVha3BvaW50KSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgR1JJRF9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChzaXplKSB7XG4gICAgdmFyIGtleSA9IFwiZ3JpZC1cIi5jb25jYXQoYnJlYWtwb2ludCwgXCItXCIpLmNvbmNhdChzaXplKTtcblxuICAgIGlmIChzaXplID09PSB0cnVlKSB7XG4gICAgICAvLyBGb3IgdGhlIGF1dG8gbGF5b3V0aW5nXG4gICAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAwLFxuICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAnYXV0bycsXG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBtYXhXaWR0aDogJ25vbmUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gS2VlcCA3IHNpZ25pZmljYW50IG51bWJlcnMuXG5cblxuICAgIHZhciB3aWR0aCA9IFwiXCIuY29uY2F0KE1hdGgucm91bmQoc2l6ZSAvIDEyICogMTBlNykgLyAxMGU1LCBcIiVcIik7IC8vIENsb3NlIHRvIHRoZSBib290c3RyYXAgaW1wbGVtZW50YXRpb246XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvOGZjY2FhMjQzOWU5N2VjNzJhNGI3ZGM0MmNjYzFmNjQ5NzkwYWRiMC9zY3NzL21peGlucy9fZ3JpZC5zY3NzI0w0MVxuXG4gICAgc3R5bGVzW2tleV0gPSB7XG4gICAgICBmbGV4QmFzaXM6IHdpZHRoLFxuICAgICAgZmxleEdyb3c6IDAsXG4gICAgICBtYXhXaWR0aDogd2lkdGhcbiAgICB9O1xuICB9KTsgLy8gTm8gbmVlZCBmb3IgYSBtZWRpYSBxdWVyeSBmb3IgdGhlIGZpcnN0IHNpemUuXG5cbiAgaWYgKGJyZWFrcG9pbnQgPT09ICd4cycpIHtcbiAgICAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKGdsb2JhbFN0eWxlcywgc3R5bGVzKTtcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWxTdHlsZXNbdGhlbWUuYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0gc3R5bGVzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR3V0dGVyKHRoZW1lLCBicmVha3BvaW50KSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgR1VUVEVSUy5mb3JFYWNoKGZ1bmN0aW9uIChzcGFjaW5nLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgLy8gU2tpcCB0aGUgZGVmYXVsdCBzdHlsZS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdHlsZXNbXCJzcGFjaW5nLVwiLmNvbmNhdChicmVha3BvaW50LCBcIi1cIikuY29uY2F0KHNwYWNpbmcpXSA9IHtcbiAgICAgIG1hcmdpbjogLXNwYWNpbmcgLyAyLFxuICAgICAgd2lkdGg6IFwiY2FsYygxMDAlICsgXCIuY29uY2F0KHNwYWNpbmcsIFwicHgpXCIpLFxuICAgICAgJyYgPiAkaXRlbSc6IHtcbiAgICAgICAgcGFkZGluZzogc3BhY2luZyAvIDJcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn0gLy8gRGVmYXVsdCBDU1MgdmFsdWVzXG4vLyBmbGV4OiAnMCAxIGF1dG8nLFxuLy8gZmxleERpcmVjdGlvbjogJ3JvdycsXG4vLyBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsXG4vLyBmbGV4V3JhcDogJ25vd3JhcCcsXG4vLyBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuXG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbnRhaW5lcj17dHJ1ZX1gLiAqL1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBpdGVtPXt0cnVlfWAuICovXG4gICAgaXRlbToge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtYXJnaW46ICcwJyAvLyBGb3IgaW5zdGFuY2UsIGl0J3MgdXNlZnVsIHdoZW4gdXNlZCB3aXRoIGEgYGZpZ3VyZWAgZWxlbWVudC5cblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB6ZXJvTWluV2lkdGg9e3RydWV9YC4gKi9cbiAgICB6ZXJvTWluV2lkdGg6IHtcbiAgICAgIG1pbldpZHRoOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpcmVjdGlvbj1cImNvbHVtblwiYC4gKi9cbiAgICAnZGlyZWN0aW9uLXhzLWNvbHVtbic6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpcmVjdGlvbj1cImNvbHVtbi1yZXZlcnNlXCJgLiAqL1xuICAgICdkaXJlY3Rpb24teHMtY29sdW1uLXJldmVyc2UnOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uLXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpcmVjdGlvbj1cInJ3by1yZXZlcnNlXCJgLiAqL1xuICAgICdkaXJlY3Rpb24teHMtcm93LXJldmVyc2UnOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHdyYXA9XCJub3dyYXBcImAuICovXG4gICAgJ3dyYXAteHMtbm93cmFwJzoge1xuICAgICAgZmxleFdyYXA6ICdub3dyYXAnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHdyYXA9XCJyZXZlcnNlXCJgLiAqL1xuICAgICd3cmFwLXhzLXdyYXAtcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhXcmFwOiAnd3JhcC1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiY2VudGVyXCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1jZW50ZXInOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiZmxleC1zdGFydFwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtZmxleC1zdGFydCc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiZmxleC1lbmRcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWZsZXgtZW5kJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiYmFzZWxpbmVcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWJhc2VsaW5lJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJjZW50ZXJcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtY2VudGVyJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJmbGV4LXN0YXJ0XCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLWZsZXgtc3RhcnQnOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdmbGV4LXN0YXJ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJmbGV4LWVuZFwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1mbGV4LWVuZCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ2ZsZXgtZW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJzcGFjZS1iZXR3ZWVuXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLXNwYWNlLWJldHdlZW4nOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJzcGFjZS1hcm91bmRcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtc3BhY2UtYXJvdW5kJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnc3BhY2UtYXJvdW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwiY2VudGVyXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLWNlbnRlcic6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwiZmxleC1lbmRcImAuICovXG4gICAgJ2p1c3RpZnkteHMtZmxleC1lbmQnOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1zcGFjZS1iZXR3ZWVuJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwic3BhY2UtYXJvdW5kXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWFyb3VuZCc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYXJvdW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwic3BhY2UtZXZlbmx5XCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWV2ZW5seSc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtZXZlbmx5J1xuICAgIH1cbiAgfSwgZ2VuZXJhdGVHdXR0ZXIodGhlbWUsICd4cycpLCBfY3JlYXRlQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBrZXkpIHtcbiAgICAvLyBVc2Ugc2lkZSBlZmZlY3Qgb3ZlciBpbW11dGFiaWxpdHkgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgICBnZW5lcmF0ZUdyaWQoYWNjdW11bGF0b3IsIHRoZW1lLCBrZXkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwge30pKTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBHcmlkKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgYWxpZ25Db250ZW50ID0gcHJvcHMuYWxpZ25Db250ZW50LFxuICAgICAgYWxpZ25JdGVtcyA9IHByb3BzLmFsaWduSXRlbXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBpdGVtID0gcHJvcHMuaXRlbSxcbiAgICAgIGp1c3RpZnkgPSBwcm9wcy5qdXN0aWZ5LFxuICAgICAgbGcgPSBwcm9wcy5sZyxcbiAgICAgIG1kID0gcHJvcHMubWQsXG4gICAgICBzbSA9IHByb3BzLnNtLFxuICAgICAgc3BhY2luZyA9IHByb3BzLnNwYWNpbmcsXG4gICAgICB3cmFwID0gcHJvcHMud3JhcCxcbiAgICAgIHhsID0gcHJvcHMueGwsXG4gICAgICB4cyA9IHByb3BzLnhzLFxuICAgICAgemVyb01pbldpZHRoID0gcHJvcHMuemVyb01pbldpZHRoLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiYWxpZ25Db250ZW50XCIsIFwiYWxpZ25JdGVtc1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb250YWluZXJcIiwgXCJkaXJlY3Rpb25cIiwgXCJpdGVtXCIsIFwianVzdGlmeVwiLCBcImxnXCIsIFwibWRcIiwgXCJzbVwiLCBcInNwYWNpbmdcIiwgXCJ3cmFwXCIsIFwieGxcIiwgXCJ4c1wiLCBcInplcm9NaW5XaWR0aFwiXSk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmNvbnRhaW5lciwgY29udGFpbmVyKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuaXRlbSwgaXRlbSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnplcm9NaW5XaWR0aCwgemVyb01pbldpZHRoKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJzcGFjaW5nLXhzLVwiLmNvbmNhdChTdHJpbmcoc3BhY2luZykpXSwgY29udGFpbmVyICYmIHNwYWNpbmcgIT09IDApLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImRpcmVjdGlvbi14cy1cIi5jb25jYXQoU3RyaW5nKGRpcmVjdGlvbikpXSwgZGlyZWN0aW9uICE9PSBHcmlkLmRlZmF1bHRQcm9wcy5kaXJlY3Rpb24pLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcIndyYXAteHMtXCIuY29uY2F0KFN0cmluZyh3cmFwKSldLCB3cmFwICE9PSBHcmlkLmRlZmF1bHRQcm9wcy53cmFwKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJhbGlnbi1pdGVtcy14cy1cIi5jb25jYXQoU3RyaW5nKGFsaWduSXRlbXMpKV0sIGFsaWduSXRlbXMgIT09IEdyaWQuZGVmYXVsdFByb3BzLmFsaWduSXRlbXMpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImFsaWduLWNvbnRlbnQteHMtXCIuY29uY2F0KFN0cmluZyhhbGlnbkNvbnRlbnQpKV0sIGFsaWduQ29udGVudCAhPT0gR3JpZC5kZWZhdWx0UHJvcHMuYWxpZ25Db250ZW50KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJqdXN0aWZ5LXhzLVwiLmNvbmNhdChTdHJpbmcoanVzdGlmeSkpXSwganVzdGlmeSAhPT0gR3JpZC5kZWZhdWx0UHJvcHMuanVzdGlmeSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiZ3JpZC14cy1cIi5jb25jYXQoU3RyaW5nKHhzKSldLCB4cyAhPT0gZmFsc2UpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImdyaWQtc20tXCIuY29uY2F0KFN0cmluZyhzbSkpXSwgc20gIT09IGZhbHNlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJncmlkLW1kLVwiLmNvbmNhdChTdHJpbmcobWQpKV0sIG1kICE9PSBmYWxzZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiZ3JpZC1sZy1cIi5jb25jYXQoU3RyaW5nKGxnKSldLCBsZyAhPT0gZmFsc2UpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImdyaWQteGwtXCIuY29uY2F0KFN0cmluZyh4bCkpXSwgeGwgIT09IGZhbHNlKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBvdGhlcikpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcmlkLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1jb250ZW50YCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgYWxpZ25Db250ZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdHJldGNoJywgJ2NlbnRlcicsICdmbGV4LXN0YXJ0JywgJ2ZsZXgtZW5kJywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJ10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgYWxpZ24taXRlbXNgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlcicsICdmbGV4LWVuZCcsICdzdHJldGNoJywgJ2Jhc2VsaW5lJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF91dGlscy5jb21wb25lbnRQcm9wVHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqY29udGFpbmVyKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LWRpcmVjdGlvbmAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBkaXJlY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3JvdycsICdyb3ctcmV2ZXJzZScsICdjb2x1bW4nLCAnY29sdW1uLXJldmVyc2UnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKml0ZW0qIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKi9cbiAgaXRlbTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBqdXN0aWZ5LWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAganVzdGlmeTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZmxleC1zdGFydCcsICdjZW50ZXInLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3BhY2UtZXZlbmx5J10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBsZ2AgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIGxnOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgbWRgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBtZDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYHNtYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgc206IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0eXBlIGBpdGVtYCBjb21wb25lbnQuXG4gICAqIEl0IGNhbiBvbmx5IGJlIHVzZWQgb24gYSB0eXBlIGBjb250YWluZXJgIGNvbXBvbmVudC5cbiAgICovXG4gIHNwYWNpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihHVVRURVJTKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtd3JhcGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIHdyYXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ25vd3JhcCcsICd3cmFwJywgJ3dyYXAtcmV2ZXJzZSddKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgeGxgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMuXG4gICAqL1xuICB4bDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgdGhlIHNjcmVlbiBzaXplcyB3aXRoIHRoZSBsb3dlc3QgcHJpb3JpdHkuXG4gICAqL1xuICB4czogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgc2V0cyBgbWluLXdpZHRoOiAwYCBvbiB0aGUgaXRlbS5cbiAgICogUmVmZXIgdG8gdGhlIGxpbWl0YXRpb25zIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb24gdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIHVzZSBjYXNlLlxuICAgKi9cbiAgemVyb01pbldpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHZvaWQgMDtcbkdyaWQuZGVmYXVsdFByb3BzID0ge1xuICBhbGlnbkNvbnRlbnQ6ICdzdHJldGNoJyxcbiAgYWxpZ25JdGVtczogJ3N0cmV0Y2gnLFxuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjb250YWluZXI6IGZhbHNlLFxuICBkaXJlY3Rpb246ICdyb3cnLFxuICBpdGVtOiBmYWxzZSxcbiAganVzdGlmeTogJ2ZsZXgtc3RhcnQnLFxuICBsZzogZmFsc2UsXG4gIG1kOiBmYWxzZSxcbiAgc206IGZhbHNlLFxuICBzcGFjaW5nOiAwLFxuICB3cmFwOiAnd3JhcCcsXG4gIHhsOiBmYWxzZSxcbiAgeHM6IGZhbHNlLFxuICB6ZXJvTWluV2lkdGg6IGZhbHNlXG59O1xudmFyIFN0eWxlZEdyaWQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlHcmlkJ1xufSkoR3JpZCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciByZXF1aXJlUHJvcCA9ICgwLCBfcmVxdWlyZVByb3BGYWN0b3J5LmRlZmF1bHQpKCdHcmlkJyk7XG4gIFN0eWxlZEdyaWQucHJvcFR5cGVzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgU3R5bGVkR3JpZC5wcm9wVHlwZXMsIHtcbiAgICBhbGlnbkNvbnRlbnQ6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBhbGlnbkl0ZW1zOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgZGlyZWN0aW9uOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAganVzdGlmeTogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGxnOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIG1kOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIHNtOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIHNwYWNpbmc6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB3cmFwOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgeHM6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgemVyb01pbldpZHRoOiByZXF1aXJlUHJvcCgnemVyb01pbldpZHRoJylcbiAgfSk7XG59XG5cbnZhciBfZGVmYXVsdCA9IFN0eWxlZEdyaWQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZ2V0RHluYW1pY1N0eWxlcztcbi8qKlxuICogRXh0cmFjdHMgYSBzdHlsZXMgb2JqZWN0IHdpdGggb25seSBwcm9wcyB0aGF0IGNvbnRhaW4gZnVuY3Rpb24gdmFsdWVzLlxuICovXG5mdW5jdGlvbiBnZXREeW5hbWljU3R5bGVzKHN0eWxlcykge1xuICB2YXIgdG8gPSBudWxsO1xuXG4gIGZvciAodmFyIGtleSBpbiBzdHlsZXMpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZXNba2V5XTtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpO1xuXG4gICAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICB0b1trZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhciBleHRyYWN0ZWQgPSBnZXREeW5hbWljU3R5bGVzKHZhbHVlKTtcbiAgICAgIGlmIChleHRyYWN0ZWQpIHtcbiAgICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgICAgdG9ba2V5XSA9IGV4dHJhY3RlZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNNYW5hZ2VyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaGVldHNNYW5hZ2VyKTtcblxuICAgIHRoaXMuc2hlZXRzID0gW107XG4gICAgdGhpcy5yZWZzID0gW107XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzTWFuYWdlciwgW3tcbiAgICBrZXk6ICdnZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmtleXMuaW5kZXhPZihrZXkpO1xuICAgICAgcmV0dXJuIHRoaXMuc2hlZXRzW2luZGV4XTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhZGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgICAgdmFyIHNoZWV0cyA9IHRoaXMuc2hlZXRzLFxuICAgICAgICAgIHJlZnMgPSB0aGlzLnJlZnMsXG4gICAgICAgICAga2V5cyA9IHRoaXMua2V5cztcblxuICAgICAgdmFyIGluZGV4ID0gc2hlZXRzLmluZGV4T2Yoc2hlZXQpO1xuXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSByZXR1cm4gaW5kZXg7XG5cbiAgICAgIHNoZWV0cy5wdXNoKHNoZWV0KTtcbiAgICAgIHJlZnMucHVzaCgwKTtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuXG4gICAgICByZXR1cm4gc2hlZXRzLmxlbmd0aCAtIDE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbWFuYWdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFuYWdlKGtleSkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXRzW2luZGV4XTtcbiAgICAgIGlmICh0aGlzLnJlZnNbaW5kZXhdID09PSAwKSBzaGVldC5hdHRhY2goKTtcbiAgICAgIHRoaXMucmVmc1tpbmRleF0rKztcbiAgICAgIGlmICghdGhpcy5rZXlzW2luZGV4XSkgdGhpcy5rZXlzLnNwbGljZShpbmRleCwgMCwga2V5KTtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1bm1hbmFnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgLy8gZXNsaW50LWlnbm9yZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCBcIlNoZWV0c01hbmFnZXI6IGNhbid0IGZpbmQgc2hlZXQgdG8gdW5tYW5hZ2VcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJlZnNbaW5kZXhdID4gMCkge1xuICAgICAgICB0aGlzLnJlZnNbaW5kZXhdLS07XG4gICAgICAgIGlmICh0aGlzLnJlZnNbaW5kZXhdID09PSAwKSB0aGlzLnNoZWV0c1tpbmRleF0uZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2l6ZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5rZXlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2hlZXRzTWFuYWdlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gY2xvbmVTdHlsZTtcblxudmFyIF9pc09ic2VydmFibGUgPSByZXF1aXJlKCcuL2lzT2JzZXJ2YWJsZScpO1xuXG52YXIgX2lzT2JzZXJ2YWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc09ic2VydmFibGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNsb25lU3R5bGUoc3R5bGUpIHtcbiAgLy8gU3VwcG9ydCBlbXB0eSB2YWx1ZXMgaW4gY2FzZSB1c2VyIGVuZHMgdXAgd2l0aCB0aGVtIGJ5IGFjY2lkZW50LlxuICBpZiAoc3R5bGUgPT0gbnVsbCkgcmV0dXJuIHN0eWxlO1xuXG4gIC8vIFN1cHBvcnQgc3RyaW5nIHZhbHVlIGZvciBTaW1wbGVSdWxlLlxuICB2YXIgdHlwZU9mU3R5bGUgPSB0eXBlb2Ygc3R5bGUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN0eWxlKTtcblxuICBpZiAodHlwZU9mU3R5bGUgPT09ICdzdHJpbmcnIHx8IHR5cGVPZlN0eWxlID09PSAnbnVtYmVyJyB8fCB0eXBlT2ZTdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIC8vIFN1cHBvcnQgYXJyYXkgZm9yIEZvbnRGYWNlUnVsZS5cbiAgaWYgKGlzQXJyYXkoc3R5bGUpKSByZXR1cm4gc3R5bGUubWFwKGNsb25lU3R5bGUpO1xuXG4gIC8vIFN1cHBvcnQgT2JzZXJ2YWJsZSBzdHlsZXMuICBPYnNlcnZhYmxlcyBhcmUgaW1tdXRhYmxlLCBzbyB3ZSBkb24ndCBuZWVkIHRvXG4gIC8vIGNvcHkgdGhlbS5cbiAgaWYgKCgwLCBfaXNPYnNlcnZhYmxlMlsnZGVmYXVsdCddKShzdHlsZSkpIHJldHVybiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZSkge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlW25hbWVdO1xuICAgIGlmICgodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBuZXdTdHlsZVtuYW1lXSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG5ld1N0eWxlO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBDU1MgPSBnbG9iYWwuQ1NTO1xuXG52YXIgZW52ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG5cbnZhciBlc2NhcGVSZWdleCA9IC8oW1tcXF0uIyokPjwrfj18XjooKSxcIidgXSkvZztcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKHN0cikge1xuICAvLyBXZSBkb24ndCBuZWVkIHRvIGVzY2FwZSBpdCBpbiBwcm9kdWN0aW9uLCBiZWNhdXNlIHdlIGFyZSBub3QgdXNpbmcgdXNlcidzXG4gIC8vIGlucHV0IGZvciBzZWxlY3RvcnMsIHdlIGFyZSBnZW5lcmF0aW5nIGEgdmFsaWQgc2VsZWN0b3IuXG4gIGlmIChlbnYgPT09ICdwcm9kdWN0aW9uJykgcmV0dXJuIHN0cjtcblxuICBpZiAoIUNTUyB8fCAhQ1NTLmVzY2FwZSkge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xuICB9XG5cbiAgcmV0dXJuIENTUy5lc2NhcGUoc3RyKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIG5zID0gJzJmMWFjYzZjM2E2MDZiMDgyZTVlZWY1ZTU0NDE0ZmZiJztcbmlmIChnbG9iYWxbbnNdID09IG51bGwpIGdsb2JhbFtuc10gPSAwO1xuXG4vLyBCdW5kbGUgbWF5IGNvbnRhaW4gbXVsdGlwbGUgSlNTIHZlcnNpb25zIGF0IHRoZSBzYW1lIHRpbWUuIEluIG9yZGVyIHRvIGlkZW50aWZ5XG4vLyB0aGUgY3VycmVudCB2ZXJzaW9uIHdpdGgganVzdCBvbmUgc2hvcnQgbnVtYmVyIGFuZCB1c2UgaXQgZm9yIGNsYXNzZXMgZ2VuZXJhdGlvblxuLy8gd2UgdXNlIGEgY291bnRlci4gQWxzbyBpdCBpcyBtb3JlIGFjY3VyYXRlLCBiZWNhdXNlIHVzZXIgY2FuIG1hbnVhbGx5IHJlZXZhbHVhdGVcbi8vIHRoZSBtb2R1bGUuXG5leHBvcnRzWydkZWZhdWx0J10gPSBnbG9iYWxbbnNdKys7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfaXNJbkJyb3dzZXIgPSByZXF1aXJlKCdpcy1pbi1icm93c2VyJyk7XG5cbnZhciBfaXNJbkJyb3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbkJyb3dzZXIpO1xuXG52YXIgX1N0eWxlU2hlZXQgPSByZXF1aXJlKCcuL1N0eWxlU2hlZXQnKTtcblxudmFyIF9TdHlsZVNoZWV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlU2hlZXQpO1xuXG52YXIgX1BsdWdpbnNSZWdpc3RyeSA9IHJlcXVpcmUoJy4vUGx1Z2luc1JlZ2lzdHJ5Jyk7XG5cbnZhciBfUGx1Z2luc1JlZ2lzdHJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BsdWdpbnNSZWdpc3RyeSk7XG5cbnZhciBfcnVsZXMgPSByZXF1aXJlKCcuL3BsdWdpbnMvcnVsZXMnKTtcblxudmFyIF9ydWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydWxlcyk7XG5cbnZhciBfb2JzZXJ2YWJsZXMgPSByZXF1aXJlKCcuL3BsdWdpbnMvb2JzZXJ2YWJsZXMnKTtcblxudmFyIF9vYnNlcnZhYmxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYnNlcnZhYmxlcyk7XG5cbnZhciBfZnVuY3Rpb25zID0gcmVxdWlyZSgnLi9wbHVnaW5zL2Z1bmN0aW9ucycpO1xuXG52YXIgX2Z1bmN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mdW5jdGlvbnMpO1xuXG52YXIgX3NoZWV0cyA9IHJlcXVpcmUoJy4vc2hlZXRzJyk7XG5cbnZhciBfc2hlZXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoZWV0cyk7XG5cbnZhciBfU3R5bGVSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9TdHlsZVJ1bGUnKTtcblxudmFyIF9TdHlsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVSdWxlKTtcblxudmFyIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnKTtcblxudmFyIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSk7XG5cbnZhciBfY3JlYXRlUnVsZTIgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZVJ1bGUnKTtcblxudmFyIF9jcmVhdGVSdWxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVJ1bGUyKTtcblxudmFyIF9Eb21SZW5kZXJlciA9IHJlcXVpcmUoJy4vcmVuZGVyZXJzL0RvbVJlbmRlcmVyJyk7XG5cbnZhciBfRG9tUmVuZGVyZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRG9tUmVuZGVyZXIpO1xuXG52YXIgX1ZpcnR1YWxSZW5kZXJlciA9IHJlcXVpcmUoJy4vcmVuZGVyZXJzL1ZpcnR1YWxSZW5kZXJlcicpO1xuXG52YXIgX1ZpcnR1YWxSZW5kZXJlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9WaXJ0dWFsUmVuZGVyZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBkZWZhdWx0UGx1Z2lucyA9IF9ydWxlczJbJ2RlZmF1bHQnXS5jb25jYXQoW19vYnNlcnZhYmxlczJbJ2RlZmF1bHQnXSwgX2Z1bmN0aW9uczJbJ2RlZmF1bHQnXV0pO1xuXG52YXIgaW5zdGFuY2VDb3VudGVyID0gMDtcblxudmFyIEpzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSnNzKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSnNzKTtcblxuICAgIHRoaXMuaWQgPSBpbnN0YW5jZUNvdW50ZXIrKztcbiAgICB0aGlzLnZlcnNpb24gPSBcIjkuOC43XCI7XG4gICAgdGhpcy5wbHVnaW5zID0gbmV3IF9QbHVnaW5zUmVnaXN0cnkyWydkZWZhdWx0J10oKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZTogX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lMlsnZGVmYXVsdCddLFxuICAgICAgUmVuZGVyZXI6IF9pc0luQnJvd3NlcjJbJ2RlZmF1bHQnXSA/IF9Eb21SZW5kZXJlcjJbJ2RlZmF1bHQnXSA6IF9WaXJ0dWFsUmVuZGVyZXIyWydkZWZhdWx0J10sXG4gICAgICBwbHVnaW5zOiBbXVxuICAgIH07XG4gICAgdGhpcy5nZW5lcmF0ZUNsYXNzTmFtZSA9ICgwLCBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUyWydkZWZhdWx0J10pKCk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgIHRoaXMudXNlLmFwcGx5KHRoaXMsIGRlZmF1bHRQbHVnaW5zKTtcbiAgICB0aGlzLnNldHVwKG9wdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEpzcywgW3tcbiAgICBrZXk6ICdzZXR1cCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgPSBvcHRpb25zLmNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lO1xuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVDbGFzc05hbWUgPSBvcHRpb25zLmNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmluc2VydGlvblBvaW50ICE9IG51bGwpIHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgICBpZiAob3B0aW9ucy52aXJ0dWFsIHx8IG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLlJlbmRlcmVyID0gb3B0aW9ucy5SZW5kZXJlciB8fCAob3B0aW9ucy52aXJ0dWFsID8gX1ZpcnR1YWxSZW5kZXJlcjJbJ2RlZmF1bHQnXSA6IF9Eb21SZW5kZXJlcjJbJ2RlZmF1bHQnXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlU3R5bGVTaGVldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXg7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBpbmRleCA9IF9zaGVldHMyWydkZWZhdWx0J10uaW5kZXggPT09IDAgPyAwIDogX3NoZWV0czJbJ2RlZmF1bHQnXS5pbmRleCArIDE7XG4gICAgICB9XG4gICAgICB2YXIgc2hlZXQgPSBuZXcgX1N0eWxlU2hlZXQyWydkZWZhdWx0J10oc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICBqc3M6IHRoaXMsXG4gICAgICAgIGdlbmVyYXRlQ2xhc3NOYW1lOiBvcHRpb25zLmdlbmVyYXRlQ2xhc3NOYW1lIHx8IHRoaXMuZ2VuZXJhdGVDbGFzc05hbWUsXG4gICAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXIsXG4gICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgfSkpO1xuICAgICAgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1NoZWV0KHNoZWV0KTtcblxuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGFjaCB0aGUgU3R5bGUgU2hlZXQgYW5kIHJlbW92ZSBpdCBmcm9tIHRoZSByZWdpc3RyeS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlU3R5bGVTaGVldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVN0eWxlU2hlZXQoc2hlZXQpIHtcbiAgICAgIHNoZWV0LmRldGFjaCgpO1xuICAgICAgX3NoZWV0czJbJ2RlZmF1bHQnXS5yZW1vdmUoc2hlZXQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgcnVsZSB3aXRob3V0IGEgU3R5bGUgU2hlZXQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVSdWxlKG5hbWUpIHtcbiAgICAgIHZhciBzdHlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICAgIC8vIEVuYWJsZSBydWxlIHdpdGhvdXQgbmFtZSBmb3IgaW5saW5lIHN0eWxlcy5cbiAgICAgIGlmICgodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG5hbWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IHN0eWxlO1xuICAgICAgICBzdHlsZSA9IG5hbWU7XG4gICAgICAgIG5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIENhc3QgZnJvbSBSdWxlRmFjdG9yeU9wdGlvbnMgdG8gUnVsZU9wdGlvbnNcbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgICAgdmFyIHJ1bGVPcHRpb25zID0gb3B0aW9ucztcblxuICAgICAgcnVsZU9wdGlvbnMuanNzID0gdGhpcztcbiAgICAgIHJ1bGVPcHRpb25zLlJlbmRlcmVyID0gdGhpcy5vcHRpb25zLlJlbmRlcmVyO1xuICAgICAgaWYgKCFydWxlT3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZSkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWUgPSB0aGlzLmdlbmVyYXRlQ2xhc3NOYW1lO1xuICAgICAgaWYgKCFydWxlT3B0aW9ucy5jbGFzc2VzKSBydWxlT3B0aW9ucy5jbGFzc2VzID0ge307XG4gICAgICB2YXIgcnVsZSA9ICgwLCBfY3JlYXRlUnVsZTNbJ2RlZmF1bHQnXSkobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgICAgaWYgKCFydWxlT3B0aW9ucy5zZWxlY3RvciAmJiBydWxlIGluc3RhbmNlb2YgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXSkge1xuICAgICAgICBydWxlLnNlbGVjdG9yID0gJy4nICsgcnVsZU9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWUocnVsZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBwbHVnaW4uIFBhc3NlZCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2l0aCBhIHJ1bGUgaW5zdGFuY2UuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VzZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVzZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAgIC8vIEF2b2lkcyBhcHBseWluZyBzYW1lIHBsdWdpbiB0d2ljZSwgYXQgbGVhc3QgYmFzZWQgb24gcmVmLlxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5wbHVnaW5zLmluZGV4T2YocGx1Z2luKSA9PT0gLTEpIHtcbiAgICAgICAgICBfdGhpcy5vcHRpb25zLnBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgICAgICAgIF90aGlzLnBsdWdpbnMudXNlKHBsdWdpbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBKc3M7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUGx1Z2luc1JlZ2lzdHJ5ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBsdWdpbnNSZWdpc3RyeSk7XG5cbiAgICB0aGlzLmhvb2tzID0ge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsIGBvbkNyZWF0ZVJ1bGVgIGhvb2tzIGFuZCByZXR1cm4gYW4gb2JqZWN0IGlmIHJldHVybmVkIGJ5IGEgaG9vay5cbiAgICAgICAqL1xuICAgIH07XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGx1Z2luc1JlZ2lzdHJ5LCBbe1xuICAgIGtleTogJ29uQ3JlYXRlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaG9va3Mub25DcmVhdGVSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5ob29rcy5vbkNyZWF0ZVJ1bGVbaV0obmFtZSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgYG9uUHJvY2Vzc1J1bGVgIGhvb2tzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvblByb2Nlc3NSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgICBpZiAocnVsZS5pc1Byb2Nlc3NlZCkgcmV0dXJuO1xuICAgICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaG9va3Mub25Qcm9jZXNzUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmhvb2tzLm9uUHJvY2Vzc1J1bGVbaV0ocnVsZSwgc2hlZXQpO1xuICAgICAgfVxuXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBpZiAocnVsZS5zdHlsZSkgdGhpcy5vblByb2Nlc3NTdHlsZShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG5cbiAgICAgIHJ1bGUuaXNQcm9jZXNzZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgYG9uUHJvY2Vzc1N0eWxlYCBob29rcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25Qcm9jZXNzU3R5bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICAgIHZhciBuZXh0U3R5bGUgPSBzdHlsZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhvb2tzLm9uUHJvY2Vzc1N0eWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5leHRTdHlsZSA9IHRoaXMuaG9va3Mub25Qcm9jZXNzU3R5bGVbaV0obmV4dFN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgcnVsZS5zdHlsZSA9IG5leHRTdHlsZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGBvblByb2Nlc3NTaGVldGAgaG9va3MuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29uUHJvY2Vzc1NoZWV0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9jZXNzU2hlZXQoc2hlZXQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ob29rcy5vblByb2Nlc3NTaGVldC5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmhvb2tzLm9uUHJvY2Vzc1NoZWV0W2ldKHNoZWV0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGBvblVwZGF0ZWAgaG9va3MuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29uVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ob29rcy5vblVwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmhvb2tzLm9uVXBkYXRlW2ldKGRhdGEsIHJ1bGUsIHNoZWV0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGBvbkNoYW5nZVZhbHVlYCBob29rcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25DaGFuZ2VWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHZhbHVlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhvb2tzLm9uQ2hhbmdlVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcHJvY2Vzc2VkVmFsdWUgPSB0aGlzLmhvb2tzLm9uQ2hhbmdlVmFsdWVbaV0ocHJvY2Vzc2VkVmFsdWUsIHByb3AsIHJ1bGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2Nlc3NlZFZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgICAqIElmIGZ1bmN0aW9uIGlzIHBhc3NlZCwgaXQgaXMgYSBzaG9ydGN1dCBmb3IgYHtvblByb2Nlc3NSdWxlfWAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VzZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVzZShwbHVnaW4pIHtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gcGx1Z2luKSB7XG4gICAgICAgIGlmICh0aGlzLmhvb2tzW25hbWVdKSB0aGlzLmhvb2tzW25hbWVdLnB1c2gocGx1Z2luW25hbWVdKTtlbHNlICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoZmFsc2UsICdbSlNTXSBVbmtub3duIGhvb2sgXCIlc1wiLicsIG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQbHVnaW5zUmVnaXN0cnk7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFBsdWdpbnNSZWdpc3RyeTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfU2ltcGxlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL1NpbXBsZVJ1bGUnKTtcblxudmFyIF9TaW1wbGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NpbXBsZVJ1bGUpO1xuXG52YXIgX0tleWZyYW1lc1J1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9LZXlmcmFtZXNSdWxlJyk7XG5cbnZhciBfS2V5ZnJhbWVzUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9LZXlmcmFtZXNSdWxlKTtcblxudmFyIF9Db25kaXRpb25hbFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9Db25kaXRpb25hbFJ1bGUnKTtcblxudmFyIF9Db25kaXRpb25hbFJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29uZGl0aW9uYWxSdWxlKTtcblxudmFyIF9Gb250RmFjZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9Gb250RmFjZVJ1bGUnKTtcblxudmFyIF9Gb250RmFjZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRm9udEZhY2VSdWxlKTtcblxudmFyIF9WaWV3cG9ydFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9WaWV3cG9ydFJ1bGUnKTtcblxudmFyIF9WaWV3cG9ydFJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVmlld3BvcnRSdWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgJ0BjaGFyc2V0JzogX1NpbXBsZVJ1bGUyWydkZWZhdWx0J10sXG4gICdAaW1wb3J0JzogX1NpbXBsZVJ1bGUyWydkZWZhdWx0J10sXG4gICdAbmFtZXNwYWNlJzogX1NpbXBsZVJ1bGUyWydkZWZhdWx0J10sXG4gICdAa2V5ZnJhbWVzJzogX0tleWZyYW1lc1J1bGUyWydkZWZhdWx0J10sXG4gICdAbWVkaWEnOiBfQ29uZGl0aW9uYWxSdWxlMlsnZGVmYXVsdCddLFxuICAnQHN1cHBvcnRzJzogX0NvbmRpdGlvbmFsUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0Bmb250LWZhY2UnOiBfRm9udEZhY2VSdWxlMlsnZGVmYXVsdCddLFxuICAnQHZpZXdwb3J0JzogX1ZpZXdwb3J0UnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0AtbXMtdmlld3BvcnQnOiBfVmlld3BvcnRSdWxlMlsnZGVmYXVsdCddXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHBsdWdpbnMgd2hpY2ggd2lsbCByZWdpc3RlciBhbGwgcnVsZXMuXG4gICAqL1xufTtcbnZhciBwbHVnaW5zID0gT2JqZWN0LmtleXMoY2xhc3NlcykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgLy8gaHR0cHM6Ly9qc3BlcmYuY29tL2luZGV4b2YtdnMtc3Vic3RyLXZzLXJlZ2V4LWF0LXRoZS1iZWdpbm5pbmctM1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKCdeJyArIGtleSk7XG4gIHZhciBSdWxlQ2xhc3MgPSBjbGFzc2VzW2tleV07XG4gIHZhciBvbkNyZWF0ZVJ1bGUgPSBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIHJldHVybiByZS50ZXN0KG5hbWUpID8gbmV3IFJ1bGVDbGFzcyhuYW1lLCBkZWNsLCBvcHRpb25zKSA6IG51bGw7XG4gIH07XG4gIHJldHVybiB7IG9uQ3JlYXRlUnVsZTogb25DcmVhdGVSdWxlIH07XG59KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gcGx1Z2luczsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTaW1wbGVSdWxlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2ltcGxlUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAnc2ltcGxlJztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICBfY3JlYXRlQ2xhc3MoU2ltcGxlUnVsZSwgW3tcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMudmFsdWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgc3RyICs9IHRoaXMua2V5ICsgJyAnICsgdGhpcy52YWx1ZVtpbmRleF0gKyAnOyc7XG4gICAgICAgICAgaWYgKHRoaXMudmFsdWVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmtleSArICcgJyArIHRoaXMudmFsdWUgKyAnOyc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNpbXBsZVJ1bGU7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNpbXBsZVJ1bGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX1J1bGVMaXN0ID0gcmVxdWlyZSgnLi4vUnVsZUxpc3QnKTtcblxudmFyIF9SdWxlTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SdWxlTGlzdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBSdWxlIGZvciBAa2V5ZnJhbWVzXG4gKi9cbnZhciBLZXlmcmFtZXNSdWxlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEtleWZyYW1lc1J1bGUpO1xuXG4gICAgdGhpcy50eXBlID0gJ2tleWZyYW1lcyc7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJ1bGVzID0gbmV3IF9SdWxlTGlzdDJbJ2RlZmF1bHQnXShfZXh0ZW5kcyh7fSwgb3B0aW9ucywgeyBwYXJlbnQ6IHRoaXMgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIHRoaXMub3B0aW9ucywge1xuICAgICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICAgIHNlbGVjdG9yOiBuYW1lXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoS2V5ZnJhbWVzUnVsZSwgW3tcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHsgaW5kZW50OiAxIH07XG5cbiAgICAgIHZhciBpbm5lciA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgICBpZiAoaW5uZXIpIGlubmVyICs9ICdcXG4nO1xuICAgICAgcmV0dXJuIHRoaXMua2V5ICsgJyB7XFxuJyArIGlubmVyICsgJ30nO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBLZXlmcmFtZXNSdWxlO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBLZXlmcmFtZXNSdWxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SdWxlTGlzdCA9IHJlcXVpcmUoJy4uL1J1bGVMaXN0Jyk7XG5cbnZhciBfUnVsZUxpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVsZUxpc3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xudmFyIENvbmRpdGlvbmFsUnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbmRpdGlvbmFsUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAnY29uZGl0aW9uYWwnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBfUnVsZUxpc3QyWydkZWZhdWx0J10oX2V4dGVuZHMoe30sIG9wdGlvbnMsIHsgcGFyZW50OiB0aGlzIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKENvbmRpdGlvbmFsUnVsZSwgW3tcbiAgICBrZXk6ICdnZXRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5kZXhPZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogeyBpbmRlbnQ6IDEgfTtcblxuICAgICAgdmFyIGlubmVyID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICAgIHJldHVybiBpbm5lciA/IHRoaXMua2V5ICsgJyB7XFxuJyArIGlubmVyICsgJ1xcbn0nIDogJyc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbmRpdGlvbmFsUnVsZTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gQ29uZGl0aW9uYWxSdWxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF90b0NzcyA9IHJlcXVpcmUoJy4uL3V0aWxzL3RvQ3NzJyk7XG5cbnZhciBfdG9Dc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Dc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBGb250RmFjZVJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvbnRGYWNlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvbnRGYWNlUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhGb250RmFjZVJ1bGUsIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxlKSkge1xuICAgICAgICB2YXIgc3RyID0gJyc7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHN0ciArPSAoMCwgX3RvQ3NzMlsnZGVmYXVsdCddKSh0aGlzLmtleSwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICAgIGlmICh0aGlzLnN0eWxlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDAsIF90b0NzczJbJ2RlZmF1bHQnXSkodGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGb250RmFjZVJ1bGU7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEZvbnRGYWNlUnVsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfdG9Dc3MgPSByZXF1aXJlKCcuLi91dGlscy90b0NzcycpO1xuXG52YXIgX3RvQ3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ3NzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgVmlld3BvcnRSdWxlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBWaWV3cG9ydFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWV3cG9ydFJ1bGUpO1xuXG4gICAgdGhpcy50eXBlID0gJ3ZpZXdwb3J0JztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhWaWV3cG9ydFJ1bGUsIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gKDAsIF90b0NzczJbJ2RlZmF1bHQnXSkodGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBWaWV3cG9ydFJ1bGU7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFZpZXdwb3J0UnVsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfU3R5bGVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvU3R5bGVSdWxlJyk7XG5cbnZhciBfU3R5bGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlUnVsZSk7XG5cbnZhciBfY3JlYXRlUnVsZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2NyZWF0ZVJ1bGUnKTtcblxudmFyIF9jcmVhdGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVJ1bGUpO1xuXG52YXIgX2lzT2JzZXJ2YWJsZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzT2JzZXJ2YWJsZScpO1xuXG52YXIgX2lzT2JzZXJ2YWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc09ic2VydmFibGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIGlmICghKDAsIF9pc09ic2VydmFibGUyWydkZWZhdWx0J10pKGRlY2wpKSByZXR1cm4gbnVsbDtcblxuICAgIC8vIENhc3QgYGRlY2xgIHRvIGBPYnNlcnZhYmxlYCwgc2luY2UgaXQgcGFzc2VkIHRoZSB0eXBlIGd1YXJkLlxuICAgIHZhciBzdHlsZSQgPSBkZWNsO1xuXG4gICAgdmFyIHJ1bGUgPSAoMCwgX2NyZWF0ZVJ1bGUyWydkZWZhdWx0J10pKG5hbWUsIHt9LCBvcHRpb25zKTtcblxuICAgIC8vIFRPRE9cbiAgICAvLyBDYWxsIGBzdHJlYW0uc3Vic2NyaWJlKClgIHJldHVybnMgYSBzdWJzY3JpcHRpb24sIHdoaWNoIHNob3VsZCBiZSBleHBsaWNpdGx5XG4gICAgLy8gdW5zdWJzY3JpYmVkIGZyb20gd2hlbiB3ZSBrbm93IHRoaXMgc2hlZXQgaXMgbm8gbG9uZ2VyIG5lZWRlZC5cbiAgICBzdHlsZSQuc3Vic2NyaWJlKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgICBydWxlLnByb3AocHJvcCwgc3R5bGVbcHJvcF0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJ1bGU7XG4gIH0sXG4gIG9uUHJvY2Vzc1J1bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmICghKHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSkgcmV0dXJuO1xuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKHByb3ApIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgaWYgKCEoMCwgX2lzT2JzZXJ2YWJsZTJbJ2RlZmF1bHQnXSkodmFsdWUpKSByZXR1cm4gJ2NvbnRpbnVlJztcbiAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgIHZhbHVlLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQobmV4dFZhbHVlKSB7XG4gICAgICAgICAgc3R5bGVSdWxlLnByb3AocHJvcCwgbmV4dFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AocHJvcCk7XG5cbiAgICAgIGlmIChfcmV0ID09PSAnY29udGludWUnKSBjb250aW51ZTtcbiAgICB9XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1J1bGVMaXN0ID0gcmVxdWlyZSgnLi4vUnVsZUxpc3QnKTtcblxudmFyIF9SdWxlTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SdWxlTGlzdCk7XG5cbnZhciBfU3R5bGVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvU3R5bGVSdWxlJyk7XG5cbnZhciBfU3R5bGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlUnVsZSk7XG5cbnZhciBfY3JlYXRlUnVsZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2NyZWF0ZVJ1bGUnKTtcblxudmFyIF9jcmVhdGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVJ1bGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8vIEEgc3ltYm9sIHJlcGxhY2VtZW50LlxudmFyIG5vdyA9IERhdGUubm93KCk7XG5cbnZhciBmblZhbHVlc05zID0gJ2ZuVmFsdWVzJyArIG5vdztcbnZhciBmblN0eWxlTnMgPSAnZm5TdHlsZScgKyArK25vdztcblxuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBkZWNsICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgcnVsZSA9ICgwLCBfY3JlYXRlUnVsZTJbJ2RlZmF1bHQnXSkobmFtZSwge30sIG9wdGlvbnMpO1xuICAgIHJ1bGVbZm5TdHlsZU5zXSA9IGRlY2w7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH0sXG4gIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIHZhciBmbiA9IHt9O1xuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG4gICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICBmbltwcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgICBydWxlID0gcnVsZTtcbiAgICBydWxlW2ZuVmFsdWVzTnNdID0gZm47XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9LFxuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSkge1xuICAgIC8vIEl0IGlzIGEgcnVsZXMgY29udGFpbmVyIGxpa2UgZm9yIGUuZy4gQ29uZGl0aW9uYWxSdWxlLlxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgX1J1bGVMaXN0MlsnZGVmYXVsdCddKSB7XG4gICAgICBydWxlLnJ1bGVzLnVwZGF0ZShkYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCEocnVsZSBpbnN0YW5jZW9mIF9TdHlsZVJ1bGUyWydkZWZhdWx0J10pKSByZXR1cm47XG5cbiAgICBydWxlID0gcnVsZTtcblxuICAgIC8vIElmIHdlIGhhdmUgYSBmbiB2YWx1ZXMgbWFwLCBpdCBpcyBhIHJ1bGUgd2l0aCBmdW5jdGlvbiB2YWx1ZXMuXG4gICAgaWYgKHJ1bGVbZm5WYWx1ZXNOc10pIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gcnVsZVtmblZhbHVlc05zXSkge1xuICAgICAgICBydWxlLnByb3AocHJvcCwgcnVsZVtmblZhbHVlc05zXVtwcm9wXShkYXRhKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcnVsZSA9IHJ1bGU7XG5cbiAgICB2YXIgZm5TdHlsZSA9IHJ1bGVbZm5TdHlsZU5zXTtcblxuICAgIC8vIElmIHdlIGhhdmUgYSBzdHlsZSBmdW5jdGlvbiwgdGhlIGVudGlyZSBydWxlIGlzIGR5bmFtaWMgYW5kIHN0eWxlIG9iamVjdFxuICAgIC8vIHdpbGwgYmUgcmV0dXJuZWQgZnJvbSB0aGF0IGZ1bmN0aW9uLlxuICAgIGlmIChmblN0eWxlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBmblN0eWxlKGRhdGEpO1xuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgcnVsZS5wcm9wKF9wcm9wLCBzdHlsZVtfcHJvcF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX3NoZWV0cyA9IHJlcXVpcmUoJy4uL3NoZWV0cycpO1xuXG52YXIgX3NoZWV0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGVldHMpO1xuXG52YXIgX1N0eWxlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL1N0eWxlUnVsZScpO1xuXG52YXIgX1N0eWxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVJ1bGUpO1xuXG52YXIgX3RvQ3NzVmFsdWUgPSByZXF1aXJlKCcuLi91dGlscy90b0Nzc1ZhbHVlJyk7XG5cbnZhciBfdG9Dc3NWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzc1ZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIENhY2hlIHRoZSB2YWx1ZSBmcm9tIHRoZSBmaXJzdCB0aW1lIGEgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICovXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlID0gdm9pZCAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEdldCBhIHN0eWxlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eVZhbHVlKGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY3NzUnVsZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJRSBtYXkgdGhyb3cgaWYgcHJvcGVydHkgaXMgdW5rbm93bi5cbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gc2V0UHJvcGVydHkoY3NzUnVsZSwgcHJvcCwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgY3NzVmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY3NzVmFsdWUgPSAoMCwgX3RvQ3NzVmFsdWUyWydkZWZhdWx0J10pKHZhbHVlLCB0cnVlKTtcblxuICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJlbW92ZSBhIHN0eWxlIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgY3NzUnVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1tKU1NdIERPTUV4Y2VwdGlvbiBcIiVzXCIgd2FzIHRocm93bi4gVHJpZWQgdG8gcmVtb3ZlIHByb3BlcnR5IFwiJXNcIi4nLCBlcnIubWVzc2FnZSwgcHJvcCk7XG4gIH1cbn1cblxudmFyIENTU1J1bGVUeXBlcyA9IHtcbiAgU1RZTEVfUlVMRTogMSxcbiAgS0VZRlJBTUVTX1JVTEU6IDdcblxuICAvKipcbiAgICogR2V0IHRoZSBDU1MgUnVsZSBrZXkuXG4gICAqL1xuXG59O3ZhciBnZXRLZXkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBleHRyYWN0S2V5ID0gZnVuY3Rpb24gZXh0cmFjdEtleShjc3NUZXh0KSB7XG4gICAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgcmV0dXJuIGNzc1RleHQuc3Vic3RyKGZyb20sIGNzc1RleHQuaW5kZXhPZigneycpIC0gMSk7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjc3NSdWxlKSB7XG4gICAgaWYgKGNzc1J1bGUudHlwZSA9PT0gQ1NTUnVsZVR5cGVzLlNUWUxFX1JVTEUpIHJldHVybiBjc3NSdWxlLnNlbGVjdG9yVGV4dDtcbiAgICBpZiAoY3NzUnVsZS50eXBlID09PSBDU1NSdWxlVHlwZXMuS0VZRlJBTUVTX1JVTEUpIHtcbiAgICAgIHZhciBuYW1lID0gY3NzUnVsZS5uYW1lO1xuXG4gICAgICBpZiAobmFtZSkgcmV0dXJuICdAa2V5ZnJhbWVzICcgKyBuYW1lO1xuXG4gICAgICAvLyBUaGVyZSBpcyBubyBydWxlLm5hbWUgaW4gdGhlIGZvbGxvd2luZyBicm93c2VyczpcbiAgICAgIC8vIC0gSUUgOVxuICAgICAgLy8gLSBTYWZhcmkgNy4xLjhcbiAgICAgIC8vIC0gTW9iaWxlIFNhZmFyaSA5LjAuMFxuICAgICAgdmFyIGNzc1RleHQgPSBjc3NSdWxlLmNzc1RleHQ7XG5cbiAgICAgIHJldHVybiAnQCcgKyBleHRyYWN0S2V5KGNzc1RleHQsIGNzc1RleHQuaW5kZXhPZigna2V5ZnJhbWVzJykpO1xuICAgIH1cblxuICAgIC8vIENvbmRpdGlvbmFscy5cbiAgICByZXR1cm4gZXh0cmFjdEtleShjc3NSdWxlLmNzc1RleHQpO1xuICB9O1xufSgpO1xuXG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cbmZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDtcblxuICAvLyBSZXR1cm4gZmFsc2UgaWYgc2V0dGVyIHdhcyBub3Qgc3VjY2Vzc2Z1bC5cbiAgLy8gQ3VycmVudGx5IHdvcmtzIGluIGNocm9tZSBvbmx5LlxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBgaGVhZGAgZWxlbWVudCB1cG9uIHRoZSBmaXJzdCBjYWxsIGFuZCBjYWNoZXMgaXQuXG4gKi9cbnZhciBnZXRIZWFkID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG59KTtcblxuLyoqXG4gKiBHZXRzIGEgbWFwIG9mIHJ1bGUga2V5cywgd2hlcmUgdGhlIHByb3BlcnR5IGlzIGFuIHVuZXNjYXBlZCBrZXkgYW5kIHZhbHVlXG4gKiBpcyBhIHBvdGVudGlhbGx5IGVzY2FwZWQgb25lLlxuICogSXQgaXMgdXNlZCB0byBpZGVudGlmeSBDU1MgcnVsZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIEpTUyBydWxlcy4gQXMgYW4gaWRlbnRpZmllclxuICogZm9yIENTU1N0eWxlUnVsZSB3ZSBub3JtYWxseSB1c2UgYHNlbGVjdG9yVGV4dGAuIFRob3VnaCBpZiBvcmlnaW5hbCBzZWxlY3RvciB0ZXh0XG4gKiBjb250YWlucyBlc2NhcGVkIGNvZGUgcG9pbnRzIGUuZy4gYDpub3QoI1xcXFwyMClgLCBDU1NPTSB3aWxsIGNvbXBpbGUgaXQgdG8gYDpub3QoIyApYFxuICogYW5kIHNvIENTUyBydWxlJ3MgYHNlbGVjdG9yVGV4dGAgd29uJ3QgbWF0Y2ggSlNTIHJ1bGUgc2VsZWN0b3IuXG4gKlxuICogaHR0cHM6Ly93d3cudzMub3JnL0ludGVybmF0aW9uYWwvcXVlc3Rpb25zL3FhLWVzY2FwZXMjY3NzZXNjYXBlc1xuICovXG52YXIgZ2V0VW5lc2NhcGVkS2V5c01hcCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0eWxlID0gdm9pZCAwO1xuICB2YXIgaXNBdHRhY2hlZCA9IGZhbHNlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAocnVsZXMpIHtcbiAgICB2YXIgbWFwID0ge307XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI2OTZcbiAgICBpZiAoIXN0eWxlKSBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSBydWxlc1tpXTtcbiAgICAgIGlmICghKHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSkgY29udGludWU7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBydWxlLnNlbGVjdG9yO1xuICAgICAgLy8gT25seSB1bmVzY2FwZSBzZWxlY3RvciBvdmVyIENTU09NIGlmIGl0IGNvbnRhaW5zIGEgYmFjayBzbGFzaC5cblxuICAgICAgaWYgKHNlbGVjdG9yICYmIHNlbGVjdG9yLmluZGV4T2YoJ1xcXFwnKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gTGF6aWxseSBhdHRhY2ggd2hlbiBuZWVkZWQuXG4gICAgICAgIGlmICghaXNBdHRhY2hlZCkge1xuICAgICAgICAgIGdldEhlYWQoKS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgICAgaXNBdHRhY2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBzZWxlY3RvciArICcge30nO1xuICAgICAgICB2YXIgX3N0eWxlID0gc3R5bGUsXG4gICAgICAgICAgICBzaGVldCA9IF9zdHlsZS5zaGVldDtcblxuICAgICAgICBpZiAoc2hlZXQpIHtcbiAgICAgICAgICB2YXIgY3NzUnVsZXMgPSBzaGVldC5jc3NSdWxlcztcblxuICAgICAgICAgIGlmIChjc3NSdWxlcykgbWFwW2Nzc1J1bGVzWzBdLnNlbGVjdG9yVGV4dF0gPSBydWxlLmtleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNBdHRhY2hlZCkge1xuICAgICAgZ2V0SGVhZCgpLnJlbW92ZUNoaWxkKHN0eWxlKTtcbiAgICAgIGlzQXR0YWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbiAgfTtcbn0oKTtcblxuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggYW4gaW5kZXggaGlnaGVyIHRoYW4gdGhlIHBhc3NlZCBvbmUuXG4gKi9cbmZ1bmN0aW9uIGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5kZXggPiBvcHRpb25zLmluZGV4ICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIHRoZSBoaWdoZXN0IGluZGV4LlxuICovXG5mdW5jdGlvbiBmaW5kSGlnaGVzdFNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSByZWdpc3RyeS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEZpbmQgYSBjb21tZW50IHdpdGggXCJqc3NcIiBpbnNpZGUuXG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tZW50Tm9kZSh0ZXh0KSB7XG4gIHZhciBoZWFkID0gZ2V0SGVhZCgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWQuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBub2RlID0gaGVhZC5jaGlsZE5vZGVzW2ldO1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEZpbmQgYSBub2RlIGJlZm9yZSB3aGljaCB3ZSBjYW4gaW5zZXJ0IHRoZSBzaGVldC5cbiAqL1xuZnVuY3Rpb24gZmluZFByZXZOb2RlKG9wdGlvbnMpIHtcbiAgdmFyIHJlZ2lzdHJ5ID0gX3NoZWV0czJbJ2RlZmF1bHQnXS5yZWdpc3RyeTtcblxuXG4gIGlmIChyZWdpc3RyeS5sZW5ndGggPiAwKSB7XG4gICAgLy8gVHJ5IHRvIGluc2VydCBiZWZvcmUgdGhlIG5leHQgaGlnaGVyIHNoZWV0LlxuICAgIHZhciBzaGVldCA9IGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSwgb3B0aW9ucyk7XG4gICAgaWYgKHNoZWV0KSByZXR1cm4gc2hlZXQucmVuZGVyZXIuZWxlbWVudDtcblxuICAgIC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG4gICAgc2hlZXQgPSBmaW5kSGlnaGVzdFNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKTtcbiAgICBpZiAoc2hlZXQpIHJldHVybiBzaGVldC5yZW5kZXJlci5lbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgfVxuXG4gIC8vIFRyeSB0byBmaW5kIGEgY29tbWVudCBwbGFjZWhvbGRlciBpZiByZWdpc3RyeSBpcyBlbXB0eS5cbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50ID09PSAnc3RyaW5nJykge1xuICAgIHZhciBjb21tZW50ID0gZmluZENvbW1lbnROb2RlKGluc2VydGlvblBvaW50KTtcbiAgICBpZiAoY29tbWVudCkgcmV0dXJuIGNvbW1lbnQubmV4dFNpYmxpbmc7XG4gICAgLy8gSWYgdXNlciBzcGVjaWZpZXMgYW4gaW5zZXJ0aW9uIHBvaW50IGFuZCBpdCBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgZG9jdW1lbnQgLVxuICAgIC8vIGJhZCBzcGVjaWZpY2l0eSBpc3N1ZXMgbWF5IGFwcGVhci5cbiAgICAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGluc2VydGlvblBvaW50ID09PSAnanNzJywgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBcIiVzXCIgbm90IGZvdW5kLicsIGluc2VydGlvblBvaW50KTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gdGhlIERPTS5cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGUoc3R5bGUsIG9wdGlvbnMpIHtcbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICB2YXIgcHJldk5vZGUgPSBmaW5kUHJldk5vZGUob3B0aW9ucyk7XG5cbiAgaWYgKHByZXZOb2RlKSB7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBwcmV2Tm9kZS5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBwcmV2Tm9kZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV29ya3Mgd2l0aCBpZnJhbWVzIGFuZCBhbnkgbm9kZSB0eXBlcy5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludC5ub2RlVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MTMyODcyOC9mb3JjZS1jYXN0aW5nLWluLWZsb3dcbiAgICB2YXIgaW5zZXJ0aW9uUG9pbnRFbGVtZW50ID0gaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdmFyIF9wYXJlbnROb2RlID0gaW5zZXJ0aW9uUG9pbnRFbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgICBpZiAoX3BhcmVudE5vZGUpIF9wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgaW5zZXJ0aW9uUG9pbnRFbGVtZW50Lm5leHRTaWJsaW5nKTtlbHNlICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoZmFsc2UsICdbSlNTXSBJbnNlcnRpb24gcG9pbnQgaXMgbm90IGluIHRoZSBET00uJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZ2V0SGVhZCgpLmluc2VydEJlZm9yZShzdHlsZSwgcHJldk5vZGUpO1xufVxuXG4vKipcbiAqIFJlYWQganNzIG5vbmNlIHNldHRpbmcgZnJvbSB0aGUgcGFnZSBpZiB0aGUgdXNlciBoYXMgc2V0IGl0LlxuICovXG52YXIgZ2V0Tm9uY2UgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW3Byb3BlcnR5PVwiY3NwLW5vbmNlXCJdJyk7XG4gIHJldHVybiBub2RlID8gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSA6IG51bGw7XG59KTtcblxudmFyIERvbVJlbmRlcmVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEb21SZW5kZXJlcihzaGVldCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb21SZW5kZXJlcik7XG5cbiAgICB0aGlzLmdldFByb3BlcnR5VmFsdWUgPSBnZXRQcm9wZXJ0eVZhbHVlO1xuICAgIHRoaXMuc2V0UHJvcGVydHkgPSBzZXRQcm9wZXJ0eTtcbiAgICB0aGlzLnJlbW92ZVByb3BlcnR5ID0gcmVtb3ZlUHJvcGVydHk7XG4gICAgdGhpcy5zZXRTZWxlY3RvciA9IHNldFNlbGVjdG9yO1xuICAgIHRoaXMuZ2V0S2V5ID0gZ2V0S2V5O1xuICAgIHRoaXMuZ2V0VW5lc2NhcGVkS2V5c01hcCA9IGdldFVuZXNjYXBlZEtleXNNYXA7XG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG5cbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIF9zaGVldHMyWydkZWZhdWx0J10uYWRkKHNoZWV0KTtcblxuICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcblxuICAgIHZhciBfcmVmID0gdGhpcy5zaGVldCA/IHRoaXMuc2hlZXQub3B0aW9ucyA6IHt9LFxuICAgICAgICBtZWRpYSA9IF9yZWYubWVkaWEsXG4gICAgICAgIG1ldGEgPSBfcmVmLm1ldGEsXG4gICAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQ7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qc3MnLCAnJyk7XG4gICAgaWYgKG1lZGlhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgICBpZiAobWV0YSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXRhJywgbWV0YSk7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgLy8gSFRNTFN0eWxlRWxlbWVudCBuZWVkcyBmaXhpbmcgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI2OTZcblxuXG4gIF9jcmVhdGVDbGFzcyhEb21SZW5kZXJlciwgW3tcbiAgICBrZXk6ICdhdHRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgICAvLyBJbiB0aGUgY2FzZSB0aGUgZWxlbWVudCBub2RlIGlzIGV4dGVybmFsIGFuZCBpdCBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgfHwgIXRoaXMuc2hlZXQpIHJldHVybjtcblxuICAgICAgLy8gV2hlbiBydWxlcyBhcmUgaW5zZXJ0ZWQgdXNpbmcgYGluc2VydFJ1bGVgIEFQSSwgYWZ0ZXIgYHNoZWV0LmRldGFjaCgpLmF0dGFjaCgpYFxuICAgICAgLy8gYnJvd3NlcnMgcmVtb3ZlIHRob3NlIHJ1bGVzLlxuICAgICAgLy8gVE9ETyBmaWd1cmUgb3V0IGlmIGl0cyBhIGJ1ZyBhbmQgaWYgaXQgaXMga25vd24uXG4gICAgICAvLyBXb3JrYXJvdW5kIGlzIHRvIHJlZGVwbG95IHRoZSBzaGVldCBiZWZvcmUgYXR0YWNoaW5nIGFzIGEgc3RyaW5nLlxuICAgICAgaWYgKHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcykge1xuICAgICAgICB0aGlzLmRlcGxveSgpO1xuICAgICAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaW5zZXJ0U3R5bGUodGhpcy5lbGVtZW50LCB0aGlzLnNoZWV0Lm9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBzdHlsZSBlbGVtZW50IGZyb20gcmVuZGVyIHRyZWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RldGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5qZWN0IENTUyBzdHJpbmcgaW50byBlbGVtZW50LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZXBsb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgICBpZiAoIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICAgIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudCA9ICdcXG4nICsgdGhpcy5zaGVldC50b1N0cmluZygpICsgJ1xcbic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGEgcnVsZSBpbnRvIGVsZW1lbnQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luc2VydFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUsIGluZGV4KSB7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgICB2YXIgY3NzUnVsZXMgPSBzaGVldC5jc3NSdWxlcztcblxuICAgICAgdmFyIHN0ciA9IHJ1bGUudG9TdHJpbmcoKTtcbiAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gY3NzUnVsZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIXN0cikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHN0ciwgaW5kZXgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoZmFsc2UsICdbSlNTXSBDYW4gbm90IGluc2VydCBhbiB1bnN1cHBvcnRlZCBydWxlIFxcblxcciVzJywgcnVsZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IHRydWU7XG5cbiAgICAgIHJldHVybiBjc3NSdWxlc1tpbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVJ1bGUoY3NzUnVsZSkge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuXG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleE9mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgICB2YXIgY3NzUnVsZXMgPSB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG5cbiAgICAgIGZvciAodmFyIF9pbmRleCA9IDA7IF9pbmRleCA8IGNzc1J1bGVzLmxlbmd0aDsgX2luZGV4KyspIHtcbiAgICAgICAgaWYgKGNzc1J1bGUgPT09IGNzc1J1bGVzW19pbmRleF0pIHJldHVybiBfaW5kZXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVwbGFjZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlUnVsZShjc3NSdWxlLCBydWxlKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgICB2YXIgbmV3Q3NzUnVsZSA9IHRoaXMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gICAgICB0aGlzLmVsZW1lbnQuc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgICByZXR1cm4gbmV3Q3NzUnVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHJ1bGVzIGVsZW1lbnRzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSdWxlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IERvbVJlbmRlcmVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuXG4vKipcbiAqIFJlbmRlcmluZyBiYWNrZW5kIHRvIGRvIG5vdGhpbmcgaW4gbm9kZWpzLlxuICovXG52YXIgVmlydHVhbFJlbmRlcmVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBWaXJ0dWFsUmVuZGVyZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpcnR1YWxSZW5kZXJlcik7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVmlydHVhbFJlbmRlcmVyLCBbe1xuICAgIGtleTogJ3NldFByb3BlcnR5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UHJvcGVydHkoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRQcm9wZXJ0eVZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVQcm9wZXJ0eScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVByb3BlcnR5KCkge31cbiAgfSwge1xuICAgIGtleTogJ3NldFNlbGVjdG9yJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRLZXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRLZXkoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXR0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXR0YWNoKCkge31cbiAgfSwge1xuICAgIGtleTogJ2RldGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCgpIHt9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXBsb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXBsb3koKSB7fVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0UnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydFJ1bGUoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVJ1bGUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXBsYWNlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VSdWxlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFJ1bGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UnVsZXMoKSB7fVxuICB9LCB7XG4gICAga2V5OiAnaW5kZXhPZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4T2YoKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZpcnR1YWxSZW5kZXJlcjtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gVmlydHVhbFJlbmRlcmVyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuLy8gU2hhcmUgdGhlIHNhbWUgdmFsdWVzIHRoYW4gaW5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9ibG9iL21hc3Rlci9wYWNrYWdlcy9yZWFjdC1qc3Mvc3JjL25zLmpzXG52YXIgbnMgPSB7XG4gIGpzczogJzY0YTU1ZDU3OGY4NTZkMjU4ZGMzNDViMDk0YTJhMmIzJyxcbiAgc2hlZXRzUmVnaXN0cnk6ICdkNGJkMGJhYWNiYzUyYmJkNDhiYmI5ZWIyNDM0NGVjZCcsXG4gIHNoZWV0T3B0aW9uczogJzZmYzU3MGQ2YmQ2MTM4MzgxOWQwZjllNzQwN2M0NTJkJ1xufTtcbnZhciBfZGVmYXVsdCA9IG5zO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBqc3NHbG9iYWw7XG5cbnZhciBfanNzID0gcmVxdWlyZSgnanNzJyk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBwcm9wS2V5ID0gJ0BnbG9iYWwnO1xudmFyIHByZWZpeEtleSA9ICdAZ2xvYmFsICc7XG5cbnZhciBHbG9iYWxDb250YWluZXJSdWxlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxDb250YWluZXJSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbENvbnRhaW5lclJ1bGUpO1xuXG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgX2pzcy5SdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgc2VsZWN0b3IgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChzZWxlY3Rvciwgc3R5bGVzW3NlbGVjdG9yXSwgeyBzZWxlY3Rvcjogc2VsZWN0b3IgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoR2xvYmFsQ29udGFpbmVyUnVsZSwgW3tcbiAgICBrZXk6ICdnZXRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleE9mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZygpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHbG9iYWxDb250YWluZXJSdWxlO1xufSgpO1xuXG52YXIgR2xvYmFsUHJlZml4ZWRSdWxlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxQcmVmaXhlZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xvYmFsUHJlZml4ZWRSdWxlKTtcblxuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2VsZWN0b3IgPSBuYW1lLnN1YnN0cihwcmVmaXhLZXkubGVuZ3RoKTtcbiAgICB0aGlzLnJ1bGUgPSBvcHRpb25zLmpzcy5jcmVhdGVSdWxlKHNlbGVjdG9yLCBzdHlsZSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgIH0pKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhHbG9iYWxQcmVmaXhlZFJ1bGUsIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHbG9iYWxQcmVmaXhlZFJ1bGU7XG59KCk7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG5cbmZ1bmN0aW9uIGFkZFNjb3BlKHNlbGVjdG9yLCBzY29wZSkge1xuICB2YXIgcGFydHMgPSBzZWxlY3Rvci5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICB2YXIgc2NvcGVkID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBzY29wZWQgKz0gc2NvcGUgKyAnICcgKyBwYXJ0c1tpXS50cmltKCk7XG4gICAgaWYgKHBhcnRzW2kgKyAxXSkgc2NvcGVkICs9ICcsICc7XG4gIH1cbiAgcmV0dXJuIHNjb3BlZDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlKSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuXG4gIHZhciBydWxlcyA9IHN0eWxlW3Byb3BLZXldO1xuXG4gIGlmICghcnVsZXMpIHJldHVybjtcblxuICBmb3IgKHZhciBuYW1lIGluIHJ1bGVzKSB7XG4gICAgb3B0aW9ucy5zaGVldC5hZGRSdWxlKG5hbWUsIHJ1bGVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IGFkZFNjb3BlKG5hbWUsIHJ1bGUuc2VsZWN0b3IpXG4gICAgfSkpO1xuICB9XG5cbiAgZGVsZXRlIHN0eWxlW3Byb3BLZXldO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgaWYgKHByb3Auc3Vic3RyKDAsIHByb3BLZXkubGVuZ3RoKSAhPT0gcHJvcEtleSkgY29udGludWU7XG5cbiAgICB2YXIgc2VsZWN0b3IgPSBhZGRTY29wZShwcm9wLnN1YnN0cihwcm9wS2V5Lmxlbmd0aCksIHJ1bGUuc2VsZWN0b3IpO1xuICAgIG9wdGlvbnMuc2hlZXQuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9KSk7XG4gICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24ganNzR2xvYmFsKCkge1xuICBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWUgPT09IHByb3BLZXkpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsQ29udGFpbmVyUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChuYW1lWzBdID09PSAnQCcgJiYgbmFtZS5zdWJzdHIoMCwgcHJlZml4S2V5Lmxlbmd0aCkgPT09IHByZWZpeEtleSkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxQcmVmaXhlZFJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG5cblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcgfHwgcGFyZW50Lm9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdnbG9iYWwnKSB7XG4gICAgICAgIG9wdGlvbnMuZ2xvYmFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5nbG9iYWwpIG9wdGlvbnMuc2VsZWN0b3IgPSBuYW1lO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm47XG5cbiAgICBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUpO1xuICAgIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlKTtcbiAgfVxuXG4gIHJldHVybiB7IG9uQ3JlYXRlUnVsZTogb25DcmVhdGVSdWxlLCBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBqc3NOZXN0ZWQ7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xudmFyIHBhcmVudFJlZ0V4cCA9IC8mL2c7XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuXG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGpzc05lc3RlZCgpIHtcbiAgLy8gR2V0IGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgJHJlZiByZXBsYWNlbWVudC5cbiAgZnVuY3Rpb24gZ2V0UmVwbGFjZVJlZihjb250YWluZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hdGNoLCBrZXkpIHtcbiAgICAgIHZhciBydWxlID0gY29udGFpbmVyLmdldFJ1bGUoa2V5KTtcbiAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZS5zZWxlY3RvcjtcbiAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdbSlNTXSBDb3VsZCBub3QgZmluZCB0aGUgcmVmZXJlbmNlZCBydWxlICVzIGluICVzLicsIGtleSwgY29udGFpbmVyLm9wdGlvbnMubWV0YSB8fCBjb250YWluZXIpO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhhc0FuZCA9IGZ1bmN0aW9uIGhhc0FuZChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2YoJyYnKSAhPT0gLTE7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVBhcmVudFJlZnMobmVzdGVkUHJvcCwgcGFyZW50UHJvcCkge1xuICAgIHZhciBwYXJlbnRTZWxlY3RvcnMgPSBwYXJlbnRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIG5lc3RlZFNlbGVjdG9ycyA9IG5lc3RlZFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcblxuICAgIHZhciByZXN1bHQgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50U2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcGFyZW50U2VsZWN0b3JzW2ldO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5lc3RlZFNlbGVjdG9ycy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgbmVzdGVkID0gbmVzdGVkU2VsZWN0b3JzW2pdO1xuICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJywgJztcbiAgICAgICAgLy8gUmVwbGFjZSBhbGwgJiBieSB0aGUgcGFyZW50IG9yIHByZWZpeCAmIHdpdGggdGhlIHBhcmVudC5cbiAgICAgICAgcmVzdWx0ICs9IGhhc0FuZChuZXN0ZWQpID8gbmVzdGVkLnJlcGxhY2UocGFyZW50UmVnRXhwLCBwYXJlbnQpIDogcGFyZW50ICsgJyAnICsgbmVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcHRpb25zKHJ1bGUsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIC8vIE9wdGlvbnMgaGFzIGJlZW4gYWxyZWFkeSBjcmVhdGVkLCBub3cgd2Ugb25seSBpbmNyZWFzZSBpbmRleC5cbiAgICBpZiAob3B0aW9ucykgcmV0dXJuIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7IGluZGV4OiBvcHRpb25zLmluZGV4ICsgMSB9KTtcblxuICAgIHZhciBuZXN0aW5nTGV2ZWwgPSBydWxlLm9wdGlvbnMubmVzdGluZ0xldmVsO1xuXG4gICAgbmVzdGluZ0xldmVsID0gbmVzdGluZ0xldmVsID09PSB1bmRlZmluZWQgPyAxIDogbmVzdGluZ0xldmVsICsgMTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgcnVsZS5vcHRpb25zLCB7XG4gICAgICBuZXN0aW5nTGV2ZWw6IG5lc3RpbmdMZXZlbCxcbiAgICAgIGluZGV4OiBjb250YWluZXIuaW5kZXhPZihydWxlKSArIDFcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHZhciBjb250YWluZXIgPSBydWxlLm9wdGlvbnMucGFyZW50O1xuICAgIHZhciBvcHRpb25zID0gdm9pZCAwO1xuICAgIHZhciByZXBsYWNlUmVmID0gdm9pZCAwO1xuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciBpc05lc3RlZCA9IGhhc0FuZChwcm9wKTtcbiAgICAgIHZhciBpc05lc3RlZENvbmRpdGlvbmFsID0gcHJvcFswXSA9PT0gJ0AnO1xuXG4gICAgICBpZiAoIWlzTmVzdGVkICYmICFpc05lc3RlZENvbmRpdGlvbmFsKSBjb250aW51ZTtcblxuICAgICAgb3B0aW9ucyA9IGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGlzTmVzdGVkKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHJlcGxhY2VQYXJlbnRSZWZzKHByb3AsIHJ1bGUuc2VsZWN0b3JcbiAgICAgICAgLy8gTGF6aWx5IGNyZWF0ZSB0aGUgcmVmIHJlcGxhY2VyIGZ1bmN0aW9uIGp1c3Qgb25jZSBmb3JcbiAgICAgICAgLy8gYWxsIG5lc3RlZCBydWxlcyB3aXRoaW4gdGhlIHNoZWV0LlxuICAgICAgICApO2lmICghcmVwbGFjZVJlZikgcmVwbGFjZVJlZiA9IGdldFJlcGxhY2VSZWYoY29udGFpbmVyXG4gICAgICAgIC8vIFJlcGxhY2UgYWxsICRyZWZzLlxuICAgICAgICApO3NlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShyZWZSZWdFeHAsIHJlcGxhY2VSZWYpO1xuXG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHsgc2VsZWN0b3I6IHNlbGVjdG9yIH0pKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXN0ZWRDb25kaXRpb25hbCkge1xuICAgICAgICBjb250YWluZXJcbiAgICAgICAgLy8gUGxhY2UgY29uZGl0aW9uYWwgcmlnaHQgYWZ0ZXIgdGhlIHBhcmVudCBydWxlIHRvIGVuc3VyZSByaWdodCBvcmRlcmluZy5cbiAgICAgICAgLmFkZFJ1bGUocHJvcCwgbnVsbCwgb3B0aW9ucykuYWRkUnVsZShydWxlLmtleSwgc3R5bGVbcHJvcF0sIHsgc2VsZWN0b3I6IHJ1bGUuc2VsZWN0b3IgfSk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICByZXR1cm4geyBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUgfTtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNhbWVsQ2FzZTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUgPSByZXF1aXJlKCdoeXBoZW5hdGUtc3R5bGUtbmFtZScpO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVTdHlsZU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogQ29udmVydCBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBkYXNoIHNlcGFyYXRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICBjb252ZXJ0ZWRbKDAsIF9oeXBoZW5hdGVTdHlsZU5hbWUyWydkZWZhdWx0J10pKHByb3ApXSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cblxuLyoqXG4gKiBBbGxvdyBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyBieSBjb252ZXJ0aW5nIHRoZW0gYmFjayB0byBkYXNoZXJpemVkLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICovXG5mdW5jdGlvbiBjYW1lbENhc2UoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSB7XG4gICAgICAvLyBIYW5kbGUgcnVsZXMgbGlrZSBAZm9udC1mYWNlLCB3aGljaCBjYW4gaGF2ZSBtdWx0aXBsZSBzdHlsZXMgaW4gYW4gYXJyYXlcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3R5bGVbaW5kZXhdID0gY29udmVydENhc2Uoc3R5bGVbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydENhc2Uoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBoeXBoZW5hdGVkUHJvcCA9ICgwLCBfaHlwaGVuYXRlU3R5bGVOYW1lMlsnZGVmYXVsdCddKShwcm9wKTtcblxuICAgIC8vIFRoZXJlIHdhcyBubyBjYW1lbCBjYXNlIGluIHBsYWNlXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG5cbiAgICBydWxlLnByb3AoaHlwaGVuYXRlZFByb3AsIHZhbHVlKTtcblxuICAgIC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4geyBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWUgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2c7XG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xudmFyIGNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nIGluIGNhY2hlXG4gICAgPyBjYWNoZVtzdHJpbmddXG4gICAgOiBjYWNoZVtzdHJpbmddID0gc3RyaW5nXG4gICAgICAucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCAnLSQmJylcbiAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGRlZmF1bHRVbml0O1xuXG52YXIgX2RlZmF1bHRVbml0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdFVuaXRzJyk7XG5cbnZhciBfZGVmYXVsdFVuaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmF1bHRVbml0cyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLyoqXG4gKiBDbG9uZXMgdGhlIG9iamVjdCBhbmQgYWRkcyBhIGNhbWVsIGNhc2VkIHByb3BlcnR5IHZlcnNpb24uXG4gKi9cbmZ1bmN0aW9uIGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9iaikge1xuICB2YXIgcmVnRXhwID0gLygtW2Etel0pL2c7XG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG4gIHZhciBuZXdPYmogPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgbmV3T2JqW2tleS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZSldID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIG5ld09iajtcbn1cblxudmFyIHVuaXRzID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24oX2RlZmF1bHRVbml0czJbJ2RlZmF1bHQnXSk7XG5cbi8qKlxuICogUmVjdXJzaXZlIGRlZXAgc3R5bGUgcGFzc2luZyBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBjdXJyZW50IHByb3BlcnR5XG4gKiBAcGFyYW0geyhPYmplY3R8QXJyYXl8TnVtYmVyfFN0cmluZyl9IHByb3BlcnR5IHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7KE9iamVjdHxBcnJheXxOdW1iZXJ8U3RyaW5nKX0gcmVzdWx0aW5nIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGl0ZXJhdGUocHJvcCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gIHZhciBjb252ZXJ0ZWRWYWx1ZSA9IHZhbHVlO1xuXG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSk7XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkgdHlwZSA9ICdhcnJheSc7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgICBmb3IgKHZhciBpbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgICB2YWx1ZVtpbm5lclByb3BdID0gaXRlcmF0ZShpbm5lclByb3AsIHZhbHVlW2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2lubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtfaW5uZXJQcm9wXSA9IGl0ZXJhdGUocHJvcCArICctJyArIF9pbm5lclByb3AsIHZhbHVlW19pbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWVbaV0gPSBpdGVyYXRlKHByb3AsIHZhbHVlW2ldLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgY29udmVydGVkVmFsdWUgPSB2YWx1ZSArIChvcHRpb25zW3Byb3BdIHx8IHVuaXRzW3Byb3BdIHx8ICcnKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0ZWRWYWx1ZTtcbn1cblxuLyoqXG4gKiBBZGQgdW5pdCB0byBudW1lcmljIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZGVmYXVsdFVuaXQoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgY2FtZWxDYXNlZE9wdGlvbnMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihvcHRpb25zKTtcblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHN0eWxlW3Byb3BdID0gaXRlcmF0ZShwcm9wLCBzdHlsZVtwcm9wXSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHsgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLCBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXG4gKiBHZW5lcmF0ZWQganNzLWRlZmF1bHQtdW5pdCBDU1MgcHJvcGVydHkgdW5pdHNcbiAqXG4gKiBAdHlwZSBvYmplY3RcbiAqL1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICAnYW5pbWF0aW9uLWRlbGF5JzogJ21zJyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6ICdtcycsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogJ3B4JyxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6ICdweCcsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXknOiAncHgnLFxuICAnYmFja2dyb3VuZC1zaXplJzogJ3B4JyxcbiAgYm9yZGVyOiAncHgnLFxuICAnYm9yZGVyLWJvdHRvbSc6ICdweCcsXG4gICdib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzJzogJ3B4JyxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogJ3B4JyxcbiAgJ2JvcmRlci1ib3R0b20td2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLWxlZnQnOiAncHgnLFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLXJhZGl1cyc6ICdweCcsXG4gICdib3JkZXItcmlnaHQnOiAncHgnLFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci1zcGFjaW5nJzogJ3B4JyxcbiAgJ2JvcmRlci10b3AnOiAncHgnLFxuICAnYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyc6ICdweCcsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6ICdweCcsXG4gICdib3JkZXItdG9wLXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci13aWR0aCc6ICdweCcsXG4gICdib3JkZXItYWZ0ZXItd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLWJlZm9yZS13aWR0aCc6ICdweCcsXG4gICdib3JkZXItZW5kLXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci1ob3Jpem9udGFsLXNwYWNpbmcnOiAncHgnLFxuICAnYm9yZGVyLXN0YXJ0LXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci12ZXJ0aWNhbC1zcGFjaW5nJzogJ3B4JyxcbiAgYm90dG9tOiAncHgnLFxuICAnYm94LXNoYWRvdyc6ICdweCcsXG4gICdjb2x1bW4tZ2FwJzogJ3B4JyxcbiAgJ2NvbHVtbi1ydWxlJzogJ3B4JyxcbiAgJ2NvbHVtbi1ydWxlLXdpZHRoJzogJ3B4JyxcbiAgJ2NvbHVtbi13aWR0aCc6ICdweCcsXG4gICdmbGV4LWJhc2lzJzogJ3B4JyxcbiAgJ2ZvbnQtc2l6ZSc6ICdweCcsXG4gICdmb250LXNpemUtZGVsdGEnOiAncHgnLFxuICBoZWlnaHQ6ICdweCcsXG4gIGxlZnQ6ICdweCcsXG4gICdsZXR0ZXItc3BhY2luZyc6ICdweCcsXG4gICdsb2dpY2FsLWhlaWdodCc6ICdweCcsXG4gICdsb2dpY2FsLXdpZHRoJzogJ3B4JyxcbiAgbWFyZ2luOiAncHgnLFxuICAnbWFyZ2luLWFmdGVyJzogJ3B4JyxcbiAgJ21hcmdpbi1iZWZvcmUnOiAncHgnLFxuICAnbWFyZ2luLWJvdHRvbSc6ICdweCcsXG4gICdtYXJnaW4tbGVmdCc6ICdweCcsXG4gICdtYXJnaW4tcmlnaHQnOiAncHgnLFxuICAnbWFyZ2luLXRvcCc6ICdweCcsXG4gICdtYXgtaGVpZ2h0JzogJ3B4JyxcbiAgJ21heC13aWR0aCc6ICdweCcsXG4gICdtYXJnaW4tZW5kJzogJ3B4JyxcbiAgJ21hcmdpbi1zdGFydCc6ICdweCcsXG4gICdtYXNrLXBvc2l0aW9uLXgnOiAncHgnLFxuICAnbWFzay1wb3NpdGlvbi15JzogJ3B4JyxcbiAgJ21hc2stc2l6ZSc6ICdweCcsXG4gICdtYXgtbG9naWNhbC1oZWlnaHQnOiAncHgnLFxuICAnbWF4LWxvZ2ljYWwtd2lkdGgnOiAncHgnLFxuICAnbWluLWhlaWdodCc6ICdweCcsXG4gICdtaW4td2lkdGgnOiAncHgnLFxuICAnbWluLWxvZ2ljYWwtaGVpZ2h0JzogJ3B4JyxcbiAgJ21pbi1sb2dpY2FsLXdpZHRoJzogJ3B4JyxcbiAgbW90aW9uOiAncHgnLFxuICAnbW90aW9uLW9mZnNldCc6ICdweCcsXG4gIG91dGxpbmU6ICdweCcsXG4gICdvdXRsaW5lLW9mZnNldCc6ICdweCcsXG4gICdvdXRsaW5lLXdpZHRoJzogJ3B4JyxcbiAgcGFkZGluZzogJ3B4JyxcbiAgJ3BhZGRpbmctYm90dG9tJzogJ3B4JyxcbiAgJ3BhZGRpbmctbGVmdCc6ICdweCcsXG4gICdwYWRkaW5nLXJpZ2h0JzogJ3B4JyxcbiAgJ3BhZGRpbmctdG9wJzogJ3B4JyxcbiAgJ3BhZGRpbmctYWZ0ZXInOiAncHgnLFxuICAncGFkZGluZy1iZWZvcmUnOiAncHgnLFxuICAncGFkZGluZy1lbmQnOiAncHgnLFxuICAncGFkZGluZy1zdGFydCc6ICdweCcsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6ICclJyxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi15JzogJyUnLFxuICBwZXJzcGVjdGl2ZTogJ3B4JyxcbiAgcmlnaHQ6ICdweCcsXG4gICdzaGFwZS1tYXJnaW4nOiAncHgnLFxuICBzaXplOiAncHgnLFxuICAndGV4dC1pbmRlbnQnOiAncHgnLFxuICAndGV4dC1zdHJva2UnOiAncHgnLFxuICAndGV4dC1zdHJva2Utd2lkdGgnOiAncHgnLFxuICB0b3A6ICdweCcsXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogJyUnLFxuICAndHJhbnNmb3JtLW9yaWdpbi14JzogJyUnLFxuICAndHJhbnNmb3JtLW9yaWdpbi15JzogJyUnLFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogJyUnLFxuICAndHJhbnNpdGlvbi1kZWxheSc6ICdtcycsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogJ21zJyxcbiAgJ3ZlcnRpY2FsLWFsaWduJzogJ3B4JyxcbiAgd2lkdGg6ICdweCcsXG4gICd3b3JkLXNwYWNpbmcnOiAncHgnLFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtZXhwYW5kIGludGVyZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6ICdweCcsXG4gICdib3gtc2hhZG93LXknOiAncHgnLFxuICAnYm94LXNoYWRvdy1ibHVyJzogJ3B4JyxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogJ3B4JyxcbiAgJ2ZvbnQtbGluZS1oZWlnaHQnOiAncHgnLFxuICAndGV4dC1zaGFkb3cteCc6ICdweCcsXG4gICd0ZXh0LXNoYWRvdy15JzogJ3B4JyxcbiAgJ3RleHQtc2hhZG93LWJsdXInOiAncHgnXG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGpzc1ZlbmRvclByZWZpeGVyO1xuXG52YXIgX2Nzc1ZlbmRvciA9IHJlcXVpcmUoJ2Nzcy12ZW5kb3InKTtcblxudmFyIHZlbmRvciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jc3NWZW5kb3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGpzc1ZlbmRvclByZWZpeGVyKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcnVsZS5rZXkgPSAnQCcgKyB2ZW5kb3IucHJlZml4LmNzcyArIHJ1bGUua2V5LnN1YnN0cigxKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICB2YXIgY2hhbmdlUHJvcCA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFByb3AgPSB2ZW5kb3Iuc3VwcG9ydGVkUHJvcGVydHkocHJvcCk7XG4gICAgICBpZiAoc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wKSBjaGFuZ2VQcm9wID0gdHJ1ZTtcblxuICAgICAgdmFyIGNoYW5nZVZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkVmFsdWUgPSB2ZW5kb3Iuc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdmFsdWUpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlICYmIHN1cHBvcnRlZFZhbHVlICE9PSB2YWx1ZSkgY2hhbmdlVmFsdWUgPSB0cnVlO1xuXG4gICAgICBpZiAoY2hhbmdlUHJvcCB8fCBjaGFuZ2VWYWx1ZSkge1xuICAgICAgICBpZiAoY2hhbmdlUHJvcCkgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBzdHlsZVtzdXBwb3J0ZWRQcm9wIHx8IHByb3BdID0gc3VwcG9ydGVkVmFsdWUgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiB2ZW5kb3Iuc3VwcG9ydGVkVmFsdWUocHJvcCwgdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHsgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZSwgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLCBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5zdXBwb3J0ZWRWYWx1ZSA9IGV4cG9ydHMuc3VwcG9ydGVkUHJvcGVydHkgPSBleHBvcnRzLnByZWZpeCA9IHVuZGVmaW5lZDtcblxudmFyIF9wcmVmaXggPSByZXF1aXJlKCcuL3ByZWZpeCcpO1xuXG52YXIgX3ByZWZpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXgpO1xuXG52YXIgX3N1cHBvcnRlZFByb3BlcnR5ID0gcmVxdWlyZSgnLi9zdXBwb3J0ZWQtcHJvcGVydHknKTtcblxudmFyIF9zdXBwb3J0ZWRQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdXBwb3J0ZWRQcm9wZXJ0eSk7XG5cbnZhciBfc3VwcG9ydGVkVmFsdWUgPSByZXF1aXJlKCcuL3N1cHBvcnRlZC12YWx1ZScpO1xuXG52YXIgX3N1cHBvcnRlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N1cHBvcnRlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHByZWZpeDogX3ByZWZpeDJbJ2RlZmF1bHQnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IF9zdXBwb3J0ZWRQcm9wZXJ0eTJbJ2RlZmF1bHQnXSxcbiAgc3VwcG9ydGVkVmFsdWU6IF9zdXBwb3J0ZWRWYWx1ZTJbJ2RlZmF1bHQnXVxufTsgLyoqXG4gICAgKiBDU1MgVmVuZG9yIHByZWZpeCBkZXRlY3Rpb24gYW5kIHByb3BlcnR5IGZlYXR1cmUgdGVzdGluZy5cbiAgICAqXG4gICAgKiBAY29weXJpZ2h0IE9sZWcgU2xvYm9kc2tvaSAyMDE1XG4gICAgKiBAd2Vic2l0ZSBodHRwczovL2dpdGh1Yi5jb20vanNzdHlsZXMvY3NzLXZlbmRvclxuICAgICogQGxpY2Vuc2UgTUlUXG4gICAgKi9cblxuZXhwb3J0cy5wcmVmaXggPSBfcHJlZml4MlsnZGVmYXVsdCddO1xuZXhwb3J0cy5zdXBwb3J0ZWRQcm9wZXJ0eSA9IF9zdXBwb3J0ZWRQcm9wZXJ0eTJbJ2RlZmF1bHQnXTtcbmV4cG9ydHMuc3VwcG9ydGVkVmFsdWUgPSBfc3VwcG9ydGVkVmFsdWUyWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gc3VwcG9ydGVkUHJvcGVydHk7XG5cbnZhciBfaXNJbkJyb3dzZXIgPSByZXF1aXJlKCdpcy1pbi1icm93c2VyJyk7XG5cbnZhciBfaXNJbkJyb3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbkJyb3dzZXIpO1xuXG52YXIgX3ByZWZpeCA9IHJlcXVpcmUoJy4vcHJlZml4Jyk7XG5cbnZhciBfcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeCk7XG5cbnZhciBfY2FtZWxpemUgPSByZXF1aXJlKCcuL2NhbWVsaXplJyk7XG5cbnZhciBfY2FtZWxpemUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FtZWxpemUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBlbCA9IHZvaWQgMDtcbnZhciBjYWNoZSA9IHt9O1xuXG5pZiAoX2lzSW5Ccm93c2VyMlsnZGVmYXVsdCddKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG4gIC8qKlxuICAgKiBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gICAqIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgICogaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAgKlxuICAgKiBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAgKiBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gICAqIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuICAgKi9cbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnJyk7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGlmICghaXNOYU4oa2V5KSkgY2FjaGVbY29tcHV0ZWRba2V5XV0gPSBjb21wdXRlZFtrZXldO1xuICB9XG59XG5cbi8qKlxuICogVGVzdCBpZiBhIHByb3BlcnR5IGlzIHN1cHBvcnRlZCwgcmV0dXJucyBzdXBwb3J0ZWQgcHJvcGVydHkgd2l0aCB2ZW5kb3JcbiAqIHByZWZpeCBpZiByZXF1aXJlZC4gUmV0dXJucyBgZmFsc2VgIGlmIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3AgZGFzaCBzZXBhcmF0ZWRcbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDtcblxuICAvLyBXZSBoYXZlIG5vdCB0ZXN0ZWQgdGhpcyBwcm9wIHlldCwgbGV0cyBkbyB0aGUgdGVzdC5cbiAgaWYgKGNhY2hlW3Byb3BdICE9IG51bGwpIHJldHVybiBjYWNoZVtwcm9wXTtcblxuICAvLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nXG4gIC8vIGNzcyBzeW50YXggZm9yIGUuZy4gaW4gRkYuXG4gIC8vIFRlc3QgaWYgcHJvcGVydHkgaXMgc3VwcG9ydGVkIGFzIGl0IGlzLlxuICBpZiAoKDAsIF9jYW1lbGl6ZTJbJ2RlZmF1bHQnXSkocHJvcCkgaW4gZWwuc3R5bGUpIHtcbiAgICBjYWNoZVtwcm9wXSA9IHByb3A7XG4gIH1cbiAgLy8gVGVzdCBpZiBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQgd2l0aCB2ZW5kb3IgcHJlZml4LlxuICBlbHNlIGlmIChfcHJlZml4MlsnZGVmYXVsdCddLmpzICsgKDAsIF9jYW1lbGl6ZTJbJ2RlZmF1bHQnXSkoJy0nICsgcHJvcCkgaW4gZWwuc3R5bGUpIHtcbiAgICAgIGNhY2hlW3Byb3BdID0gX3ByZWZpeDJbJ2RlZmF1bHQnXS5jc3MgKyBwcm9wO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZVtwcm9wXSA9IGZhbHNlO1xuICAgIH1cblxuICByZXR1cm4gY2FjaGVbcHJvcF07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gY2FtZWxpemU7XG52YXIgcmVnRXhwID0gL1stXFxzXSsoLik/L2c7XG5cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsIGNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG5mdW5jdGlvbiB0b1VwcGVyKG1hdGNoLCBjKSB7XG4gIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gc3VwcG9ydGVkVmFsdWU7XG5cbnZhciBfaXNJbkJyb3dzZXIgPSByZXF1aXJlKCdpcy1pbi1icm93c2VyJyk7XG5cbnZhciBfaXNJbkJyb3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbkJyb3dzZXIpO1xuXG52YXIgX3ByZWZpeCA9IHJlcXVpcmUoJy4vcHJlZml4Jyk7XG5cbnZhciBfcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIGNhY2hlID0ge307XG52YXIgZWwgPSB2b2lkIDA7XG5cbmlmIChfaXNJbkJyb3dzZXIyWydkZWZhdWx0J10pIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgaWYgbmVlZGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdmFsdWUgaXMgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBzdXBwb3J0ZWRWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgaWYgKCFlbCkgcmV0dXJuIHZhbHVlO1xuXG4gIC8vIEl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGxpa2UgJzEnLlxuICAvLyBXZSB3YW50IG9ubHkgcHJlZml4YWJsZSB2YWx1ZXMgaGVyZS5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgIWlzTmFOKHBhcnNlSW50KHZhbHVlLCAxMCkpKSByZXR1cm4gdmFsdWU7XG5cbiAgdmFyIGNhY2hlS2V5ID0gcHJvcGVydHkgKyB2YWx1ZTtcblxuICBpZiAoY2FjaGVbY2FjaGVLZXldICE9IG51bGwpIHJldHVybiBjYWNoZVtjYWNoZUtleV07XG5cbiAgLy8gSUUgY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgaW4gc29tZSBjYXNlcywgZm9yIGUuZy4gc3R5bGUuY29udGVudCA9ICdiYXInXG4gIHRyeSB7XG4gICAgLy8gVGVzdCB2YWx1ZSBhcyBpdCBpcy5cbiAgICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY2FjaGVbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVmFsdWUgaXMgc3VwcG9ydGVkIGFzIGl0IGlzLlxuICBpZiAoZWwuc3R5bGVbcHJvcGVydHldICE9PSAnJykge1xuICAgIGNhY2hlW2NhY2hlS2V5XSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIFRlc3QgdmFsdWUgd2l0aCB2ZW5kb3IgcHJlZml4LlxuICAgIHZhbHVlID0gX3ByZWZpeDJbJ2RlZmF1bHQnXS5jc3MgKyB2YWx1ZTtcblxuICAgIC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG4gICAgaWYgKHZhbHVlID09PSAnLW1zLWZsZXgnKSB2YWx1ZSA9ICctbXMtZmxleGJveCc7XG5cbiAgICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcblxuICAgIC8vIFZhbHVlIGlzIHN1cHBvcnRlZCB3aXRoIHZlbmRvciBwcmVmaXguXG4gICAgaWYgKGVsLnN0eWxlW3Byb3BlcnR5XSAhPT0gJycpIGNhY2hlW2NhY2hlS2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgaWYgKCFjYWNoZVtjYWNoZUtleV0pIGNhY2hlW2NhY2hlS2V5XSA9IGZhbHNlO1xuXG4gIC8vIFJlc2V0IHN0eWxlIHZhbHVlLlxuICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSAnJztcblxuICByZXR1cm4gY2FjaGVbY2FjaGVLZXldO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGpzc1Byb3BzU29ydDtcbi8qKlxuICogU29ydCBwcm9wcyBieSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGpzc1Byb3BzU29ydCgpIHtcbiAgZnVuY3Rpb24gc29ydChwcm9wMCwgcHJvcDEpIHtcbiAgICByZXR1cm4gcHJvcDAubGVuZ3RoIC0gcHJvcDEubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChzb3J0KTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHByb3BzKSB7XG4gICAgICBuZXdTdHlsZVtwcm9wc1twcm9wXV0gPSBzdHlsZVtwcm9wc1twcm9wXV07XG4gICAgfVxuICAgIHJldHVybiBuZXdTdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7IG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBiYXNlQ2xhc3NlcyA9IG9wdGlvbnMuYmFzZUNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzID0gb3B0aW9ucy5uZXdDbGFzc2VzLFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQ7XG5cbiAgaWYgKCFuZXdDbGFzc2VzKSB7XG4gICAgcmV0dXJuIGJhc2VDbGFzc2VzO1xuICB9XG5cbiAgdmFyIG5leHRDbGFzc2VzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgYmFzZUNsYXNzZXMpO1xuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoQ29tcG9uZW50KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoYmFzZUNsYXNzZXNba2V5XSB8fCAhbmV3Q2xhc3Nlc1trZXldLCBbXCJNYXRlcmlhbC1VSTogdGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcGVydHkgaXMgbm90IGltcGxlbWVudGVkIGluIFwiLmNvbmNhdCgoMCwgX3V0aWxzLmdldERpc3BsYXlOYW1lKShDb21wb25lbnQpLCBcIi5cIiksIFwiWW91IGNhbiBvbmx5IG92ZXJyaWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBcIi5jb25jYXQoT2JqZWN0LmtleXMoYmFzZUNsYXNzZXMpLmpvaW4oJywnKSwgXCIuXCIpXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoIW5ld0NsYXNzZXNba2V5XSB8fCB0eXBlb2YgbmV3Q2xhc3Nlc1trZXldID09PSAnc3RyaW5nJywgW1wiTWF0ZXJpYWwtVUk6IHRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3BlcnR5IGlzIG5vdCB2YWxpZCBmb3IgXCIuY29uY2F0KCgwLCBfdXRpbHMuZ2V0RGlzcGxheU5hbWUpKENvbXBvbmVudCksIFwiLlwiKSwgXCJZb3UgbmVlZCB0byBwcm92aWRlIGEgbm9uIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mOiBcIi5jb25jYXQobmV3Q2xhc3Nlc1trZXldLCBcIi5cIildLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICBpZiAobmV3Q2xhc3Nlc1trZXldKSB7XG4gICAgICBuZXh0Q2xhc3Nlc1trZXldID0gXCJcIi5jb25jYXQoYmFzZUNsYXNzZXNba2V5XSwgXCIgXCIpLmNvbmNhdChuZXdDbGFzc2VzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXh0Q2xhc3Nlcztcbn1cblxudmFyIF9kZWZhdWx0ID0gbWVyZ2VDbGFzc2VzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBVc2VkIGh0dHBzOi8vZ2l0aHViLmNvbS90aGlua2xvb3AvbXVsdGkta2V5LWNhY2hlIGFzIGluc3BpcmF0aW9uXG52YXIgbXVsdGlLZXlTdG9yZSA9IHtcbiAgc2V0OiBmdW5jdGlvbiBzZXQoY2FjaGUsIGtleTEsIGtleTIsIHZhbHVlKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuXG4gICAgaWYgKCFzdWJDYWNoZSkge1xuICAgICAgc3ViQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICBjYWNoZS5zZXQoa2V5MSwgc3ViQ2FjaGUpO1xuICAgIH1cblxuICAgIHN1YkNhY2hlLnNldChrZXkyLCB2YWx1ZSk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gZ2V0KGNhY2hlLCBrZXkxLCBrZXkyKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuICAgIHJldHVybiBzdWJDYWNoZSA/IHN1YkNhY2hlLmdldChrZXkyKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgZGVsZXRlOiBmdW5jdGlvbiBfZGVsZXRlKGNhY2hlLCBrZXkxLCBrZXkyKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuICAgIHN1YkNhY2hlLmRlbGV0ZShrZXkyKTtcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IG11bHRpS2V5U3RvcmU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvKiFcbiAqIGlzLXBsYWluLW9iamVjdCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtcGxhaW4tb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJ2lzb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0T2JqZWN0KG8pIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG8pID09PSB0cnVlXG4gICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG8pIHtcbiAgdmFyIGN0b3IscHJvdDtcblxuICBpZiAoaXNPYmplY3RPYmplY3QobykgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgaGFzIG1vZGlmaWVkIGNvbnN0cnVjdG9yXG4gIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuICBpZiAodHlwZW9mIGN0b3IgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiBoYXMgbW9kaWZpZWQgcHJvdG90eXBlXG4gIHByb3QgPSBjdG9yLnByb3RvdHlwZTtcbiAgaWYgKGlzT2JqZWN0T2JqZWN0KHByb3QpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW4gT2JqZWN0LXNwZWNpZmljIG1ldGhvZFxuICBpZiAocHJvdC5oYXNPd25Qcm9wZXJ0eSgnaXNQcm90b3R5cGVPZicpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIE1vc3QgbGlrZWx5IGEgcGxhaW4gT2JqZWN0XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8qIVxuICogaXNvYmplY3QgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHZhbCkgPT09IGZhbHNlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1peGlucztcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zKSB7XG4gIHZhciBfdG9vbGJhcjtcblxuICByZXR1cm4gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgZ3V0dGVyczogZnVuY3Rpb24gZ3V0dGVycygpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZy51bml0ICogMixcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nLnVuaXQgKiAyXG4gICAgICB9LCBzdHlsZXMsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBicmVha3BvaW50cy51cCgnc20nKSwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nLnVuaXQgKiAzLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcudW5pdCAqIDNcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVQYWxldHRlO1xuZXhwb3J0cy5kYXJrID0gZXhwb3J0cy5saWdodCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2RlZXBtZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXBtZXJnZVwiKSk7XG5cbnZhciBfaW5kaWdvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2luZGlnb1wiKSk7XG5cbnZhciBfcGluayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9waW5rXCIpKTtcblxudmFyIF9ncmV5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2dyZXlcIikpO1xuXG52YXIgX3JlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9yZWRcIikpO1xuXG52YXIgX2NvbW1vbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9jb21tb25cIikpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKFwiLi9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxudmFyIGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJyxcbiAgICAvLyBUZXh0IGhpbnRzLlxuICAgIGhpbnQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IF9jb21tb24uZGVmYXVsdC53aGl0ZSxcbiAgICBkZWZhdWx0OiBfZ3JleS5kZWZhdWx0WzUwXVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjE0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKSdcbiAgfVxufTtcbmV4cG9ydHMubGlnaHQgPSBsaWdodDtcbnZhciBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGhpbnQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBfZ3JleS5kZWZhdWx0WzgwMF0sXG4gICAgZGVmYXVsdDogJyMzMDMwMzAnXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMSxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknXG4gIH1cbn07XG5leHBvcnRzLmRhcmsgPSBkYXJrO1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSAoMCwgX2NvbG9yTWFuaXB1bGF0b3IubGlnaHRlbikoaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9ICgwLCBfY29sb3JNYW5pcHVsYXRvci5kYXJrZW4pKGludGVudC5tYWluLCB0b25hbE9mZnNldCAqIDEuNSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IF9pbmRpZ28uZGVmYXVsdFszMDBdLFxuICAgIG1haW46IF9pbmRpZ28uZGVmYXVsdFs1MDBdLFxuICAgIGRhcms6IF9pbmRpZ28uZGVmYXVsdFs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogX3BpbmsuZGVmYXVsdC5BMjAwLFxuICAgIG1haW46IF9waW5rLmRlZmF1bHQuQTQwMCxcbiAgICBkYXJrOiBfcGluay5kZWZhdWx0LkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogX3JlZC5kZWZhdWx0WzMwMF0sXG4gICAgbWFpbjogX3JlZC5kZWZhdWx0WzUwMF0sXG4gICAgZGFyazogX3JlZC5kZWZhdWx0WzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwYWxldHRlLCBbXCJwcmltYXJ5XCIsIFwic2Vjb25kYXJ5XCIsIFwiZXJyb3JcIiwgXCJ0eXBlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXSk7XG5cbiAgZnVuY3Rpb24gZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmQpIHtcbiAgICAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gICAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuICAgIHZhciBjb250cmFzdFRleHQgPSAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZ2V0Q29udHJhc3RSYXRpbykoYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyYXN0ID0gKDAsIF9jb2xvck1hbmlwdWxhdG9yLmdldENvbnRyYXN0UmF0aW8pKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoY29udHJhc3QgPj0gMywgW1wiTWF0ZXJpYWwtVUk6IHRoZSBjb250cmFzdCByYXRpbyBvZiBcIi5jb25jYXQoY29udHJhc3QsIFwiOjEgZm9yIFwiKS5jb25jYXQoY29udHJhc3RUZXh0LCBcIiBvbiBcIikuY29uY2F0KGJhY2tncm91bmQpLCAnZmFsbHMgYmVsb3cgdGhlIFdBQ0cgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gYXVnbWVudENvbG9yKGNvbG9yKSB7XG4gICAgdmFyIG1haW5TaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTAwO1xuICAgIHZhciBsaWdodFNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAzMDA7XG4gICAgdmFyIGRhcmtTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogNzAwO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb2xvci5tYWluKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogdGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC4nLCBcIlRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIGBtYWluYCBwcm9wZXJ0eSBvciBhIGBcIi5jb25jYXQobWFpblNoYWRlLCBcImAgcHJvcGVydHkuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgYXVnbWVudENvbG9yKHByaW1hcnkpO1xuICBhdWdtZW50Q29sb3Ioc2Vjb25kYXJ5LCAnQTQwMCcsICdBMjAwJywgJ0E3MDAnKTtcbiAgYXVnbWVudENvbG9yKGVycm9yKTtcbiAgdmFyIHR5cGVzID0ge1xuICAgIGRhcms6IGRhcmssXG4gICAgbGlnaHQ6IGxpZ2h0XG4gIH07XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh0eXBlc1t0eXBlXSwgXCJNYXRlcmlhbC1VSTogdGhlIHBhbGV0dGUgdHlwZSBgXCIuY29uY2F0KHR5cGUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLlwiKSkgOiB2b2lkIDA7XG4gIHZhciBwYWxldHRlT3V0cHV0ID0gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBfY29tbW9uLmRlZmF1bHQsXG4gICAgLy8gVGhlIHBhbGV0dGUgdHlwZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgdHlwZTogdHlwZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogcHJpbWFyeSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IHNlY29uZGFyeSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBlcnJvcixcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleTogX2dyZXkuZGVmYXVsdCxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW4gdGhlIGJhY2tncm91bmQgYW5kXG4gICAgLy8gdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQ6IGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2UgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm4gdGhlIGNvbG9yIG9mIHRoZSB0ZXh0IHRvIG1heGltaXplIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQ6IGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcjogYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldDogdG9uYWxPZmZzZXRcbiAgfSwgdHlwZXNbdHlwZV0pLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG52YXIgX2RlZmF1bHQgPSBpbmRpZ287XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBwaW5rID0ge1xuICA1MDogJyNmY2U0ZWMnLFxuICAxMDA6ICcjZjhiYmQwJyxcbiAgMjAwOiAnI2Y0OGZiMScsXG4gIDMwMDogJyNmMDYyOTInLFxuICA0MDA6ICcjZWM0MDdhJyxcbiAgNTAwOiAnI2U5MWU2MycsXG4gIDYwMDogJyNkODFiNjAnLFxuICA3MDA6ICcjYzIxODViJyxcbiAgODAwOiAnI2FkMTQ1NycsXG4gIDkwMDogJyM4ODBlNGYnLFxuICBBMTAwOiAnI2ZmODBhYicsXG4gIEEyMDA6ICcjZmY0MDgxJyxcbiAgQTQwMDogJyNmNTAwNTcnLFxuICBBNzAwOiAnI2M1MTE2Midcbn07XG52YXIgX2RlZmF1bHQgPSBwaW5rO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNkNWQ1ZDUnLFxuICBBMjAwOiAnI2FhYWFhYScsXG4gIEE0MDA6ICcjMzAzMDMwJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xudmFyIF9kZWZhdWx0ID0gZ3JleTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xudmFyIF9kZWZhdWx0ID0gcmVkO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xudmFyIF9kZWZhdWx0ID0gY29tbW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHlwb2dyYXBoeTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZGVlcG1lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVlcG1lcmdlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRodG1sRm9udFNpemUgPSBfcmVmLmh0bWxGb250U2l6ZSxcbiAgICAgIGh0bWxGb250U2l6ZSA9IF9yZWYkaHRtbEZvbnRTaXplID09PSB2b2lkIDAgPyAxNiA6IF9yZWYkaHRtbEZvbnRTaXplLFxuICAgICAgX3JlZiR1c2VOZXh0VmFyaWFudHMgPSBfcmVmLnVzZU5leHRWYXJpYW50cyxcbiAgICAgIHVzZU5leHRWYXJpYW50cyA9IF9yZWYkdXNlTmV4dFZhcmlhbnRzID09PSB2b2lkIDAgPyBCb29sZWFuKF91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9VU0VfTkVYVF9UWVBPR1JBUEhZX1ZBUklBTlRTX18pIDogX3JlZiR1c2VOZXh0VmFyaWFudHMsXG4gICAgICBfcmVmJHN1cHByZXNzV2FybmluZyA9IF9yZWYuc3VwcHJlc3NXYXJuaW5nLFxuICAgICAgc3VwcHJlc3NXYXJuaW5nID0gX3JlZiRzdXBwcmVzc1dhcm5pbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRzdXBwcmVzc1dhcm5pbmcsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9yZWYsIFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImh0bWxGb250U2l6ZVwiLCBcInVzZU5leHRWYXJpYW50c1wiLCBcInN1cHByZXNzV2FybmluZ1wiLCBcImFsbFZhcmlhbnRzXCJdKTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkodXNlTmV4dFZhcmlhbnRzIHx8IHN1cHByZXNzV2FybmluZywgJ01hdGVyaWFsLVVJOiB5b3UgYXJlIHVzaW5nIHRoZSBkZXByZWNhdGVkIHR5cG9ncmFwaHkgdmFyaWFudHMgJyArICd0aGF0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLicgKyAnXFxuUGxlYXNlIHJlYWQgdGhlIG1pZ3JhdGlvbiBndWlkZSB1bmRlciBodHRwczovL21hdGVyaWFsLXVpLmNvbS9zdHlsZS90eXBvZ3JhcGh5I21pZ3JhdGlvbi10by10eXBvZ3JhcGh5LXYyJykgOiB2b2lkIDA7XG4gIHZhciBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICB2YXIgcHhUb1JlbSA9IGZ1bmN0aW9uIHB4VG9SZW0oc2l6ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzaXplIC8gaHRtbEZvbnRTaXplICogY29lZiwgXCJyZW1cIik7XG4gIH07XG5cbiAgdmFyIGJ1aWxkVmFyaWFudCA9IGZ1bmN0aW9uIGJ1aWxkVmFyaWFudChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodCxcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIG5leHRWYXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMSwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMDQsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjE3LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMywgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxTmV4dDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5Mk5leHQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNSwgMC4xNSksXG4gICAgYnV0dG9uTmV4dDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb25OZXh0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTsgLy8gVG8gcmVtb3ZlIGluIHY0XG5cbiAgdmFyIG9sZFZhcmlhbnRzID0ge1xuICAgIGRpc3BsYXk0OiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDExMiksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGV0dGVyU3BhY2luZzogJy0uMDRlbScsXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgxMjggLyAxMTIpLCBcImVtXCIpLFxuICAgICAgbWFyZ2luTGVmdDogJy0uMDRlbScsXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBkaXNwbGF5MzogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSg1NiksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAnLS4wMmVtJyxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDczIC8gNTYpLCBcImVtXCIpLFxuICAgICAgbWFyZ2luTGVmdDogJy0uMDJlbScsXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBkaXNwbGF5MjogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSg0NSksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCg1MSAvIDQ1KSwgXCJlbVwiKSxcbiAgICAgIG1hcmdpbkxlZnQ6ICctLjAyZW0nLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCBhbGxWYXJpYW50cyksXG4gICAgZGlzcGxheTE6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMzQpLFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoNDEgLyAzNCksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBoZWFkbGluZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSgyNCksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgzMi41IC8gMjQpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSwgYWxsVmFyaWFudHMpLFxuICAgIHRpdGxlOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDIxKSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjQuNSAvIDIxKSwgXCJlbVwiKSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBzdWJoZWFkaW5nOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDE2KSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDI0IC8gMTYpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSwgYWxsVmFyaWFudHMpLFxuICAgIGJvZHkyOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDE0KSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjQgLyAxNCksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LCBhbGxWYXJpYW50cyksXG4gICAgYm9keTE6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMTQpLFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjAuNSAvIDE0KSwgXCJlbVwiKSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBjYXB0aW9uOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDEyKSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDE2LjUgLyAxMiksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBidXR0b246ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMTQpLFxuICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKVxuICB9O1xuICByZXR1cm4gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgcHhUb1JlbTogcHhUb1JlbSxcbiAgICByb3VuZDogcm91bmQsXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW1cbiAgfSwgb2xkVmFyaWFudHMsIG5leHRWYXJpYW50cywgdXNlTmV4dFZhcmlhbnRzID8ge1xuICAgIGJvZHkxOiBuZXh0VmFyaWFudHMuYm9keTFOZXh0LFxuICAgIGJvZHkyOiBuZXh0VmFyaWFudHMuYm9keTJOZXh0LFxuICAgIGJ1dHRvbjogbmV4dFZhcmlhbnRzLmJ1dHRvbk5leHQsXG4gICAgY2FwdGlvbjogbmV4dFZhcmlhbnRzLmNhcHRpb25OZXh0XG4gIH0gOiB7fSwge1xuICAgIHVzZU5leHRWYXJpYW50czogdXNlTmV4dFZhcmlhbnRzXG4gIH0pLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG52YXIgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbnZhciBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdygpIHtcbiAgcmV0dXJuIFtcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM10sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0tleVVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDUgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDYgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDcgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbN10sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDggPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzEwXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTFdLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSwgXCIpXCIpXS5qb2luKCcsJyk7XG59XG5cbnZhciBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDEsIDMsIDAsIDAsIDEsIDEsIDAsIDAsIDIsIDEsIC0xKSwgY3JlYXRlU2hhZG93KDAsIDEsIDUsIDAsIDAsIDIsIDIsIDAsIDAsIDMsIDEsIC0yKSwgY3JlYXRlU2hhZG93KDAsIDEsIDgsIDAsIDAsIDMsIDQsIDAsIDAsIDMsIDMsIC0yKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG52YXIgX2RlZmF1bHQgPSBzaGFkb3dzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbnZhciBfZGVmYXVsdCA9IHNoYXBlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgc3BhY2luZyA9IHtcbiAgLy8gQWxsIGNvbXBvbmVudHMgYWxpZ24gdG8gYW4gOGRwIHNxdWFyZSBiYXNlbGluZSBncmlkIGZvciBtb2JpbGUsIHRhYmxldCwgYW5kIGRlc2t0b3AuXG4gIC8vIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sI3BpeGVsLWRlbnNpdHlcbiAgdW5pdDogOFxufTtcbnZhciBfZGVmYXVsdCA9IHNwYWNpbmc7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmlzTnVtYmVyID0gZXhwb3J0cy5pc1N0cmluZyA9IGV4cG9ydHMuZm9ybWF0TXMgPSBleHBvcnRzLmR1cmF0aW9uID0gZXhwb3J0cy5lYXNpbmcgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxudmFyIGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuXG5leHBvcnRzLmVhc2luZyA9IGVhc2luZztcbnZhciBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmV4cG9ydHMuZHVyYXRpb24gPSBkdXJhdGlvbjtcblxudmFyIGZvcm1hdE1zID0gZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyksIFwibXNcIik7XG59O1xuXG5leHBvcnRzLmZvcm1hdE1zID0gZm9ybWF0TXM7XG5cbnZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG52YXIgaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0ucHJvcFxuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmR1cmF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0uZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZGVsYXlcbiAqL1xuXG5cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcbnZhciBfZGVmYXVsdCA9IHtcbiAgZWFzaW5nOiBlYXNpbmcsXG4gIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbJ2FsbCddO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgICBkdXJhdGlvbk9wdGlvbiA9IF9vcHRpb25zJGR1cmF0aW9uID09PSB2b2lkIDAgPyBkdXJhdGlvbi5zdGFuZGFyZCA6IF9vcHRpb25zJGR1cmF0aW9uLFxuICAgICAgICBfb3B0aW9ucyRlYXNpbmcgPSBvcHRpb25zLmVhc2luZyxcbiAgICAgICAgZWFzaW5nT3B0aW9uID0gX29wdGlvbnMkZWFzaW5nID09PSB2b2lkIDAgPyBlYXNpbmcuZWFzZUluT3V0IDogX29wdGlvbnMkZWFzaW5nLFxuICAgICAgICBfb3B0aW9ucyRkZWxheSA9IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGRlbGF5ID0gX29wdGlvbnMkZGVsYXkgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRkZWxheSxcbiAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShvcHRpb25zLCBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaXNTdHJpbmcocHJvcHMpIHx8IEFycmF5LmlzQXJyYXkocHJvcHMpLCAnTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpc051bWJlcihkdXJhdGlvbk9wdGlvbikgfHwgaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pLCBcIk1hdGVyaWFsLVVJOiBhcmd1bWVudCBcXFwiZHVyYXRpb25cXFwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kIFwiLmNvbmNhdChkdXJhdGlvbk9wdGlvbiwgXCIuXCIpKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSwgJ01hdGVyaWFsLVVJOiBhcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGlzTnVtYmVyKGRlbGF5KSB8fCBpc1N0cmluZyhkZWxheSksICdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggPT09IDAsIFwiTWF0ZXJpYWwtVUk6IHVucmVjb2duaXplZCBhcmd1bWVudChzKSBbXCIuY29uY2F0KE9iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyksIFwiXVwiKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGZ1bmN0aW9uIChhbmltYXRlZFByb3ApIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChhbmltYXRlZFByb3AsIFwiIFwiKS5jb25jYXQodHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pLCBcIiBcIikuY29uY2F0KGVhc2luZ09wdGlvbiwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSkpO1xuICAgIH0pLmpvaW4oJywnKTtcbiAgfSxcbiAgZ2V0QXV0b0hlaWdodER1cmF0aW9uOiBmdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gICAgaWYgKCFoZWlnaHQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBjb25zdGFudCA9IGhlaWdodCAvIDM2OyAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcblxuICAgIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBNYXRoLnBvdyhjb25zdGFudCwgMC4yNSkgKyBjb25zdGFudCAvIDUpICogMTApO1xuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbnZhciB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG52YXIgX2RlZmF1bHQgPSB6SW5kZXg7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3R5cGVvZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2RlZXBtZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXBtZXJnZVwiKSk7XG5cbi8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG4vLyBTdXBwb3J0IGZvciB0aGUganNzLWV4cGFuZCBwbHVnaW4uXG5mdW5jdGlvbiBhcnJheU1lcmdlKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgcmV0dXJuIHNvdXJjZTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIHRoZW1pbmdFbmFibGVkID0gdHlwZW9mIHN0eWxlc09yQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJztcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKCgwLCBfdHlwZW9mMi5kZWZhdWx0KShzdHlsZXNPckNyZWF0b3IpID09PSAnb2JqZWN0JyB8fCB0aGVtaW5nRW5hYmxlZCwgWydNYXRlcmlhbC1VSTogdGhlIGZpcnN0IGFyZ3VtZW50IHByb3ZpZGVkIHRvIHdpdGhTdHlsZXMoKSBpcyBpbnZhbGlkLicsICdZb3UgbmVlZCB0byBwcm92aWRlIGEgZnVuY3Rpb24gZ2VuZXJhdGluZyB0aGUgc3R5bGVzIG9yIGEgc3R5bGVzIG9iamVjdC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlKHRoZW1lLCBuYW1lKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoZW1pbmdFbmFibGVkID8gc3R5bGVzT3JDcmVhdG9yKHRoZW1lKSA6IHN0eWxlc09yQ3JlYXRvcjtcblxuICAgIGlmICghbmFtZSB8fCAhdGhlbWUub3ZlcnJpZGVzIHx8ICF0aGVtZS5vdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfVxuXG4gICAgdmFyIG92ZXJyaWRlcyA9IHRoZW1lLm92ZXJyaWRlc1tuYW1lXTtcbiAgICB2YXIgc3R5bGVzV2l0aE92ZXJyaWRlcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHN0eWxlcyk7XG4gICAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0sIFsnTWF0ZXJpYWwtVUk6IHlvdSBhcmUgdHJ5aW5nIHRvIG92ZXJyaWRlIGEgc3R5bGUgdGhhdCBkb2VzIG5vdCBleGlzdC4nLCBcIkZpeCB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBrZXkgb2YgYHRoZW1lLm92ZXJyaWRlcy5cIikuY29uY2F0KG5hbWUsIFwiYC5cIildLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgIHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSA9ICgwLCBfZGVlcG1lcmdlLmRlZmF1bHQpKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgb3ZlcnJpZGVzW2tleV0sIHtcbiAgICAgICAgYXJyYXlNZXJnZTogYXJyYXlNZXJnZVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0eWxlc1dpdGhPdmVycmlkZXM7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNyZWF0ZTogY3JlYXRlLFxuICAgIG9wdGlvbnM6IHt9LFxuICAgIHRoZW1pbmdFbmFibGVkOiB0aGVtaW5nRW5hYmxlZFxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBnZXRTdHlsZXNDcmVhdG9yO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5mdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICB2YXIgdGhlbWUgPSBwYXJhbXMudGhlbWUsXG4gICAgICBuYW1lID0gcGFyYW1zLm5hbWUsXG4gICAgICBwcm9wcyA9IHBhcmFtcy5wcm9wcztcblxuICBpZiAoIXRoZW1lLnByb3BzIHx8ICFuYW1lIHx8ICF0aGVtZS5wcm9wc1tuYW1lXSkge1xuICAgIHJldHVybiBwcm9wcztcbiAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMsIGNvZGUgYm9ycm93IGZyb20gUmVhY3Qgc291cmNlLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8xNWE4ZjAzMTgzOGE1NTNlNDFjMGI2NmViMWJjZjFkYTg0NDgxMDRkL3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdEVsZW1lbnQuanMjTDIyMVxuXG5cbiAgdmFyIGRlZmF1bHRQcm9wcyA9IHRoZW1lLnByb3BzW25hbWVdO1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufVxuXG52YXIgX2RlZmF1bHQgPSBnZXRUaGVtZVByb3BzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIHJlcXVpcmVQcm9wRmFjdG9yeShjb21wb25lbnROYW1lSW5FcnJvcikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIHZhciByZXF1aXJlUHJvcCA9IGZ1bmN0aW9uIHJlcXVpcmVQcm9wKHJlcXVpcmVkUHJvcCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnICYmICFwcm9wc1tyZXF1aXJlZFByb3BdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgcHJvcGVydHkgYFwiLmNvbmNhdChwcm9wRnVsbE5hbWVTYWZlLCBcImAgb2YgXCIpICsgXCJgXCIuY29uY2F0KGNvbXBvbmVudE5hbWVJbkVycm9yLCBcImAgbXVzdCBiZSB1c2VkIG9uIGBcIikuY29uY2F0KHJlcXVpcmVkUHJvcCwgXCJgLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHJlcXVpcmVQcm9wO1xufVxuXG52YXIgX2RlZmF1bHQgPSByZXF1aXJlUHJvcEZhY3Rvcnk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmtleXM7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkRhdGUubm93O1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKSB7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk51bWJlci5pc0ludGVnZXI7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9jb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZShcIi4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG52YXIgX0J1dHRvbkJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9CdXR0b25CYXNlXCIpKTtcblxudmFyIF9jaGFpblByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2NoYWluUHJvcFR5cGVzXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgQnV0dG9uQmFzZVxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgdGhlbWUudHlwb2dyYXBoeS5idXR0b24sIHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWluV2lkdGg6IDY0LFxuICAgICAgbWluSGVpZ2h0OiAzNixcbiAgICAgIHBhZGRpbmc6ICc4cHggMTZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXInXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH0sXG4gICAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNwYW4gZWxlbWVudCB0aGF0IHdyYXBzIHRoZSBjaGlsZHJlbi4gKi9cbiAgICBsYWJlbDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIC8vIGFzc3VyZSB0aGUgY29ycmVjdCB3aWR0aCBmb3IgaU9TIFNhZmFyaVxuICAgICAgZGlzcGxheTogJ2luaGVyaXQnLFxuICAgICAgYWxpZ25JdGVtczogJ2luaGVyaXQnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0OiB7XG4gICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nLnVuaXRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgdGV4dFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgdGV4dFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggbGVnYWN5IHZhcmlhbnQgbmFtaW5nLiAqL1xuICAgIGZsYXQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBsZWdhY3kgdmFyaWFudCBuYW1pbmcuICovXG4gICAgZmxhdFByaW1hcnk6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBsZWdhY3kgdmFyaWFudCBuYW1pbmcuICovXG4gICAgZmxhdFNlY29uZGFyeToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMjMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjMpJylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjUpKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KCgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjUpKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluKSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiW2NvbnRhaW5lZCB8IGZhYl1cImAuICovXG4gICAgY29udGFpbmVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0pLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1syXSxcbiAgICAgICcmJGZvY3VzVmlzaWJsZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzZdXG4gICAgICB9LFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbOF1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMF0sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5LkExMDAsXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdXG4gICAgICAgIH0sXG4gICAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIltjb250YWluZWQgfCBmYWJdXCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbnRhaW5lZFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5kYXJrLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJbY29udGFpbmVkIHwgZmFiXVwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbnRhaW5lZFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGxlZ2FjeSB2YXJpYW50IG5hbWluZy4gKi9cbiAgICByYWlzZWQ6IHt9LFxuICAgIC8vIGxlZ2FjeVxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBsZWdhY3kgdmFyaWFudCBuYW1pbmcuICovXG4gICAgcmFpc2VkUHJpbWFyeToge30sXG4gICAgLy8gbGVnYWN5XG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGxlZ2FjeSB2YXJpYW50IG5hbWluZy4gKi9cbiAgICByYWlzZWRTZWNvbmRhcnk6IHt9LFxuICAgIC8vIGxlZ2FjeVxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIltmYWIgfCBleHRlbmRlZEZhYl1cImAuICovXG4gICAgZmFiOiB7XG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgd2lkdGg6IDU2LFxuICAgICAgaGVpZ2h0OiA1NixcbiAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s2XSxcbiAgICAgICcmOmFjdGl2ZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzEyXVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZXh0ZW5kZWRGYWJcImAuICovXG4gICAgZXh0ZW5kZWRGYWI6IHtcbiAgICAgIGJvcmRlclJhZGl1czogNDggLyAyLFxuICAgICAgcGFkZGluZzogJzAgMTZweCcsXG4gICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgbWluV2lkdGg6IDQ4LFxuICAgICAgaGVpZ2h0OiA0OFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgQnV0dG9uQmFzZSByb290IGVsZW1lbnQgaWYgdGhlIGJ1dHRvbiBpcyBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICAgIGZvY3VzVmlzaWJsZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWluaT17dHJ1ZX1gICYgYHZhcmlhbnQ9XCJbZmFiIHwgZXh0ZW5kZWRGYWJdXCJgLiAqL1xuICAgIG1pbmk6IHtcbiAgICAgIHdpZHRoOiA0MCxcbiAgICAgIGhlaWdodDogNDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzdweCA4cHgnLFxuICAgICAgbWluV2lkdGg6IDY0LFxuICAgICAgbWluSGVpZ2h0OiAzMixcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYC4gKi9cbiAgICBzaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc4cHggMjRweCcsXG4gICAgICBtaW5XaWR0aDogMTEyLFxuICAgICAgbWluSGVpZ2h0OiA0MCxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBCdXR0b24ocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBtaW5pID0gcHJvcHMubWluaSxcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwiZnVsbFdpZHRoXCIsIFwibWluaVwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdKTtcbiAgdmFyIGZhYiA9IHZhcmlhbnQgPT09ICdmYWInIHx8IHZhcmlhbnQgPT09ICdleHRlbmRlZEZhYic7XG4gIHZhciBjb250YWluZWQgPSB2YXJpYW50ID09PSAnY29udGFpbmVkJyB8fCB2YXJpYW50ID09PSAncmFpc2VkJztcbiAgdmFyIHRleHQgPSB2YXJpYW50ID09PSAndGV4dCcgfHwgdmFyaWFudCA9PT0gJ2ZsYXQnO1xuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZhYiwgZmFiKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMubWluaSwgZmFiICYmIG1pbmkpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5leHRlbmRlZEZhYiwgdmFyaWFudCA9PT0gJ2V4dGVuZGVkRmFiJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnRleHQsIHRleHQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy50ZXh0UHJpbWFyeSwgdGV4dCAmJiBjb2xvciA9PT0gJ3ByaW1hcnknKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMudGV4dFNlY29uZGFyeSwgdGV4dCAmJiBjb2xvciA9PT0gJ3NlY29uZGFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mbGF0LCB0ZXh0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZmxhdFByaW1hcnksIHRleHQgJiYgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZsYXRTZWNvbmRhcnksIHRleHQgJiYgY29sb3IgPT09ICdzZWNvbmRhcnknKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuY29udGFpbmVkLCBjb250YWluZWQgfHwgZmFiKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuY29udGFpbmVkUHJpbWFyeSwgKGNvbnRhaW5lZCB8fCBmYWIpICYmIGNvbG9yID09PSAncHJpbWFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5jb250YWluZWRTZWNvbmRhcnksIChjb250YWluZWQgfHwgZmFiKSAmJiBjb2xvciA9PT0gJ3NlY29uZGFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yYWlzZWQsIGNvbnRhaW5lZCB8fCBmYWIpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yYWlzZWRQcmltYXJ5LCAoY29udGFpbmVkIHx8IGZhYikgJiYgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnJhaXNlZFNlY29uZGFyeSwgKGNvbnRhaW5lZCB8fCBmYWIpICYmIGNvbG9yID09PSAnc2Vjb25kYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLm91dGxpbmVkLCB2YXJpYW50ID09PSAnb3V0bGluZWQnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMub3V0bGluZWRQcmltYXJ5LCB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIGNvbG9yID09PSAncHJpbWFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5vdXRsaW5lZFNlY29uZGFyeSwgdmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBjb2xvciA9PT0gJ3NlY29uZGFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKHNpemUpKV0sIHNpemUgIT09ICdtZWRpdW0nKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZnVsbFdpZHRoLCBmdWxsV2lkdGgpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5jb2xvckluaGVyaXQsIGNvbG9yID09PSAnaW5oZXJpdCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uQmFzZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZm9jdXNSaXBwbGU6ICFkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gIH0sIGNoaWxkcmVuKSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3V0aWxzLmNvbXBvbmVudFByb3BUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKiBgZGlzYWJsZVJpcHBsZWAgbXVzdCBhbHNvIGJlIHRydWUuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhbmQgYHZhcmlhbnRgIGlzIGAnZmFiJ2AsIHdpbGwgdXNlIG1pbmkgZmxvYXRpbmcgYWN0aW9uIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgbWluaTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBidXR0b24uXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqL1xuICBzaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogX19XQVJOSU5HX186IGBmbGF0YCBhbmQgYHJhaXNlZGAgYXJlIGRlcHJlY2F0ZWQuXG4gICAqIEluc3RlYWQgdXNlIGB0ZXh0YCBhbmQgYGNvbnRhaW5lZGAgcmVzcGVjdGl2ZWx5LlxuICAgKiBgZmFiYCBhbmQgYGV4dGVuZGVkRmFiYCBhcmUgZGVwcmVjYXRlZC5cbiAgICogSW5zdGVhZCB1c2UgYDxGYWI+YCBhbmQgYDxGYWIgdmFyaWFudD1cImV4dGVuZGVkXCI+YFxuICAgKi9cbiAgdmFyaWFudDogKDAsIF9jaGFpblByb3BUeXBlcy5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0ZXh0JywgJ291dGxpbmVkJywgJ2NvbnRhaW5lZCcsICdmYWInLCAnZXh0ZW5kZWRGYWInLCAnZmxhdCcsICdyYWlzZWQnXSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wcy52YXJpYW50ID09PSAnZmxhdCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiB0aGUgYGZsYXRgIHZhcmlhbnQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuICcgKyAnYHRleHRgIGlzIGVxdWl2YWxlbnQgYW5kIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLnZhcmlhbnQgPT09ICdyYWlzZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogdGhlIGByYWlzZWRgIHZhcmlhbnQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuICcgKyAnYGNvbnRhaW5lZGAgaXMgZXF1aXZhbGVudCBhbmQgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMudmFyaWFudCA9PT0gJ2ZhYicpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiB0aGUgYGZhYmAgdmFyaWFudCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gJyArICdUaGUgYDxGYWI+YCBjb21wb25lbnQgaXMgZXF1aXZhbGVudCBhbmQgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMudmFyaWFudCA9PT0gJ2V4dGVuZGVkRmFiJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IHRoZSBgZmFiYCB2YXJpYW50IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiAnICsgJ1RoZSBgPEZhYj5gIGNvbXBvbmVudCB3aXRoIGB2YXJpYW50PVwiZXh0ZW5kZWRcImAgaXMgZXF1aXZhbGVudCAnICsgJ2FuZCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KVxufSA6IHZvaWQgMDtcbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbG9yOiAnZGVmYXVsdCcsXG4gIGNvbXBvbmVudDogJ2J1dHRvbicsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgZGlzYWJsZUZvY3VzUmlwcGxlOiBmYWxzZSxcbiAgZnVsbFdpZHRoOiBmYWxzZSxcbiAgbWluaTogZmFsc2UsXG4gIHNpemU6ICdtZWRpdW0nLFxuICB0eXBlOiAnYnV0dG9uJyxcbiAgdmFyaWFudDogJ3RleHQnXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b24nXG59KShCdXR0b24pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9rZXljb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwia2V5Y29kZVwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX293bmVyV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvb3duZXJXaW5kb3dcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfTm9Tc3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Ob1NzclwiKSk7XG5cbnZhciBfZm9jdXNWaXNpYmxlID0gcmVxdWlyZShcIi4vZm9jdXNWaXNpYmxlXCIpO1xuXG52YXIgX1RvdWNoUmlwcGxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ub3VjaFJpcHBsZVwiKSk7XG5cbnZhciBfY3JlYXRlUmlwcGxlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlUmlwcGxlSGFuZGxlclwiKSk7XG5cbnZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJvcmRlcjogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIC8vIFNvIHdlIHRha2UgcHJlY2VkZW50IG92ZXIgdGhlIHN0eWxlIG9mIGEgbmF0aXZlIDxhIC8+IGVsZW1lbnQuXG4gICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICAgIGJvcmRlclN0eWxlOiAnbm9uZScgLy8gUmVtb3ZlIEZpcmVmb3ggZG90dGVkIG91dGxpbmUuXG5cbiAgICB9LFxuICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICB9XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgZGlzYWJsZWQ6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgZm9jdXNWaXNpYmxlOiB7fVxufTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIV9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogcmVhY3RAMTYuMy4wIG9yIGdyZWF0ZXIgaXMgcmVxdWlyZWQuJyk7XG59XG4vKipcbiAqIGBCdXR0b25CYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYSBidXR0b24uXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgZm9jdXMvcmlwcGxlIGxvZ2ljLlxuICovXG5cblxudmFyIEJ1dHRvbkJhc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoQnV0dG9uQmFzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uQmFzZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIEJ1dHRvbkJhc2UpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9ICgwLCBfZ2V0UHJvdG90eXBlT2YzLmRlZmF1bHQpKEJ1dHRvbkJhc2UpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgIF90aGlzLmtleURvd24gPSBmYWxzZTtcbiAgICBfdGhpcy5mb2N1c1Zpc2libGVDaGVja1RpbWUgPSA1MDtcbiAgICBfdGhpcy5mb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzID0gNTtcbiAgICBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCAnTW91c2VEb3duJywgJ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmZvY3VzVmlzaWJsZVRpbWVvdXQpO1xuXG4gICAgICBpZiAoX3RoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBmb2N1c1Zpc2libGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLmhhbmRsZU1vdXNlVXAgPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCAnTW91c2VVcCcsICdzdG9wJyk7XG4gICAgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksICdNb3VzZUxlYXZlJywgJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gKDAsIF9jcmVhdGVSaXBwbGVIYW5kbGVyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgJ1RvdWNoU3RhcnQnLCAnc3RhcnQnKTtcbiAgICBfdGhpcy5oYW5kbGVUb3VjaEVuZCA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksICdUb3VjaEVuZCcsICdzdG9wJyk7XG4gICAgX3RoaXMuaGFuZGxlVG91Y2hNb3ZlID0gKDAsIF9jcmVhdGVSaXBwbGVIYW5kbGVyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgJ1RvdWNoTW92ZScsICdzdG9wJyk7XG4gICAgX3RoaXMuaGFuZGxlQ29udGV4dE1lbnUgPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCAnQ29udGV4dE1lbnUnLCAnc3RvcCcpO1xuICAgIF90aGlzLmhhbmRsZUJsdXIgPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCAnQmx1cicsICdzdG9wJywgZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmZvY3VzVmlzaWJsZVRpbWVvdXQpO1xuXG4gICAgICBpZiAoX3RoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBmb2N1c1Zpc2libGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX3RoaXMub25SaXBwbGVSZWYgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMucmlwcGxlID0gbm9kZTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25Gb2N1c1Zpc2libGVIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5rZXlEb3duID0gZmFsc2U7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNWaXNpYmxlOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIGZvY3VzUmlwcGxlID0gX3RoaXMkcHJvcHMuZm9jdXNSaXBwbGUsXG4gICAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHMub25LZXlEb3duLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrO1xuICAgICAgdmFyIGtleSA9ICgwLCBfa2V5Y29kZS5kZWZhdWx0KShldmVudCk7IC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG5cbiAgICAgIGlmIChmb2N1c1JpcHBsZSAmJiAhX3RoaXMua2V5RG93biAmJiBfdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUgJiYgX3RoaXMucmlwcGxlICYmIGtleSA9PT0gJ3NwYWNlJykge1xuICAgICAgICBfdGhpcy5rZXlEb3duID0gdHJ1ZTtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpO1xuXG4gICAgICAgIF90aGlzLnJpcHBsZS5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMucmlwcGxlLnN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbktleURvd24pIHtcbiAgICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBjb21wb25lbnQgJiYgY29tcG9uZW50ICE9PSAnYnV0dG9uJyAmJiAoa2V5ID09PSAnc3BhY2UnIHx8IGtleSA9PT0gJ2VudGVyJykgJiYgIShfdGhpcy5idXR0b24udGFnTmFtZSA9PT0gJ0EnICYmIF90aGlzLmJ1dHRvbi5ocmVmKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5VXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5mb2N1c1JpcHBsZSAmJiAoMCwgX2tleWNvZGUuZGVmYXVsdCkoZXZlbnQpID09PSAnc3BhY2UnICYmIF90aGlzLnJpcHBsZSAmJiBfdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpIHtcbiAgICAgICAgX3RoaXMua2V5RG93biA9IGZhbHNlO1xuICAgICAgICBldmVudC5wZXJzaXN0KCk7XG5cbiAgICAgICAgX3RoaXMucmlwcGxlLnN0b3AoZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5yaXBwbGUucHVsc2F0ZShldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25LZXlVcCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbktleVVwKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG5cblxuICAgICAgaWYgKCFfdGhpcy5idXR0b24pIHtcbiAgICAgICAgX3RoaXMuYnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgKDAsIF9mb2N1c1Zpc2libGUuZGV0ZWN0Rm9jdXNWaXNpYmxlKSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksIF90aGlzLmJ1dHRvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5vbkZvY3VzVmlzaWJsZUhhbmRsZXIoZXZlbnQpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkZvY3VzKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRm9jdXMoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShCdXR0b25CYXNlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLmJ1dHRvbiA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgKDAsIF9mb2N1c1Zpc2libGUubGlzdGVuRm9yRm9jdXNLZXlzKSgoMCwgX293bmVyV2luZG93LmRlZmF1bHQpKHRoaXMuYnV0dG9uKSk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmFjdGlvbikge1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbih7XG4gICAgICAgICAgZm9jdXNWaXNpYmxlOiBmdW5jdGlvbiBmb2N1c1Zpc2libGUoKSB7XG4gICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBmb2N1c1Zpc2libGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfdGhpczIuYnV0dG9uLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuZm9jdXNSaXBwbGUgJiYgIXRoaXMucHJvcHMuZGlzYWJsZVJpcHBsZSAmJiAhcHJldlN0YXRlLmZvY3VzVmlzaWJsZSAmJiB0aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSkge1xuICAgICAgICB0aGlzLnJpcHBsZS5wdWxzYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZm9jdXNWaXNpYmxlVGltZW91dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjdGlvbiA9IF90aGlzJHByb3BzMi5hY3Rpb24sXG4gICAgICAgICAgYnV0dG9uUmVmID0gX3RoaXMkcHJvcHMyLmJ1dHRvblJlZixcbiAgICAgICAgICBjZW50ZXJSaXBwbGUgPSBfdGhpcyRwcm9wczIuY2VudGVyUmlwcGxlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wczIuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWVQcm9wID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wczIuY29tcG9uZW50LFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICAgIGRpc2FibGVSaXBwbGUgPSBfdGhpcyRwcm9wczIuZGlzYWJsZVJpcHBsZSxcbiAgICAgICAgICBkaXNhYmxlVG91Y2hSaXBwbGUgPSBfdGhpcyRwcm9wczIuZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgICAgICAgIGZvY3VzUmlwcGxlID0gX3RoaXMkcHJvcHMyLmZvY3VzUmlwcGxlLFxuICAgICAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICAgICAgb25CbHVyID0gX3RoaXMkcHJvcHMyLm9uQmx1cixcbiAgICAgICAgICBvbkZvY3VzID0gX3RoaXMkcHJvcHMyLm9uRm9jdXMsXG4gICAgICAgICAgb25Gb2N1c1Zpc2libGUgPSBfdGhpcyRwcm9wczIub25Gb2N1c1Zpc2libGUsXG4gICAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHMyLm9uS2V5RG93bixcbiAgICAgICAgICBvbktleVVwID0gX3RoaXMkcHJvcHMyLm9uS2V5VXAsXG4gICAgICAgICAgb25Nb3VzZURvd24gPSBfdGhpcyRwcm9wczIub25Nb3VzZURvd24sXG4gICAgICAgICAgb25Nb3VzZUxlYXZlID0gX3RoaXMkcHJvcHMyLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbk1vdXNlVXAgPSBfdGhpcyRwcm9wczIub25Nb3VzZVVwLFxuICAgICAgICAgIG9uVG91Y2hFbmQgPSBfdGhpcyRwcm9wczIub25Ub3VjaEVuZCxcbiAgICAgICAgICBvblRvdWNoTW92ZSA9IF90aGlzJHByb3BzMi5vblRvdWNoTW92ZSxcbiAgICAgICAgICBvblRvdWNoU3RhcnQgPSBfdGhpcyRwcm9wczIub25Ub3VjaFN0YXJ0LFxuICAgICAgICAgIHRhYkluZGV4ID0gX3RoaXMkcHJvcHMyLnRhYkluZGV4LFxuICAgICAgICAgIFRvdWNoUmlwcGxlUHJvcHMgPSBfdGhpcyRwcm9wczIuVG91Y2hSaXBwbGVQcm9wcyxcbiAgICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMyLnR5cGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wczIsIFtcImFjdGlvblwiLCBcImJ1dHRvblJlZlwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZVJpcHBsZVwiLCBcImRpc2FibGVUb3VjaFJpcHBsZVwiLCBcImZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwib25CbHVyXCIsIFwib25Gb2N1c1wiLCBcIm9uRm9jdXNWaXNpYmxlXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcIm9uTW91c2VEb3duXCIsIFwib25Nb3VzZUxlYXZlXCIsIFwib25Nb3VzZVVwXCIsIFwib25Ub3VjaEVuZFwiLCBcIm9uVG91Y2hNb3ZlXCIsIFwib25Ub3VjaFN0YXJ0XCIsIFwidGFiSW5kZXhcIiwgXCJUb3VjaFJpcHBsZVByb3BzXCIsIFwidHlwZVwiXSk7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBkaXNhYmxlZCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZvY3VzVmlzaWJsZSwgdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLCB0aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gICAgICB2YXIgQ29tcG9uZW50UHJvcCA9IGNvbXBvbmVudDtcblxuICAgICAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nICYmIG90aGVyLmhyZWYpIHtcbiAgICAgICAgQ29tcG9uZW50UHJvcCA9ICdhJztcbiAgICAgIH1cblxuICAgICAgdmFyIGJ1dHRvblByb3BzID0ge307XG5cbiAgICAgIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgICAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZSB8fCAnYnV0dG9uJztcbiAgICAgICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1dHRvblByb3BzLnJvbGUgPSAnYnV0dG9uJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50UHJvcCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sXG4gICAgICAgIG9uS2V5VXA6IHRoaXMuaGFuZGxlS2V5VXAsXG4gICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmUsXG4gICAgICAgIG9uTW91c2VVcDogdGhpcy5oYW5kbGVNb3VzZVVwLFxuICAgICAgICBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kLFxuICAgICAgICBvblRvdWNoTW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUsXG4gICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgICBvbkNvbnRleHRNZW51OiB0aGlzLmhhbmRsZUNvbnRleHRNZW51LFxuICAgICAgICByZWY6IGJ1dHRvblJlZixcbiAgICAgICAgdGFiSW5kZXg6IGRpc2FibGVkID8gJy0xJyA6IHRhYkluZGV4XG4gICAgICB9LCBidXR0b25Qcm9wcywgb3RoZXIpLCBjaGlsZHJlbiwgIWRpc2FibGVSaXBwbGUgJiYgIWRpc2FibGVkID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTm9Tc3IuZGVmYXVsdCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVG91Y2hSaXBwbGUuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGlubmVyUmVmOiB0aGlzLm9uUmlwcGxlUmVmLFxuICAgICAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICAgICAgfSwgVG91Y2hSaXBwbGVQcm9wcykpKSA6IG51bGwpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJldlN0YXRlLmZvY3VzVmlzaWJsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmb2N1c1Zpc2libGU6IGZhbHNlLFxuICAgICAgICAgIGxhc3REaXNhYmxlZDogbmV4dFByb3BzLmRpc2FibGVkXG4gICAgICAgIH07XG4gICAgICB9IC8vIFRoZSBibHVyIHdvbid0IGZpcmUgd2hlbiB0aGUgZGlzYWJsZWQgc3RhdGUgaXMgc2V0IG9uIGEgZm9jdXNlZCBpbnB1dC5cbiAgICAgIC8vIFdlIG5lZWQgdG8gYm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlIG1hbnVhbGx5LlxuXG5cbiAgICAgIGlmICghcHJldlN0YXRlLnByZXZTdGF0ZSAmJiBuZXh0UHJvcHMuZGlzYWJsZWQgJiYgcHJldlN0YXRlLmZvY3VzVmlzaWJsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZvY3VzVmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgbGFzdERpc2FibGVkOiBuZXh0UHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGFzdERpc2FibGVkOiBuZXh0UHJvcHMuZGlzYWJsZWRcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBCdXR0b25CYXNlO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gdHJpZ2dlciBhbiBhY3Rpb24gcHJvZ3JhbW1hdGljYWxseS5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYGZvY3VzVmlzaWJsZSgpYCBhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb25zIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGFsbCBwb3NzaWJsZSBhY3Rpb25zXG4gICAqIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKi9cbiAgYWN0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgbmF0aXZlIGJ1dHRvbiBjb21wb25lbnQuXG4gICAqL1xuICBidXR0b25SZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgd2lsbCBiZSBjZW50ZXJlZC5cbiAgICogVGhleSB3b24ndCBzdGFydCBhdCB0aGUgY3Vyc29yIGludGVyYWN0aW9uIHBvc2l0aW9uLlxuICAgKi9cbiAgY2VudGVyUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfdXRpbHMuY29tcG9uZW50UHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b3VjaCByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgYGZhbHNlYC5cbiAgICovXG4gIGZvY3VzUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gaGVscCBhIHBlcnNvbiBrbm93IHdoaWNoIGVsZW1lbnQgaGFzIHRoZSBrZXlib2FyZCBmb2N1cy5cbiAgICogVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIGVsZW1lbnQgZ2FpbiB0aGUgZm9jdXMgdGhyb3VnaCBhIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIGZlYXR1cmVdKGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMtNC8jdGhlLWZvY3VzLXZpc2libGUtcHNldWRvKS5cbiAgICogVGhlIHJhdGlvbmFsIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW4gaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL21hc3Rlci9leHBsYWluZXIubWQpLlxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkIHdpdGggYSBrZXlib2FyZC5cbiAgICogV2UgdHJpZ2dlciBhIGBvbkZvY3VzYCBjYWxsYmFjayB0b28uXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgVG91Y2hSaXBwbGVQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVXNlZCB0byBjb250cm9sIHRoZSBidXR0b24ncyBwdXJwb3NlLlxuICAgKiBUaGlzIHByb3BlcnR5IHBhc3NlcyB0aGUgdmFsdWUgdG8gdGhlIGB0eXBlYCBhdHRyaWJ1dGUgb2YgdGhlIG5hdGl2ZSBidXR0b24gY29tcG9uZW50LlxuICAgKiBWYWxpZCBwcm9wZXJ0eSB2YWx1ZXMgaW5jbHVkZSBgYnV0dG9uYCwgYHN1Ym1pdGAsIGFuZCBgcmVzZXRgLlxuICAgKi9cbiAgdHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSA6IHZvaWQgMDtcbkJ1dHRvbkJhc2UuZGVmYXVsdFByb3BzID0ge1xuICBjZW50ZXJSaXBwbGU6IGZhbHNlLFxuICBjb21wb25lbnQ6ICdidXR0b24nLFxuICBkaXNhYmxlUmlwcGxlOiBmYWxzZSxcbiAgZGlzYWJsZVRvdWNoUmlwcGxlOiBmYWxzZSxcbiAgZm9jdXNSaXBwbGU6IGZhbHNlLFxuICB0YWJJbmRleDogJzAnLFxuICB0eXBlOiAnYnV0dG9uJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uQmFzZSdcbn0pKEJ1dHRvbkJhc2UpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb3duZXJEb2N1bWVudFwiKSk7XG5cbmZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgdmFyIGZhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB3aW5kb3c7XG4gIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFZpZXcgfHwgZmFsbGJhY2s7XG59XG5cbnZhciBfZGVmYXVsdCA9IG93bmVyV2luZG93O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTm9Tc3IuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTm9Tc3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05vU3NyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxuLyoqXG4gKiBOb1NzciBwdXJwb3NlbHkgcmVtb3ZlcyBjb21wb25lbnRzIGZyb20gdGhlIHN1YmplY3Qgb2YgU2VydmVyIFNpZGUgUmVuZGVyaW5nIChTU1IpLlxuICpcbiAqIFRoaXMgY29tcG9uZW50IGNhbiBiZSB1c2VmdWwgaW4gYSB2YXJpZXR5IG9mIHNpdHVhdGlvbnM6XG4gKiAtIEVzY2FwZSBoYXRjaCBmb3IgYnJva2VuIGRlcGVuZGVuY2llcyBub3Qgc3VwcG9ydGluZyBTU1IuXG4gKiAtIEltcHJvdmUgdGhlIHRpbWUtdG8tZmlyc3QgcGFpbnQgb24gdGhlIGNsaWVudCBieSBvbmx5IHJlbmRlcmluZyBhYm92ZSB0aGUgZm9sZC5cbiAqIC0gUmVkdWNlIHRoZSByZW5kZXJpbmcgdGltZSBvbiB0aGUgc2VydmVyLlxuICogLSBVbmRlciB0b28gaGVhdnkgc2VydmVyIGxvYWQsIHlvdSBjYW4gdHVybiBvbiBzZXJ2aWNlIGRlZ3JhZGF0aW9uLlxuICovXG52YXIgTm9Tc3IgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoTm9Tc3IsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5vU3NyKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgTm9Tc3IpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9ICgwLCBfZ2V0UHJvdG90eXBlT2YzLmRlZmF1bHQpKE5vU3NyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG4gICAgX3RoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbW91bnRlZDogZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKE5vU3NyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5kZWZlcikge1xuICAgICAgICAvLyBXb25kZXJpbmcgd2h5IHdlIHVzZSB0d28gUkFGcz8gQ2hlY2sgdGhpcyB2aWRlbyBvdXQ6XG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Y0NPTDdNQzRQbDBcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBUaGUgYnJvd3NlciBzaG91bGQgYmUgYWJvdXQgdG8gcmVuZGVyIHRoZSBET00gdGhhdCBSZWFjdCBjb21taXRlZCBhdCB0aGlzIHBvaW50LlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gaW50ZXJydXB0LiBMZXQncyB3YWl0IHRoZSBuZXh0IHJhZi5cbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzMi5tb3VudGVkKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgbW91bnRlZDogdHJ1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBtb3VudGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGZhbGxiYWNrID0gX3RoaXMkcHJvcHMuZmFsbGJhY2s7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5tb3VudGVkID8gY2hpbGRyZW4gOiBmYWxsYmFjaztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE5vU3NyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOb1Nzci5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBub3Qgb25seSBwcmV2ZW50IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICogSXQgd2lsbCBhbHNvIGRlZmVyIHRoZSByZW5kZXJpbmcgb2YgdGhlIGNoaWxkcmVuIGludG8gYSBkaWZmZXJlbnQgc2NyZWVuIGZyYW1lLlxuICAgKi9cbiAgZGVmZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZmFsbGJhY2sgY29udGVudCB0byBkaXNwbGF5LlxuICAgKi9cbiAgZmFsbGJhY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOb1Nzci5wcm9wVHlwZXMgPSAoMCwgX3V0aWxzLmV4YWN0UHJvcCkoTm9Tc3IucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn1cblxuTm9Tc3IuZGVmYXVsdFByb3BzID0ge1xuICBkZWZlcjogZmFsc2UsXG4gIGZhbGxiYWNrOiBudWxsXG59O1xudmFyIF9kZWZhdWx0ID0gTm9Tc3I7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRldGVjdEZvY3VzVmlzaWJsZSA9IGRldGVjdEZvY3VzVmlzaWJsZTtcbmV4cG9ydHMubGlzdGVuRm9yRm9jdXNLZXlzID0gbGlzdGVuRm9yRm9jdXNLZXlzO1xuXG52YXIgX2tleWNvZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJrZXljb2RlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgaW50ZXJuYWwgPSB7XG4gIGZvY3VzS2V5UHJlc3NlZDogZmFsc2UsXG4gIGtleVVwRXZlbnRUaW1lb3V0OiAtMVxufTtcblxuZnVuY3Rpb24gZmluZEFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gIHZhciBhY3RpdmVFbGVtZW50ID0gZG9jLmFjdGl2ZUVsZW1lbnQ7XG5cbiAgd2hpbGUgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5zaGFkb3dSb290ICYmIGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdC5hY3RpdmVFbGVtZW50KSB7XG4gICAgYWN0aXZlRWxlbWVudCA9IGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdC5hY3RpdmVFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGRldGVjdEZvY3VzVmlzaWJsZShpbnN0YW5jZSwgZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgdmFyIGF0dGVtcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDE7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpbnN0YW5jZS5mb2N1c1Zpc2libGVDaGVja1RpbWUsICdNYXRlcmlhbC1VSTogbWlzc2luZyBpbnN0YW5jZS5mb2N1c1Zpc2libGVDaGVja1RpbWUuJykgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpbnN0YW5jZS5mb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzLCAnTWF0ZXJpYWwtVUk6IG1pc3NpbmcgaW5zdGFuY2UuZm9jdXNWaXNpYmxlTWF4Q2hlY2tUaW1lcy4nKSA6IHZvaWQgMDtcbiAgaW5zdGFuY2UuZm9jdXNWaXNpYmxlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoZWxlbWVudCk7XG4gICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBmaW5kQWN0aXZlRWxlbWVudChkb2MpO1xuXG4gICAgaWYgKGludGVybmFsLmZvY3VzS2V5UHJlc3NlZCAmJiAoYWN0aXZlRWxlbWVudCA9PT0gZWxlbWVudCB8fCBlbGVtZW50LmNvbnRhaW5zKGFjdGl2ZUVsZW1lbnQpKSkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2UgaWYgKGF0dGVtcHQgPCBpbnN0YW5jZS5mb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzKSB7XG4gICAgICBkZXRlY3RGb2N1c1Zpc2libGUoaW5zdGFuY2UsIGVsZW1lbnQsIGNhbGxiYWNrLCBhdHRlbXB0ICsgMSk7XG4gICAgfVxuICB9LCBpbnN0YW5jZS5mb2N1c1Zpc2libGVDaGVja1RpbWUpO1xufVxuXG52YXIgRk9DVVNfS0VZUyA9IFsndGFiJywgJ2VudGVyJywgJ3NwYWNlJywgJ2VzYycsICd1cCcsICdkb3duJywgJ2xlZnQnLCAncmlnaHQnXTtcblxuZnVuY3Rpb24gaXNGb2N1c0tleShldmVudCkge1xuICByZXR1cm4gRk9DVVNfS0VZUy5pbmRleE9mKCgwLCBfa2V5Y29kZS5kZWZhdWx0KShldmVudCkpID4gLTE7XG59XG5cbnZhciBoYW5kbGVLZXlVcEV2ZW50ID0gZnVuY3Rpb24gaGFuZGxlS2V5VXBFdmVudChldmVudCkge1xuICBpZiAoaXNGb2N1c0tleShldmVudCkpIHtcbiAgICBpbnRlcm5hbC5mb2N1c0tleVByZXNzZWQgPSB0cnVlOyAvLyBMZXQncyBjb25zaWRlciB0aGF0IHRoZSB1c2VyIGlzIHVzaW5nIGEga2V5Ym9hcmQgZHVyaW5nIGEgd2luZG93IGZyYW1lIG9mIDFzLlxuXG4gICAgY2xlYXJUaW1lb3V0KGludGVybmFsLmtleVVwRXZlbnRUaW1lb3V0KTtcbiAgICBpbnRlcm5hbC5rZXlVcEV2ZW50VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaW50ZXJuYWwuZm9jdXNLZXlQcmVzc2VkID0gZmFsc2U7XG4gICAgfSwgMWUzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbGlzdGVuRm9yRm9jdXNLZXlzKHdpbikge1xuICAvLyBUaGUgZXZlbnQgbGlzdGVuZXIgd2lsbCBvbmx5IGJlIGFkZGVkIG9uY2UgcGVyIHdpbmRvdy5cbiAgLy8gRHVwbGljYXRlIGV2ZW50IGxpc3RlbmVycyB3aWxsIGJlIGlnbm9yZWQgYnkgYWRkRXZlbnRMaXN0ZW5lci5cbiAgLy8gQWxzbywgdGhpcyBsb2dpYyBpcyBjbGllbnQgc2lkZSBvbmx5LCB3ZSBkb24ndCBuZWVkIGEgdGVhcmRvd24uXG4gIHdpbi5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGhhbmRsZUtleVVwRXZlbnQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gZXhwb3J0cy5ERUxBWV9SSVBQTEUgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25Hcm91cFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfUmlwcGxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SaXBwbGVcIikpO1xuXG52YXIgRFVSQVRJT04gPSA1NTA7XG52YXIgREVMQVlfUklQUExFID0gODA7XG5leHBvcnRzLkRFTEFZX1JJUFBMRSA9IERFTEFZX1JJUFBMRTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgekluZGV4OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZToge1xuICAgICAgd2lkdGg6IDUwLFxuICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZVZpc2libGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZVZpc2libGU6IHtcbiAgICAgIG9wYWNpdHk6IDAuMyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgIGFuaW1hdGlvbjogXCJtdWktcmlwcGxlLWVudGVyIFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICByaXBwbGVQdWxzYXRlOiB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogXCJcIi5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlciwgXCJtc1wiKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRgIGNsYXNzLiAqL1xuICAgIGNoaWxkOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZExlYXZpbmdgIGNsYXNzLiAqL1xuICAgIGNoaWxkTGVhdmluZzoge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGFuaW1hdGlvbjogXCJtdWktcmlwcGxlLWV4aXQgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgY2hpbGRQdWxzYXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBhbmltYXRpb246IFwibXVpLXJpcHBsZS1wdWxzYXRlIDI1MDBtcyBcIi5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgXCIgMjAwbXMgaW5maW5pdGVcIilcbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXInOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktcmlwcGxlLWV4aXQnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjkyKSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBUb3VjaFJpcHBsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoVG91Y2hSaXBwbGUsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb3VjaFJpcHBsZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFRvdWNoUmlwcGxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSAoMCwgX2dldFByb3RvdHlwZU9mMy5kZWZhdWx0KShUb3VjaFJpcHBsZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1zdGF0ZVxuICAgICAgbmV4dEtleTogMCxcbiAgICAgIHJpcHBsZXM6IFtdXG4gICAgfTtcblxuICAgIF90aGlzLnB1bHNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zdGFydCh7fSwge1xuICAgICAgICBwdWxzYXRlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgX29wdGlvbnMkcHVsc2F0ZSA9IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgICAgICBwdWxzYXRlID0gX29wdGlvbnMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRwdWxzYXRlLFxuICAgICAgICAgIF9vcHRpb25zJGNlbnRlciA9IG9wdGlvbnMuY2VudGVyLFxuICAgICAgICAgIGNlbnRlciA9IF9vcHRpb25zJGNlbnRlciA9PT0gdm9pZCAwID8gX3RoaXMucHJvcHMuY2VudGVyIHx8IG9wdGlvbnMucHVsc2F0ZSA6IF9vcHRpb25zJGNlbnRlcixcbiAgICAgICAgICBfb3B0aW9ucyRmYWtlRWxlbWVudCA9IG9wdGlvbnMuZmFrZUVsZW1lbnQsXG4gICAgICAgICAgZmFrZUVsZW1lbnQgPSBfb3B0aW9ucyRmYWtlRWxlbWVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRmYWtlRWxlbWVudDtcblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIF90aGlzLmlnbm9yaW5nTW91c2VEb3duKSB7XG4gICAgICAgIF90aGlzLmlnbm9yaW5nTW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICBfdGhpcy5pZ25vcmluZ01vdXNlRG93biA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gZmFrZUVsZW1lbnQgPyBudWxsIDogX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICAgIHZhciByZWN0ID0gZWxlbWVudCA/IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiB7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogMFxuICAgICAgfTsgLy8gR2V0IHRoZSBzaXplIG9mIHRoZSByaXBwbGVcblxuICAgICAgdmFyIHJpcHBsZVg7XG4gICAgICB2YXIgcmlwcGxlWTtcbiAgICAgIHZhciByaXBwbGVTaXplO1xuXG4gICAgICBpZiAoY2VudGVyIHx8IGV2ZW50LmNsaWVudFggPT09IDAgJiYgZXZlbnQuY2xpZW50WSA9PT0gMCB8fCAhZXZlbnQuY2xpZW50WCAmJiAhZXZlbnQudG91Y2hlcykge1xuICAgICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChyZWN0LndpZHRoIC8gMik7XG4gICAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2xpZW50WCA9IGV2ZW50LmNsaWVudFggPyBldmVudC5jbGllbnRYIDogZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICB2YXIgY2xpZW50WSA9IGV2ZW50LmNsaWVudFkgPyBldmVudC5jbGllbnRZIDogZXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChjbGllbnRYIC0gcmVjdC5sZWZ0KTtcbiAgICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQoY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNlbnRlcikge1xuICAgICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogTWF0aC5wb3cocmVjdC53aWR0aCwgMikgKyBNYXRoLnBvdyhyZWN0LmhlaWdodCwgMikpIC8gMyk7IC8vIEZvciBzb21lIHJlYXNvbiB0aGUgYW5pbWF0aW9uIGlzIGJyb2tlbiBvbiBNb2JpbGUgQ2hyb21lIGlmIHRoZSBzaXplIGlmIGV2ZW4uXG5cbiAgICAgICAgaWYgKHJpcHBsZVNpemUgJSAyID09PSAwKSB7XG4gICAgICAgICAgcmlwcGxlU2l6ZSArPSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc2l6ZVggPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50V2lkdGggOiAwKSAtIHJpcHBsZVgpLCByaXBwbGVYKSAqIDIgKyAyO1xuICAgICAgICB2YXIgc2l6ZVkgPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMCkgLSByaXBwbGVZKSwgcmlwcGxlWSkgKiAyICsgMjtcbiAgICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydChNYXRoLnBvdyhzaXplWCwgMikgKyBNYXRoLnBvdyhzaXplWSwgMikpO1xuICAgICAgfSAvLyBUb3VjaGUgZGV2aWNlc1xuXG5cbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc3RhcnRDb21taXQoe1xuICAgICAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZSxcbiAgICAgICAgICAgIGNiOiBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9OyAvLyBEZXBsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuc3RhcnRUaW1lckNvbW1pdCkge1xuICAgICAgICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCgpO1xuXG4gICAgICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgIGNiOiBjYlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhcnRDb21taXQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICB2YXIgcHVsc2F0ZSA9IHBhcmFtcy5wdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgICByaXBwbGVZID0gcGFyYW1zLnJpcHBsZVksXG4gICAgICAgICAgcmlwcGxlU2l6ZSA9IHBhcmFtcy5yaXBwbGVTaXplLFxuICAgICAgICAgIGNiID0gcGFyYW1zLmNiO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuZXh0S2V5OiBzdGF0ZS5uZXh0S2V5ICsgMSxcbiAgICAgICAgICByaXBwbGVzOiBbXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkoc3RhdGUucmlwcGxlcyksIFtfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9SaXBwbGUuZGVmYXVsdCwge1xuICAgICAgICAgICAga2V5OiBzdGF0ZS5uZXh0S2V5LFxuICAgICAgICAgICAgY2xhc3NlczogX3RoaXMucHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICAgIHRpbWVvdXQ6IHtcbiAgICAgICAgICAgICAgZXhpdDogRFVSQVRJT04sXG4gICAgICAgICAgICAgIGVudGVyOiBEVVJBVElPTlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemVcbiAgICAgICAgICB9KV0pXG4gICAgICAgIH07XG4gICAgICB9LCBjYik7XG4gICAgfTtcblxuICAgIF90aGlzLnN0b3AgPSBmdW5jdGlvbiAoZXZlbnQsIGNiKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc3RhcnRUaW1lcik7XG4gICAgICB2YXIgcmlwcGxlcyA9IF90aGlzLnN0YXRlLnJpcHBsZXM7IC8vIFRoZSB0b3VjaCBpbnRlcmFjdGlvbiBvY2N1cnMgdG9vIHF1aWNrbHkuXG4gICAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCkge1xuICAgICAgICBldmVudC5wZXJzaXN0KCk7XG5cbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCgpO1xuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQgPSBudWxsO1xuICAgICAgICBfdGhpcy5zdGFydFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc3RvcChldmVudCwgY2IpO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gbnVsbDtcblxuICAgICAgaWYgKHJpcHBsZXMgJiYgcmlwcGxlcy5sZW5ndGgpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHJpcHBsZXM6IHJpcHBsZXMuc2xpY2UoMSlcbiAgICAgICAgfSwgY2IpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShUb3VjaFJpcHBsZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5zdGFydFRpbWVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2VudGVyID0gX3RoaXMkcHJvcHMuY2VudGVyLFxuICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjZW50ZXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgICAgIGVudGVyOiB0cnVlLFxuICAgICAgICBleGl0OiB0cnVlLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICAgIH0sIG90aGVyKSwgdGhpcy5zdGF0ZS5yaXBwbGVzKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRvdWNoUmlwcGxlO1xufShfcmVhY3QuZGVmYXVsdC5QdXJlQ29tcG9uZW50KTtcblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG91Y2hSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHN0YXJ0cyBhdCB0aGUgY2VudGVyIG9mIHRoZSBjb21wb25lbnRcbiAgICogcmF0aGVyIHRoYW4gYXQgdGhlIHBvaW50IG9mIGludGVyYWN0aW9uLlxuICAgKi9cbiAgY2VudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0gOiB2b2lkIDA7XG5Ub3VjaFJpcHBsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNlbnRlcjogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbn0pKFRvdWNoUmlwcGxlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsImZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9DaGlsZE1hcHBpbmcgPSByZXF1aXJlKFwiLi91dGlscy9DaGlsZE1hcHBpbmdcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG52YXIgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBvYmpba107XG4gIH0pO1xufTtcblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIGA8VHJhbnNpdGlvbkdyb3VwPmAgcmVuZGVycyBhIGA8ZGl2PmAgYnkgZGVmYXVsdC4gWW91IGNhbiBjaGFuZ2UgdGhpc1xuICAgKiBiZWhhdmlvciBieSBwcm92aWRpbmcgYSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBJZiB5b3UgdXNlIFJlYWN0IHYxNisgYW5kIHdvdWxkIGxpa2UgdG8gYXZvaWQgYSB3cmFwcGluZyBgPGRpdj5gIGVsZW1lbnRcbiAgICogeW91IGNhbiBwYXNzIGluIGBjb21wb25lbnQ9e251bGx9YC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIHdyYXBwaW5nIGRpdlxuICAgKiBib3JrcyB5b3VyIGNzcyBzdHlsZXMuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBhcHBlYXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgYXBwZWFyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZXhpdCBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59IDoge307O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgY2hpbGRGYWN0b3J5OiBmdW5jdGlvbiBjaGlsZEZhY3RvcnkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIGNvbXBvbmVudCBtYW5hZ2VzIGEgc2V0IG9mIHRyYW5zaXRpb24gY29tcG9uZW50c1xuICAgKiAoYDxUcmFuc2l0aW9uPmAgYW5kIGA8Q1NTVHJhbnNpdGlvbj5gKSBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgdHJhbnNpdGlvblxuICAgKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gICAqIGFuZCB1bm1vdW50aW5nIG9mIGNvbXBvbmVudHMgb3ZlciB0aW1lLlxuICAgKlxuICAgKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICAgKiBgaW5gIHByb3AgaXMgdG9nZ2xlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gICAqIEV4YWN0bHkgX2hvd18gYSBsaXN0IGl0ZW0gYW5pbWF0ZXMgaXMgdXAgdG8gdGhlIGluZGl2aWR1YWwgdHJhbnNpdGlvblxuICAgKiBjb21wb25lbnQuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudCBsaXN0XG4gICAqIGl0ZW1zLlxuICAgKi9cblxufTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgdmFyIGhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTsgLy8gSW5pdGlhbCBjaGlsZHJlbiBzaG91bGQgYWxsIGJlIGVudGVyaW5nLCBkZXBlbmRlbnQgb24gYXBwZWFyXG5cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkdyb3VwOiB7XG4gICAgICAgIGlzTW91bnRpbmc6ICF0aGlzLmFwcGVhcmVkXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmFwcGVhcmVkID0gdHJ1ZTtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyAoMCwgX0NoaWxkTWFwcGluZy5nZXRJbml0aWFsQ2hpbGRNYXBwaW5nKShuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiAoMCwgX0NoaWxkTWFwcGluZy5nZXROZXh0Q2hpbGRNYXBwaW5nKShuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIGhhbmRsZUV4aXRlZCksXG4gICAgICBmaXJzdFJlbmRlcjogZmFsc2VcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW2NoaWxkLmtleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF90aGlzJHByb3BzLmNoaWxkRmFjdG9yeSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRGYWN0b3J5XCJdKTtcblxuICAgIHZhciBjaGlsZHJlbiA9IHZhbHVlcyh0aGlzLnN0YXRlLmNoaWxkcmVuKS5tYXAoY2hpbGRGYWN0b3J5KTtcbiAgICBkZWxldGUgcHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuZXhpdDtcblxuICAgIGlmIChDb21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICB0cmFuc2l0aW9uR3JvdXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uR3JvdXApO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmdldENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZztcbmV4cG9ydHMubWVyZ2VDaGlsZE1hcHBpbmdzID0gbWVyZ2VDaGlsZE1hcHBpbmdzO1xuZXhwb3J0cy5nZXRJbml0aWFsQ2hpbGRNYXBwaW5nID0gZ2V0SW5pdGlhbENoaWxkTWFwcGluZztcbmV4cG9ydHMuZ2V0TmV4dENoaWxkTWFwcGluZyA9IGdldE5leHRDaGlsZE1hcHBpbmc7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cbmZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiAoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBfcmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIHJ1biB0aGUgbWFwIGZ1bmN0aW9uIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHRoZSBrZXkgaXMgdGhlIGNvbXB1dGVkIG9uZVxuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gbWFwcGVyKGNoaWxkKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cblxuXG5mdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiBuZXh0ID8gbmV4dFtrZXldIDogcHJldltrZXldO1xuICB9IC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuXG5cbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nW25leHRLZXldKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH0gLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5mdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2tleV07XG4gICAgaWYgKCEoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShjaGlsZCkpIHJldHVybjtcbiAgICB2YXIgaGFzUHJldiA9IGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBoYXNOZXh0ID0ga2V5IGluIG5leHRDaGlsZE1hcHBpbmc7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiAoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uXCIpKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG52YXIgUmlwcGxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFJpcHBsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmlwcGxlKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgUmlwcGxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSAoMCwgX2dldFByb3RvdHlwZU9mMy5kZWZhdWx0KShSaXBwbGUpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgbGVhdmluZzogZmFsc2VcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsZWF2aW5nOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoUmlwcGxlLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc05hbWVzLCBfY2xhc3NOYW1lczI7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBwdWxzYXRlID0gX3RoaXMkcHJvcHMucHVsc2F0ZSxcbiAgICAgICAgICByaXBwbGVYID0gX3RoaXMkcHJvcHMucmlwcGxlWCxcbiAgICAgICAgICByaXBwbGVZID0gX3RoaXMkcHJvcHMucmlwcGxlWSxcbiAgICAgICAgICByaXBwbGVTaXplID0gX3RoaXMkcHJvcHMucmlwcGxlU2l6ZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwicHVsc2F0ZVwiLCBcInJpcHBsZVhcIiwgXCJyaXBwbGVZXCIsIFwicmlwcGxlU2l6ZVwiXSk7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIHZpc2libGUgPSBfdGhpcyRzdGF0ZS52aXNpYmxlLFxuICAgICAgICAgIGxlYXZpbmcgPSBfdGhpcyRzdGF0ZS5sZWF2aW5nO1xuICAgICAgdmFyIHJpcHBsZUNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJpcHBsZSwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHZpc2libGUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCBwdWxzYXRlKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHZhciByaXBwbGVTdHlsZXMgPSB7XG4gICAgICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgICAgICBoZWlnaHQ6IHJpcHBsZVNpemUsXG4gICAgICAgIHRvcDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVZLFxuICAgICAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgICAgIH07XG4gICAgICB2YXIgY2hpbGRDbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5jaGlsZCwgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuY2hpbGRMZWF2aW5nLCBsZWF2aW5nKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmNoaWxkUHVsc2F0ZSwgcHVsc2F0ZSksIF9jbGFzc05hbWVzMikpO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb24uZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRXhpdDogdGhpcy5oYW5kbGVFeGl0XG4gICAgICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiByaXBwbGVTdHlsZXNcbiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjaGlsZENsYXNzTmFtZVxuICAgICAgfSkpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFJpcHBsZTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERpYW1ldGVyIG9mIHRoZSByaXBwbGUuXG4gICAqL1xuICByaXBwbGVTaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG59IDogdm9pZCAwO1xuUmlwcGxlLmRlZmF1bHRQcm9wcyA9IHtcbiAgcHVsc2F0ZTogZmFsc2Vcbn07XG52YXIgX2RlZmF1bHQgPSBSaXBwbGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuRVhJVElORyA9IGV4cG9ydHMuRU5URVJFRCA9IGV4cG9ydHMuRU5URVJJTkcgPSBleHBvcnRzLkVYSVRFRCA9IGV4cG9ydHMuVU5NT1VOVEVEID0gdm9pZCAwO1xuXG52YXIgUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9yZWFjdExpZmVjeWNsZXNDb21wYXQgPSByZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIik7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZShcIi4vdXRpbHMvUHJvcFR5cGVzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydHMuVU5NT1VOVEVEID0gVU5NT1VOVEVEO1xudmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0cy5FWElURUQgPSBFWElURUQ7XG52YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0cy5FTlRFUklORyA9IEVOVEVSSU5HO1xudmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnRzLkVOVEVSRUQgPSBFTlRFUkVEO1xudmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGUgY29tcG9uZW50cy5cbiAqIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yIGV4YW1wbGUgd2UgY2FuXG4gKiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7KHN0YXRlKSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogQXMgbm90ZWQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lc24ndCBfZG9fIGFueXRoaW5nIGJ5IGl0c2VsZiB0byBpdHMgY2hpbGQgY29tcG9uZW50LlxuICogV2hhdCBpdCBkb2VzIGRvIGlzIHRyYWNrIHRyYW5zaXRpb24gc3RhdGVzIG92ZXIgdGltZSBzbyB5b3UgY2FuIHVwZGF0ZSB0aGVcbiAqIGNvbXBvbmVudCAoc3VjaCBhcyBieSBhZGRpbmcgc3R5bGVzIG9yIGNsYXNzZXMpIHdoZW4gaXQgY2hhbmdlcyBzdGF0ZXMuXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50IGJlZ2lucyB0aGVcbiAqIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsXG4gKiB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZVxuICogaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZSB0aGUgZm9sbG93aW5nIGV4YW1wbGU6XG4gKlxuICogYGBganN4XG4gKiBzdGF0ZSA9IHsgaW46IGZhbHNlIH07XG4gKlxuICogdG9nZ2xlRW50ZXJTdGF0ZSA9ICgpID0+IHtcbiAqICAgdGhpcy5zZXRTdGF0ZSh7IGluOiB0cnVlIH0pO1xuICogfVxuICpcbiAqIHJlbmRlcigpIHtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e3RoaXMuc3RhdGUuaW59IHRpbWVvdXQ9ezUwMH0gLz5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy50b2dnbGVFbnRlclN0YXRlfT5DbGljayB0byBFbnRlcjwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGUgYW5kXG4gKiBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXMgdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb20gYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqXG4gKiAjIyBUaW1pbmdcbiAqXG4gKiBUaW1pbmcgaXMgb2Z0ZW4gdGhlIHRyaWNraWVzdCBwYXJ0IG9mIGFuaW1hdGlvbiwgbWlzdGFrZXMgY2FuIHJlc3VsdCBpbiBzbGlnaHQgZGVsYXlzXG4gKiB0aGF0IGFyZSBoYXJkIHRvIHBpbiBkb3duLiBBIGNvbW1vbiBleGFtcGxlIGlzIHdoZW4geW91IHdhbnQgdG8gYWRkIGFuIGV4aXQgdHJhbnNpdGlvbixcbiAqIHlvdSBzaG91bGQgc2V0IHRoZSBkZXNpcmVkIGZpbmFsIHN0eWxlcyB3aGVuIHRoZSBzdGF0ZSBpcyBgJ2V4aXRpbmcnYC4gVGhhdCdzIHdoZW4gdGhlXG4gKiB0cmFuc2l0aW9uIHRvIHRob3NlIHN0eWxlcyB3aWxsIHN0YXJ0IGFuZCwgaWYgeW91IG1hdGNoZWQgdGhlIGB0aW1lb3V0YCBwcm9wIHdpdGggdGhlXG4gKiBDU1MgVHJhbnNpdGlvbiBkdXJhdGlvbiwgaXQgd2lsbCBlbmQgZXhhY3RseSB3aGVuIHRoZSBzdGF0ZSBjaGFuZ2VzIHRvIGAnZXhpdGVkJ2AuXG4gKlxuICogPiAqKk5vdGUqKjogRm9yIHNpbXBsZXIgdHJhbnNpdGlvbnMgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgbWlnaHQgYmUgZW5vdWdoLCBidXRcbiAqID4gdGFrZSBpbnRvIGFjY291bnQgdGhhdCBpdCdzIHBsYXRmb3JtLWFnbm9zdGljLCB3aGlsZSB0aGUgYENTU1RyYW5zaXRpb25gIGNvbXBvbmVudFxuICogPiBbZm9yY2VzIHJlZmxvd3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvYmxvYi81MDA3MzAzZTcyOWE3NGJlNjZhMjFjM2UyMjA1ZTQ5MTY4MjE1MjRiL3NyYy9DU1NUcmFuc2l0aW9uLmpzI0wyMDgtTDIxNSlcbiAqID4gaW4gb3JkZXIgdG8gbWFrZSBtb3JlIGNvbXBsZXggdHJhbnNpdGlvbnMgbW9yZSBwcmVkaWN0YWJsZS4gRm9yIGV4YW1wbGUsIGV2ZW4gdGhvdWdoXG4gKiA+IGNsYXNzZXMgYGV4YW1wbGUtZW50ZXJgIGFuZCBgZXhhbXBsZS1lbnRlci1hY3RpdmVgIGFyZSBhcHBsaWVkIGltbWVkaWF0ZWx5IG9uZSBhZnRlclxuICogPiBhbm90aGVyLCB5b3UgY2FuIHN0aWxsIHRyYW5zaXRpb24gZnJvbSBvbmUgdG8gdGhlIG90aGVyIGJlY2F1c2Ugb2YgdGhlIGZvcmNlZCByZWZsb3dcbiAqID4gKHJlYWQgW3RoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvaXNzdWVzLzE1OSNpc3N1ZWNvbW1lbnQtMzIyNzYxMTcxKVxuICogPiBmb3IgbW9yZSBpbmZvKS4gVGFrZSB0aGlzIGludG8gYWNjb3VudCB3aGVuIGNob29zaW5nIGJldHdlZW4gYFRyYW5zaXRpb25gIGFuZFxuICogPiBgQ1NTVHJhbnNpdGlvbmAuXG4gKi9cblxuZXhwb3J0cy5FWElUSU5HID0gRVhJVElORztcblxudmFyIFRyYW5zaXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQudHJhbnNpdGlvbkdyb3VwOyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25Hcm91cDogbnVsbCAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuXG4gICAgfTtcbiAgfTtcblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTsgLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG5cblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlLCB0aGlzLmFwcGVhclN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhmYWxzZSwgbmV4dFN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGltZW91dHMgPSBmdW5jdGlvbiBnZXRUaW1lb3V0cygpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDtcbiAgICB2YXIgZXhpdCwgZW50ZXIsIGFwcGVhcjtcbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7XG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGVudGVyOiBlbnRlcixcbiAgICAgIGFwcGVhcjogYXBwZWFyXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU3RhdHVzKG1vdW50aW5nLCBuZXh0U3RhdHVzKSB7XG4gICAgaWYgKG1vdW50aW5nID09PSB2b2lkIDApIHtcbiAgICAgIG1vdW50aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG5cbiAgICAgIHZhciBub2RlID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICB0aGlzLnBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAgPyB0aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwLmlzTW91bnRpbmcgOiBtb3VudGluZztcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGVudGVyIGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVOVEVSRURcbiAgICAvLyBpZiB3ZSBhcmUgbW91bnRpbmcgYW5kIHJ1bm5pbmcgdGhpcyBpdCBtZWFucyBhcHBlYXIgX211c3RfIGJlIHNldFxuXG4gICAgaWYgKCFtb3VudGluZyAmJiAhZW50ZXIpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRW50ZXIobm9kZSwgYXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobm9kZSwgYXBwZWFyaW5nKTsgLy8gRklYTUU6IGFwcGVhciB0aW1lb3V0P1xuXG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZW50ZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FeGl0ID0gZnVuY3Rpb24gcGVyZm9ybUV4aXQobm9kZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpOyAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRFxuXG4gICAgaWYgKCFleGl0KSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxOZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKTtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNhZmVTZXRTdGF0ZSA9IGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5LCBidXQgdGhlcmUgYXJlIHdlaXJkIHJhY2UgY29uZGl0aW9ucyB3aXRoXG4gICAgLy8gc2V0U3RhdGUgY2FsbGJhY2tzIGFuZCB1bm1vdW50aW5nIGluIHRlc3RpbmcsIHNvIGFsd2F5cyBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIHdlIGNhbiBjYW5jZWwgYW55IHBlbmRpbmcgc2V0U3RhdGUgY2FsbGJhY2tzIGFmdGVyIHdlIHVubW91bnQuXG4gICAgY2FsbGJhY2sgPSB0aGlzLnNldE5leHRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0TmV4dENhbGxiYWNrID0gZnVuY3Rpb24gc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgYWN0aXZlID0gdHJ1ZTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpczQubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMubmV4dENhbGxiYWNrO1xuICB9O1xuXG4gIF9wcm90by5vblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dCwgaGFuZGxlcikge1xuICAgIHRoaXMuc2V0TmV4dENhbGxiYWNrKGhhbmRsZXIpO1xuXG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCAwKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIl0pOyAvLyBmaWx0ZXIgcHJvcHMgZm9yIFRyYW5zdGl0aW9uXG5cblxuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmluO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm1vdW50T25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy51bm1vdW50T25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5leGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnRpbWVvdXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYWRkRW5kTGlzdGVuZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyaW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0aW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGVkO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHN0YXR1cywgY2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogUHJvcFR5cGVzLm9iamVjdFxufTtcblRyYW5zaXRpb24uY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogZnVuY3Rpb24gdHJhbnNpdGlvbkdyb3VwKCkge31cbn07XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgYGZ1bmN0aW9uYCBjaGlsZCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGEgUmVhY3QgZWxlbWVudC5cbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHN0YXR1c1xuICAgKiAoJ2VudGVyaW5nJywgJ2VudGVyZWQnLCAnZXhpdGluZycsICdleGl0ZWQnLCAndW5tb3VudGVkJyksIHdoaWNoIGNhbiBiZSB1c2VkXG4gICAqIHRvIGFwcGx5IGNvbnRleHQgc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHsoc3RhdHVzKSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdHVzfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy5cbiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZVxuICAgKiBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb24gYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgXCJhcHBlYXJcIiBzdGF0ZXMuIGBhcHBlYXJgIG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGBlbnRlcmAgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZFxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zIGxpa2U6IGB0aW1lb3V0PXs1MDB9YCxcbiAgICogb3IgaW5kaXZpZHVhbGx5IGxpa2U6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBfUHJvcFR5cGVzLnRpbWVvdXRzU2hhcGUgOiB7fTs7XG4gICAgaWYgKCFwcm9wcy5hZGRFbmRMaXN0ZW5lcikgcHQgPSBwdC5pc1JlcXVpcmVkO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHB0LmFwcGx5KHZvaWQgMCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmdcbiAgICogRE9NIG5vZGUgYW5kIGEgYGRvbmVgIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiAqKk5vdGU6KiogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbn0gOiB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IDA7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IDE7XG5UcmFuc2l0aW9uLkVOVEVSSU5HID0gMjtcblRyYW5zaXRpb24uRU5URVJFRCA9IDM7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSA0O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoVHJhbnNpdGlvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy50cmFuc2l0aW9uVGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBleHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25UaW1lb3V0KHRyYW5zaXRpb25UeXBlKSB7XG4gIHZhciB0aW1lb3V0UHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZSArICdUaW1lb3V0JztcbiAgdmFyIGVuYWJsZWRQcm9wTmFtZSA9ICd0cmFuc2l0aW9uJyArIHRyYW5zaXRpb25UeXBlO1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgLy8gSWYgdGhlIHRyYW5zaXRpb24gaXMgZW5hYmxlZFxuICAgIGlmIChwcm9wc1tlbmFibGVkUHJvcE5hbWVdKSB7XG4gICAgICAvLyBJZiBubyB0aW1lb3V0IGR1cmF0aW9uIGlzIHByb3ZpZGVkXG4gICAgICBpZiAocHJvcHNbdGltZW91dFByb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyB3YXNuXFwndCBzdXBwbGllZCB0byBDU1NUcmFuc2l0aW9uR3JvdXA6ICcgKyAndGhpcyBjYW4gY2F1c2UgdW5yZWxpYWJsZSBhbmltYXRpb25zIGFuZCB3b25cXCd0IGJlIHN1cHBvcnRlZCBpbiAnICsgJ2EgZnV0dXJlIHZlcnNpb24gb2YgUmVhY3QuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYW5pbWF0aW9uLXRyYW5zaXRpb24tZ3JvdXAtdGltZW91dCBmb3IgbW9yZSAnICsgJ2luZm9ybWF0aW9uLicpOyAvLyBJZiB0aGUgZHVyYXRpb24gaXNuJ3QgYSBudW1iZXJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzW3RpbWVvdXRQcm9wTmFtZV0gIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyBtdXN0IGJlIGEgbnVtYmVyIChpbiBtaWxsaXNlY29uZHMpJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbnZhciB0aW1lb3V0c1NoYXBlID0gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbn0pLmlzUmVxdWlyZWRdKTtcblxuZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gdGltZW91dHNTaGFwZTtcblxudmFyIGNsYXNzTmFtZXNTaGFwZSA9IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJEb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdERvbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXRBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pXSk7XG5cbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gY2xhc3NOYW1lc1NoYXBlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tbXV0YWJsZS1leHBvcnRzICovXG52YXIgY3JlYXRlUmlwcGxlSGFuZGxlciA9IGZ1bmN0aW9uIGNyZWF0ZVJpcHBsZUhhbmRsZXIoaW5zdGFuY2UsIGV2ZW50TmFtZSwgYWN0aW9uLCBjYikge1xuICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYi5jYWxsKGluc3RhbmNlLCBldmVudCk7XG4gICAgfVxuXG4gICAgdmFyIGlnbm9yZSA9IGZhbHNlOyAvLyBJZ25vcmUgZXZlbnRzIHRoYXQgaGF2ZSBiZWVuIGBldmVudC5wcmV2ZW50RGVmYXVsdCgpYCBtYXJrZWQuXG5cbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaWdub3JlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuZGlzYWJsZVRvdWNoUmlwcGxlICYmIGV2ZW50TmFtZSAhPT0gJ0JsdXInKSB7XG4gICAgICBpZ25vcmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICghaWdub3JlICYmIGluc3RhbmNlLnJpcHBsZSkge1xuICAgICAgaW5zdGFuY2UucmlwcGxlW2FjdGlvbl0oZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UucHJvcHNbXCJvblwiLmNvbmNhdChldmVudE5hbWUpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5zdGFuY2UucHJvcHNbXCJvblwiLmNvbmNhdChldmVudE5hbWUpXShldmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cblxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIGNyZWF0ZVJpcHBsZUhhbmRsZXIgPSBmdW5jdGlvbiBjcmVhdGVSaXBwbGVIYW5kbGVyKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gY3JlYXRlUmlwcGxlSGFuZGxlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9jb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZShcIi4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG52YXIgX0J1dHRvbkJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9CdXR0b25CYXNlXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgQnV0dG9uQmFzZVxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgIGZsZXg6ICcwIDAgYXV0bycsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICAvLyBFeHBsaWNpdGx5IHNldCB0aGUgZGVmYXVsdCB2YWx1ZSB0byBzb2x2ZSBhIGJ1ZyBvbiBJRSAxMS5cbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH0sXG4gICAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY2hpbGRyZW4gY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnaW5oZXJpdCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2luaGVyaXQnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogUmVmZXIgdG8gdGhlIFtJY29uc10oL3N0eWxlL2ljb25zLykgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvblxuICogcmVnYXJkaW5nIHRoZSBhdmFpbGFibGUgaWNvbiBvcHRpb25zLlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEljb25CdXR0b24ocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uQmFzZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShjb2xvcikpXSwgY29sb3IgIT09ICdkZWZhdWx0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBkaXNhYmxlZCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKSxcbiAgICBjZW50ZXJSaXBwbGU6IHRydWUsXG4gICAgZm9jdXNSaXBwbGU6IHRydWUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbFxuICB9LCBjaGlsZHJlbikpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJY29uQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBpY29uIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHZvaWQgMDtcbkljb25CdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ2RlZmF1bHQnLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUljb25CdXR0b24nXG59KShJY29uQnV0dG9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGVsZXZhdGlvbnMgPSB7fTtcbiAgdGhlbWUuc2hhZG93cy5mb3JFYWNoKGZ1bmN0aW9uIChzaGFkb3csIGluZGV4KSB7XG4gICAgZWxldmF0aW9uc1tcImVsZXZhdGlvblwiLmNvbmNhdChpbmRleCldID0ge1xuICAgICAgYm94U2hhZG93OiBzaGFkb3dcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3F1YXJlPXtmYWxzZX1gLiAqL1xuICAgIHJvdW5kZWQ6IHtcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzXG4gICAgfVxuICB9LCBlbGV2YXRpb25zKTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBQYXBlcihwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgQ29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgc3F1YXJlID0gcHJvcHMuc3F1YXJlLFxuICAgICAgZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInNxdWFyZVwiLCBcImVsZXZhdGlvblwiXSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShlbGV2YXRpb24gPj0gMCAmJiBlbGV2YXRpb24gPCAyNSwgXCJNYXRlcmlhbC1VSTogdGhpcyBlbGV2YXRpb24gYFwiLmNvbmNhdChlbGV2YXRpb24sIFwiYCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpKSA6IHZvaWQgMDtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLnJvdW5kZWQsICFzcXVhcmUpLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBvdGhlcikpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQYXBlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF91dGlscy5jb21wb25lbnRQcm9wVHlwZSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCdzIGFjY2VwdGluZyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqL1xuICBlbGV2YXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICovXG4gIHNxdWFyZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn0gOiB2b2lkIDA7XG5QYXBlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGVsZXZhdGlvbjogMixcbiAgc3F1YXJlOiBmYWxzZVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpUGFwZXInXG59KShQYXBlcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbnZhciBfZm9ybUNvbnRyb2xTdGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGVcIikpO1xuXG52YXIgX0Zvcm1Db250cm9sQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dFwiKSk7XG5cbnZhciBfd2l0aEZvcm1Db250cm9sQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0Zvcm1Db250cm9sL3dpdGhGb3JtQ29udHJvbENvbnRleHRcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfcmVhY3RIZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL3JlYWN0SGVscGVyc1wiKTtcblxudmFyIF9UZXh0YXJlYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGV4dGFyZWFcIikpO1xuXG52YXIgX3V0aWxzMiA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzLCBqc3gtYTExeS9uby1zdGF0aWMtZWxlbWVudC1pbnRlcmFjdGlvbnMgKi9cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnO1xuICB2YXIgcGxhY2Vob2xkZXIgPSB7XG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlckhpZGRlbiA9IHtcbiAgICBvcGFjaXR5OiAwXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlclZpc2libGUgPSB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICAvLyBNaW1pY3MgdGhlIGRlZmF1bHQgaW5wdXQgZGlzcGxheSBwcm9wZXJ0eSB1c2VkIGJ5IGJyb3dzZXJzIGZvciBhbiBpbnB1dC5cbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTYpLFxuICAgICAgbGluZUhlaWdodDogJzEuMTg3NWVtJyxcbiAgICAgIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgICAgY3Vyc29yOiAndGV4dCcsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZCxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBgRm9ybUNvbnRyb2xgLiAqL1xuICAgIGZvcm1Db250cm9sOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdCg4IC0gMiwgXCJweCAwIFwiKS5jb25jYXQoOCAtIDEsIFwicHhcIiksXG4gICAgICBib3JkZXI6IDAsXG4gICAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICAvLyBSZXNldCBmb3IgU2FmYXJpXG4gICAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIC8vIE1ha2UgdGhlIGZsZXggaXRlbSBzaHJpbmsgd2l0aCBGaXJlZm94XG4gICAgICBtaW5XaWR0aDogMCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBGaXggSUUgMTEgd2lkdGggaXNzdWVcbiAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gSUUgMTFcbiAgICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEVkZ2VcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBvdXRsaW5lOiAwXG4gICAgICB9LFxuICAgICAgLy8gUmVzZXQgRmlyZWZveCBpbnZhbGlkIHJlcXVpcmVkIGlucHV0IHN0eWxlXG4gICAgICAnJjppbnZhbGlkJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uJzoge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIC8vIFNob3cgYW5kIGhpZGUgdGhlIHBsYWNlaG9sZGVyIGxvZ2ljXG4gICAgICAnbGFiZWxbZGF0YS1zaHJpbms9ZmFsc2VdICsgJGZvcm1Db250cm9sICYnOiB7XG4gICAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgJyY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgIC8vIElFIDExXG4gICAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDEgLy8gUmVzZXQgaU9TIG9wYWNpdHlcblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBpbnB1dE1hcmdpbkRlbnNlOiB7XG4gICAgICBwYWRkaW5nVG9wOiA0IC0gMVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBpbnB1dE11bHRpbGluZToge1xuICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGVgIGlzIG5vdCBcInRleHRcImAuICovXG4gICAgaW5wdXRUeXBlOiB7XG4gICAgICAvLyB0eXBlPVwiZGF0ZVwiIG9yIHR5cGU9XCJ0aW1lXCIsIGV0Yy4gaGF2ZSBzcGVjaWZpYyBzdHlsZXMgd2UgbmVlZCB0byByZXNldC5cbiAgICAgIGhlaWdodDogJzEuMTg3NWVtJyAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGB0eXBlPVwic2VhcmNoXCJgLiAqL1xuICAgIGlucHV0VHlwZVNlYXJjaDoge1xuICAgICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICAgICctbW96LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJyxcbiAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHt9XG4gIH07XG59O1xuLyoqXG4gKiBgSW5wdXRCYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYW4gaW5wdXQuXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgc3RhdGUgbG9naWMuXG4gKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIElucHV0QmFzZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShJbnB1dEJhc2UsIF9SZWFjdCRDb21wb25lbnQpO1xuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShJbnB1dEJhc2UsIG51bGwsIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgICAvLyBUaGUgYmx1ciB3b24ndCBmaXJlIHdoZW4gdGhlIGRpc2FibGVkIHN0YXRlIGlzIHNldCBvbiBhIGZvY3VzZWQgaW5wdXQuXG4gICAgICAvLyBXZSBuZWVkIHRvIGJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZSBtYW51YWxseS5cbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZCAmJiBzdGF0ZS5mb2N1c2VkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gSW5wdXRCYXNlKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgSW5wdXRCYXNlKTtcbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoSW5wdXRCYXNlKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBmb2N1c2VkOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG11aUZvcm1Db250cm9sID0gX3RoaXMucHJvcHMubXVpRm9ybUNvbnRyb2w7IC8vIEZpeCBhIGJ1ZyB3aXRoIElFIDExIHdoZXJlIHRoZSBmb2N1cy9ibHVyIGV2ZW50cyBhcmUgdHJpZ2dlcmVkXG4gICAgICAvLyB3aGlsZSB0aGUgaW5wdXQgaXMgZGlzYWJsZWQuXG5cbiAgICAgIGlmICgoMCwgX2Zvcm1Db250cm9sU3RhdGUuZGVmYXVsdCkoe1xuICAgICAgICBwcm9wczogX3RoaXMucHJvcHMsXG4gICAgICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICAgICAgc3RhdGVzOiBbJ2Rpc2FibGVkJ11cbiAgICAgIH0pLmRpc2FibGVkKSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkZvY3VzKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRm9jdXMoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25Gb2N1cykge1xuICAgICAgICBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG11aUZvcm1Db250cm9sID0gX3RoaXMucHJvcHMubXVpRm9ybUNvbnRyb2w7XG5cbiAgICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgICAgbXVpRm9ybUNvbnRyb2wub25CbHVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgX3RoaXMuY2hlY2tEaXJ0eShfdGhpcy5pbnB1dFJlZik7XG4gICAgICB9IC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcblxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzO1xuXG4gICAgICAgIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKS5vbkNoYW5nZS5hcHBseShfdGhpcyRwcm9wcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVmSW5wdXQgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5pbnB1dFJlZiA9IHJlZjtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSghcmVmIHx8IHJlZiBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgfHwgcmVmLmZvY3VzLCBbJ01hdGVyaWFsLVVJOiB5b3UgaGF2ZSBwcm92aWRlZCBhIGBpbnB1dENvbXBvbmVudGAgdG8gdGhlIGlucHV0IGNvbXBvbmVudCcsICd0aGF0IGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgdGhlIGBpbnB1dFJlZmAgcHJvcGVydHkuJywgJ01ha2Ugc3VyZSB0aGUgYGlucHV0UmVmYCBwcm9wZXJ0eSBpcyBjYWxsZWQgd2l0aCBhIEhUTUxJbnB1dEVsZW1lbnQuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgdmFyIHJlZlByb3A7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5pbnB1dFJlZikge1xuICAgICAgICByZWZQcm9wID0gX3RoaXMucHJvcHMuaW5wdXRSZWY7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzLnByb3BzLmlucHV0UHJvcHMgJiYgX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5yZWYpIHtcbiAgICAgICAgcmVmUHJvcCA9IF90aGlzLnByb3BzLmlucHV0UHJvcHMucmVmO1xuICAgICAgfVxuXG4gICAgICAoMCwgX3JlYWN0SGVscGVycy5zZXRSZWYpKHJlZlByb3AsIHJlZik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMuaW5wdXRSZWYgJiYgZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgIF90aGlzLmlucHV0UmVmLmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5pc0NvbnRyb2xsZWQgPSBwcm9wcy52YWx1ZSAhPSBudWxsO1xuXG4gICAgaWYgKF90aGlzLmlzQ29udHJvbGxlZCkge1xuICAgICAgX3RoaXMuY2hlY2tEaXJ0eShwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoSW5wdXRCYXNlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICghdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgdGhpcy5jaGVja0RpcnR5KHRoaXMuaW5wdXRSZWYpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgLy8gQm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlLlxuICAgICAgaWYgKCFwcmV2UHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB0aGlzLnByb3BzLm11aUZvcm1Db250cm9sO1xuXG4gICAgICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgdGhpcy5jaGVja0RpcnR5KHRoaXMucHJvcHMpO1xuICAgICAgfSAvLyBlbHNlIHBlcmZvcm1lZCBpbiB0aGUgb25DaGFuZ2VcblxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja0RpcnR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrRGlydHkob2JqKSB7XG4gICAgICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB0aGlzLnByb3BzLm11aUZvcm1Db250cm9sO1xuXG4gICAgICBpZiAoKDAsIF91dGlsczIuaXNGaWxsZWQpKG9iaikpIHtcbiAgICAgICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRmlsbGVkKSB7XG4gICAgICAgICAgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uRmlsbGVkKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkZpbGxlZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eSkge1xuICAgICAgICBtdWlGb3JtQ29udHJvbC5vbkVtcHR5KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm9uRW1wdHkpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkVtcHR5KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXMsIF9jbGFzc05hbWVzMjtcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYXV0b0NvbXBsZXRlID0gX3RoaXMkcHJvcHMyLmF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBhdXRvRm9jdXMgPSBfdGhpcyRwcm9wczIuYXV0b0ZvY3VzLFxuICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wczIuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWVQcm9wID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBfdGhpcyRwcm9wczIuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICAgIGVuZEFkb3JubWVudCA9IF90aGlzJHByb3BzMi5lbmRBZG9ybm1lbnQsXG4gICAgICAgICAgZXJyb3IgPSBfdGhpcyRwcm9wczIuZXJyb3IsXG4gICAgICAgICAgZnVsbFdpZHRoID0gX3RoaXMkcHJvcHMyLmZ1bGxXaWR0aCxcbiAgICAgICAgICBpZCA9IF90aGlzJHByb3BzMi5pZCxcbiAgICAgICAgICBpbnB1dENvbXBvbmVudCA9IF90aGlzJHByb3BzMi5pbnB1dENvbXBvbmVudCxcbiAgICAgICAgICBfdGhpcyRwcm9wczIkaW5wdXRQcm8gPSBfdGhpcyRwcm9wczIuaW5wdXRQcm9wcztcbiAgICAgIF90aGlzJHByb3BzMiRpbnB1dFBybyA9IF90aGlzJHByb3BzMiRpbnB1dFBybyA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkaW5wdXRQcm87XG4gICAgICB2YXIgaW5wdXRQcm9wc0NsYXNzTmFtZSA9IF90aGlzJHByb3BzMiRpbnB1dFByby5jbGFzc05hbWUsXG4gICAgICAgICAgaW5wdXRQcm9wc1Byb3AgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wczIkaW5wdXRQcm8sIFtcImNsYXNzTmFtZVwiXSksXG4gICAgICAgICAgaW5wdXRSZWYgPSBfdGhpcyRwcm9wczIuaW5wdXRSZWYsXG4gICAgICAgICAgbWFyZ2luID0gX3RoaXMkcHJvcHMyLm1hcmdpbixcbiAgICAgICAgICBtdWlGb3JtQ29udHJvbCA9IF90aGlzJHByb3BzMi5tdWlGb3JtQ29udHJvbCxcbiAgICAgICAgICBtdWx0aWxpbmUgPSBfdGhpcyRwcm9wczIubXVsdGlsaW5lLFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wczIubmFtZSxcbiAgICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wczIub25CbHVyLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMyLm9uQ2hhbmdlLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wczIub25DbGljayxcbiAgICAgICAgICBvbkVtcHR5ID0gX3RoaXMkcHJvcHMyLm9uRW1wdHksXG4gICAgICAgICAgb25GaWxsZWQgPSBfdGhpcyRwcm9wczIub25GaWxsZWQsXG4gICAgICAgICAgb25Gb2N1cyA9IF90aGlzJHByb3BzMi5vbkZvY3VzLFxuICAgICAgICAgIG9uS2V5RG93biA9IF90aGlzJHByb3BzMi5vbktleURvd24sXG4gICAgICAgICAgb25LZXlVcCA9IF90aGlzJHByb3BzMi5vbktleVVwLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3RoaXMkcHJvcHMyLnBsYWNlaG9sZGVyLFxuICAgICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHMyLnJlYWRPbmx5LFxuICAgICAgICAgIHJlbmRlclByZWZpeCA9IF90aGlzJHByb3BzMi5yZW5kZXJQcmVmaXgsXG4gICAgICAgICAgcm93cyA9IF90aGlzJHByb3BzMi5yb3dzLFxuICAgICAgICAgIHJvd3NNYXggPSBfdGhpcyRwcm9wczIucm93c01heCxcbiAgICAgICAgICBzdGFydEFkb3JubWVudCA9IF90aGlzJHByb3BzMi5zdGFydEFkb3JubWVudCxcbiAgICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMyLnR5cGUsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wczIudmFsdWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wczIsIFtcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImVuZEFkb3JubWVudFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWRcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm1hcmdpblwiLCBcIm11aUZvcm1Db250cm9sXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRW1wdHlcIiwgXCJvbkZpbGxlZFwiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclByZWZpeFwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwic3RhcnRBZG9ybm1lbnRcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl0pO1xuICAgICAgdmFyIGZjcyA9ICgwLCBfZm9ybUNvbnRyb2xTdGF0ZS5kZWZhdWx0KSh7XG4gICAgICAgIHByb3BzOiB0aGlzLnByb3BzLFxuICAgICAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgICAgIHN0YXRlczogWydkaXNhYmxlZCcsICdlcnJvcicsICdtYXJnaW4nLCAncmVxdWlyZWQnLCAnZmlsbGVkJ11cbiAgICAgIH0pO1xuICAgICAgdmFyIGZvY3VzZWQgPSBtdWlGb3JtQ29udHJvbCA/IG11aUZvcm1Db250cm9sLmZvY3VzZWQgOiB0aGlzLnN0YXRlLmZvY3VzZWQ7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBmY3MuZGlzYWJsZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5lcnJvciwgZmNzLmVycm9yKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZnVsbFdpZHRoLCBmdWxsV2lkdGgpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mb2N1c2VkLCBmb2N1c2VkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZm9ybUNvbnRyb2wsIG11aUZvcm1Db250cm9sKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMubWFyZ2luRGVuc2UsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5tdWx0aWxpbmUsIG11bHRpbGluZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmFkb3JuZWRTdGFydCwgc3RhcnRBZG9ybm1lbnQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5hZG9ybmVkRW5kLCBlbmRBZG9ybm1lbnQpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICAgICAgdmFyIGlucHV0Q2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuaW5wdXQsIChfY2xhc3NOYW1lczIgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmRpc2FibGVkLCBmY3MuZGlzYWJsZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuaW5wdXRUeXBlLCB0eXBlICE9PSAndGV4dCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuaW5wdXRUeXBlU2VhcmNoLCB0eXBlID09PSAnc2VhcmNoJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5pbnB1dE11bHRpbGluZSwgbXVsdGlsaW5lKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmlucHV0TWFyZ2luRGVuc2UsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuaW5wdXRBZG9ybmVkU3RhcnQsIHN0YXJ0QWRvcm5tZW50KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmlucHV0QWRvcm5lZEVuZCwgZW5kQWRvcm5tZW50KSwgX2NsYXNzTmFtZXMyKSwgaW5wdXRQcm9wc0NsYXNzTmFtZSk7XG4gICAgICB2YXIgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcbiAgICAgIHZhciBpbnB1dFByb3BzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgaW5wdXRQcm9wc1Byb3AsIHtcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVJlZklucHV0XG4gICAgICB9KTtcblxuICAgICAgaWYgKHR5cGVvZiBJbnB1dENvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW5wdXRQcm9wcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICAgIC8vIFJlbmFtZSByZWYgdG8gaW5wdXRSZWYgYXMgd2UgZG9uJ3Qga25vdyB0aGVcbiAgICAgICAgICAvLyBwcm92aWRlZCBgaW5wdXRDb21wb25lbnRgIHN0cnVjdHVyZS5cbiAgICAgICAgICBpbnB1dFJlZjogdGhpcy5oYW5kbGVSZWZJbnB1dCxcbiAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgICAgICByZWY6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKG11bHRpbGluZSkge1xuICAgICAgICBpZiAocm93cyAmJiAhcm93c01heCkge1xuICAgICAgICAgIElucHV0Q29tcG9uZW50ID0gJ3RleHRhcmVhJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnB1dFByb3BzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICByb3dzTWF4OiByb3dzTWF4LFxuICAgICAgICAgICAgdGV4dGFyZWFSZWY6IHRoaXMuaGFuZGxlUmVmSW5wdXRcbiAgICAgICAgICB9LCBpbnB1dFByb3BzLCB7XG4gICAgICAgICAgICByZWY6IG51bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBJbnB1dENvbXBvbmVudCA9IF9UZXh0YXJlYS5kZWZhdWx0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnB1dFByb3BzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Zvcm1Db250cm9sQ29udGV4dC5kZWZhdWx0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgfSwgb3RoZXIpLCByZW5kZXJQcmVmaXggPyByZW5kZXJQcmVmaXgoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZmNzLCB7XG4gICAgICAgIHN0YXJ0QWRvcm5tZW50OiBzdGFydEFkb3JubWVudCxcbiAgICAgICAgZm9jdXNlZDogZm9jdXNlZFxuICAgICAgfSkpIDogbnVsbCwgc3RhcnRBZG9ybm1lbnQsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSW5wdXRDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBcImFyaWEtaW52YWxpZFwiOiBmY3MuZXJyb3IsXG4gICAgICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgICAgY2xhc3NOYW1lOiBpbnB1dENsYXNzTmFtZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgICAgb25LZXlEb3duOiBvbktleURvd24sXG4gICAgICAgIG9uS2V5VXA6IG9uS2V5VXAsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgICAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0sIGlucHV0UHJvcHMpKSwgZW5kQWRvcm5tZW50KSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBJbnB1dEJhc2U7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IGhlcmU6XG4gICAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgaW5wdXQgdmFsdWUsIHVzZWZ1bCB3aGVuIG5vdCBjb250cm9sbGluZyB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSldKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIG5hdGl2ZSBpbnB1dC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IF91dGlscy5jb21wb25lbnRQcm9wVHlwZSxcblxuICAvKipcbiAgICogQXR0cmlidXRlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgaW5wdXQgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVpRm9ybUNvbnRyb2w6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVtcHR5OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25GaWxsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByZW5kZXJQcmVmaXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGlucHV0IGVsZW1lbnQuIEl0IHNob3VsZCBiZSBhIHZhbGlkIEhUTUw1IGlucHV0IHR5cGUuXG4gICAqL1xuICB0eXBlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pKV0pXG59IDogdm9pZCAwO1xuSW5wdXRCYXNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgZnVsbFdpZHRoOiBmYWxzZSxcbiAgaW5wdXRDb21wb25lbnQ6ICdpbnB1dCcsXG4gIG11bHRpbGluZTogZmFsc2UsXG4gIHR5cGU6ICd0ZXh0J1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xufSkoKDAsIF93aXRoRm9ybUNvbnRyb2xDb250ZXh0LmRlZmF1bHQpKElucHV0QmFzZSkpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZvcm1Db250cm9sU3RhdGU7XG5cbmZ1bmN0aW9uIGZvcm1Db250cm9sU3RhdGUoX3JlZikge1xuICB2YXIgcHJvcHMgPSBfcmVmLnByb3BzLFxuICAgICAgc3RhdGVzID0gX3JlZi5zdGF0ZXMsXG4gICAgICBtdWlGb3JtQ29udHJvbCA9IF9yZWYubXVpRm9ybUNvbnRyb2w7XG4gIHJldHVybiBzdGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHN0YXRlKSB7XG4gICAgYWNjW3N0YXRlXSA9IHByb3BzW3N0YXRlXTtcblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1tzdGF0ZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFjY1tzdGF0ZV0gPSBtdWlGb3JtQ29udHJvbFtzdGF0ZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHdpdGhGb3JtQ29udHJvbENvbnRleHQ7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIikpO1xuXG52YXIgX0Zvcm1Db250cm9sQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUNvbnRyb2xDb250ZXh0XCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIHdpdGhGb3JtQ29udHJvbENvbnRleHQoQ29tcG9uZW50KSB7XG4gIHZhciBFbmhhbmNlZENvbXBvbmVudCA9IGZ1bmN0aW9uIEVuaGFuY2VkQ29tcG9uZW50KHByb3BzKSB7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Zvcm1Db250cm9sQ29udGV4dC5kZWZhdWx0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgbXVpRm9ybUNvbnRyb2w6IGNvbnRleHRcbiAgICAgIH0sIHByb3BzKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBFbmhhbmNlZENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiV2l0aEZvcm1Db250cm9sQ29udGV4dChcIi5jb25jYXQoKDAsIF91dGlscy5nZXREaXNwbGF5TmFtZSkoQ29tcG9uZW50KSwgXCIpXCIpO1xuICB9XG5cbiAgKDAsIF9ob2lzdE5vblJlYWN0U3RhdGljcy5kZWZhdWx0KShFbmhhbmNlZENvbXBvbmVudCwgQ29tcG9uZW50KTtcbiAgcmV0dXJuIEVuaGFuY2VkQ29tcG9uZW50O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX2RlYm91bmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVib3VuY2VcIikpO1xuXG52YXIgX3JlYWN0RXZlbnRMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWV2ZW50LWxpc3RlbmVyXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX3JlYWN0SGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9yZWFjdEhlbHBlcnNcIik7XG5cbi8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgPiAza2IuXG52YXIgUk9XU19IRUlHSFQgPSAxOTtcbnZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAvLyBiZWNhdXNlIHRoZSBzaGFkb3cgaGFzIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHdpZHRoOiAnMTAwJSdcbiAgfSxcbiAgdGV4dGFyZWE6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICBwYWRkaW5nOiAwLFxuICAgIGN1cnNvcjogJ2luaGVyaXQnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGxpbmVIZWlnaHQ6ICdpbmhlcml0JyxcbiAgICBib3JkZXI6ICdub25lJyxcbiAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50J1xuICB9LFxuICBzaGFkb3c6IHtcbiAgICAvLyBPdmVyZmxvdyBhbHNvIG5lZWRlZCB0byBoZXJlIHRvIHJlbW92ZSB0aGUgZXh0cmEgcm93XG4gICAgLy8gYWRkZWQgdG8gdGV4dGFyZWFzIGluIEZpcmVmb3guXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIC8vIFZpc2liaWxpdHkgbmVlZGVkIHRvIGhpZGUgdGhlIGV4dHJhIHRleHQgYXJlYSBvbiBpcGFkc1xuICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIHdoaXRlU3BhY2U6ICdwcmUtd3JhcCdcbiAgfVxufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIFRleHRhcmVhID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFRleHRhcmVhLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUZXh0YXJlYShwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFRleHRhcmVhKTtcbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoVGV4dGFyZWEpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuaGFuZGxlUmVmSW5wdXQgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5pbnB1dFJlZiA9IHJlZjtcbiAgICAgICgwLCBfcmVhY3RIZWxwZXJzLnNldFJlZikoX3RoaXMucHJvcHMudGV4dGFyZWFSZWYsIHJlZik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlZlNpbmdsZWxpbmVTaGFkb3cgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5zaW5nbGVsaW5lU2hhZG93UmVmID0gcmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZWZTaGFkb3cgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5zaGFkb3dSZWYgPSByZWY7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMudmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG5cbiAgICAgIGlmICghX3RoaXMuaXNDb250cm9sbGVkKSB7XG4gICAgICAgIC8vIFRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQsIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBzaGFsbG93IHZhbHVlLlxuICAgICAgICBfdGhpcy5zaGFkb3dSZWYudmFsdWUgPSBfdGhpcy52YWx1ZTtcblxuICAgICAgICBfdGhpcy5zeW5jSGVpZ2h0V2l0aFNoYWRvdygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5pc0NvbnRyb2xsZWQgPSBwcm9wcy52YWx1ZSAhPSBudWxsOyAvLyA8SW5wdXQ+IGV4cGVjdHMgdGhlIGNvbXBvbmVudHMgaXQgcmVuZGVycyB0byByZXNwb25kIHRvICd2YWx1ZSdcbiAgICAvLyBzbyB0aGF0IGl0IGNhbiBjaGVjayB3aGV0aGVyIHRoZXkgYXJlIGZpbGxlZC5cblxuICAgIF90aGlzLnZhbHVlID0gcHJvcHMudmFsdWUgfHwgcHJvcHMuZGVmYXVsdFZhbHVlIHx8ICcnO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaGVpZ2h0OiBOdW1iZXIocHJvcHMucm93cykgKiBST1dTX0hFSUdIVFxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIF90aGlzLmhhbmRsZVJlc2l6ZSA9ICgwLCBfZGVib3VuY2UuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zeW5jSGVpZ2h0V2l0aFNoYWRvdygpO1xuICAgICAgfSwgMTY2KTsgLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFRleHRhcmVhLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc3luY0hlaWdodFdpdGhTaGFkb3coKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuc3luY0hlaWdodFdpdGhTaGFkb3coKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzeW5jSGVpZ2h0V2l0aFNoYWRvd1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzeW5jSGVpZ2h0V2l0aFNoYWRvdygpIHtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7IC8vIEd1YXJkaW5nIGZvciAqKmJyb2tlbioqIHNoYWxsb3cgcmVuZGVyaW5nIG1ldGhvZCB0aGF0IGNhbGwgY29tcG9uZW50RGlkTW91bnRcbiAgICAgIC8vIGJ1dCBkb2Vzbid0IGhhbmRsZSByZWZzIGNvcnJlY3RseS5cbiAgICAgIC8vIFRvIHJlbW92ZSBvbmNlIHRoZSBzaGFsbG93IHJlbmRlcmluZyBoYXMgYmVlbiBmaXhlZC5cblxuICAgICAgaWYgKCF0aGlzLnNoYWRvd1JlZikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzQ29udHJvbGxlZCkge1xuICAgICAgICAvLyBUaGUgY29tcG9uZW50IGlzIGNvbnRyb2xsZWQsIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBzaGFsbG93IHZhbHVlLlxuICAgICAgICB0aGlzLnNoYWRvd1JlZi52YWx1ZSA9IHByb3BzLnZhbHVlID09IG51bGwgPyAnJyA6IFN0cmluZyhwcm9wcy52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBsaW5lSGVpZ2h0ID0gdGhpcy5zaW5nbGVsaW5lU2hhZG93UmVmLnNjcm9sbEhlaWdodDtcbiAgICAgIHZhciBuZXdIZWlnaHQgPSB0aGlzLnNoYWRvd1JlZi5zY3JvbGxIZWlnaHQ7IC8vIEd1YXJkaW5nIGZvciBqc2RvbSwgd2hlcmUgc2Nyb2xsSGVpZ2h0IGlzbid0IHByZXNlbnQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3RtcHZhci9qc2RvbS9pc3N1ZXMvMTAxM1xuXG4gICAgICBpZiAobmV3SGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoTnVtYmVyKHByb3BzLnJvd3NNYXgpID49IE51bWJlcihwcm9wcy5yb3dzKSkge1xuICAgICAgICBuZXdIZWlnaHQgPSBNYXRoLm1pbihOdW1iZXIocHJvcHMucm93c01heCkgKiBsaW5lSGVpZ2h0LCBuZXdIZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICBuZXdIZWlnaHQgPSBNYXRoLm1heChuZXdIZWlnaHQsIGxpbmVIZWlnaHQpOyAvLyBOZWVkIGEgbGFyZ2UgZW5vdWdoIGRpZmZlcmVudCB0byB1cGRhdGUgdGhlIGhlaWdodC5cbiAgICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG5cbiAgICAgIGlmIChNYXRoLmFicyh0aGlzLnN0YXRlLmhlaWdodCAtIG5ld0hlaWdodCkgPiAxKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGhlaWdodDogbmV3SGVpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZGVmYXVsdFZhbHVlID0gX3RoaXMkcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgcm93cyA9IF90aGlzJHByb3BzLnJvd3MsXG4gICAgICAgICAgcm93c01heCA9IF90aGlzJHByb3BzLnJvd3NNYXgsXG4gICAgICAgICAgdGV4dGFyZWFSZWYgPSBfdGhpcyRwcm9wcy50ZXh0YXJlYVJlZixcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlLFxuICAgICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcIm9uQ2hhbmdlXCIsIFwicm93c1wiLCBcInJvd3NNYXhcIiwgXCJ0ZXh0YXJlYVJlZlwiLCBcInZhbHVlXCIsIFwic3R5bGVcIl0pO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdFxuICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RFdmVudExpc3RlbmVyLmRlZmF1bHQsIHtcbiAgICAgICAgdGFyZ2V0OiBcIndpbmRvd1wiLFxuICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwge1xuICAgICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnRleHRhcmVhLCBjbGFzc2VzLnNoYWRvdyksXG4gICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICByZWY6IHRoaXMuaGFuZGxlUmVmU2luZ2xlbGluZVNoYWRvdyxcbiAgICAgICAgcm93czogXCIxXCIsXG4gICAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgICAgdmFsdWU6IFwiXCJcbiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwge1xuICAgICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnRleHRhcmVhLCBjbGFzc2VzLnNoYWRvdyksXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVJlZlNoYWRvdyxcbiAgICAgICAgcm93czogcm93cyxcbiAgICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMudGV4dGFyZWEsIGNsYXNzTmFtZSksXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVJlZklucHV0LFxuICAgICAgICBzdHlsZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgaGVpZ2h0OiB0aGlzLnN0YXRlLmhlaWdodFxuICAgICAgICB9LCBzdHlsZSlcbiAgICAgIH0sIG90aGVyKSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGV4dGFyZWE7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgdGV4dGFyZWEgZWxlbWVudC5cbiAgICovXG4gIHRleHRhcmVhUmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pXG59IDogdm9pZCAwO1xuVGV4dGFyZWEuZGVmYXVsdFByb3BzID0ge1xuICByb3dzOiAxXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQcml2YXRlVGV4dGFyZWEnXG59KShUZXh0YXJlYSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuICogYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICogTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gKiBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLiBUaGUgZnVuY3Rpb24gYWxzbyBoYXMgYSBwcm9wZXJ0eSAnY2xlYXInIFxuICogdGhhdCBpcyBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgY2xlYXIgdGhlIHRpbWVyIHRvIHByZXZlbnQgcHJldmlvdXNseSBzY2hlZHVsZWQgZXhlY3V0aW9ucy4gXG4gKlxuICogQHNvdXJjZSB1bmRlcnNjb3JlLmpzXG4gKiBAc2VlIGh0dHA6Ly91bnNjcmlwdGFibGUuY29tLzIwMDkvMDMvMjAvZGVib3VuY2luZy1qYXZhc2NyaXB0LW1ldGhvZHMvXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jdGlvbiB0byB3cmFwXG4gKiBAcGFyYW0ge051bWJlcn0gdGltZW91dCBpbiBtcyAoYDEwMGApXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHdoZXRoZXIgdG8gZXhlY3V0ZSBhdCB0aGUgYmVnaW5uaW5nIChgZmFsc2VgKVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKXtcbiAgdmFyIHRpbWVvdXQsIGFyZ3MsIGNvbnRleHQsIHRpbWVzdGFtcCwgcmVzdWx0O1xuICBpZiAobnVsbCA9PSB3YWl0KSB3YWl0ID0gMTAwO1xuXG4gIGZ1bmN0aW9uIGxhdGVyKCkge1xuICAgIHZhciBsYXN0ID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcDtcblxuICAgIGlmIChsYXN0IDwgd2FpdCAmJiBsYXN0ID49IDApIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgZGVib3VuY2VkID0gZnVuY3Rpb24oKXtcbiAgICBjb250ZXh0ID0gdGhpcztcbiAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgaWYgKCF0aW1lb3V0KSB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBkZWJvdW5jZWQuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICB9O1xuICBcbiAgZGVib3VuY2VkLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICBcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gZGVib3VuY2VkO1xufTtcblxuLy8gQWRkcyBjb21wYXRpYmlsaXR5IGZvciBFUyBtb2R1bGVzXG5kZWJvdW5jZS5kZWJvdW5jZSA9IGRlYm91bmNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJykpO1xudmFyIF9jcmVhdGVDbGFzcyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJykpO1xudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpKTtcbnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZicpKTtcbnZhciBfaW5oZXJpdHMgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cycpKTtcbnZhciBfdHlwZW9mID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mJykpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJykpO1xudmFyIF9leHRlbmRzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdyZWFjdCcpKTtcbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgncHJvcC10eXBlcycpKTtcbnZhciB3YXJuaW5nID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3dhcm5pbmcnKSk7XG5cbmZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGF0dHIpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBhdHRyKTtcbn0gLy8gUGFzc2l2ZSBvcHRpb25zXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvZG9tL3Bhc3NpdmVldmVudGxpc3RlbmVycy5qc1xuXG5cbnZhciBwYXNzaXZlT3B0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2FjaGUgPSBudWxsO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWNoZSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH1cblxuICAgIHZhciBzdXBwb3J0c1Bhc3NpdmVPcHRpb24gPSBmYWxzZTtcblxuICAgIHRyeSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIGRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgc3VwcG9ydHNQYXNzaXZlT3B0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycikgey8vXG4gICAgfVxuXG4gICAgY2FjaGUgPSBzdXBwb3J0c1Bhc3NpdmVPcHRpb247XG4gICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbjtcbiAgfSgpO1xufSgpO1xuXG52YXIgZGVmYXVsdEV2ZW50T3B0aW9ucyA9IHtcbiAgY2FwdHVyZTogZmFsc2UsXG4gIHBhc3NpdmU6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMob3B0aW9ucykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGRlZmF1bHRFdmVudE9wdGlvbnMsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIHZhciBhcmdzID0gW2V2ZW50TmFtZSwgY2FsbGJhY2tdO1xuICBhcmdzLnB1c2gocGFzc2l2ZU9wdGlvbiA/IG9wdGlvbnMgOiBvcHRpb25zLmNhcHR1cmUpO1xuICByZXR1cm4gYXJncztcbn1cblxuZnVuY3Rpb24gb24odGFyZ2V0LCBldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyLmFwcGx5KHRhcmdldCwgZ2V0RXZlbnRMaXN0ZW5lckFyZ3MoZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucykpO1xufVxuXG5mdW5jdGlvbiBvZmYodGFyZ2V0LCBldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyLmFwcGx5KHRhcmdldCwgZ2V0RXZlbnRMaXN0ZW5lckFyZ3MoZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucykpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoTGlzdGVuZXIocHJvcHMsIGl0ZXJhdGVlKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgdGFyZ2V0ID0gcHJvcHMudGFyZ2V0LFxuICAgICAgZXZlbnRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJ0YXJnZXRcIl0pO1xuXG4gIE9iamVjdC5rZXlzKGV2ZW50UHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZS5zdWJzdHJpbmcoMCwgMikgIT09ICdvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJvcCA9IGV2ZW50UHJvcHNbbmFtZV07XG5cbiAgICB2YXIgdHlwZSA9IF90eXBlb2YocHJvcCk7XG5cbiAgICB2YXIgaXNPYmplY3QgPSB0eXBlID09PSAnb2JqZWN0JztcbiAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGUgPT09ICdmdW5jdGlvbic7XG5cbiAgICBpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNhcHR1cmUgPSBuYW1lLnN1YnN0cigtNykudG9Mb3dlckNhc2UoKSA9PT0gJ2NhcHR1cmUnO1xuICAgIHZhciBldmVudE5hbWUgPSBuYW1lLnN1YnN0cmluZygyKS50b0xvd2VyQ2FzZSgpO1xuICAgIGV2ZW50TmFtZSA9IGNhcHR1cmUgPyBldmVudE5hbWUuc3Vic3RyaW5nKDAsIGV2ZW50TmFtZS5sZW5ndGggLSA3KSA6IGV2ZW50TmFtZTtcblxuICAgIGlmIChpc09iamVjdCkge1xuICAgICAgaXRlcmF0ZWUoZXZlbnROYW1lLCBwcm9wLmhhbmRsZXIsIHByb3Aub3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlKGV2ZW50TmFtZSwgcHJvcCwgbWVyZ2VEZWZhdWx0RXZlbnRPcHRpb25zKHtcbiAgICAgICAgY2FwdHVyZTogY2FwdHVyZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhPcHRpb25zKGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhvcHRpb25zLCAncmVhY3QtZXZlbnQtbGlzdGVuZXI6IHNob3VsZCBiZSBzcGVjaWZpZWQgb3B0aW9ucyBpbiB3aXRoT3B0aW9ucy4nKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHtcbiAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgIG9wdGlvbnM6IG1lcmdlRGVmYXVsdEV2ZW50T3B0aW9ucyhvcHRpb25zKVxuICB9O1xufVxuXG52YXIgRXZlbnRMaXN0ZW5lciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEV2ZW50TGlzdGVuZXIsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFdmVudExpc3RlbmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFdmVudExpc3RlbmVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRXZlbnRMaXN0ZW5lcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRXZlbnRMaXN0ZW5lciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmFwcGx5TGlzdGVuZXJzKG9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHRoaXMuYXBwbHlMaXN0ZW5lcnMob2ZmLCBwcmV2UHJvcHMpO1xuICAgICAgdGhpcy5hcHBseUxpc3RlbmVycyhvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5hcHBseUxpc3RlbmVycyhvZmYpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhcHBseUxpc3RlbmVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUxpc3RlbmVycyhvbk9yT2ZmKSB7XG4gICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMucHJvcHM7XG4gICAgICB2YXIgdGFyZ2V0ID0gcHJvcHMudGFyZ2V0O1xuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGFyZ2V0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGVsZW1lbnQgPSB3aW5kb3dbdGFyZ2V0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvckVhY2hMaXN0ZW5lcihwcm9wcywgb25Pck9mZi5iaW5kKG51bGwsIGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV2ZW50TGlzdGVuZXI7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5FdmVudExpc3RlbmVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSBjaGlsZCB0b28uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBET00gdGFyZ2V0IHRvIGxpc3RlbiB0by5cbiAgICovXG4gIHRhcmdldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn0gOiB7fTtcblxuZXhwb3J0cy53aXRoT3B0aW9ucyA9IHdpdGhPcHRpb25zO1xuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRMaXN0ZW5lcjtcbiIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCJ2YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IHJlcXVpcmUoXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXM7IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5oYXNWYWx1ZSA9IGhhc1ZhbHVlO1xuZXhwb3J0cy5pc0ZpbGxlZCA9IGlzRmlsbGVkO1xuZXhwb3J0cy5pc0Fkb3JuZWRTdGFydCA9IGlzQWRvcm5lZFN0YXJ0O1xuXG4vLyBTdXBwb3J0cyBkZXRlcm1pbmF0aW9uIG9mIGlzQ29udHJvbGxlZCgpLlxuLy8gQ29udHJvbGxlZCBpbnB1dCBhY2NlcHRzIGl0cyBjdXJyZW50IHZhbHVlIGFzIGEgcHJvcC5cbi8vXG4vLyBAc2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHNcbi8vIEBwYXJhbSB2YWx1ZVxuLy8gQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgc3RyaW5nIChpbmNsdWRpbmcgJycpIG9yIG51bWJlciAoaW5jbHVkaW5nIHplcm8pXG5mdW5jdGlvbiBoYXNWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAhKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCk7XG59IC8vIERldGVybWluZSBpZiBmaWVsZCBpcyBlbXB0eSBvciBmaWxsZWQuXG4vLyBSZXNwb25zZSBkZXRlcm1pbmVzIGlmIGxhYmVsIGlzIHByZXNlbnRlZCBhYm92ZSBmaWVsZCBvciBhcyBwbGFjZWhvbGRlci5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcGFyYW0gU1NSXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBub3QgcHJlc2VudCBvciBlbXB0eSBzdHJpbmcuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFueSBudW1iZXIgb3Igc3RyaW5nIHdpdGggbGVuZ3RoLlxuXG5cbmZ1bmN0aW9uIGlzRmlsbGVkKG9iaikge1xuICB2YXIgU1NSID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgcmV0dXJuIG9iaiAmJiAoaGFzVmFsdWUob2JqLnZhbHVlKSAmJiBvYmoudmFsdWUgIT09ICcnIHx8IFNTUiAmJiBoYXNWYWx1ZShvYmouZGVmYXVsdFZhbHVlKSAmJiBvYmouZGVmYXVsdFZhbHVlICE9PSAnJyk7XG59IC8vIERldGVybWluZSBpZiBhbiBJbnB1dCBpcyBhZG9ybmVkIG9uIHN0YXJ0LlxuLy8gSXQncyBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHdpdGggTFRSLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vIGFkb3JubWVudHMuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFkb3JuZWQgYXQgdGhlIHN0YXJ0LlxuXG5cbmZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfY29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoXCIuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvclwiKTtcblxudmFyIF9jaGFpblByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2NoYWluUHJvcFR5cGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgLy8gUmVzZXQgYnJvd3NlciBkZWZhdWx0IHN0eWxlLlxuICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmRpdmlkZXJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWJzb2x1dGU9e3RydWV9YC4gKi9cbiAgICBhYnNvbHV0ZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaW5zZXRcImAuICovXG4gICAgaW5zZXQ6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDcyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGxpZ2h0PXt0cnVlfWAuICovXG4gICAgbGlnaHQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUuZGl2aWRlciwgMC4wOClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm1pZGRsZVwiYC4gKi9cbiAgICBtaWRkbGU6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICBtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZy51bml0ICogMlxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBEaXZpZGVyKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgYWJzb2x1dGUgPSBwcm9wcy5hYnNvbHV0ZSxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgQ29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgaW5zZXQgPSBwcm9wcy5pbnNldCxcbiAgICAgIGxpZ2h0ID0gcHJvcHMubGlnaHQsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImFic29sdXRlXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImluc2V0XCIsIFwibGlnaHRcIiwgXCJ2YXJpYW50XCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5pbnNldCwgaW5zZXQgfHwgdmFyaWFudCA9PT0gJ2luc2V0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLm1pZGRsZSwgdmFyaWFudCA9PT0gJ21pZGRsZScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5hYnNvbHV0ZSwgYWJzb2x1dGUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5saWdodCwgbGlnaHQpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRGl2aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBYnNvbHV0ZWx5IHBvc2l0aW9uIHRoZSBlbGVtZW50LlxuICAgKi9cbiAgYWJzb2x1dGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF91dGlscy5jb21wb25lbnRQcm9wVHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZGl2aWRlciB3aWxsIGJlIGluZGVudGVkLlxuICAgKiBfX1dBUk5JTkdfXzogYGluc2V0YCBpcyBkZXByZWNhdGVkLlxuICAgKiBJbnN0ZWFkIHVzZSBgdmFyaWFudD1cImluc2V0XCJgLlxuICAgKi9cbiAgaW5zZXQ6ICgwLCBfY2hhaW5Qcm9wVHlwZXMuZGVmYXVsdCkoX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9wcy5pbnNldCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IHlvdSBhcmUgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgYGluc2V0YCBwcm9wZXJ0eSAnICsgJ3RoYXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFRoZSBwcm9wZXJ0eSBgdmFyaWFudD1cImluc2V0XCJgICcgKyAnaXMgZXF1aXZhbGVudCBhbmQgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRpdmlkZXIgd2lsbCBoYXZlIGEgbGlnaHRlciBjb2xvci5cbiAgICovXG4gIGxpZ2h0OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2Z1bGxXaWR0aCcsICdpbnNldCcsICdtaWRkbGUnXSlcbn0gOiB2b2lkIDA7XG5EaXZpZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWJzb2x1dGU6IGZhbHNlLFxuICBjb21wb25lbnQ6ICdocicsXG4gIGxpZ2h0OiBmYWxzZSxcbiAgdmFyaWFudDogJ2Z1bGxXaWR0aCdcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aURpdmlkZXInXG59KShEaXZpZGVyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlR2VuZXJhdGVDbGFzc05hbWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlTXVpVGhlbWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NyZWF0ZU11aVRoZW1lLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwianNzUHJlc2V0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9qc3NQcmVzZXQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNdWlUaGVtZVByb3ZpZGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9NdWlUaGVtZVByb3ZpZGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlU3R5bGVzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVTdHlsZXMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aXRoU3R5bGVzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF93aXRoU3R5bGVzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2l0aFRoZW1lXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF93aXRoVGhlbWUuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lXCIpKTtcblxudmFyIF9jcmVhdGVNdWlUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlTXVpVGhlbWVcIikpO1xuXG52YXIgX2pzc1ByZXNldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vanNzUHJlc2V0XCIpKTtcblxudmFyIF9NdWlUaGVtZVByb3ZpZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NdWlUaGVtZVByb3ZpZGVyXCIpKTtcblxudmFyIF9jcmVhdGVTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVN0eWxlc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfd2l0aFRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi93aXRoVGhlbWVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuTXVpVGhlbWVQcm92aWRlck9sZCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9icmNhc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJicmNhc3RcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxudmFyIF90aGVtZUxpc3RlbmVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vdGhlbWVMaXN0ZW5lclwiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgdGFrZXMgYSBgdGhlbWVgIHByb3BlcnR5LlxuICogSXQgbWFrZXMgdGhlIGB0aGVtZWAgYXZhaWxhYmxlIGRvd24gdGhlIFJlYWN0IHRyZWUgdGhhbmtzIHRvIFJlYWN0IGNvbnRleHQuXG4gKiBUaGlzIGNvbXBvbmVudCBzaG91bGQgcHJlZmVyYWJseSBiZSB1c2VkIGF0ICoqdGhlIHJvb3Qgb2YgeW91ciBjb21wb25lbnQgdHJlZSoqLlxuICovXG52YXIgTXVpVGhlbWVQcm92aWRlck9sZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShNdWlUaGVtZVByb3ZpZGVyT2xkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAvLyBXZSBhcmUgbm90IHVzaW5nIHRoZSBSZWFjdCBzdGF0ZSBpbiBvcmRlciB0byBhdm9pZCB1bm5lY2Vzc2FyeSByZXJlbmRlci5cbiAgZnVuY3Rpb24gTXVpVGhlbWVQcm92aWRlck9sZChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIE11aVRoZW1lUHJvdmlkZXJPbGQpO1xuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShNdWlUaGVtZVByb3ZpZGVyT2xkKS5jYWxsKHRoaXMpKTsgLy8gR2V0IHRoZSBvdXRlciB0aGVtZSBmcm9tIHRoZSBjb250ZXh0LCBjYW4gYmUgbnVsbFxuXG4gICAgX3RoaXMuYnJvYWRjYXN0ID0gKDAsIF9icmNhc3QuZGVmYXVsdCkoKTtcbiAgICBfdGhpcy5vdXRlclRoZW1lID0gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5pbml0aWFsKGNvbnRleHQpOyAvLyBQcm9wYWdhdGUgdGhlIHRoZW1lIHNvIGl0IGNhbiBiZSBhY2Nlc3NlZCBieSB0aGUgY2hpbGRyZW5cblxuICAgIF90aGlzLmJyb2FkY2FzdC5zZXRTdGF0ZShfdGhpcy5tZXJnZU91dGVyTG9jYWxUaGVtZShwcm9wcy50aGVtZSkpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTXVpVGhlbWVQcm92aWRlck9sZCwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVTdHlsZXNHZW5lcmF0aW9uID0gX3RoaXMkcHJvcHMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24sXG4gICAgICAgICAgc2hlZXRzQ2FjaGUgPSBfdGhpcyRwcm9wcy5zaGVldHNDYWNoZSxcbiAgICAgICAgICBzaGVldHNNYW5hZ2VyID0gX3RoaXMkcHJvcHMuc2hlZXRzTWFuYWdlcjtcbiAgICAgIHZhciBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZVByb3ZpZGVyT3B0aW9ucyB8fCB7fTtcblxuICAgICAgaWYgKGRpc2FibGVTdHlsZXNHZW5lcmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbXVpVGhlbWVQcm92aWRlck9wdGlvbnMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24gPSBkaXNhYmxlU3R5bGVzR2VuZXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoZWV0c0NhY2hlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbXVpVGhlbWVQcm92aWRlck9wdGlvbnMuc2hlZXRzQ2FjaGUgPSBzaGVldHNDYWNoZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoZWV0c01hbmFnZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucy5zaGVldHNNYW5hZ2VyID0gc2hlZXRzTWFuYWdlcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX3JlZiwgX3RoZW1lTGlzdGVuZXIuQ0hBTk5FTCwgdGhpcy5icm9hZGNhc3QpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfcmVmLCBcIm11aVRoZW1lUHJvdmlkZXJPcHRpb25zXCIsIG11aVRoZW1lUHJvdmlkZXJPcHRpb25zKSwgX3JlZjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gU3Vic2NyaWJlIG9uIHRoZSBvdXRlciB0aGVtZSwgaWYgcHJlc2VudFxuICAgICAgdGhpcy51bnN1YnNjcmliZUlkID0gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5zdWJzY3JpYmUodGhpcy5jb250ZXh0LCBmdW5jdGlvbiAob3V0ZXJUaGVtZSkge1xuICAgICAgICBfdGhpczIub3V0ZXJUaGVtZSA9IG91dGVyVGhlbWU7IC8vIEZvcndhcmQgdGhlIHBhcmVudCB0aGVtZSB1cGRhdGUgdG8gdGhlIGNoaWxkcmVuXG5cbiAgICAgICAgX3RoaXMyLmJyb2FkY2FzdC5zZXRTdGF0ZShfdGhpczIubWVyZ2VPdXRlckxvY2FsVGhlbWUoX3RoaXMyLnByb3BzLnRoZW1lKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIC8vIFByb3BhZ2F0ZSBhIGxvY2FsIHRoZW1lIHVwZGF0ZVxuICAgICAgaWYgKHRoaXMucHJvcHMudGhlbWUgIT09IHByZXZQcm9wcy50aGVtZSkge1xuICAgICAgICB0aGlzLmJyb2FkY2FzdC5zZXRTdGF0ZSh0aGlzLm1lcmdlT3V0ZXJMb2NhbFRoZW1lKHRoaXMucHJvcHMudGhlbWUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy51bnN1YnNjcmliZUlkICE9PSBudWxsKSB7XG4gICAgICAgIF90aGVtZUxpc3RlbmVyLmRlZmF1bHQudW5zdWJzY3JpYmUodGhpcy5jb250ZXh0LCB0aGlzLnVuc3Vic2NyaWJlSWQpO1xuICAgICAgfVxuICAgIH0gLy8gU2ltcGxlIG1lcmdlIGJldHdlZW4gdGhlIG91dGVyIHRoZW1lIGFuZCB0aGUgbG9jYWwgdGhlbWVcblxuICB9LCB7XG4gICAga2V5OiBcIm1lcmdlT3V0ZXJMb2NhbFRoZW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1lcmdlT3V0ZXJMb2NhbFRoZW1lKGxvY2FsVGhlbWUpIHtcbiAgICAgIC8vIFRvIHN1cHBvcnQgY29tcG9zaXRpb24gb2YgdGhlbWUuXG4gICAgICBpZiAodHlwZW9mIGxvY2FsVGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHRoaXMub3V0ZXJUaGVtZSwgWydNYXRlcmlhbC1VSTogeW91IGFyZSBwcm92aWRpbmcgYSB0aGVtZSBmdW5jdGlvbiBwcm9wZXJ0eSAnICsgJ3RvIHRoZSBNdWlUaGVtZVByb3ZpZGVyIGNvbXBvbmVudDonLCAnPE11aVRoZW1lUHJvdmlkZXIgdGhlbWU9e291dGVyVGhlbWUgPT4gb3V0ZXJUaGVtZX0gLz4nLCAnSG93ZXZlciwgbm8gb3V0ZXIgdGhlbWUgaXMgcHJlc2VudC4nLCAnTWFrZSBzdXJlIGEgdGhlbWUgaXMgYWxyZWFkeSBpbmplY3RlZCBoaWdoZXIgaW4gdGhlIFJlYWN0IHRyZWUgJyArICdvciBwcm92aWRlIGEgdGhlbWUgb2JqZWN0LiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIGxvY2FsVGhlbWUodGhpcy5vdXRlclRoZW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm91dGVyVGhlbWUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsVGhlbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCB0aGlzLm91dGVyVGhlbWUsIGxvY2FsVGhlbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgLy8gVE9ETyBtb3ZlIHRoZSBzaGVldHNNYW5hZ2VyIHByb3BlcnR5IHRvIGEgZGlmZmVyZW50IGNvbXBvbmVudC5cbiAgICAgIC8vIHdhcm5pbmcoXG4gICAgICAvLyAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnIHx8IHRoaXMucHJvcHMuc2hlZXRzTWFuYWdlcixcbiAgICAgIC8vICAgW1xuICAgICAgLy8gICAgICdNYXRlcmlhbC1VSTogeW91IG5lZWQgdG8gcHJvdmlkZSBhIHNoZWV0c01hbmFnZXIgdG8gdGhlIE11aVRoZW1lUHJvdmlkZXIgJyArXG4gICAgICAvLyAgICAgICAnd2hlbiByZW5kZXJpbmcgb24gdGhlIHNlcnZlci4nLFxuICAgICAgLy8gICAgICdJZiB5b3UgZG8gbm90LCB5b3UgbWlnaHQgZXhwZXJpZW5jZSBhIG1lbW9yeSBsZWFrJyxcbiAgICAgIC8vICAgXS5qb2luKCdcXG4nKSxcbiAgICAgIC8vICk7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE11aVRoZW1lUHJvdmlkZXJPbGQ7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuTXVpVGhlbWVQcm92aWRlck9sZCA9IE11aVRoZW1lUHJvdmlkZXJPbGQ7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNdWlUaGVtZVByb3ZpZGVyT2xkLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdSBjYW4gd3JhcCBhIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogWW91IGNhbiBkaXNhYmxlIHRoZSBnZW5lcmF0aW9uIG9mIHRoZSBzdHlsZXMgd2l0aCB0aGlzIG9wdGlvbi5cbiAgICogSXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHRyYXZlcnNpbmcgdGhlIFJlYWN0IHRyZWUgb3V0c2lkZSBvZiB0aGUgSFRNTFxuICAgKiByZW5kZXJpbmcgc3RlcCBvbiB0aGUgc2VydmVyLlxuICAgKiBMZXQncyBzYXkgeW91IGFyZSB1c2luZyByZWFjdC1hcG9sbG8gdG8gZXh0cmFjdCBhbGxcbiAgICogdGhlIHF1ZXJpZXMgbWFkZSBieSB0aGUgaW50ZXJmYWNlIHNlcnZlci1zaWRlLlxuICAgKiBZb3UgY2FuIHNpZ25pZmljYW50bHkgc3BlZWQgdXAgdGhlIHRyYXZlcnNhbCB3aXRoIHRoaXMgcHJvcGVydHkuXG4gICAqL1xuICBkaXNhYmxlU3R5bGVzR2VuZXJhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogSW4gYmV0YS5cbiAgICovXG4gIHNoZWV0c0NhY2hlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgc2hlZXRzTWFuYWdlciBpcyB1c2VkIHRvIGRlZHVwbGljYXRlIHN0eWxlIHNoZWV0IGluamVjdGlvbiBpbiB0aGUgcGFnZS5cbiAgICogSXQncyBkZWR1cGxpY2F0aW5nIHVzaW5nIHRoZSAodGhlbWUsIHN0eWxlcykgY291cGxlLlxuICAgKiBPbiB0aGUgc2VydmVyLCB5b3Ugc2hvdWxkIHByb3ZpZGUgYSBuZXcgaW5zdGFuY2UgZm9yIGVhY2ggcmVxdWVzdC5cbiAgICovXG4gIHNoZWV0c01hbmFnZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgdGhlbWUgb2JqZWN0LlxuICAgKi9cbiAgdGhlbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSkuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTXVpVGhlbWVQcm92aWRlck9sZC5wcm9wVHlwZXMgPSAoMCwgX3V0aWxzLmV4YWN0UHJvcCkoTXVpVGhlbWVQcm92aWRlck9sZC5wcm9wVHlwZXMpIDogdm9pZCAwO1xufVxuXG5NdWlUaGVtZVByb3ZpZGVyT2xkLmNoaWxkQ29udGV4dFR5cGVzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5jb250ZXh0VHlwZXMsIHtcbiAgbXVpVGhlbWVQcm92aWRlck9wdGlvbnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn0pO1xuTXVpVGhlbWVQcm92aWRlck9sZC5jb250ZXh0VHlwZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LmNvbnRleHRUeXBlcywge1xuICBtdWlUaGVtZVByb3ZpZGVyT3B0aW9uczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufSk7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuaWYgKCFfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18pIHtcbiAgX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fID0ge307XG59XG5cbmlmICghX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fLk11aVRoZW1lUHJvdmlkZXIpIHtcbiAgX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fLk11aVRoZW1lUHJvdmlkZXIgPSBNdWlUaGVtZVByb3ZpZGVyT2xkO1xufVxuXG52YXIgX2RlZmF1bHQgPSBfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18uTXVpVGhlbWVQcm92aWRlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikge1xuICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmV3T2JqID0ge307XG5cbiAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTtcblxuICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajtcbiAgICByZXR1cm4gbmV3T2JqO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ7IiwiZnVuY3Rpb24gY3JlYXRlQnJvYWRjYXN0IChpbml0aWFsU3RhdGUpIHtcbiAgdmFyIGxpc3RlbmVycyA9IHt9O1xuICB2YXIgaWQgPSAxO1xuICB2YXIgX3N0YXRlID0gaW5pdGlhbFN0YXRlO1xuXG4gIGZ1bmN0aW9uIGdldFN0YXRlICgpIHtcbiAgICByZXR1cm4gX3N0YXRlXG4gIH1cblxuICBmdW5jdGlvbiBzZXRTdGF0ZSAoc3RhdGUpIHtcbiAgICBfc3RhdGUgPSBzdGF0ZTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGxpc3RlbmVycyk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvLyBpZiBhIGxpc3RlbmVyIGdldHMgdW5zdWJzY3JpYmVkIGR1cmluZyBzZXRTdGF0ZSB3ZSBqdXN0IHNraXAgaXRcbiAgICAgIGlmIChsaXN0ZW5lcnNba2V5c1tpXV0pIHsgbGlzdGVuZXJzW2tleXNbaV1dKHN0YXRlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHN1YnNjcmliZSB0byBjaGFuZ2VzIGFuZCByZXR1cm4gdGhlIHN1YnNjcmlwdGlvbklkXG4gIGZ1bmN0aW9uIHN1YnNjcmliZSAobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbi4nKVxuICAgIH1cbiAgICB2YXIgY3VycmVudElkID0gaWQ7XG4gICAgbGlzdGVuZXJzW2N1cnJlbnRJZF0gPSBsaXN0ZW5lcjtcbiAgICBpZCArPSAxO1xuICAgIHJldHVybiBjdXJyZW50SWRcbiAgfVxuXG4gIC8vIHJlbW92ZSBzdWJzY3JpcHRpb24gYnkgcmVtb3ZpbmcgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uXG4gIGZ1bmN0aW9uIHVuc3Vic2NyaWJlIChpZCkge1xuICAgIGxpc3RlbmVyc1tpZF0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4geyBnZXRTdGF0ZTogZ2V0U3RhdGUsIHNldFN0YXRlOiBzZXRTdGF0ZSwgc3Vic2NyaWJlOiBzdWJzY3JpYmUsIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb2FkY2FzdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlU3R5bGVzO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZXMoc3R5bGVzKSB7XG4gIHJldHVybiBzdHlsZXM7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX2NyZWF0ZU11aVRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVNdWlUaGVtZVwiKSk7XG5cbnZhciBfdGhlbWVMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdGhlbWVMaXN0ZW5lclwiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG52YXIgZGVmYXVsdFRoZW1lO1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0VGhlbWUoKSB7XG4gIGlmIChkZWZhdWx0VGhlbWUpIHtcbiAgICByZXR1cm4gZGVmYXVsdFRoZW1lO1xuICB9XG5cbiAgZGVmYXVsdFRoZW1lID0gKDAsIF9jcmVhdGVNdWlUaGVtZS5kZWZhdWx0KSh7XG4gICAgdHlwb2dyYXBoeToge1xuICAgICAgc3VwcHJlc3NXYXJuaW5nOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlZmF1bHRUaGVtZTtcbn0gLy8gUHJvdmlkZSB0aGUgdGhlbWUgb2JqZWN0IGFzIGEgcHJvcGVydHkgdG8gdGhlIGlucHV0IGNvbXBvbmVudC5cblxuXG52YXIgd2l0aFRoZW1lT2xkID0gZnVuY3Rpb24gd2l0aFRoZW1lT2xkKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBXaXRoVGhlbWUgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgICAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoV2l0aFRoZW1lLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFRoZW1lKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcztcblxuICAgICAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBXaXRoVGhlbWUpO1xuICAgICAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoV2l0aFRoZW1lKS5jYWxsKHRoaXMpKTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgLy8gV2UgdXNlIHx8IGFzIHRoZSBmdW5jdGlvbiBjYWxsIGlzIGxhenkgZXZhbHVhdGVkLlxuICAgICAgICAgIHRoZW1lOiBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LmluaXRpYWwoY29udGV4dCkgfHwgZ2V0RGVmYXVsdFRoZW1lKClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShXaXRoVGhlbWUsIFt7XG4gICAgICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlSWQgPSBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LnN1YnNjcmliZSh0aGlzLmNvbnRleHQsIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlSWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF90aGVtZUxpc3RlbmVyLmRlZmF1bHQudW5zdWJzY3JpYmUodGhpcy5jb250ZXh0LCB0aGlzLnVuc3Vic2NyaWJlSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiaW5uZXJSZWZcIl0pO1xuICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICB0aGVtZTogdGhpcy5zdGF0ZS50aGVtZSxcbiAgICAgICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9XG4gICAgICB9XSk7XG4gICAgICByZXR1cm4gV2l0aFRoZW1lO1xuICAgIH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhUaGVtZS5wcm9wVHlwZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGRlY29yYXRlZCBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGlubmVyUmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pXG4gICAgfSA6IHZvaWQgMDtcbiAgICBXaXRoVGhlbWUuY29udGV4dFR5cGVzID0gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5jb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgV2l0aFRoZW1lLmRpc3BsYXlOYW1lID0gXCJXaXRoVGhlbWUoXCIuY29uY2F0KCgwLCBfdXRpbHMuZ2V0RGlzcGxheU5hbWUpKENvbXBvbmVudCksIFwiKVwiKTtcbiAgICB9XG5cbiAgICAoMCwgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzLmRlZmF1bHQpKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFRoZW1lLk5ha2VkID0gQ29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiBXaXRoVGhlbWU7XG4gIH07XG59O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cblxuaWYgKCFfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18pIHtcbiAgX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fID0ge307XG59XG5cbmlmICghX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fLndpdGhUaGVtZSkge1xuICBfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18ud2l0aFRoZW1lID0gd2l0aFRoZW1lT2xkO1xufVxuXG52YXIgX2RlZmF1bHQgPSBfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18ud2l0aFRoZW1lO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3B1cmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWNvbXBvc2UvcHVyZVwiKSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBtYXRlcmlhbC11aS9jb3JlL1N2Z0ljb25cIikpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdmdJY29uKHBhdGgsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciBJY29uID0gZnVuY3Rpb24gSWNvbihwcm9wcykge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TdmdJY29uLmRlZmF1bHQsIHByb3BzLCBwYXRoKTtcbiAgfTtcblxuICBJY29uLmRpc3BsYXlOYW1lID0gXCJcIi5jb25jYXQoZGlzcGxheU5hbWUsIFwiSWNvblwiKTtcbiAgSWNvbiA9ICgwLCBfcHVyZS5kZWZhdWx0KShJY29uKTtcbiAgSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuICByZXR1cm4gSWNvbjtcbn1cblxuO1xudmFyIF9kZWZhdWx0ID0gY3JlYXRlU3ZnSWNvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zaG91bGRVcGRhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVwiKSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zaGFsbG93RXF1YWxcIikpO1xuXG52YXIgX3NldERpc3BsYXlOYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zZXREaXNwbGF5TmFtZVwiKSk7XG5cbnZhciBfd3JhcERpc3BsYXlOYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi93cmFwRGlzcGxheU5hbWVcIikpO1xuXG52YXIgcHVyZSA9IGZ1bmN0aW9uIHB1cmUoQmFzZUNvbXBvbmVudCkge1xuICB2YXIgaG9jID0gKDAsIF9zaG91bGRVcGRhdGUuZGVmYXVsdCkoZnVuY3Rpb24gKHByb3BzLCBuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gISgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKHByb3BzLCBuZXh0UHJvcHMpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoMCwgX3NldERpc3BsYXlOYW1lLmRlZmF1bHQpKCgwLCBfd3JhcERpc3BsYXlOYW1lLmRlZmF1bHQpKEJhc2VDb21wb25lbnQsICdwdXJlJykpKGhvYyhCYXNlQ29tcG9uZW50KSk7XG4gIH1cblxuICByZXR1cm4gaG9jKEJhc2VDb21wb25lbnQpO1xufTtcblxudmFyIF9kZWZhdWx0ID0gcHVyZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfc2V0RGlzcGxheU5hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NldERpc3BsYXlOYW1lXCIpKTtcblxudmFyIF93cmFwRGlzcGxheU5hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3dyYXBEaXNwbGF5TmFtZVwiKSk7XG5cbnZhciBzaG91bGRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRVcGRhdGUodGVzdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9ICgwLCBfcmVhY3QuY3JlYXRlRmFjdG9yeSkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICB2YXIgU2hvdWxkVXBkYXRlID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoU2hvdWxkVXBkYXRlLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gU2hvdWxkVXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvdG8gPSBTaG91bGRVcGRhdGUucHJvdG90eXBlO1xuXG4gICAgICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4gdGVzdCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkodGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gU2hvdWxkVXBkYXRlO1xuICAgIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuICgwLCBfc2V0RGlzcGxheU5hbWUuZGVmYXVsdCkoKDAsIF93cmFwRGlzcGxheU5hbWUuZGVmYXVsdCkoQmFzZUNvbXBvbmVudCwgJ3Nob3VsZFVwZGF0ZScpKShTaG91bGRVcGRhdGUpO1xuICAgIH1cblxuICAgIHJldHVybiBTaG91bGRVcGRhdGU7XG4gIH07XG59O1xuXG52YXIgX2RlZmF1bHQgPSBzaG91bGRVcGRhdGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzTG9vc2U7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBzZXRTdGF0aWMgPSBmdW5jdGlvbiBzZXRTdGF0aWMoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgIEJhc2VDb21wb25lbnRba2V5XSA9IHZhbHVlO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuICAgIHJldHVybiBCYXNlQ29tcG9uZW50O1xuICB9O1xufTtcblxudmFyIF9kZWZhdWx0ID0gc2V0U3RhdGljO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBnZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgaWYgKCFDb21wb25lbnQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn07XG5cbnZhciBfZGVmYXVsdCA9IGdldERpc3BsYXlOYW1lO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSk7XG5cbnZhciBfZGVmYXVsdCA9IF9zaGFsbG93RXF1YWwuZGVmYXVsdDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N2Z0ljb24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3ZnSWNvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMWVtJyxcbiAgICAgIGhlaWdodDogJzFlbScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIGZvbnRTaXplOiAyNCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnZmlsbCcsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJhY3Rpb25cImAuICovXG4gICAgY29sb3JBY3Rpb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGlzYWJsZWRcImAuICovXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBmb250U2l6ZUluaGVyaXQ6IHtcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBmb250U2l6ZVNtYWxsOiB7XG4gICAgICBmb250U2l6ZTogMjBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJsYXJnZVwiYC4gKi9cbiAgICBmb250U2l6ZUxhcmdlOiB7XG4gICAgICBmb250U2l6ZTogMzVcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gU3ZnSWNvbihwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBmb250U2l6ZSA9IHByb3BzLmZvbnRTaXplLFxuICAgICAgbmF0aXZlQ29sb3IgPSBwcm9wcy5uYXRpdmVDb2xvcixcbiAgICAgIHRpdGxlQWNjZXNzID0gcHJvcHMudGl0bGVBY2Nlc3MsXG4gICAgICB2aWV3Qm94ID0gcHJvcHMudmlld0JveCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZm9udFNpemVcIiwgXCJuYXRpdmVDb2xvclwiLCBcInRpdGxlQWNjZXNzXCIsIFwidmlld0JveFwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoY29sb3IpKV0sIGNvbG9yICE9PSAnaW5oZXJpdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImZvbnRTaXplXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShmb250U2l6ZSkpXSwgZm9udFNpemUgIT09ICdkZWZhdWx0JyksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKSxcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICB2aWV3Qm94OiB2aWV3Qm94LFxuICAgIGNvbG9yOiBuYXRpdmVDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gJ2ZhbHNlJyA6ICd0cnVlJyxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogJ3ByZXNlbnRhdGlvbidcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiwgdGl0bGVBY2Nlc3MgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIiwgbnVsbCwgdGl0bGVBY2Nlc3MpIDogbnVsbCk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBuYXRpdmVDb2xvcmAgcHJvcGVydHkgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnYWN0aW9uJywgJ2Vycm9yJywgJ2Rpc2FibGVkJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3V0aWxzLmNvbXBvbmVudFByb3BUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgZm9udFNpemUgYXBwbGllZCB0byB0aGUgaWNvbi4gRGVmYXVsdHMgdG8gMjRweCwgYnV0IGNhbiBiZSBjb25maWd1cmUgdG8gaW5oZXJpdCBmb250IHNpemUuXG4gICAqL1xuICBmb250U2l6ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaW5oZXJpdCcsICdkZWZhdWx0JywgJ3NtYWxsJywgJ2xhcmdlJ10pLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIG5hdGl2ZUNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUtcmVuZGVyaW5nIGF0dHJpYnV0ZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWRcbiAgICogW2hlcmVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc2hhcGUtcmVuZGVyaW5nKS5cbiAgICogSWYgeW91IGFyZSBoYXZpbmcgaXNzdWVzIHdpdGggYmx1cnJ5IGljb25zIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqL1xuICB2aWV3Qm94OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDogdm9pZCAwO1xuU3ZnSWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbG9yOiAnaW5oZXJpdCcsXG4gIGNvbXBvbmVudDogJ3N2ZycsXG4gIGZvbnRTaXplOiAnZGVmYXVsdCcsXG4gIHZpZXdCb3g6ICcwIDAgMjQgMjQnXG59O1xuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTdmdJY29uJ1xufSkoU3ZnSWNvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfc3R5bGVzID0gcmVxdWlyZShcIi4uL3N0eWxlc1wiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzICovXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgJ0BnbG9iYWwnOiB7XG4gICAgICBodG1sOiB7XG4gICAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gICAgICAgIC8vIEFudGlhbGlhc2luZy5cbiAgICAgICAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gICAgICAgIC8vIEFudGlhbGlhc2luZy5cbiAgICAgICAgLy8gQ2hhbmdlIGZyb20gYGJveC1zaXppbmc6IGNvbnRlbnQtYm94YCBzbyB0aGF0IGB3aWR0aGBcbiAgICAgICAgLy8gaXMgbm90IGFmZmVjdGVkIGJ5IGBwYWRkaW5nYCBvciBgYm9yZGVyYC5cbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgICAgIH0sXG4gICAgICAnKiwgKjo6YmVmb3JlLCAqOjphZnRlcic6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnaW5oZXJpdCdcbiAgICAgIH0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICAgIC8vIFNhdmUgcHJpbnRlciBpbmsuXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogS2lja3N0YXJ0IGFuIGVsZWdhbnQsIGNvbnNpc3RlbnQsIGFuZCBzaW1wbGUgYmFzZWxpbmUgdG8gYnVpbGQgdXBvbi5cbiAqL1xuXG5cbnZhciBDc3NCYXNlbGluZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShDc3NCYXNlbGluZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ3NzQmFzZWxpbmUoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgQ3NzQmFzZWxpbmUpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKENzc0Jhc2VsaW5lKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKENzc0Jhc2VsaW5lLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDc3NCYXNlbGluZTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ3NzQmFzZWxpbmUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDc3NCYXNlbGluZS5wcm9wVHlwZXMgPSAoMCwgX3V0aWxzLmV4YWN0UHJvcCkoQ3NzQmFzZWxpbmUucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn1cblxuQ3NzQmFzZWxpbmUuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogbnVsbFxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9zdHlsZXMud2l0aFN0eWxlcykoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDc3NCYXNlbGluZSdcbn0pKENzc0Jhc2VsaW5lKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5cbnZhciBQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0b3JlU3RhdGU6IHN0b3JlLmdldFN0YXRlKCksXG4gICAgICBzdG9yZTogc3RvcmVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnN1YnNjcmliZSgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zdG9yZSAhPT0gcHJldlByb3BzLnN0b3JlKSB7XG4gICAgICBpZiAodGhpcy51bnN1YnNjcmliZSkgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBzdG9yZSA9IHRoaXMucHJvcHMuc3RvcmU7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmV3U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgIGlmICghX3RoaXMyLl9pc01vdW50ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpczIuc2V0U3RhdGUoZnVuY3Rpb24gKHByb3ZpZGVyU3RhdGUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBza2lwIHRoZSB1bm5lY2Vzc2FyeSBzdGF0ZSB1cGRhdGUuXG4gICAgICAgIGlmIChwcm92aWRlclN0YXRlLnN0b3JlU3RhdGUgPT09IG5ld1N0b3JlU3RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RvcmVTdGF0ZTogbmV3U3RvcmVTdGF0ZVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSk7IC8vIEFjdGlvbnMgbWlnaHQgaGF2ZSBiZWVuIGRpc3BhdGNoZWQgYmV0d2VlbiByZW5kZXIgYW5kIG1vdW50IC0gaGFuZGxlIHRob3NlXG5cbiAgICB2YXIgcG9zdE1vdW50U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICBpZiAocG9zdE1vdW50U3RvcmVTdGF0ZSAhPT0gdGhpcy5zdGF0ZS5zdG9yZVN0YXRlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RvcmVTdGF0ZTogcG9zdE1vdW50U3RvcmVTdGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIENvbnRleHQgPSB0aGlzLnByb3BzLmNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGVcbiAgICB9LCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gUHJvdmlkZXI7XG59KENvbXBvbmVudCk7XG5cblByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxufTtcbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaW52YXJpYW50KHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkLCBcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IGRldiB0b29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICBpbnZhcmlhbnQoIXdpdGhSZWYsICd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QtUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiAgPFByb3ZpZGVyIGNvbnRleHQ9e015Q29udGV4dH0+PENvbm5lY3RlZENvbXBvbmVudCBjb250ZXh0PXtNeUNvbnRleHR9IC8+PC9Qcm92aWRlcj4uICcgKyAnWW91IG1heSBhbHNvIHBhc3MgYSB7Y29udGV4dCA6IE15Q29udGV4dH0gb3B0aW9uIHRvIGNvbm5lY3QnO1xuICBpbnZhcmlhbnQoc3RvcmVLZXkgPT09ICdzdG9yZScsICdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbnZhcmlhbnQoaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpLCBcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIEpTT04uc3RyaW5naWZ5KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuICAgIHZhciBPdXRlckJhc2VDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gICAgdmFyIEZpbmFsV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG5cbiAgICBpZiAocHVyZSkge1xuICAgICAgT3V0ZXJCYXNlQ29tcG9uZW50ID0gUHVyZUNvbXBvbmVudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRGVyaXZlZFByb3BzU2VsZWN0b3IoKSB7XG4gICAgICB2YXIgbGFzdFByb3BzO1xuICAgICAgdmFyIGxhc3RTdGF0ZTtcbiAgICAgIHZhciBsYXN0RGVyaXZlZFByb3BzO1xuICAgICAgdmFyIGxhc3RTdG9yZTtcbiAgICAgIHZhciBzb3VyY2VTZWxlY3RvcjtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZWxlY3REZXJpdmVkUHJvcHMoc3RhdGUsIHByb3BzLCBzdG9yZSkge1xuICAgICAgICBpZiAocHVyZSAmJiBsYXN0UHJvcHMgPT09IHByb3BzICYmIGxhc3RTdGF0ZSA9PT0gc3RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gbGFzdERlcml2ZWRQcm9wcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdG9yZSAhPT0gbGFzdFN0b3JlKSB7XG4gICAgICAgICAgbGFzdFN0b3JlID0gc3RvcmU7XG4gICAgICAgICAgc291cmNlU2VsZWN0b3IgPSBzZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFByb3BzID0gcHJvcHM7XG4gICAgICAgIGxhc3RTdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gc291cmNlU2VsZWN0b3Ioc3RhdGUsIHByb3BzKTtcblxuICAgICAgICBpZiAobGFzdERlcml2ZWRQcm9wcyA9PT0gbmV4dFByb3BzKSB7XG4gICAgICAgICAgcmV0dXJuIGxhc3REZXJpdmVkUHJvcHM7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0RGVyaXZlZFByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICByZXR1cm4gbGFzdERlcml2ZWRQcm9wcztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUNoaWxkRWxlbWVudFNlbGVjdG9yKCkge1xuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzLCBsYXN0Rm9yd2FyZFJlZiwgbGFzdENoaWxkRWxlbWVudDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZWxlY3RDaGlsZEVsZW1lbnQoY2hpbGRQcm9wcywgZm9yd2FyZFJlZikge1xuICAgICAgICBpZiAoY2hpbGRQcm9wcyAhPT0gbGFzdENoaWxkUHJvcHMgfHwgZm9yd2FyZFJlZiAhPT0gbGFzdEZvcndhcmRSZWYpIHtcbiAgICAgICAgICBsYXN0Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHM7XG4gICAgICAgICAgbGFzdEZvcndhcmRSZWYgPSBmb3J3YXJkUmVmO1xuICAgICAgICAgIGxhc3RDaGlsZEVsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEZpbmFsV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGNoaWxkUHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogZm9yd2FyZFJlZlxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXN0Q2hpbGRFbGVtZW50O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgQ29ubmVjdCA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uIChfT3V0ZXJCYXNlQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShDb25uZWN0LCBfT3V0ZXJCYXNlQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXM7XG5cbiAgICAgICAgX3RoaXMgPSBfT3V0ZXJCYXNlQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIGludmFyaWFudChmb3J3YXJkUmVmID8gIXByb3BzLndyYXBwZXJQcm9wc1tzdG9yZUtleV0gOiAhcHJvcHNbc3RvcmVLZXldLCAnUGFzc2luZyByZWR1eCBzdG9yZSBpbiBwcm9wcyBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgICAgICBfdGhpcy5zZWxlY3REZXJpdmVkUHJvcHMgPSBtYWtlRGVyaXZlZFByb3BzU2VsZWN0b3IoKTtcbiAgICAgICAgX3RoaXMuc2VsZWN0Q2hpbGRFbGVtZW50ID0gbWFrZUNoaWxkRWxlbWVudFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLnJlbmRlcldyYXBwZWRDb21wb25lbnQgPSBfdGhpcy5yZW5kZXJXcmFwcGVkQ29tcG9uZW50LmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvdG8gPSBDb25uZWN0LnByb3RvdHlwZTtcblxuICAgICAgX3Byb3RvLnJlbmRlcldyYXBwZWRDb21wb25lbnQgPSBmdW5jdGlvbiByZW5kZXJXcmFwcGVkQ29tcG9uZW50KHZhbHVlKSB7XG4gICAgICAgIGludmFyaWFudCh2YWx1ZSwgXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICAgIHZhciBzdG9yZVN0YXRlID0gdmFsdWUuc3RvcmVTdGF0ZSxcbiAgICAgICAgICAgIHN0b3JlID0gdmFsdWUuc3RvcmU7XG4gICAgICAgIHZhciB3cmFwcGVyUHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICB2YXIgZm9yd2FyZGVkUmVmO1xuXG4gICAgICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICAgICAgd3JhcHBlclByb3BzID0gdGhpcy5wcm9wcy53cmFwcGVyUHJvcHM7XG4gICAgICAgICAgZm9yd2FyZGVkUmVmID0gdGhpcy5wcm9wcy5mb3J3YXJkZWRSZWY7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVyaXZlZFByb3BzID0gdGhpcy5zZWxlY3REZXJpdmVkUHJvcHMoc3RvcmVTdGF0ZSwgd3JhcHBlclByb3BzLCBzdG9yZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdENoaWxkRWxlbWVudChkZXJpdmVkUHJvcHMsIGZvcndhcmRlZFJlZik7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgQ29udGV4dFRvVXNlID0gdGhpcy5wcm9wcy5jb250ZXh0IHx8IENvbnRleHQ7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Db25zdW1lciwgbnVsbCwgdGhpcy5yZW5kZXJXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb25uZWN0O1xuICAgIH0oT3V0ZXJCYXNlQ29tcG9uZW50KTtcblxuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwge1xuICAgICAgICAgIHdyYXBwZXJQcm9wczogcHJvcHMsXG4gICAgICAgICAgZm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyO1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuIFwiICsgXCJPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guXCIpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn0gLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy9cbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7IiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBHcmlkIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9HcmlkXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExheW91dFByb3BzIHtcclxuICBzaWRlYmFyOiBSZWFjdC5SZWFjdE5vZGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCYWRnZVxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBMYXlvdXRcclxuICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudDxMYXlvdXRQcm9wcz59XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYXlvdXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TGF5b3V0UHJvcHM+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogTGF5b3V0UHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgc2lkZWJhciwgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8R3JpZCB4cz17MTJ9IGNvbnRhaW5lciBzcGFjaW5nPXsxNn0+XHJcbiAgICAgICAgPEdyaWQgaXRlbT57c2lkZWJhcn08L0dyaWQ+XHJcbiAgICAgICAgPEdyaWQgaXRlbSB4cz5cclxuICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8L0dyaWQ+XHJcbiAgICAgIDwvR3JpZD5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcbmV4cG9ydCB2YXIgc3RvcmVTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTsiLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCB7IENvbXBvbmVudCwgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG52YXIgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSBmYWxzZTtcblxuZnVuY3Rpb24gd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKSB7XG4gIGlmIChkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcbiAgd2FybmluZygnPFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IGNoYW5naW5nIGBzdG9yZWAgb24gdGhlIGZseS4gJyArICdJdCBpcyBtb3N0IGxpa2VseSB0aGF0IHlvdSBzZWUgdGhpcyBlcnJvciBiZWNhdXNlIHlvdSB1cGRhdGVkIHRvICcgKyAnUmVkdXggMi54IGFuZCBSZWFjdCBSZWR1eCAyLnggd2hpY2ggbm8gbG9uZ2VyIGhvdCByZWxvYWQgcmVkdWNlcnMgJyArICdhdXRvbWF0aWNhbGx5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlZHV4anMvcmVhY3QtcmVkdXgvcmVsZWFzZXMvJyArICd0YWcvdjIuMC4wIGZvciB0aGUgbWlncmF0aW9uIGluc3RydWN0aW9ucy4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKHN0b3JlS2V5KSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgaWYgKHN0b3JlS2V5ID09PSB2b2lkIDApIHtcbiAgICBzdG9yZUtleSA9ICdzdG9yZSc7XG4gIH1cblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyBcIlN1YnNjcmlwdGlvblwiO1xuXG4gIHZhciBQcm92aWRlciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW3N0b3JlS2V5XSA9IHRoaXNbc3RvcmVLZXldLCBfcmVmW3N1YnNjcmlwdGlvbktleV0gPSBudWxsLCBfcmVmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgIF90aGlzW3N0b3JlS2V5XSA9IHByb3BzLnN0b3JlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzW3N0b3JlS2V5XSAhPT0gbmV4dFByb3BzLnN0b3JlKSB7XG4gICAgICAgIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogc3RvcmVTaGFwZS5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXG4gIH07XG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3RvcmVLZXldID0gc3RvcmVTaGFwZS5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuICByZXR1cm4gUHJvdmlkZXI7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm92aWRlcigpOyIsIi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbmV4dCA9IENMRUFSRUQ7XG4gICAgICBjdXJyZW50ID0gQ0xFQVJFRDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnQgPSBuZXh0O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGN1cnJlbnQgPT09IENMRUFSRUQpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIsIG9uU3RhdGVDaGFuZ2UpIHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlID0gb25TdGF0ZUNoYW5nZTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBfcHJvdG8udHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMub25TdGF0ZUNoYW5nZSkgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLm9uU3RhdGVDaGFuZ2UpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcbnZhciBob3RSZWxvYWRpbmdWZXJzaW9uID0gMDtcbnZhciBkdW1teVN0YXRlID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG5cbiAgICAgICAgaWYgKG5leHRQcm9wcyAhPT0gc2VsZWN0b3IucHJvcHMgfHwgc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdG9yLnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICAgIHNlbGVjdG9yLmVycm9yID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICB2YXIgX2NvbnRleHRUeXBlcywgX2NoaWxkQ29udGV4dFR5cGVzO1xuXG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIl0pO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdG9yZUtleSArICdTdWJzY3JpcHRpb24nO1xuICB2YXIgdmVyc2lvbiA9IGhvdFJlbG9hZGluZ1ZlcnNpb24rKztcbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGludmFyaWFudChpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCksIFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgSlNPTi5zdHJpbmdpZnkoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudCAvLyBUT0RPIEFjdHVhbGx5IGZpeCBvdXIgdXNlIG9mIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tZGVwcmVjYXRlZCAqL1xuXG4gICAgfSk7XG5cbiAgICB2YXIgQ29ubmVjdCA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShDb25uZWN0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXM7XG5cbiAgICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICBfdGhpcy5yZW5kZXJDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLnN0b3JlID0gcHJvcHNbc3RvcmVLZXldIHx8IGNvbnRleHRbc3RvcmVLZXldO1xuICAgICAgICBfdGhpcy5wcm9wc01vZGUgPSBCb29sZWFuKHByb3BzW3N0b3JlS2V5XSk7XG4gICAgICAgIF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZSA9IF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZS5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCBcIkNvdWxkIG5vdCBmaW5kIFxcXCJcIiArIHN0b3JlS2V5ICsgXCJcXFwiIGluIGVpdGhlciB0aGUgY29udGV4dCBvciBwcm9wcyBvZiBcIiArIChcIlxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBcIikgKyAoXCJvciBleHBsaWNpdGx5IHBhc3MgXFxcIlwiICsgc3RvcmVLZXkgKyBcIlxcXCIgYXMgYSBwcm9wIHRvIFxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLlwiKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm90byA9IENvbm5lY3QucHJvdG90eXBlO1xuXG4gICAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICB2YXIgX3JlZjM7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgcmVjZWl2ZWQgc3RvcmUgZnJvbSBwcm9wcywgaXRzIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgdHJhbnNwYXJlbnRcbiAgICAgICAgLy8gdG8gYW55IGRlc2NlbmRhbnRzIHJlY2VpdmluZyBzdG9yZStzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0OyBpdCBwYXNzZXMgYWxvbmdcbiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIHBhc3NlZCB0byBpdC4gT3RoZXJ3aXNlLCBpdCBzaGFkb3dzIHRoZSBwYXJlbnQgc3Vic2NyaXB0aW9uLCB3aGljaCBhbGxvd3NcbiAgICAgICAgLy8gQ29ubmVjdCB0byBjb250cm9sIG9yZGVyaW5nIG9mIG5vdGlmaWNhdGlvbnMgdG8gZmxvdyB0b3AtZG93bi5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHNNb2RlID8gbnVsbCA6IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZjMgPSB7fSwgX3JlZjNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvbiB8fCB0aGlzLmNvbnRleHRbc3Vic2NyaXB0aW9uS2V5XSwgX3JlZjM7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IG5vb3A7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1biA9IG5vb3A7XG4gICAgICAgIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgXCJUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHlvdSBuZWVkIHRvIHNwZWNpZnkgXCIgKyAoXCJ7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgXCIgKyBtZXRob2ROYW1lICsgXCIoKSBjYWxsLlwiKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5zZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBzZXRXcmFwcGVkSW5zdGFuY2UocmVmKSB7XG4gICAgICAgIHRoaXMud3JhcHBlZEluc3RhbmNlID0gcmVmO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmluaXRTZWxlY3RvciA9IGZ1bmN0aW9uIGluaXRTZWxlY3RvcigpIHtcbiAgICAgICAgdmFyIHNvdXJjZVNlbGVjdG9yID0gc2VsZWN0b3JGYWN0b3J5KHRoaXMuc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHRoaXMuc3RvcmUpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gcGFyZW50U3ViJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gdGhpcy5zdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHRoaXMuc3Vic2NyaXB0aW9uKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgLy8gYGNvbXBvbmVudERpZFVwZGF0ZWAgaXMgY29uZGl0aW9uYWxseSBpbXBsZW1lbnRlZCB3aGVuIGBvblN0YXRlQ2hhbmdlYCBkZXRlcm1pbmVzIGl0XG4gICAgICAgIC8vIG5lZWRzIHRvIG5vdGlmeSBuZXN0ZWQgc3Vicy4gT25jZSBjYWxsZWQsIGl0IHVuaW1wbGVtZW50cyBpdHNlbGYgdW50aWwgZnVydGhlciBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VzIG9jY3VyLiBEb2luZyBpdCB0aGlzIHdheSB2cyBoYXZpbmcgYSBwZXJtYW5lbnQgYGNvbXBvbmVudERpZFVwZGF0ZWAgdGhhdCBkb2VzXG4gICAgICAgIC8vIGEgYm9vbGVhbiBjaGVjayBldmVyeSB0aW1lIGF2b2lkcyBhbiBleHRyYSBtZXRob2QgY2FsbCBtb3N0IG9mIHRoZSB0aW1lLCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gc29tZSBwZXJmIGJvb3N0LlxuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnN1YnNjcmlwdGlvbikgJiYgdGhpcy5zdWJzY3JpcHRpb24uaXNTdWJzY3JpYmVkKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wczsgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG5cbiAgICAgICAgdmFyIHdpdGhFeHRyYXMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuXG4gICAgICAgIGlmICh3aXRoUmVmKSB3aXRoRXh0cmFzLnJlZiA9IHRoaXMuc2V0V3JhcHBlZEluc3RhbmNlO1xuICAgICAgICBpZiAocmVuZGVyQ291bnRQcm9wKSB3aXRoRXh0cmFzW3JlbmRlckNvdW50UHJvcF0gPSB0aGlzLnJlbmRlckNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikgd2l0aEV4dHJhc1tzdWJzY3JpcHRpb25LZXldID0gdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiB3aXRoRXh0cmFzO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgc2VsZWN0b3IuZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5hZGRFeHRyYVByb3BzKHNlbGVjdG9yLnByb3BzKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb25uZWN0O1xuICAgIH0oQ29tcG9uZW50KTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L25vLWRlcHJlY2F0ZWQgKi9cblxuXG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgQ29ubmVjdC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QucHJvcFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyBXZSBhcmUgaG90IHJlbG9hZGluZyFcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy5pbml0U2VsZWN0b3IoKTsgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cblxuICAgICAgICAgIHZhciBvbGRMaXN0ZW5lcnMgPSBbXTtcblxuICAgICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzID0gdGhpcy5zdWJzY3JpcHRpb24ubGlzdGVuZXJzLmdldCgpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcblxuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy8gXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vIFxuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy8gICAgXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIG93blByb3BzO1xuICB2YXIgc3RhdGVQcm9wcztcbiAgdmFyIGRpc3BhdGNoUHJvcHM7XG4gIHZhciBtZXJnZWRQcm9wcztcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufSAvLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJpbml0TWFwU3RhdGVUb1Byb3BzXCIsIFwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wc1wiLCBcImluaXRNZXJnZVByb3BzXCJdKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBvZiB0eXBlIFwiICsgdHlwZW9mIGFyZyArIFwiIGZvciBcIiArIG5hbWUgKyBcIiBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50IFwiICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArIFwiLlwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn0gLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHZvaWQgMCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB2b2lkIDAgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdm9pZCAwID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBfcmVmMikge1xuICAgIGlmIChfcmVmMiA9PT0gdm9pZCAwKSB7XG4gICAgICBfcmVmMiA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcmVmMyA9IF9yZWYyLFxuICAgICAgICBfcmVmMyRwdXJlID0gX3JlZjMucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYzJHB1cmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMyRwdXJlLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlc0VxdWFsID09PSB2b2lkIDAgPyBzdHJpY3RFcXVhbCA6IF9yZWYzJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMy5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjMkYXJlT3duUHJvcHNFcXVhID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYzLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVQcm9wc0VxID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYzLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBcIkNvbm5lY3QoXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgICB9LFxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgX09iamVjdCRjcmVhdGUgZnJvbSBcIi4uLy4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gX09iamVjdCRjcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJ2YXIgc2ltcGxlSXNFcXVhbCA9IGZ1bmN0aW9uIHNpbXBsZUlzRXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIGluZGV4IChyZXN1bHRGbiwgaXNFcXVhbCkge1xuICBpZiAoaXNFcXVhbCA9PT0gdm9pZCAwKSB7XG4gICAgaXNFcXVhbCA9IHNpbXBsZUlzRXF1YWw7XG4gIH1cblxuICB2YXIgbGFzdFRoaXM7XG4gIHZhciBsYXN0QXJncyA9IFtdO1xuICB2YXIgbGFzdFJlc3VsdDtcbiAgdmFyIGNhbGxlZE9uY2UgPSBmYWxzZTtcblxuICB2YXIgaXNOZXdBcmdFcXVhbFRvTGFzdCA9IGZ1bmN0aW9uIGlzTmV3QXJnRXF1YWxUb0xhc3QobmV3QXJnLCBpbmRleCkge1xuICAgIHJldHVybiBpc0VxdWFsKG5ld0FyZywgbGFzdEFyZ3NbaW5kZXhdLCBpbmRleCk7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbmV3QXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIG5ld0FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgbmV3QXJncy5sZW5ndGggPT09IGxhc3RBcmdzLmxlbmd0aCAmJiBuZXdBcmdzLmV2ZXJ5KGlzTmV3QXJnRXF1YWxUb0xhc3QpKSB7XG4gICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG5cbiAgICBsYXN0UmVzdWx0ID0gcmVzdWx0Rm4uYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RBcmdzID0gbmV3QXJncztcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsInZhciBpbmRleCA9IChmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIGxhc3RBcmdzID0gW107XG4gIHZhciBmcmFtZUlkID0gbnVsbDtcblxuICB2YXIgd3JhcHBlckZuID0gZnVuY3Rpb24gd3JhcHBlckZuKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxhc3RBcmdzID0gYXJncztcblxuICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBmcmFtZUlkID0gbnVsbDtcbiAgICAgIGZuLmFwcGx5KHVuZGVmaW5lZCwgbGFzdEFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHdyYXBwZXJGbi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFmcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVJZCk7XG4gICAgZnJhbWVJZCA9IG51bGw7XG4gIH07XG5cbiAgdmFyIHJlc3VsdEZuID0gd3JhcHBlckZuO1xuXG4gIHJldHVybiByZXN1bHRGbjtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxudmFyIGdldFJlY3QgPSBmdW5jdGlvbiBnZXRSZWN0KF9yZWYpIHtcbiAgdmFyIHRvcCA9IF9yZWYudG9wLFxuICAgICAgcmlnaHQgPSBfcmVmLnJpZ2h0LFxuICAgICAgYm90dG9tID0gX3JlZi5ib3R0b20sXG4gICAgICBsZWZ0ID0gX3JlZi5sZWZ0O1xuICB2YXIgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gIHZhciBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gIHZhciByZWN0ID0ge1xuICAgIHRvcDogdG9wLFxuICAgIHJpZ2h0OiByaWdodCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiBsZWZ0LFxuICAgIHk6IHRvcCxcbiAgICBjZW50ZXI6IHtcbiAgICAgIHg6IChyaWdodCArIGxlZnQpIC8gMixcbiAgICAgIHk6IChib3R0b20gKyB0b3ApIC8gMlxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHJlY3Q7XG59O1xudmFyIGV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZCh0YXJnZXQsIGV4cGFuZEJ5KSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiB0YXJnZXQudG9wIC0gZXhwYW5kQnkudG9wLFxuICAgIGxlZnQ6IHRhcmdldC5sZWZ0IC0gZXhwYW5kQnkubGVmdCxcbiAgICBib3R0b206IHRhcmdldC5ib3R0b20gKyBleHBhbmRCeS5ib3R0b20sXG4gICAgcmlnaHQ6IHRhcmdldC5yaWdodCArIGV4cGFuZEJ5LnJpZ2h0XG4gIH07XG59O1xudmFyIHNocmluayA9IGZ1bmN0aW9uIHNocmluayh0YXJnZXQsIHNocmlua0J5KSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiB0YXJnZXQudG9wICsgc2hyaW5rQnkudG9wLFxuICAgIGxlZnQ6IHRhcmdldC5sZWZ0ICsgc2hyaW5rQnkubGVmdCxcbiAgICBib3R0b206IHRhcmdldC5ib3R0b20gLSBzaHJpbmtCeS5ib3R0b20sXG4gICAgcmlnaHQ6IHRhcmdldC5yaWdodCAtIHNocmlua0J5LnJpZ2h0XG4gIH07XG59O1xuXG52YXIgc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCh0YXJnZXQsIHNoaWZ0QnkpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IHRhcmdldC50b3AgKyBzaGlmdEJ5LnksXG4gICAgbGVmdDogdGFyZ2V0LmxlZnQgKyBzaGlmdEJ5LngsXG4gICAgYm90dG9tOiB0YXJnZXQuYm90dG9tICsgc2hpZnRCeS55LFxuICAgIHJpZ2h0OiB0YXJnZXQucmlnaHQgKyBzaGlmdEJ5LnhcbiAgfTtcbn07XG5cbnZhciBub1NwYWNpbmcgPSB7XG4gIHRvcDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMFxufTtcbnZhciBjcmVhdGVCb3ggPSBmdW5jdGlvbiBjcmVhdGVCb3goX3JlZjIpIHtcbiAgdmFyIGJvcmRlckJveCA9IF9yZWYyLmJvcmRlckJveCxcbiAgICAgIF9yZWYyJG1hcmdpbiA9IF9yZWYyLm1hcmdpbixcbiAgICAgIG1hcmdpbiA9IF9yZWYyJG1hcmdpbiA9PT0gdm9pZCAwID8gbm9TcGFjaW5nIDogX3JlZjIkbWFyZ2luLFxuICAgICAgX3JlZjIkYm9yZGVyID0gX3JlZjIuYm9yZGVyLFxuICAgICAgYm9yZGVyID0gX3JlZjIkYm9yZGVyID09PSB2b2lkIDAgPyBub1NwYWNpbmcgOiBfcmVmMiRib3JkZXIsXG4gICAgICBfcmVmMiRwYWRkaW5nID0gX3JlZjIucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfcmVmMiRwYWRkaW5nID09PSB2b2lkIDAgPyBub1NwYWNpbmcgOiBfcmVmMiRwYWRkaW5nO1xuICB2YXIgbWFyZ2luQm94ID0gZ2V0UmVjdChleHBhbmQoYm9yZGVyQm94LCBtYXJnaW4pKTtcbiAgdmFyIHBhZGRpbmdCb3ggPSBnZXRSZWN0KHNocmluayhib3JkZXJCb3gsIGJvcmRlcikpO1xuICB2YXIgY29udGVudEJveCA9IGdldFJlY3Qoc2hyaW5rKHBhZGRpbmdCb3gsIHBhZGRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBtYXJnaW5Cb3g6IG1hcmdpbkJveCxcbiAgICBib3JkZXJCb3g6IGdldFJlY3QoYm9yZGVyQm94KSxcbiAgICBwYWRkaW5nQm94OiBwYWRkaW5nQm94LFxuICAgIGNvbnRlbnRCb3g6IGNvbnRlbnRCb3gsXG4gICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgYm9yZGVyOiBib3JkZXIsXG4gICAgcGFkZGluZzogcGFkZGluZ1xuICB9O1xufTtcblxudmFyIHBhcnNlID0gZnVuY3Rpb24gcGFyc2UocmF3KSB7XG4gIHZhciB2YWx1ZSA9IHJhdy5zbGljZSgwLCAtMik7XG4gIHZhciBzdWZmaXggPSByYXcuc2xpY2UoLTIpO1xuICAhKHN1ZmZpeCA9PT0gJ3B4JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiRXhwZWN0ZWQgdmFsdWUgdG8gYmUgYSBwaXhlbCB2YWx1ZS5cXG4gICAgICBFeHBlY3RlZCBmb3JtOiAxMHB4XFxuICAgICAgQWN0dWFsIHZhbHVlOiBcIiArIHJhdyArIFwiXFxuICAgIFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciByZXN1bHQgPSBOdW1iZXIodmFsdWUpO1xuICAhIWlzTmFOKHJlc3VsdCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IHBhcnNlIHZhbHVlIFtyYXc6IFwiICsgcmF3ICsgXCIsIHdpdGhvdXQgc3VmZml4OiBcIiArIHZhbHVlICsgXCJdXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBnZXRXaW5kb3dTY3JvbGwgPSBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwoKSB7XG4gIHJldHVybiB7XG4gICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICB9O1xufTtcblxudmFyIG9mZnNldCA9IGZ1bmN0aW9uIG9mZnNldChvcmlnaW5hbCwgY2hhbmdlKSB7XG4gIHZhciBib3JkZXJCb3ggPSBvcmlnaW5hbC5ib3JkZXJCb3gsXG4gICAgICBib3JkZXIgPSBvcmlnaW5hbC5ib3JkZXIsXG4gICAgICBtYXJnaW4gPSBvcmlnaW5hbC5tYXJnaW4sXG4gICAgICBwYWRkaW5nID0gb3JpZ2luYWwucGFkZGluZztcbiAgdmFyIHNoaWZ0ZWQgPSBzaGlmdChib3JkZXJCb3gsIGNoYW5nZSk7XG4gIHJldHVybiBjcmVhdGVCb3goe1xuICAgIGJvcmRlckJveDogc2hpZnRlZCxcbiAgICBib3JkZXI6IGJvcmRlcixcbiAgICBtYXJnaW46IG1hcmdpbixcbiAgICBwYWRkaW5nOiBwYWRkaW5nXG4gIH0pO1xufTtcbnZhciB3aXRoU2Nyb2xsID0gZnVuY3Rpb24gd2l0aFNjcm9sbChvcmlnaW5hbCwgc2Nyb2xsKSB7XG4gIGlmIChzY3JvbGwgPT09IHZvaWQgMCkge1xuICAgIHNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbCgpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldChvcmlnaW5hbCwgc2Nyb2xsKTtcbn07XG52YXIgY2FsY3VsYXRlQm94ID0gZnVuY3Rpb24gY2FsY3VsYXRlQm94KGJvcmRlckJveCwgc3R5bGVzKSB7XG4gIHZhciBtYXJnaW4gPSB7XG4gICAgdG9wOiBwYXJzZShzdHlsZXMubWFyZ2luVG9wKSxcbiAgICByaWdodDogcGFyc2Uoc3R5bGVzLm1hcmdpblJpZ2h0KSxcbiAgICBib3R0b206IHBhcnNlKHN0eWxlcy5tYXJnaW5Cb3R0b20pLFxuICAgIGxlZnQ6IHBhcnNlKHN0eWxlcy5tYXJnaW5MZWZ0KVxuICB9O1xuICB2YXIgcGFkZGluZyA9IHtcbiAgICB0b3A6IHBhcnNlKHN0eWxlcy5wYWRkaW5nVG9wKSxcbiAgICByaWdodDogcGFyc2Uoc3R5bGVzLnBhZGRpbmdSaWdodCksXG4gICAgYm90dG9tOiBwYXJzZShzdHlsZXMucGFkZGluZ0JvdHRvbSksXG4gICAgbGVmdDogcGFyc2Uoc3R5bGVzLnBhZGRpbmdMZWZ0KVxuICB9O1xuICB2YXIgYm9yZGVyID0ge1xuICAgIHRvcDogcGFyc2Uoc3R5bGVzLmJvcmRlclRvcFdpZHRoKSxcbiAgICByaWdodDogcGFyc2Uoc3R5bGVzLmJvcmRlclJpZ2h0V2lkdGgpLFxuICAgIGJvdHRvbTogcGFyc2Uoc3R5bGVzLmJvcmRlckJvdHRvbVdpZHRoKSxcbiAgICBsZWZ0OiBwYXJzZShzdHlsZXMuYm9yZGVyTGVmdFdpZHRoKVxuICB9O1xuICByZXR1cm4gY3JlYXRlQm94KHtcbiAgICBib3JkZXJCb3g6IGJvcmRlckJveCxcbiAgICBtYXJnaW46IG1hcmdpbixcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGJvcmRlcjogYm9yZGVyXG4gIH0pO1xufTtcbnZhciBnZXRCb3ggPSBmdW5jdGlvbiBnZXRCb3goZWwpIHtcbiAgdmFyIGJvcmRlckJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICByZXR1cm4gY2FsY3VsYXRlQm94KGJvcmRlckJveCwgc3R5bGVzKTtcbn07XG5cbmV4cG9ydCB7IGdldFJlY3QsIGV4cGFuZCwgc2hyaW5rLCBjcmVhdGVCb3gsIG9mZnNldCwgd2l0aFNjcm9sbCwgY2FsY3VsYXRlQm94LCBnZXRCb3ggfTtcbiIsImltcG9ydCBfT2JqZWN0JGFzc2lnbiBmcm9tIFwiLi4vLi4vY29yZS1qcy9vYmplY3QvYXNzaWduXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBfT2JqZWN0JGFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgeyBhcHBseU1pZGRsZXdhcmUsIGNyZWF0ZVN0b3JlLCBjb21wb3NlLCBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgX09iamVjdCR2YWx1ZXMgZnJvbSAnQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC92YWx1ZXMnO1xuaW1wb3J0IF9PYmplY3Qka2V5cyBmcm9tICdAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2tleXMnO1xuaW1wb3J0IF9PYmplY3QkYXNzaWduIGZyb20gJ0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvYXNzaWduJztcbmltcG9ydCBfRGF0ZSRub3cgZnJvbSAnQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL2RhdGUvbm93JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtZW1vaXplT25lIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCByYWZTY2hkIGZyb20gJ3JhZi1zY2hkJztcbmltcG9ydCB7IGdldFJlY3QsIHdpdGhTY3JvbGwsIGNyZWF0ZUJveCwgb2Zmc2V0LCBnZXRCb3gsIGV4cGFuZCwgY2FsY3VsYXRlQm94IH0gZnJvbSAnY3NzLWJveC1tb2RlbCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfTnVtYmVyJGlzSW50ZWdlciBmcm9tICdAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvbnVtYmVyL2lzLWludGVnZXInO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbnZhciBvcmlnaW4gPSB7XG4gIHg6IDAsXG4gIHk6IDBcbn07XG52YXIgYWRkID0gZnVuY3Rpb24gYWRkKHBvaW50MSwgcG9pbnQyKSB7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnQxLnggKyBwb2ludDIueCxcbiAgICB5OiBwb2ludDEueSArIHBvaW50Mi55XG4gIH07XG59O1xudmFyIHN1YnRyYWN0ID0gZnVuY3Rpb24gc3VidHJhY3QocG9pbnQxLCBwb2ludDIpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwb2ludDEueCAtIHBvaW50Mi54LFxuICAgIHk6IHBvaW50MS55IC0gcG9pbnQyLnlcbiAgfTtcbn07XG52YXIgaXNFcXVhbCA9IGZ1bmN0aW9uIGlzRXF1YWwocG9pbnQxLCBwb2ludDIpIHtcbiAgcmV0dXJuIHBvaW50MS54ID09PSBwb2ludDIueCAmJiBwb2ludDEueSA9PT0gcG9pbnQyLnk7XG59O1xudmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZShwb2ludCkge1xuICByZXR1cm4ge1xuICAgIHg6IHBvaW50LnggIT09IDAgPyAtcG9pbnQueCA6IDAsXG4gICAgeTogcG9pbnQueSAhPT0gMCA/IC1wb2ludC55IDogMFxuICB9O1xufTtcbnZhciBwYXRjaCA9IGZ1bmN0aW9uIHBhdGNoKGxpbmUsIHZhbHVlLCBvdGhlclZhbHVlKSB7XG4gIHZhciBfcmVmO1xuXG4gIGlmIChvdGhlclZhbHVlID09PSB2b2lkIDApIHtcbiAgICBvdGhlclZhbHVlID0gMDtcbiAgfVxuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbbGluZV0gPSB2YWx1ZSwgX3JlZltsaW5lID09PSAneCcgPyAneScgOiAneCddID0gb3RoZXJWYWx1ZSwgX3JlZjtcbn07XG52YXIgZGlzdGFuY2UgPSBmdW5jdGlvbiBkaXN0YW5jZShwb2ludDEsIHBvaW50Mikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50Mi54IC0gcG9pbnQxLngsIDIpICsgTWF0aC5wb3cocG9pbnQyLnkgLSBwb2ludDEueSwgMikpO1xufTtcbnZhciBjbG9zZXN0ID0gZnVuY3Rpb24gY2xvc2VzdCh0YXJnZXQsIHBvaW50cykge1xuICByZXR1cm4gTWF0aC5taW4uYXBwbHkoTWF0aCwgcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4gZGlzdGFuY2UodGFyZ2V0LCBwb2ludCk7XG4gIH0pKTtcbn07XG52YXIgYXBwbHkgPSBmdW5jdGlvbiBhcHBseShmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGZuKHBvaW50LngpLFxuICAgICAgeTogZm4ocG9pbnQueSlcbiAgICB9O1xuICB9O1xufTtcblxudmFyIGV4ZWN1dGVDbGlwID0gKGZ1bmN0aW9uIChmcmFtZSwgc3ViamVjdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0UmVjdCh7XG4gICAgdG9wOiBNYXRoLm1heChzdWJqZWN0LnRvcCwgZnJhbWUudG9wKSxcbiAgICByaWdodDogTWF0aC5taW4oc3ViamVjdC5yaWdodCwgZnJhbWUucmlnaHQpLFxuICAgIGJvdHRvbTogTWF0aC5taW4oc3ViamVjdC5ib3R0b20sIGZyYW1lLmJvdHRvbSksXG4gICAgbGVmdDogTWF0aC5tYXgoc3ViamVjdC5sZWZ0LCBmcmFtZS5sZWZ0KVxuICB9KTtcblxuICBpZiAocmVzdWx0LndpZHRoIDw9IDAgfHwgcmVzdWx0LmhlaWdodCA8PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciBpc0VxdWFsJDEgPSBmdW5jdGlvbiBpc0VxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgcmV0dXJuIGZpcnN0LnRvcCA9PT0gc2Vjb25kLnRvcCAmJiBmaXJzdC5yaWdodCA9PT0gc2Vjb25kLnJpZ2h0ICYmIGZpcnN0LmJvdHRvbSA9PT0gc2Vjb25kLmJvdHRvbSAmJiBmaXJzdC5sZWZ0ID09PSBzZWNvbmQubGVmdDtcbn07XG52YXIgb2Zmc2V0QnlQb3NpdGlvbiA9IGZ1bmN0aW9uIG9mZnNldEJ5UG9zaXRpb24oc3BhY2luZywgcG9pbnQpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IHNwYWNpbmcudG9wICsgcG9pbnQueSxcbiAgICBsZWZ0OiBzcGFjaW5nLmxlZnQgKyBwb2ludC54LFxuICAgIGJvdHRvbTogc3BhY2luZy5ib3R0b20gKyBwb2ludC55LFxuICAgIHJpZ2h0OiBzcGFjaW5nLnJpZ2h0ICsgcG9pbnQueFxuICB9O1xufTtcbnZhciBnZXRDb3JuZXJzID0gZnVuY3Rpb24gZ2V0Q29ybmVycyhzcGFjaW5nKSB7XG4gIHJldHVybiBbe1xuICAgIHg6IHNwYWNpbmcubGVmdCxcbiAgICB5OiBzcGFjaW5nLnRvcFxuICB9LCB7XG4gICAgeDogc3BhY2luZy5yaWdodCxcbiAgICB5OiBzcGFjaW5nLnRvcFxuICB9LCB7XG4gICAgeDogc3BhY2luZy5sZWZ0LFxuICAgIHk6IHNwYWNpbmcuYm90dG9tXG4gIH0sIHtcbiAgICB4OiBzcGFjaW5nLnJpZ2h0LFxuICAgIHk6IHNwYWNpbmcuYm90dG9tXG4gIH1dO1xufTtcblxudmFyIHNjcm9sbCA9IGZ1bmN0aW9uIHNjcm9sbCh0YXJnZXQsIGZyYW1lKSB7XG4gIGlmICghZnJhbWUpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldEJ5UG9zaXRpb24odGFyZ2V0LCBmcmFtZS5zY3JvbGwuZGlmZi5kaXNwbGFjZW1lbnQpO1xufTtcblxudmFyIGluY3JlYXNlID0gZnVuY3Rpb24gaW5jcmVhc2UodGFyZ2V0LCBheGlzLCB3aXRoUGxhY2Vob2xkZXIpIHtcbiAgaWYgKHdpdGhQbGFjZWhvbGRlciAmJiB3aXRoUGxhY2Vob2xkZXIuaW5jcmVhc2VkQnkpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0YXJnZXQsIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW2F4aXMuZW5kXSA9IHRhcmdldFtheGlzLmVuZF0gKyB3aXRoUGxhY2Vob2xkZXIuaW5jcmVhc2VkQnlbYXhpcy5saW5lXSwgX2V4dGVuZHMyKSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIGNsaXAgPSBmdW5jdGlvbiBjbGlwKHRhcmdldCwgZnJhbWUpIHtcbiAgaWYgKGZyYW1lICYmIGZyYW1lLnNob3VsZENsaXBTdWJqZWN0KSB7XG4gICAgcmV0dXJuIGV4ZWN1dGVDbGlwKGZyYW1lLnBhZ2VNYXJnaW5Cb3gsIHRhcmdldCk7XG4gIH1cblxuICByZXR1cm4gZ2V0UmVjdCh0YXJnZXQpO1xufTtcblxudmFyIGdldFN1YmplY3QgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2UgPSBfcmVmLnBhZ2UsXG4gICAgICB3aXRoUGxhY2Vob2xkZXIgPSBfcmVmLndpdGhQbGFjZWhvbGRlcixcbiAgICAgIGF4aXMgPSBfcmVmLmF4aXMsXG4gICAgICBmcmFtZSA9IF9yZWYuZnJhbWU7XG4gIHZhciBzY3JvbGxlZCA9IHNjcm9sbChwYWdlLm1hcmdpbkJveCwgZnJhbWUpO1xuICB2YXIgaW5jcmVhc2VkID0gaW5jcmVhc2Uoc2Nyb2xsZWQsIGF4aXMsIHdpdGhQbGFjZWhvbGRlcik7XG4gIHZhciBjbGlwcGVkID0gY2xpcChpbmNyZWFzZWQsIGZyYW1lKTtcbiAgcmV0dXJuIHtcbiAgICBwYWdlOiBwYWdlLFxuICAgIHdpdGhQbGFjZWhvbGRlcjogd2l0aFBsYWNlaG9sZGVyLFxuICAgIGFjdGl2ZTogY2xpcHBlZFxuICB9O1xufSk7XG5cbnZhciBzY3JvbGxEcm9wcGFibGUgPSAoZnVuY3Rpb24gKGRyb3BwYWJsZSwgbmV3U2Nyb2xsKSB7XG4gICFkcm9wcGFibGUuZnJhbWUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHNjcm9sbGFibGUgPSBkcm9wcGFibGUuZnJhbWU7XG4gIHZhciBzY3JvbGxEaWZmID0gc3VidHJhY3QobmV3U2Nyb2xsLCBzY3JvbGxhYmxlLnNjcm9sbC5pbml0aWFsKTtcbiAgdmFyIHNjcm9sbERpc3BsYWNlbWVudCA9IG5lZ2F0ZShzY3JvbGxEaWZmKTtcblxuICB2YXIgZnJhbWUgPSBfZXh0ZW5kcyh7fSwgc2Nyb2xsYWJsZSwge1xuICAgIHNjcm9sbDoge1xuICAgICAgaW5pdGlhbDogc2Nyb2xsYWJsZS5zY3JvbGwuaW5pdGlhbCxcbiAgICAgIGN1cnJlbnQ6IG5ld1Njcm9sbCxcbiAgICAgIGRpZmY6IHtcbiAgICAgICAgdmFsdWU6IHNjcm9sbERpZmYsXG4gICAgICAgIGRpc3BsYWNlbWVudDogc2Nyb2xsRGlzcGxhY2VtZW50XG4gICAgICB9LFxuICAgICAgbWF4OiBzY3JvbGxhYmxlLnNjcm9sbC5tYXhcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IGRyb3BwYWJsZS5zdWJqZWN0LndpdGhQbGFjZWhvbGRlcixcbiAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICBmcmFtZTogZnJhbWVcbiAgfSk7XG5cbiAgdmFyIHJlc3VsdCA9IF9leHRlbmRzKHt9LCBkcm9wcGFibGUsIHtcbiAgICBmcmFtZTogZnJhbWUsXG4gICAgc3ViamVjdDogc3ViamVjdFxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciByZWNvcmRzID0ge307XG52YXIgaXNFbmFibGVkID0gZmFsc2U7XG5cbnZhciBpc1RpbWluZ3NFbmFibGVkID0gZnVuY3Rpb24gaXNUaW1pbmdzRW5hYmxlZCgpIHtcbiAgcmV0dXJuIGlzRW5hYmxlZDtcbn07XG52YXIgc3RhcnQgPSBmdW5jdGlvbiBzdGFydChrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIWlzVGltaW5nc0VuYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICByZWNvcmRzW2tleV0gPSBub3c7XG4gIH1cbn07XG52YXIgZmluaXNoID0gZnVuY3Rpb24gZmluaXNoKGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghaXNUaW1pbmdzRW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHZhciBwcmV2aW91cyA9IHJlY29yZHNba2V5XTtcblxuICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgIGNvbnNvbGUud2FybignY2Fubm90IGZpbmlzaCB0aW1pbmcgYXMgbm8gcHJldmlvdXMgdGltZSBmb3VuZCcsIGtleSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IG5vdyAtIHByZXZpb3VzO1xuICAgIHZhciByb3VuZGVkID0gcmVzdWx0LnRvRml4ZWQoMik7XG5cbiAgICB2YXIgc3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocmVzdWx0IDwgMTIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0ZXh0Q29sb3I6ICdncmVlbicsXG4gICAgICAgICAgc3ltYm9sOiAn4pyFJ1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0IDwgNDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0ZXh0Q29sb3I6ICdvcmFuZ2UnLFxuICAgICAgICAgIHN5bWJvbDogJ+KaoO+4jydcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dENvbG9yOiAncmVkJyxcbiAgICAgICAgc3ltYm9sOiAn4p2MJ1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICBjb25zb2xlLmxvZyhzdHlsZS5zeW1ib2wgKyBcIiAlY1RpbWluZyAlY1wiICsgcm91bmRlZCArIFwiICVjbXMgJWNcIiArIGtleSwgJ2NvbG9yOiBibHVlOyBmb250LXdlaWdodDogYm9sZDsnLCBcImNvbG9yOiBcIiArIHN0eWxlLnRleHRDb2xvciArIFwiOyBmb250LXNpemU6IDEuMWVtO1wiLCAnY29sb3I6IGdyZXk7JywgJ2NvbG9yOiBwdXJwbGU7IGZvbnQtd2VpZ2h0OiBib2xkOycpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB2YWx1ZXMobWFwKSB7XG4gIHJldHVybiBfT2JqZWN0JHZhbHVlcyhtYXApO1xufVxuZnVuY3Rpb24gZmluZEluZGV4KGxpc3QsIHByZWRpY2F0ZSkge1xuICBpZiAobGlzdC5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdC5maW5kSW5kZXgocHJlZGljYXRlKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChwcmVkaWNhdGUobGlzdFtpXSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIGZpbmQobGlzdCwgcHJlZGljYXRlKSB7XG4gIGlmIChsaXN0LmZpbmQpIHtcbiAgICByZXR1cm4gbGlzdC5maW5kKHByZWRpY2F0ZSk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBmaW5kSW5kZXgobGlzdCwgcHJlZGljYXRlKTtcblxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgcmV0dXJuIGxpc3RbaW5kZXhdO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxudmFyIHRvRHJvcHBhYmxlTWFwID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlcykge1xuICByZXR1cm4gZHJvcHBhYmxlcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgcHJldmlvdXNbY3VycmVudC5kZXNjcmlwdG9yLmlkXSA9IGN1cnJlbnQ7XG4gICAgcmV0dXJuIHByZXZpb3VzO1xuICB9LCB7fSk7XG59KTtcbnZhciB0b0RyYWdnYWJsZU1hcCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyYWdnYWJsZXMpIHtcbiAgcmV0dXJuIGRyYWdnYWJsZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgY3VycmVudCkge1xuICAgIHByZXZpb3VzW2N1cnJlbnQuZGVzY3JpcHRvci5pZF0gPSBjdXJyZW50O1xuICAgIHJldHVybiBwcmV2aW91cztcbiAgfSwge30pO1xufSk7XG52YXIgdG9Ecm9wcGFibGVMaXN0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlcykge1xuICByZXR1cm4gdmFsdWVzKGRyb3BwYWJsZXMpO1xufSk7XG52YXIgdG9EcmFnZ2FibGVMaXN0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJhZ2dhYmxlcykge1xuICByZXR1cm4gdmFsdWVzKGRyYWdnYWJsZXMpO1xufSk7XG5cbnZhciBpc1dpdGhpbiA9IChmdW5jdGlvbiAobG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGxvd2VyQm91bmQgPD0gdmFsdWUgJiYgdmFsdWUgPD0gdXBwZXJCb3VuZDtcbiAgfTtcbn0pO1xuXG52YXIgaXNQb3NpdGlvbkluRnJhbWUgPSAoZnVuY3Rpb24gKGZyYW1lKSB7XG4gIHZhciBpc1dpdGhpblZlcnRpY2FsID0gaXNXaXRoaW4oZnJhbWUudG9wLCBmcmFtZS5ib3R0b20pO1xuICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICByZXR1cm4gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgcmV0dXJuIGlzV2l0aGluVmVydGljYWwocG9pbnQueSkgJiYgaXNXaXRoaW5WZXJ0aWNhbChwb2ludC55KSAmJiBpc1dpdGhpbkhvcml6b250YWwocG9pbnQueCkgJiYgaXNXaXRoaW5Ib3Jpem9udGFsKHBvaW50LngpO1xuICB9O1xufSk7XG5cbnZhciBnZXREcm9wcGFibGVPdmVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciB0YXJnZXQgPSBfcmVmLnRhcmdldCxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmLmRyb3BwYWJsZXM7XG4gIHZhciBtYXliZSA9IGZpbmQodG9Ecm9wcGFibGVMaXN0KGRyb3BwYWJsZXMpLCBmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgaWYgKCFkcm9wcGFibGUuaXNFbmFibGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGFjdGl2ZSA9IGRyb3BwYWJsZS5zdWJqZWN0LmFjdGl2ZTtcblxuICAgIGlmICghYWN0aXZlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzUG9zaXRpb25JbkZyYW1lKGFjdGl2ZSkodGFyZ2V0KTtcbiAgfSk7XG4gIHJldHVybiBtYXliZSA/IG1heWJlLmRlc2NyaXB0b3IuaWQgOiBudWxsO1xufSk7XG5cbnZhciBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJvcHBhYmxlSWQsIGRyYWdnYWJsZXMpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRHJhZ2dhYmxlTGlzdChkcmFnZ2FibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGRyYWdnYWJsZSkge1xuICAgIHJldHVybiBkcm9wcGFibGVJZCA9PT0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQ7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS5kZXNjcmlwdG9yLmluZGV4IC0gYi5kZXNjcmlwdG9yLmluZGV4O1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG52YXIgaXNQYXJ0aWFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lID0gKGZ1bmN0aW9uIChmcmFtZSkge1xuICB2YXIgaXNXaXRoaW5WZXJ0aWNhbCA9IGlzV2l0aGluKGZyYW1lLnRvcCwgZnJhbWUuYm90dG9tKTtcbiAgdmFyIGlzV2l0aGluSG9yaXpvbnRhbCA9IGlzV2l0aGluKGZyYW1lLmxlZnQsIGZyYW1lLnJpZ2h0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdWJqZWN0KSB7XG4gICAgdmFyIGlzQ29udGFpbmVkID0gaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LnRvcCkgJiYgaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LmJvdHRvbSkgJiYgaXNXaXRoaW5Ib3Jpem9udGFsKHN1YmplY3QubGVmdCkgJiYgaXNXaXRoaW5Ib3Jpem9udGFsKHN1YmplY3QucmlnaHQpO1xuXG4gICAgaWYgKGlzQ29udGFpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgaXNQYXJ0aWFsbHlWaXNpYmxlVmVydGljYWxseSA9IGlzV2l0aGluVmVydGljYWwoc3ViamVjdC50b3ApIHx8IGlzV2l0aGluVmVydGljYWwoc3ViamVjdC5ib3R0b20pO1xuICAgIHZhciBpc1BhcnRpYWxseVZpc2libGVIb3Jpem9udGFsbHkgPSBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5sZWZ0KSB8fCBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5yaWdodCk7XG4gICAgdmFyIGlzUGFydGlhbGx5Q29udGFpbmVkID0gaXNQYXJ0aWFsbHlWaXNpYmxlVmVydGljYWxseSAmJiBpc1BhcnRpYWxseVZpc2libGVIb3Jpem9udGFsbHk7XG5cbiAgICBpZiAoaXNQYXJ0aWFsbHlDb250YWluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpc0JpZ2dlclZlcnRpY2FsbHkgPSBzdWJqZWN0LnRvcCA8IGZyYW1lLnRvcCAmJiBzdWJqZWN0LmJvdHRvbSA+IGZyYW1lLmJvdHRvbTtcbiAgICB2YXIgaXNCaWdnZXJIb3Jpem9udGFsbHkgPSBzdWJqZWN0LmxlZnQgPCBmcmFtZS5sZWZ0ICYmIHN1YmplY3QucmlnaHQgPiBmcmFtZS5yaWdodDtcbiAgICB2YXIgaXNUYXJnZXRCaWdnZXJUaGFuRnJhbWUgPSBpc0JpZ2dlclZlcnRpY2FsbHkgJiYgaXNCaWdnZXJIb3Jpem9udGFsbHk7XG5cbiAgICBpZiAoaXNUYXJnZXRCaWdnZXJUaGFuRnJhbWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpc1RhcmdldEJpZ2dlck9uT25lQXhpcyA9IGlzQmlnZ2VyVmVydGljYWxseSAmJiBpc1BhcnRpYWxseVZpc2libGVIb3Jpem9udGFsbHkgfHwgaXNCaWdnZXJIb3Jpem9udGFsbHkgJiYgaXNQYXJ0aWFsbHlWaXNpYmxlVmVydGljYWxseTtcbiAgICByZXR1cm4gaXNUYXJnZXRCaWdnZXJPbk9uZUF4aXM7XG4gIH07XG59KTtcblxudmFyIGlzVG90YWxseVZpc2libGVUaHJvdWdoRnJhbWUgPSAoZnVuY3Rpb24gKGZyYW1lKSB7XG4gIHZhciBpc1dpdGhpblZlcnRpY2FsID0gaXNXaXRoaW4oZnJhbWUudG9wLCBmcmFtZS5ib3R0b20pO1xuICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN1YmplY3QpIHtcbiAgICB2YXIgaXNDb250YWluZWQgPSBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QudG9wKSAmJiBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QuYm90dG9tKSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5sZWZ0KSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5yaWdodCk7XG4gICAgcmV0dXJuIGlzQ29udGFpbmVkO1xuICB9O1xufSk7XG5cbnZhciB2ZXJ0aWNhbCA9IHtcbiAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICBsaW5lOiAneScsXG4gIGNyb3NzQXhpc0xpbmU6ICd4JyxcbiAgc3RhcnQ6ICd0b3AnLFxuICBlbmQ6ICdib3R0b20nLFxuICBzaXplOiAnaGVpZ2h0JyxcbiAgY3Jvc3NBeGlzU3RhcnQ6ICdsZWZ0JyxcbiAgY3Jvc3NBeGlzRW5kOiAncmlnaHQnLFxuICBjcm9zc0F4aXNTaXplOiAnd2lkdGgnXG59O1xudmFyIGhvcml6b250YWwgPSB7XG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBsaW5lOiAneCcsXG4gIGNyb3NzQXhpc0xpbmU6ICd5JyxcbiAgc3RhcnQ6ICdsZWZ0JyxcbiAgZW5kOiAncmlnaHQnLFxuICBzaXplOiAnd2lkdGgnLFxuICBjcm9zc0F4aXNTdGFydDogJ3RvcCcsXG4gIGNyb3NzQXhpc0VuZDogJ2JvdHRvbScsXG4gIGNyb3NzQXhpc1NpemU6ICdoZWlnaHQnXG59O1xuXG52YXIgaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZU9uQXhpcyA9IChmdW5jdGlvbiAoYXhpcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgdmFyIGlzV2l0aGluVmVydGljYWwgPSBpc1dpdGhpbihmcmFtZS50b3AsIGZyYW1lLmJvdHRvbSk7XG4gICAgdmFyIGlzV2l0aGluSG9yaXpvbnRhbCA9IGlzV2l0aGluKGZyYW1lLmxlZnQsIGZyYW1lLnJpZ2h0KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YmplY3QpIHtcbiAgICAgIGlmIChheGlzID09PSB2ZXJ0aWNhbCkge1xuICAgICAgICByZXR1cm4gaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LnRvcCkgJiYgaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LmJvdHRvbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5sZWZ0KSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5yaWdodCk7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgZ2V0RHJvcHBhYmxlRGlzcGxhY2VkID0gZnVuY3Rpb24gZ2V0RHJvcHBhYmxlRGlzcGxhY2VkKHRhcmdldCwgZGVzdGluYXRpb24pIHtcbiAgdmFyIGRpc3BsYWNlbWVudCA9IGRlc3RpbmF0aW9uLmZyYW1lID8gZGVzdGluYXRpb24uZnJhbWUuc2Nyb2xsLmRpZmYuZGlzcGxhY2VtZW50IDogb3JpZ2luO1xuICByZXR1cm4gb2Zmc2V0QnlQb3NpdGlvbih0YXJnZXQsIGRpc3BsYWNlbWVudCk7XG59O1xuXG52YXIgaXNWaXNpYmxlSW5Ecm9wcGFibGUgPSBmdW5jdGlvbiBpc1Zpc2libGVJbkRyb3BwYWJsZSh0YXJnZXQsIGRlc3RpbmF0aW9uLCBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbikge1xuICBpZiAoIWRlc3RpbmF0aW9uLnN1YmplY3QuYWN0aXZlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKGRlc3RpbmF0aW9uLnN1YmplY3QuYWN0aXZlKSh0YXJnZXQpO1xufTtcblxudmFyIGlzVmlzaWJsZUluVmlld3BvcnQgPSBmdW5jdGlvbiBpc1Zpc2libGVJblZpZXdwb3J0KHRhcmdldCwgdmlld3BvcnQsIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKSB7XG4gIHJldHVybiBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbih2aWV3cG9ydCkodGFyZ2V0KTtcbn07XG5cbnZhciBpc1Zpc2libGUgPSBmdW5jdGlvbiBpc1Zpc2libGUoX3JlZikge1xuICB2YXIgdG9CZURpc3BsYWNlZCA9IF9yZWYudGFyZ2V0LFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCA9IF9yZWYud2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCxcbiAgICAgIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuID0gX3JlZi5pc1Zpc2libGVUaHJvdWdoRnJhbWVGbjtcbiAgdmFyIGRpc3BsYWNlZFRhcmdldCA9IHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQgPyBnZXREcm9wcGFibGVEaXNwbGFjZWQodG9CZURpc3BsYWNlZCwgZGVzdGluYXRpb24pIDogdG9CZURpc3BsYWNlZDtcbiAgcmV0dXJuIGlzVmlzaWJsZUluRHJvcHBhYmxlKGRpc3BsYWNlZFRhcmdldCwgZGVzdGluYXRpb24sIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKSAmJiBpc1Zpc2libGVJblZpZXdwb3J0KGRpc3BsYWNlZFRhcmdldCwgdmlld3BvcnQsIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKTtcbn07XG5cbnZhciBpc1BhcnRpYWxseVZpc2libGUgPSBmdW5jdGlvbiBpc1BhcnRpYWxseVZpc2libGUoYXJncykge1xuICByZXR1cm4gaXNWaXNpYmxlKF9leHRlbmRzKHt9LCBhcmdzLCB7XG4gICAgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm46IGlzUGFydGlhbGx5VmlzaWJsZVRocm91Z2hGcmFtZVxuICB9KSk7XG59O1xudmFyIGlzVG90YWxseVZpc2libGUgPSBmdW5jdGlvbiBpc1RvdGFsbHlWaXNpYmxlKGFyZ3MpIHtcbiAgcmV0dXJuIGlzVmlzaWJsZShfZXh0ZW5kcyh7fSwgYXJncywge1xuICAgIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuOiBpc1RvdGFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lXG4gIH0pKTtcbn07XG52YXIgaXNUb3RhbGx5VmlzaWJsZU9uQXhpcyA9IGZ1bmN0aW9uIGlzVG90YWxseVZpc2libGVPbkF4aXMoYXJncykge1xuICByZXR1cm4gaXNWaXNpYmxlKF9leHRlbmRzKHt9LCBhcmdzLCB7XG4gICAgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm46IGlzVG90YWxseVZpc2libGVUaHJvdWdoRnJhbWVPbkF4aXMoYXJncy5kZXN0aW5hdGlvbi5heGlzKVxuICB9KSk7XG59O1xuXG52YXIgZ2V0U2hvdWxkQW5pbWF0ZSA9IGZ1bmN0aW9uIGdldFNob3VsZEFuaW1hdGUoaXNWaXNpYmxlLCBwcmV2aW91cykge1xuICBpZiAoIWlzVmlzaWJsZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghcHJldmlvdXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBwcmV2aW91cy5zaG91bGRBbmltYXRlO1xufTtcblxudmFyIGdldERpc3BsYWNlbWVudCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQ7XG4gIHZhciBpZCA9IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkO1xuICB2YXIgbWFwID0gcHJldmlvdXNJbXBhY3QubW92ZW1lbnQubWFwO1xuICB2YXIgaXNWaXNpYmxlID0gaXNQYXJ0aWFsbHlWaXNpYmxlKHtcbiAgICB0YXJnZXQ6IGRyYWdnYWJsZS5wYWdlLm1hcmdpbkJveCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IHRydWVcbiAgfSk7XG4gIHZhciBzaG91bGRBbmltYXRlID0gZ2V0U2hvdWxkQW5pbWF0ZShpc1Zpc2libGUsIG1hcFtpZF0pO1xuICB2YXIgZGlzcGxhY2VtZW50ID0ge1xuICAgIGRyYWdnYWJsZUlkOiBpZCxcbiAgICBpc1Zpc2libGU6IGlzVmlzaWJsZSxcbiAgICBzaG91bGRBbmltYXRlOiBzaG91bGRBbmltYXRlXG4gIH07XG4gIHJldHVybiBkaXNwbGFjZW1lbnQ7XG59KTtcblxudmFyIGdldERpc3BsYWNlbWVudE1hcCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRpc3BsYWNlZCkge1xuICByZXR1cm4gZGlzcGxhY2VkLnJlZHVjZShmdW5jdGlvbiAobWFwLCBkaXNwbGFjZW1lbnQpIHtcbiAgICBtYXBbZGlzcGxhY2VtZW50LmRyYWdnYWJsZUlkXSA9IGRpc3BsYWNlbWVudDtcbiAgICByZXR1cm4gbWFwO1xuICB9LCB7fSk7XG59KTtcblxudmFyIGlzVXNlck1vdmluZ0ZvcndhcmQgPSAoZnVuY3Rpb24gKGF4aXMsIGRpcmVjdGlvbikge1xuICByZXR1cm4gYXhpcyA9PT0gdmVydGljYWwgPyBkaXJlY3Rpb24udmVydGljYWwgPT09ICdkb3duJyA6IGRpcmVjdGlvbi5ob3Jpem9udGFsID09PSAncmlnaHQnO1xufSk7XG5cbnZhciBnZXREaXNwbGFjZWRCeSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGF4aXMsIGRpc3BsYWNlQnksIHdpbGxEaXNwbGFjZUZvcndhcmQpIHtcbiAgdmFyIG1vZGlmaWVyID0gd2lsbERpc3BsYWNlRm9yd2FyZCA/IDEgOiAtMTtcbiAgdmFyIGRpc3BsYWNlbWVudCA9IGRpc3BsYWNlQnlbYXhpcy5saW5lXSAqIG1vZGlmaWVyO1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiBkaXNwbGFjZW1lbnQsXG4gICAgcG9pbnQ6IHBhdGNoKGF4aXMubGluZSwgZGlzcGxhY2VtZW50KVxuICB9O1xufSk7XG5cbnZhciBnZXROZXdJbmRleCA9IGZ1bmN0aW9uIGdldE5ld0luZGV4KHN0YXJ0SW5kZXgsIGFtb3VudE9mRGlzcGxhY2VkLCBpc0luRnJvbnRPZlN0YXJ0KSB7XG4gIGlmICghYW1vdW50T2ZEaXNwbGFjZWQpIHtcbiAgICByZXR1cm4gc3RhcnRJbmRleDtcbiAgfVxuXG4gIGlmIChpc0luRnJvbnRPZlN0YXJ0KSB7XG4gICAgcmV0dXJuIHN0YXJ0SW5kZXggKyBhbW91bnRPZkRpc3BsYWNlZDtcbiAgfVxuXG4gIHJldHVybiBzdGFydEluZGV4IC0gYW1vdW50T2ZEaXNwbGFjZWQ7XG59O1xuXG52YXIgaW5Ib21lTGlzdCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY3VycmVudENlbnRlciA9IF9yZWYucGFnZUJvcmRlckJveENlbnRlcldpdGhEcm9wcGFibGVTY3JvbGxDaGFuZ2UsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGhvbWUgPSBfcmVmLmhvbWUsXG4gICAgICBpbnNpZGVIb21lID0gX3JlZi5pbnNpZGVIb21lLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgY3VycmVudFVzZXJEaXJlY3Rpb24gPSBfcmVmLnVzZXJEaXJlY3Rpb247XG4gIHZhciBheGlzID0gaG9tZS5heGlzO1xuICB2YXIgb3JpZ2luYWxDZW50ZXIgPSBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyO1xuICB2YXIgdGFyZ2V0Q2VudGVyID0gY3VycmVudENlbnRlcltheGlzLmxpbmVdO1xuICB2YXIgaXNJbkZyb250T2ZTdGFydCA9IHRhcmdldENlbnRlciA+IG9yaWdpbmFsQ2VudGVyW2F4aXMubGluZV07XG4gIHZhciB3aWxsRGlzcGxhY2VGb3J3YXJkID0gIWlzSW5Gcm9udE9mU3RhcnQ7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBpc1VzZXJNb3ZpbmdGb3J3YXJkKGhvbWUuYXhpcywgY3VycmVudFVzZXJEaXJlY3Rpb24pO1xuICB2YXIgaXNNb3ZpbmdUb3dhcmRTdGFydCA9IGlzSW5Gcm9udE9mU3RhcnQgPyAhaXNNb3ZpbmdGb3J3YXJkIDogaXNNb3ZpbmdGb3J3YXJkO1xuICB2YXIgZGlzcGxhY2VkQnkgPSBnZXREaXNwbGFjZWRCeShob21lLmF4aXMsIGRyYWdnYWJsZS5kaXNwbGFjZUJ5LCB3aWxsRGlzcGxhY2VGb3J3YXJkKTtcbiAgdmFyIGRpc3BsYWNlbWVudCA9IGRpc3BsYWNlZEJ5LnZhbHVlO1xuICB2YXIgZGlzcGxhY2VkID0gaW5zaWRlSG9tZS5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkID09PSBkcmFnZ2FibGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgYm9yZGVyQm94ID0gY2hpbGQucGFnZS5ib3JkZXJCb3g7XG4gICAgdmFyIHN0YXJ0ID0gYm9yZGVyQm94W2F4aXMuc3RhcnRdO1xuICAgIHZhciBlbmQgPSBib3JkZXJCb3hbYXhpcy5lbmRdO1xuXG4gICAgaWYgKGlzSW5Gcm9udE9mU3RhcnQpIHtcbiAgICAgIGlmIChjaGlsZC5kZXNjcmlwdG9yLmluZGV4IDwgZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNNb3ZpbmdUb3dhcmRTdGFydCkge1xuICAgICAgICB2YXIgZGlzcGxhY2VkRW5kRWRnZSA9IGVuZCArIGRpc3BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIHRhcmdldENlbnRlciA+IGRpc3BsYWNlZEVuZEVkZ2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRDZW50ZXIgPj0gc3RhcnQ7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkLmRlc2NyaXB0b3IuaW5kZXggPiBkcmFnZ2FibGUuZGVzY3JpcHRvci5pbmRleCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpc01vdmluZ1Rvd2FyZFN0YXJ0KSB7XG4gICAgICB2YXIgZGlzcGxhY2VkU3RhcnRFZGdlID0gc3RhcnQgKyBkaXNwbGFjZW1lbnQ7XG4gICAgICByZXR1cm4gdGFyZ2V0Q2VudGVyIDwgZGlzcGxhY2VkU3RhcnRFZGdlO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDZW50ZXIgPD0gZW5kO1xuICB9KS5tYXAoZnVuY3Rpb24gKGRpbWVuc2lvbikge1xuICAgIHJldHVybiBnZXREaXNwbGFjZW1lbnQoe1xuICAgICAgZHJhZ2dhYmxlOiBkaW1lbnNpb24sXG4gICAgICBkZXN0aW5hdGlvbjogaG9tZSxcbiAgICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZVxuICAgIH0pO1xuICB9KTtcbiAgdmFyIG9yZGVyZWQgPSBpc0luRnJvbnRPZlN0YXJ0ID8gZGlzcGxhY2VkLnJldmVyc2UoKSA6IGRpc3BsYWNlZDtcbiAgdmFyIGluZGV4ID0gZ2V0TmV3SW5kZXgoZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaW5kZXgsIG9yZGVyZWQubGVuZ3RoLCBpc0luRnJvbnRPZlN0YXJ0KTtcbiAgdmFyIG5ld01vdmVtZW50ID0ge1xuICAgIGRpc3BsYWNlZDogb3JkZXJlZCxcbiAgICBtYXA6IGdldERpc3BsYWNlbWVudE1hcChvcmRlcmVkKSxcbiAgICB3aWxsRGlzcGxhY2VGb3J3YXJkOiB3aWxsRGlzcGxhY2VGb3J3YXJkLFxuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeVxuICB9O1xuICB2YXIgaW1wYWN0ID0ge1xuICAgIG1vdmVtZW50OiBuZXdNb3ZlbWVudCxcbiAgICBkaXJlY3Rpb246IGF4aXMuZGlyZWN0aW9uLFxuICAgIGRlc3RpbmF0aW9uOiB7XG4gICAgICBkcm9wcGFibGVJZDogaG9tZS5kZXNjcmlwdG9yLmlkLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSxcbiAgICBtZXJnZTogbnVsbFxuICB9O1xuICByZXR1cm4gaW1wYWN0O1xufSk7XG5cbnZhciBpbkZvcmVpZ25MaXN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjdXJyZW50Q2VudGVyID0gX3JlZi5wYWdlQm9yZGVyQm94Q2VudGVyV2l0aERyb3BwYWJsZVNjcm9sbENoYW5nZSxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgdXNlckRpcmVjdGlvbiA9IF9yZWYudXNlckRpcmVjdGlvbjtcbiAgdmFyIGF4aXMgPSBkZXN0aW5hdGlvbi5heGlzO1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gaXNVc2VyTW92aW5nRm9yd2FyZChkZXN0aW5hdGlvbi5heGlzLCB1c2VyRGlyZWN0aW9uKTtcbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoZGVzdGluYXRpb24uYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnksIHRydWUpO1xuICB2YXIgdGFyZ2V0Q2VudGVyID0gY3VycmVudENlbnRlcltheGlzLmxpbmVdO1xuICB2YXIgZGlzcGxhY2VtZW50ID0gZGlzcGxhY2VkQnkudmFsdWU7XG4gIHZhciBkaXNwbGFjZWQgPSBpbnNpZGVEZXN0aW5hdGlvbi5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIGJvcmRlckJveCA9IGNoaWxkLnBhZ2UuYm9yZGVyQm94O1xuICAgIHZhciBzdGFydCA9IGJvcmRlckJveFtheGlzLnN0YXJ0XTtcbiAgICB2YXIgZW5kID0gYm9yZGVyQm94W2F4aXMuZW5kXTtcblxuICAgIGlmIChpc01vdmluZ0ZvcndhcmQpIHtcbiAgICAgIHJldHVybiB0YXJnZXRDZW50ZXIgPD0gc3RhcnQgKyBkaXNwbGFjZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENlbnRlciA8IGVuZDtcbiAgfSkubWFwKGZ1bmN0aW9uIChkaW1lbnNpb24pIHtcbiAgICByZXR1cm4gZ2V0RGlzcGxhY2VtZW50KHtcbiAgICAgIGRyYWdnYWJsZTogZGltZW5zaW9uLFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lXG4gICAgfSk7XG4gIH0pO1xuICB2YXIgbmV3SW5kZXggPSBpbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGggLSBkaXNwbGFjZWQubGVuZ3RoO1xuICB2YXIgbW92ZW1lbnQgPSB7XG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGRpc3BsYWNlZDogZGlzcGxhY2VkLFxuICAgIG1hcDogZ2V0RGlzcGxhY2VtZW50TWFwKGRpc3BsYWNlZCksXG4gICAgd2lsbERpc3BsYWNlRm9yd2FyZDogdHJ1ZVxuICB9O1xuICB2YXIgaW1wYWN0ID0ge1xuICAgIG1vdmVtZW50OiBtb3ZlbWVudCxcbiAgICBkaXJlY3Rpb246IGF4aXMuZGlyZWN0aW9uLFxuICAgIGRlc3RpbmF0aW9uOiB7XG4gICAgICBkcm9wcGFibGVJZDogZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCxcbiAgICAgIGluZGV4OiBuZXdJbmRleFxuICAgIH0sXG4gICAgbWVyZ2U6IG51bGxcbiAgfTtcbiAgcmV0dXJuIGltcGFjdDtcbn0pO1xuXG52YXIgbm9EaXNwbGFjZWRCeSA9IHtcbiAgcG9pbnQ6IG9yaWdpbixcbiAgdmFsdWU6IDBcbn07XG52YXIgbm9Nb3ZlbWVudCA9IHtcbiAgZGlzcGxhY2VkOiBbXSxcbiAgbWFwOiB7fSxcbiAgZGlzcGxhY2VkQnk6IG5vRGlzcGxhY2VkQnksXG4gIHdpbGxEaXNwbGFjZUZvcndhcmQ6IGZhbHNlXG59O1xudmFyIG5vSW1wYWN0ID0ge1xuICBtb3ZlbWVudDogbm9Nb3ZlbWVudCxcbiAgZGlyZWN0aW9uOiBudWxsLFxuICBkZXN0aW5hdGlvbjogbnVsbCxcbiAgbWVyZ2U6IG51bGxcbn07XG5cbnZhciB3aXRoRHJvcHBhYmxlU2Nyb2xsID0gKGZ1bmN0aW9uIChkcm9wcGFibGUsIHBvaW50KSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgcmV0dXJuIGFkZChwb2ludCwgZnJhbWUuc2Nyb2xsLmRpZmYudmFsdWUpO1xufSk7XG5cbnZhciBpc0hvbWVPZiA9IChmdW5jdGlvbiAoZHJhZ2dhYmxlLCBkZXN0aW5hdGlvbikge1xuICByZXR1cm4gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQgPT09IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQ7XG59KTtcblxudmFyIGdldFdoZW5FbnRlcmVkID0gZnVuY3Rpb24gZ2V0V2hlbkVudGVyZWQoaWQsIGN1cnJlbnQsIG9sZE1lcmdlKSB7XG4gIGlmICghb2xkTWVyZ2UpIHtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIGlmIChpZCAhPT0gb2xkTWVyZ2UuY29tYmluZS5kcmFnZ2FibGVJZCkge1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgcmV0dXJuIG9sZE1lcmdlLndoZW5FbnRlcmVkO1xufTtcblxudmFyIGlzQ29tYmluaW5nV2l0aCA9IGZ1bmN0aW9uIGlzQ29tYmluaW5nV2l0aChfcmVmKSB7XG4gIHZhciBpZCA9IF9yZWYuaWQsXG4gICAgICBjdXJyZW50Q2VudGVyID0gX3JlZi5jdXJyZW50Q2VudGVyLFxuICAgICAgYXhpcyA9IF9yZWYuYXhpcyxcbiAgICAgIGJvcmRlckJveCA9IF9yZWYuYm9yZGVyQm94LFxuICAgICAgZGlzcGxhY2VkQnkgPSBfcmVmLmRpc3BsYWNlZEJ5LFxuICAgICAgY3VycmVudFVzZXJEaXJlY3Rpb24gPSBfcmVmLmN1cnJlbnRVc2VyRGlyZWN0aW9uLFxuICAgICAgb2xkTWVyZ2UgPSBfcmVmLm9sZE1lcmdlO1xuICB2YXIgc3RhcnQgPSBib3JkZXJCb3hbYXhpcy5zdGFydF0gKyBkaXNwbGFjZWRCeTtcbiAgdmFyIGVuZCA9IGJvcmRlckJveFtheGlzLmVuZF0gKyBkaXNwbGFjZWRCeTtcbiAgdmFyIHNpemUgPSBib3JkZXJCb3hbYXhpcy5zaXplXTtcbiAgdmFyIHR3b1RoaXJkc09mU2l6ZSA9IHNpemUgKiAwLjY2NjtcbiAgdmFyIHdoZW5FbnRlcmVkID0gZ2V0V2hlbkVudGVyZWQoaWQsIGN1cnJlbnRVc2VyRGlyZWN0aW9uLCBvbGRNZXJnZSk7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBpc1VzZXJNb3ZpbmdGb3J3YXJkKGF4aXMsIHdoZW5FbnRlcmVkKTtcbiAgdmFyIHRhcmdldENlbnRlciA9IGN1cnJlbnRDZW50ZXJbYXhpcy5saW5lXTtcblxuICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgcmV0dXJuIGlzV2l0aGluKHN0YXJ0LCBzdGFydCArIHR3b1RoaXJkc09mU2l6ZSkodGFyZ2V0Q2VudGVyKTtcbiAgfVxuXG4gIHJldHVybiBpc1dpdGhpbihlbmQgLSB0d29UaGlyZHNPZlNpemUsIGVuZCkodGFyZ2V0Q2VudGVyKTtcbn07XG5cbnZhciBnZXRDb21iaW5lSW1wYWN0ID0gKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgY3VycmVudENlbnRlciA9IF9yZWYyLnBhZ2VCb3JkZXJCb3hDZW50ZXJXaXRoRHJvcHBhYmxlU2Nyb2xsQ2hhbmdlLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmMi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYyLmRyYWdnYWJsZSxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZjIuZGVzdGluYXRpb24sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYyLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgdXNlckRpcmVjdGlvbiA9IF9yZWYyLnVzZXJEaXJlY3Rpb247XG5cbiAgaWYgKCFkZXN0aW5hdGlvbi5pc0NvbWJpbmVFbmFibGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYXhpcyA9IGRlc3RpbmF0aW9uLmF4aXM7XG4gIHZhciBtYXAgPSBwcmV2aW91c0ltcGFjdC5tb3ZlbWVudC5tYXA7XG4gIHZhciBjYW5CZURpc3BsYWNlZEJ5ID0gcHJldmlvdXNJbXBhY3QubW92ZW1lbnQuZGlzcGxhY2VkQnkudmFsdWU7XG4gIHZhciBvbGRNZXJnZSA9IHByZXZpb3VzSW1wYWN0Lm1lcmdlO1xuICB2YXIgdGFyZ2V0ID0gZmluZChpbnNpZGVEZXN0aW5hdGlvbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIGlkID0gY2hpbGQuZGVzY3JpcHRvci5pZDtcblxuICAgIGlmIChpZCA9PT0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgaXNEaXNwbGFjZWQgPSBCb29sZWFuKG1hcFtpZF0pO1xuICAgIHZhciBkaXNwbGFjZWRCeSA9IGlzRGlzcGxhY2VkID8gY2FuQmVEaXNwbGFjZWRCeSA6IDA7XG4gICAgcmV0dXJuIGlzQ29tYmluaW5nV2l0aCh7XG4gICAgICBpZDogaWQsXG4gICAgICBjdXJyZW50Q2VudGVyOiBjdXJyZW50Q2VudGVyLFxuICAgICAgYXhpczogYXhpcyxcbiAgICAgIGJvcmRlckJveDogY2hpbGQucGFnZS5ib3JkZXJCb3gsXG4gICAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgICBjdXJyZW50VXNlckRpcmVjdGlvbjogdXNlckRpcmVjdGlvbixcbiAgICAgIG9sZE1lcmdlOiBvbGRNZXJnZVxuICAgIH0pO1xuICB9KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG1lcmdlID0ge1xuICAgIHdoZW5FbnRlcmVkOiBnZXRXaGVuRW50ZXJlZCh0YXJnZXQuZGVzY3JpcHRvci5pZCwgdXNlckRpcmVjdGlvbiwgb2xkTWVyZ2UpLFxuICAgIGNvbWJpbmU6IHtcbiAgICAgIGRyYWdnYWJsZUlkOiB0YXJnZXQuZGVzY3JpcHRvci5pZCxcbiAgICAgIGRyb3BwYWJsZUlkOiBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkXG4gICAgfVxuICB9O1xuXG4gIHZhciB3aXRoTWVyZ2UgPSBfZXh0ZW5kcyh7fSwgcHJldmlvdXNJbXBhY3QsIHtcbiAgICBkZXN0aW5hdGlvbjogbnVsbCxcbiAgICBtZXJnZTogbWVyZ2VcbiAgfSk7XG5cbiAgcmV0dXJuIHdpdGhNZXJnZTtcbn0pO1xuXG52YXIgZ2V0RHJhZ0ltcGFjdCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IF9yZWYucGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmLmRyb3BwYWJsZXMsXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICB1c2VyRGlyZWN0aW9uID0gX3JlZi51c2VyRGlyZWN0aW9uO1xuICB2YXIgZGVzdGluYXRpb25JZCA9IGdldERyb3BwYWJsZU92ZXIoe1xuICAgIHRhcmdldDogcGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkcm9wcGFibGVzOiBkcm9wcGFibGVzXG4gIH0pO1xuXG4gIGlmICghZGVzdGluYXRpb25JZCkge1xuICAgIHJldHVybiBub0ltcGFjdDtcbiAgfVxuXG4gIHZhciBkZXN0aW5hdGlvbiA9IGRyb3BwYWJsZXNbZGVzdGluYXRpb25JZF07XG4gIHZhciBpc1dpdGhpbkhvbWVEcm9wcGFibGUgPSBpc0hvbWVPZihkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKTtcbiAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkLCBkcmFnZ2FibGVzKTtcbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXJXaXRoRHJvcHBhYmxlU2Nyb2xsQ2hhbmdlID0gd2l0aERyb3BwYWJsZVNjcm9sbChkZXN0aW5hdGlvbiwgcGFnZUJvcmRlckJveENlbnRlcik7XG4gIHZhciB3aXRoTWVyZ2UgPSBnZXRDb21iaW5lSW1wYWN0KHtcbiAgICBwYWdlQm9yZGVyQm94Q2VudGVyV2l0aERyb3BwYWJsZVNjcm9sbENoYW5nZTogcGFnZUJvcmRlckJveENlbnRlcldpdGhEcm9wcGFibGVTY3JvbGxDaGFuZ2UsXG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgdXNlckRpcmVjdGlvbjogdXNlckRpcmVjdGlvblxuICB9KTtcblxuICBpZiAod2l0aE1lcmdlKSB7XG4gICAgcmV0dXJuIHdpdGhNZXJnZTtcbiAgfVxuXG4gIHJldHVybiBpc1dpdGhpbkhvbWVEcm9wcGFibGUgPyBpbkhvbWVMaXN0KHtcbiAgICBwYWdlQm9yZGVyQm94Q2VudGVyV2l0aERyb3BwYWJsZVNjcm9sbENoYW5nZTogcGFnZUJvcmRlckJveENlbnRlcldpdGhEcm9wcGFibGVTY3JvbGxDaGFuZ2UsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgaG9tZTogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlSG9tZTogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICB1c2VyRGlyZWN0aW9uOiB1c2VyRGlyZWN0aW9uXG4gIH0pIDogaW5Gb3JlaWduTGlzdCh7XG4gICAgcGFnZUJvcmRlckJveENlbnRlcldpdGhEcm9wcGFibGVTY3JvbGxDaGFuZ2U6IHBhZ2VCb3JkZXJCb3hDZW50ZXJXaXRoRHJvcHBhYmxlU2Nyb2xsQ2hhbmdlLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICB1c2VyRGlyZWN0aW9uOiB1c2VyRGlyZWN0aW9uXG4gIH0pO1xufSk7XG5cbnZhciBnZXREcmFnUG9zaXRpb25zID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBvbGRJbml0aWFsID0gX3JlZi5pbml0aWFsLFxuICAgICAgb2xkQ3VycmVudCA9IF9yZWYuY3VycmVudCxcbiAgICAgIG9sZENsaWVudEJvcmRlckJveENlbnRlciA9IF9yZWYub2xkQ2xpZW50Qm9yZGVyQm94Q2VudGVyLFxuICAgICAgbmV3Q2xpZW50Qm9yZGVyQm94Q2VudGVyID0gX3JlZi5uZXdDbGllbnRCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQ7XG4gIHZhciBzaGlmdCA9IHN1YnRyYWN0KG5ld0NsaWVudEJvcmRlckJveENlbnRlciwgb2xkQ2xpZW50Qm9yZGVyQm94Q2VudGVyKTtcblxuICB2YXIgaW5pdGlhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xpZW50ID0ge1xuICAgICAgc2VsZWN0aW9uOiBhZGQob2xkSW5pdGlhbC5jbGllbnQuc2VsZWN0aW9uLCBzaGlmdCksXG4gICAgICBib3JkZXJCb3hDZW50ZXI6IG5ld0NsaWVudEJvcmRlckJveENlbnRlcixcbiAgICAgIG9mZnNldDogb3JpZ2luXG4gICAgfTtcbiAgICB2YXIgcGFnZSA9IHtcbiAgICAgIHNlbGVjdGlvbjogYWRkKGNsaWVudC5zZWxlY3Rpb24sIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKSxcbiAgICAgIGJvcmRlckJveENlbnRlcjogYWRkKGNsaWVudC5zZWxlY3Rpb24sIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsaWVudDogY2xpZW50LFxuICAgICAgcGFnZTogcGFnZVxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmV2ZXJzZSA9IG5lZ2F0ZShzaGlmdCk7XG4gICAgdmFyIG9mZnNldCQkMSA9IGFkZChvbGRDdXJyZW50LmNsaWVudC5vZmZzZXQsIHJldmVyc2UpO1xuICAgIHZhciBjbGllbnQgPSB7XG4gICAgICBzZWxlY3Rpb246IGFkZChpbml0aWFsLmNsaWVudC5zZWxlY3Rpb24sIG9mZnNldCQkMSksXG4gICAgICBib3JkZXJCb3hDZW50ZXI6IGFkZChpbml0aWFsLmNsaWVudC5ib3JkZXJCb3hDZW50ZXIsIG9mZnNldCQkMSksXG4gICAgICBvZmZzZXQ6IG9mZnNldCQkMVxuICAgIH07XG4gICAgdmFyIHBhZ2UgPSB7XG4gICAgICBzZWxlY3Rpb246IGFkZChjbGllbnQuc2VsZWN0aW9uLCB2aWV3cG9ydC5zY3JvbGwuY3VycmVudCksXG4gICAgICBib3JkZXJCb3hDZW50ZXI6IGFkZChjbGllbnQuYm9yZGVyQm94Q2VudGVyLCB2aWV3cG9ydC5zY3JvbGwuY3VycmVudClcbiAgICB9O1xuICAgICFpc0VxdWFsKG9sZEN1cnJlbnQuY2xpZW50LmJvcmRlckJveENlbnRlciwgY2xpZW50LmJvcmRlckJveENlbnRlcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiXFxuICAgICAgICBJbmNvcnJlY3QgbmV3IGNsaWVudCBjZW50ZXIgcG9zaXRpb24uXFxuICAgICAgICBFeHBlY3RlZCAoXCIgKyBvbGRDdXJyZW50LmNsaWVudC5ib3JkZXJCb3hDZW50ZXIueCArIFwiLCBcIiArIG9sZEN1cnJlbnQuY2xpZW50LmJvcmRlckJveENlbnRlci55ICsgXCIpXFxuICAgICAgICB0byBlcXVhbCAoXCIgKyBjbGllbnQuYm9yZGVyQm94Q2VudGVyLnggKyBcIiwgXCIgKyBjbGllbnQuYm9yZGVyQm94Q2VudGVyLnkgKyBcIilcXG4gICAgICBcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiB7XG4gICAgICBjbGllbnQ6IGNsaWVudCxcbiAgICAgIHBhZ2U6IHBhZ2VcbiAgICB9O1xuICB9KCk7XG5cbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50OiBjdXJyZW50LFxuICAgIGluaXRpYWw6IGluaXRpYWxcbiAgfTtcbn0pO1xuXG52YXIgZ2V0TWF4U2Nyb2xsID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzY3JvbGxIZWlnaHQgPSBfcmVmLnNjcm9sbEhlaWdodCxcbiAgICAgIHNjcm9sbFdpZHRoID0gX3JlZi5zY3JvbGxXaWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0LFxuICAgICAgd2lkdGggPSBfcmVmLndpZHRoO1xuICB2YXIgbWF4U2Nyb2xsID0gc3VidHJhY3Qoe1xuICAgIHg6IHNjcm9sbFdpZHRoLFxuICAgIHk6IHNjcm9sbEhlaWdodFxuICB9LCB7XG4gICAgeDogd2lkdGgsXG4gICAgeTogaGVpZ2h0XG4gIH0pO1xuICB2YXIgYWRqdXN0ZWRNYXhTY3JvbGwgPSB7XG4gICAgeDogTWF0aC5tYXgoMCwgbWF4U2Nyb2xsLngpLFxuICAgIHk6IE1hdGgubWF4KDAsIG1heFNjcm9sbC55KVxuICB9O1xuICByZXR1cm4gYWRqdXN0ZWRNYXhTY3JvbGw7XG59KTtcblxudmFyIGdldERyb3BwYWJsZURpbWVuc2lvbiA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZGVzY3JpcHRvciA9IF9yZWYuZGVzY3JpcHRvcixcbiAgICAgIGlzRW5hYmxlZCA9IF9yZWYuaXNFbmFibGVkLFxuICAgICAgaXNDb21iaW5lRW5hYmxlZCA9IF9yZWYuaXNDb21iaW5lRW5hYmxlZCxcbiAgICAgIGlzRml4ZWRPblBhZ2UgPSBfcmVmLmlzRml4ZWRPblBhZ2UsXG4gICAgICBkaXJlY3Rpb24gPSBfcmVmLmRpcmVjdGlvbixcbiAgICAgIGNsaWVudCA9IF9yZWYuY2xpZW50LFxuICAgICAgcGFnZSA9IF9yZWYucGFnZSxcbiAgICAgIGNsb3Nlc3QkJDEgPSBfcmVmLmNsb3Nlc3Q7XG5cbiAgdmFyIGZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2xvc2VzdCQkMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbFNpemUgPSBjbG9zZXN0JCQxLnNjcm9sbFNpemUsXG4gICAgICAgIGZyYW1lQ2xpZW50ID0gY2xvc2VzdCQkMS5jbGllbnQ7XG4gICAgdmFyIG1heFNjcm9sbCA9IGdldE1heFNjcm9sbCh7XG4gICAgICBzY3JvbGxIZWlnaHQ6IHNjcm9sbFNpemUuc2Nyb2xsSGVpZ2h0LFxuICAgICAgc2Nyb2xsV2lkdGg6IHNjcm9sbFNpemUuc2Nyb2xsV2lkdGgsXG4gICAgICBoZWlnaHQ6IGZyYW1lQ2xpZW50LnBhZGRpbmdCb3guaGVpZ2h0LFxuICAgICAgd2lkdGg6IGZyYW1lQ2xpZW50LnBhZGRpbmdCb3gud2lkdGhcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgcGFnZU1hcmdpbkJveDogY2xvc2VzdCQkMS5wYWdlLm1hcmdpbkJveCxcbiAgICAgIGZyYW1lQ2xpZW50OiBmcmFtZUNsaWVudCxcbiAgICAgIHNjcm9sbFNpemU6IHNjcm9sbFNpemUsXG4gICAgICBzaG91bGRDbGlwU3ViamVjdDogY2xvc2VzdCQkMS5zaG91bGRDbGlwU3ViamVjdCxcbiAgICAgIHNjcm9sbDoge1xuICAgICAgICBpbml0aWFsOiBjbG9zZXN0JCQxLnNjcm9sbCxcbiAgICAgICAgY3VycmVudDogY2xvc2VzdCQkMS5zY3JvbGwsXG4gICAgICAgIG1heDogbWF4U2Nyb2xsLFxuICAgICAgICBkaWZmOiB7XG4gICAgICAgICAgdmFsdWU6IG9yaWdpbixcbiAgICAgICAgICBkaXNwbGFjZW1lbnQ6IG9yaWdpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBheGlzID0gZGlyZWN0aW9uID09PSAndmVydGljYWwnID8gdmVydGljYWwgOiBob3Jpem9udGFsO1xuICB2YXIgc3ViamVjdCA9IGdldFN1YmplY3Qoe1xuICAgIHBhZ2U6IHBhZ2UsXG4gICAgd2l0aFBsYWNlaG9sZGVyOiBudWxsLFxuICAgIGF4aXM6IGF4aXMsXG4gICAgZnJhbWU6IGZyYW1lXG4gIH0pO1xuICB2YXIgZGltZW5zaW9uID0ge1xuICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgaXNDb21iaW5lRW5hYmxlZDogaXNDb21iaW5lRW5hYmxlZCxcbiAgICBpc0ZpeGVkT25QYWdlOiBpc0ZpeGVkT25QYWdlLFxuICAgIGF4aXM6IGF4aXMsXG4gICAgaXNFbmFibGVkOiBpc0VuYWJsZWQsXG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgcGFnZTogcGFnZSxcbiAgICBmcmFtZTogZnJhbWUsXG4gICAgc3ViamVjdDogc3ViamVjdFxuICB9O1xuICByZXR1cm4gZGltZW5zaW9uO1xufSk7XG5cbnZhciBnZXRSZXF1aXJlZEdyb3d0aEZvclBsYWNlaG9sZGVyID0gZnVuY3Rpb24gZ2V0UmVxdWlyZWRHcm93dGhGb3JQbGFjZWhvbGRlcihkcm9wcGFibGUsIHBsYWNlaG9sZGVyU2l6ZSwgZHJhZ2dhYmxlcykge1xuICB2YXIgYXhpcyA9IGRyb3BwYWJsZS5heGlzO1xuICB2YXIgYXZhaWxhYmxlU3BhY2UgPSBkcm9wcGFibGUuc3ViamVjdC5wYWdlLmNvbnRlbnRCb3hbYXhpcy5zaXplXTtcbiAgdmFyIGluc2lkZURyb3BwYWJsZSA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgc3BhY2VVc2VkID0gaW5zaWRlRHJvcHBhYmxlLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBkaW1lbnNpb24pIHtcbiAgICByZXR1cm4gc3VtICsgZGltZW5zaW9uLmNsaWVudC5tYXJnaW5Cb3hbYXhpcy5zaXplXTtcbiAgfSwgMCk7XG4gIHZhciByZXF1aXJlZFNwYWNlID0gc3BhY2VVc2VkICsgcGxhY2Vob2xkZXJTaXplW2F4aXMubGluZV07XG4gIHZhciBuZWVkc1RvR3Jvd0J5ID0gcmVxdWlyZWRTcGFjZSAtIGF2YWlsYWJsZVNwYWNlO1xuXG4gIGlmIChuZWVkc1RvR3Jvd0J5IDw9IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXRjaChheGlzLmxpbmUsIG5lZWRzVG9Hcm93QnkpO1xufTtcblxudmFyIHdpdGhNYXhTY3JvbGwgPSBmdW5jdGlvbiB3aXRoTWF4U2Nyb2xsKGZyYW1lLCBtYXgpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBmcmFtZSwge1xuICAgIHNjcm9sbDogX2V4dGVuZHMoe30sIGZyYW1lLnNjcm9sbCwge1xuICAgICAgbWF4OiBtYXhcbiAgICB9KVxuICB9KTtcbn07XG5cbnZhciBhZGRQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIGFkZFBsYWNlaG9sZGVyKGRyb3BwYWJsZSwgZGlzcGxhY2VCeSwgZHJhZ2dhYmxlcykge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG4gICEhZHJvcHBhYmxlLnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGFkZCBwbGFjZWhvbGRlciBzaXplIHRvIGEgc3ViamVjdCB3aGVuIGl0IGFscmVhZHkgaGFzIG9uZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHBsYWNlaG9sZGVyU2l6ZSA9IHBhdGNoKGRyb3BwYWJsZS5heGlzLmxpbmUsIGRpc3BsYWNlQnlbZHJvcHBhYmxlLmF4aXMubGluZV0pO1xuICB2YXIgcmVxdWlyZWRHcm93dGggPSBnZXRSZXF1aXJlZEdyb3d0aEZvclBsYWNlaG9sZGVyKGRyb3BwYWJsZSwgcGxhY2Vob2xkZXJTaXplLCBkcmFnZ2FibGVzKTtcbiAgdmFyIGFkZGVkID0ge1xuICAgIHBsYWNlaG9sZGVyU2l6ZTogcGxhY2Vob2xkZXJTaXplLFxuICAgIGluY3JlYXNlZEJ5OiByZXF1aXJlZEdyb3d0aCxcbiAgICBvbGRGcmFtZU1heFNjcm9sbDogZHJvcHBhYmxlLmZyYW1lID8gZHJvcHBhYmxlLmZyYW1lLnNjcm9sbC5tYXggOiBudWxsXG4gIH07XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHZhciBfc3ViamVjdCA9IGdldFN1YmplY3Qoe1xuICAgICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICAgIHdpdGhQbGFjZWhvbGRlcjogYWRkZWQsXG4gICAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICAgIGZyYW1lOiBkcm9wcGFibGUuZnJhbWVcbiAgICB9KTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlLCB7XG4gICAgICBzdWJqZWN0OiBfc3ViamVjdFxuICAgIH0pO1xuICB9XG5cbiAgdmFyIG1heFNjcm9sbCA9IHJlcXVpcmVkR3Jvd3RoID8gYWRkKGZyYW1lLnNjcm9sbC5tYXgsIHJlcXVpcmVkR3Jvd3RoKSA6IGZyYW1lLnNjcm9sbC5tYXg7XG4gIHZhciBuZXdGcmFtZSA9IHdpdGhNYXhTY3JvbGwoZnJhbWUsIG1heFNjcm9sbCk7XG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IGFkZGVkLFxuICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgIGZyYW1lOiBuZXdGcmFtZVxuICB9KTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBkcm9wcGFibGUsIHtcbiAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgIGZyYW1lOiBuZXdGcmFtZVxuICB9KTtcbn07XG52YXIgcmVtb3ZlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiByZW1vdmVQbGFjZWhvbGRlcihkcm9wcGFibGUpIHtcbiAgdmFyIGFkZGVkID0gZHJvcHBhYmxlLnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyO1xuICAhYWRkZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcmVtb3ZlIHBsYWNlaG9sZGVyIGZvcm0gc3ViamVjdCB3aGVuIHRoZXJlIHdhcyBub25lJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHZhciBfc3ViamVjdDIgPSBnZXRTdWJqZWN0KHtcbiAgICAgIHBhZ2U6IGRyb3BwYWJsZS5zdWJqZWN0LnBhZ2UsXG4gICAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICAgIGZyYW1lOiBudWxsLFxuICAgICAgd2l0aFBsYWNlaG9sZGVyOiBudWxsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGRyb3BwYWJsZSwge1xuICAgICAgc3ViamVjdDogX3N1YmplY3QyXG4gICAgfSk7XG4gIH1cblxuICB2YXIgb2xkTWF4U2Nyb2xsID0gYWRkZWQub2xkRnJhbWVNYXhTY3JvbGw7XG4gICFvbGRNYXhTY3JvbGwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBkcm9wcGFibGUgd2l0aCBmcmFtZSB0byBoYXZlIG9sZCBtYXggZnJhbWUgc2Nyb2xsIHdoZW4gcmVtb3ZpbmcgcGxhY2Vob2xkZXInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBuZXdGcmFtZSA9IHdpdGhNYXhTY3JvbGwoZnJhbWUsIG9sZE1heFNjcm9sbCk7XG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICBmcmFtZTogbmV3RnJhbWUsXG4gICAgd2l0aFBsYWNlaG9sZGVyOiBudWxsXG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGRyb3BwYWJsZSwge1xuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgZnJhbWU6IG5ld0ZyYW1lXG4gIH0pO1xufTtcblxudmFyIGdldEZyYW1lID0gKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuICAhZnJhbWUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBEcm9wcGFibGUgdG8gaGF2ZSBhIGZyYW1lJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gZnJhbWU7XG59KTtcblxudmFyIHRocm93SWZTcGFjaW5nQ2hhbmdlID0gZnVuY3Rpb24gdGhyb3dJZlNwYWNpbmdDaGFuZ2Uob2xkLCBmcmVzaCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBnZXRNZXNzYWdlID0gZnVuY3Rpb24gZ2V0TWVzc2FnZShzcGFjaW5nVHlwZSkge1xuICAgICAgcmV0dXJuIFwiQ2Fubm90IGNoYW5nZSB0aGUgXCIgKyBzcGFjaW5nVHlwZSArIFwiIG9mIGEgRHJvcHBhYmxlIGR1cmluZyBhIGRyYWdcIjtcbiAgICB9O1xuXG4gICAgIWlzRXF1YWwkMShvbGQubWFyZ2luLCBmcmVzaC5tYXJnaW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXRNZXNzYWdlKCdtYXJnaW4nKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICFpc0VxdWFsJDEob2xkLmJvcmRlciwgZnJlc2guYm9yZGVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgZ2V0TWVzc2FnZSgnYm9yZGVyJykpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhaXNFcXVhbCQxKG9sZC5wYWRkaW5nLCBmcmVzaC5wYWRkaW5nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgZ2V0TWVzc2FnZSgncGFkZGluZycpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cbn07XG5cbnZhciBhZGp1c3RCb3JkZXJCb3hTaXplID0gZnVuY3Rpb24gYWRqdXN0Qm9yZGVyQm94U2l6ZShheGlzLCBvbGQsIGZyZXNoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiBvbGQudG9wLFxuICAgIGxlZnQ6IG9sZC5sZWZ0LFxuICAgIHJpZ2h0OiBvbGQubGVmdCArIGZyZXNoLndpZHRoLFxuICAgIGJvdHRvbTogb2xkLnRvcCArIGZyZXNoLmhlaWdodFxuICB9O1xufTtcblxudmFyIGFkanVzdE1vZGlmaWVkRHJvcHBhYmxlcyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgbW9kaWZpZWQgPSBfcmVmLm1vZGlmaWVkLFxuICAgICAgZXhpc3RpbmdEcm9wcGFibGVzID0gX3JlZi5leGlzdGluZ0Ryb3BwYWJsZXMsXG4gICAgICBpbml0aWFsV2luZG93U2Nyb2xsID0gX3JlZi5pbml0aWFsV2luZG93U2Nyb2xsO1xuXG4gIGlmICghbW9kaWZpZWQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVkO1xuICB9XG5cbiAgdmFyIGFkanVzdGVkID0gbW9kaWZpZWQubWFwKGZ1bmN0aW9uIChwcm92aWRlZCkge1xuICAgIHZhciByYXcgPSBleGlzdGluZ0Ryb3BwYWJsZXNbcHJvdmlkZWQuZGVzY3JpcHRvci5pZF07XG4gICAgIXJhdyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBsb2NhdGUgZHJvcHBhYmxlIGluIGV4aXN0aW5nIGRyb3BwYWJsZXMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGV4aXN0aW5nID0gcmF3LnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyID8gcmVtb3ZlUGxhY2Vob2xkZXIocmF3KSA6IHJhdztcbiAgICB2YXIgb2xkQ2xpZW50ID0gZXhpc3RpbmcuY2xpZW50O1xuICAgIHZhciBuZXdDbGllbnQgPSBwcm92aWRlZC5jbGllbnQ7XG4gICAgdmFyIG9sZFNjcm9sbGFibGUgPSBnZXRGcmFtZShleGlzdGluZyk7XG4gICAgdmFyIG5ld1Njcm9sbGFibGUgPSBnZXRGcmFtZShwcm92aWRlZCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3dJZlNwYWNpbmdDaGFuZ2UoZXhpc3RpbmcuY2xpZW50LCBwcm92aWRlZC5jbGllbnQpO1xuICAgICAgdGhyb3dJZlNwYWNpbmdDaGFuZ2Uob2xkU2Nyb2xsYWJsZS5mcmFtZUNsaWVudCwgbmV3U2Nyb2xsYWJsZS5mcmFtZUNsaWVudCk7XG4gICAgICB2YXIgaXNGcmFtZUVxdWFsID0gb2xkU2Nyb2xsYWJsZS5mcmFtZUNsaWVudC5ib3JkZXJCb3guaGVpZ2h0ID09PSBuZXdTY3JvbGxhYmxlLmZyYW1lQ2xpZW50LmJvcmRlckJveC5oZWlnaHQgJiYgb2xkU2Nyb2xsYWJsZS5mcmFtZUNsaWVudC5ib3JkZXJCb3gud2lkdGggPT09IG5ld1Njcm9sbGFibGUuZnJhbWVDbGllbnQuYm9yZGVyQm94LndpZHRoO1xuICAgICAgIWlzRnJhbWVFcXVhbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1RoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHlvdXIgRHJvcHBhYmxlIHNjcm9sbCBjb250YWluZXIgY2Fubm90IGNoYW5nZSB3aGVuIGFkZGluZyBvciByZW1vdmluZyBEcmFnZ2FibGVzIGR1cmluZyBhIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGNsaWVudCA9IGNyZWF0ZUJveCh7XG4gICAgICBib3JkZXJCb3g6IGFkanVzdEJvcmRlckJveFNpemUoZXhpc3RpbmcuYXhpcywgb2xkQ2xpZW50LmJvcmRlckJveCwgbmV3Q2xpZW50LmJvcmRlckJveCksXG4gICAgICBtYXJnaW46IG9sZENsaWVudC5tYXJnaW4sXG4gICAgICBib3JkZXI6IG9sZENsaWVudC5ib3JkZXIsXG4gICAgICBwYWRkaW5nOiBvbGRDbGllbnQucGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBjbG9zZXN0ID0ge1xuICAgICAgY2xpZW50OiBvbGRTY3JvbGxhYmxlLmZyYW1lQ2xpZW50LFxuICAgICAgcGFnZTogd2l0aFNjcm9sbChvbGRTY3JvbGxhYmxlLmZyYW1lQ2xpZW50LCBpbml0aWFsV2luZG93U2Nyb2xsKSxcbiAgICAgIHNob3VsZENsaXBTdWJqZWN0OiBvbGRTY3JvbGxhYmxlLnNob3VsZENsaXBTdWJqZWN0LFxuICAgICAgc2Nyb2xsU2l6ZTogbmV3U2Nyb2xsYWJsZS5zY3JvbGxTaXplLFxuICAgICAgc2Nyb2xsOiBvbGRTY3JvbGxhYmxlLnNjcm9sbC5pbml0aWFsXG4gICAgfTtcbiAgICB2YXIgd2l0aFNpemVDaGFuZ2VkID0gZ2V0RHJvcHBhYmxlRGltZW5zaW9uKHtcbiAgICAgIGRlc2NyaXB0b3I6IHByb3ZpZGVkLmRlc2NyaXB0b3IsXG4gICAgICBpc0VuYWJsZWQ6IHByb3ZpZGVkLmlzRW5hYmxlZCxcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQ6IHByb3ZpZGVkLmlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBpc0ZpeGVkT25QYWdlOiBwcm92aWRlZC5pc0ZpeGVkT25QYWdlLFxuICAgICAgZGlyZWN0aW9uOiBwcm92aWRlZC5heGlzLmRpcmVjdGlvbixcbiAgICAgIGNsaWVudDogY2xpZW50LFxuICAgICAgcGFnZTogd2l0aFNjcm9sbChjbGllbnQsIGluaXRpYWxXaW5kb3dTY3JvbGwpLFxuICAgICAgY2xvc2VzdDogY2xvc2VzdFxuICAgIH0pO1xuICAgIHZhciBzY3JvbGxlZCA9IHNjcm9sbERyb3BwYWJsZSh3aXRoU2l6ZUNoYW5nZWQsIG5ld1Njcm9sbGFibGUuc2Nyb2xsLmN1cnJlbnQpO1xuICAgIHJldHVybiBzY3JvbGxlZDtcbiAgfSk7XG4gIHJldHVybiBhZGp1c3RlZDtcbn0pO1xuXG52YXIgYWRqdXN0QWRkaXRpb25zRm9yU2Nyb2xsQ2hhbmdlcyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgYWRkaXRpb25zID0gX3JlZi5hZGRpdGlvbnMsXG4gICAgICBtb2RpZmllZERyb3BwYWJsZXMgPSBfcmVmLm1vZGlmaWVkLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICB2YXIgd2luZG93U2Nyb2xsQ2hhbmdlID0gdmlld3BvcnQuc2Nyb2xsLmRpZmYudmFsdWU7XG4gIHZhciBtb2RpZmllZE1hcCA9IHRvRHJvcHBhYmxlTWFwKG1vZGlmaWVkRHJvcHBhYmxlcyk7XG4gIHJldHVybiBhZGRpdGlvbnMubWFwKGZ1bmN0aW9uIChkcmFnZ2FibGUpIHtcbiAgICB2YXIgZHJvcHBhYmxlSWQgPSBkcmFnZ2FibGUuZGVzY3JpcHRvci5kcm9wcGFibGVJZDtcbiAgICB2YXIgbW9kaWZpZWQgPSBtb2RpZmllZE1hcFtkcm9wcGFibGVJZF07XG4gICAgdmFyIGZyYW1lID0gbW9kaWZpZWQuZnJhbWU7XG4gICAgIWZyYW1lID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGRyb3BwYWJsZVNjcm9sbENoYW5nZSA9IGZyYW1lLnNjcm9sbC5kaWZmLnZhbHVlO1xuICAgIHZhciB0b3RhbENoYW5nZSA9IGFkZCh3aW5kb3dTY3JvbGxDaGFuZ2UsIGRyb3BwYWJsZVNjcm9sbENoYW5nZSk7XG4gICAgdmFyIGNsaWVudCA9IG9mZnNldChkcmFnZ2FibGUuY2xpZW50LCB0b3RhbENoYW5nZSk7XG4gICAgdmFyIHBhZ2UgPSB3aXRoU2Nyb2xsKGNsaWVudCwgdmlld3BvcnQuc2Nyb2xsLmluaXRpYWwpO1xuXG4gICAgdmFyIG1vdmVkID0gX2V4dGVuZHMoe30sIGRyYWdnYWJsZSwge1xuICAgICAgcGxhY2Vob2xkZXI6IF9leHRlbmRzKHt9LCBkcmFnZ2FibGUucGxhY2Vob2xkZXIsIHtcbiAgICAgICAgY2xpZW50OiBjbGllbnRcbiAgICAgIH0pLFxuICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICBwYWdlOiBwYWdlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbW92ZWQ7XG4gIH0pO1xufSk7XG5cbnZhciBnZXREcmFnZ2FibGVNYXAgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGV4aXN0aW5nID0gX3JlZi5leGlzdGluZyxcbiAgICAgIGFkZGVkRHJhZ2dhYmxlcyA9IF9yZWYuYWRkaXRpb25zLFxuICAgICAgcmVtb3ZlZERyYWdnYWJsZXMgPSBfcmVmLnJlbW92YWxzLFxuICAgICAgaW5pdGlhbFdpbmRvd1Njcm9sbCA9IF9yZWYuaW5pdGlhbFdpbmRvd1Njcm9sbDtcbiAgdmFyIGRyb3BwYWJsZXMgPSB0b0Ryb3BwYWJsZUxpc3QoZXhpc3RpbmcuZHJvcHBhYmxlcyk7XG4gIHZhciBzaGlmdGVkID0ge307XG4gIGRyb3BwYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgdmFyIGF4aXMgPSBkcm9wcGFibGUuYXhpcztcbiAgICB2YXIgb3JpZ2luYWwgPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCBleGlzdGluZy5kcmFnZ2FibGVzKTtcbiAgICB2YXIgdG9TaGlmdCA9IHt9O1xuXG4gICAgdmFyIGFkZFNoaWZ0ID0gZnVuY3Rpb24gYWRkU2hpZnQoaWQsIHNoaWZ0KSB7XG4gICAgICB2YXIgcHJldmlvdXMgPSB0b1NoaWZ0W2lkXTtcblxuICAgICAgaWYgKCFwcmV2aW91cykge1xuICAgICAgICB0b1NoaWZ0W2lkXSA9IHNoaWZ0O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRvU2hpZnRbaWRdID0ge1xuICAgICAgICBpbmRleENoYW5nZTogcHJldmlvdXMuaW5kZXhDaGFuZ2UgKyBzaGlmdC5pbmRleENoYW5nZSxcbiAgICAgICAgb2Zmc2V0OiBhZGQocHJldmlvdXMub2Zmc2V0LCBzaGlmdC5vZmZzZXQpXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgcmVtb3ZhbHMgPSB0b0RyYWdnYWJsZU1hcChyZW1vdmVkRHJhZ2dhYmxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgICByZXR1cm4gZXhpc3RpbmcuZHJhZ2dhYmxlc1tpZF07XG4gICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcmFnZ2FibGUpIHtcbiAgICAgIHJldHVybiBkcmFnZ2FibGUuZGVzY3JpcHRvci5kcm9wcGFibGVJZCA9PT0gZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQ7XG4gICAgfSkpO1xuICAgIHZhciB3aXRoUmVtb3ZhbHMgPSBvcmlnaW5hbC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICB2YXIgaXNCZWluZ1JlbW92ZWQgPSBCb29sZWFuKHJlbW92YWxzW2l0ZW0uZGVzY3JpcHRvci5pZF0pO1xuXG4gICAgICBpZiAoIWlzQmVpbmdSZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2Zmc2V0JCQxID0gbmVnYXRlKHBhdGNoKGF4aXMubGluZSwgaXRlbS5jbGllbnQubWFyZ2luQm94W2F4aXMuc2l6ZV0pKTtcbiAgICAgIG9yaWdpbmFsLnNsaWNlKGluZGV4KS5mb3JFYWNoKGZ1bmN0aW9uIChzaWJsaW5nKSB7XG4gICAgICAgIGlmIChyZW1vdmFsc1tzaWJsaW5nLmRlc2NyaXB0b3IuaWRdKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYWRkU2hpZnQoc2libGluZy5kZXNjcmlwdG9yLmlkLCB7XG4gICAgICAgICAgaW5kZXhDaGFuZ2U6IC0xLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0JCQxXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gICAgdmFyIGFkZGl0aW9ucyA9IGFkZGVkRHJhZ2dhYmxlcy5maWx0ZXIoZnVuY3Rpb24gKGRyYWdnYWJsZSkge1xuICAgICAgcmV0dXJuIGRyYWdnYWJsZS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkID09PSBkcm9wcGFibGUuZGVzY3JpcHRvci5pZDtcbiAgICB9KTtcbiAgICB2YXIgd2l0aEFkZGl0aW9ucyA9IHdpdGhSZW1vdmFscy5zbGljZSgwKTtcbiAgICBhZGRpdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgd2l0aEFkZGl0aW9ucy5zcGxpY2UoaXRlbS5kZXNjcmlwdG9yLmluZGV4LCAwLCBpdGVtKTtcbiAgICB9KTtcbiAgICB2YXIgYWRkaXRpb25NYXAgPSB0b0RyYWdnYWJsZU1hcChhZGRpdGlvbnMpO1xuICAgIHdpdGhBZGRpdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHZhciB3YXNBZGRlZCA9IEJvb2xlYW4oYWRkaXRpb25NYXBbaXRlbS5kZXNjcmlwdG9yLmlkXSk7XG5cbiAgICAgIGlmICghd2FzQWRkZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2Zmc2V0JCQxID0gcGF0Y2goYXhpcy5saW5lLCBpdGVtLmNsaWVudC5tYXJnaW5Cb3hbYXhpcy5zaXplXSk7XG4gICAgICB3aXRoQWRkaXRpb25zLnNsaWNlKGluZGV4KS5mb3JFYWNoKGZ1bmN0aW9uIChzaWJsaW5nKSB7XG4gICAgICAgIGlmIChhZGRpdGlvbk1hcFtzaWJsaW5nLmRlc2NyaXB0b3IuaWRdKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYWRkU2hpZnQoc2libGluZy5kZXNjcmlwdG9yLmlkLCB7XG4gICAgICAgICAgaW5kZXhDaGFuZ2U6IDEsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQkJDFcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB3aXRoQWRkaXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGlmIChhZGRpdGlvbk1hcFtpdGVtLmRlc2NyaXB0b3IuaWRdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNoaWZ0ID0gdG9TaGlmdFtpdGVtLmRlc2NyaXB0b3IuaWRdO1xuXG4gICAgICBpZiAoIXNoaWZ0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsaWVudCA9IG9mZnNldChpdGVtLmNsaWVudCwgc2hpZnQub2Zmc2V0KTtcbiAgICAgIHZhciBwYWdlID0gd2l0aFNjcm9sbChjbGllbnQsIGluaXRpYWxXaW5kb3dTY3JvbGwpO1xuICAgICAgdmFyIGluZGV4ID0gaXRlbS5kZXNjcmlwdG9yLmluZGV4ICsgc2hpZnQuaW5kZXhDaGFuZ2U7XG5cbiAgICAgIHZhciBtb3ZlZCA9IF9leHRlbmRzKHt9LCBpdGVtLCB7XG4gICAgICAgIGRlc2NyaXB0b3I6IF9leHRlbmRzKHt9LCBpdGVtLmRlc2NyaXB0b3IsIHtcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfSksXG4gICAgICAgIHBsYWNlaG9sZGVyOiBfZXh0ZW5kcyh7fSwgaXRlbS5wbGFjZWhvbGRlciwge1xuICAgICAgICAgIGNsaWVudDogY2xpZW50XG4gICAgICAgIH0pLFxuICAgICAgICBjbGllbnQ6IGNsaWVudCxcbiAgICAgICAgcGFnZTogcGFnZVxuICAgICAgfSk7XG5cbiAgICAgIHNoaWZ0ZWRbbW92ZWQuZGVzY3JpcHRvci5pZF0gPSBtb3ZlZDtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdmFyIGRyYWdnYWJsZU1hcCA9IF9leHRlbmRzKHt9LCBleGlzdGluZy5kcmFnZ2FibGVzLCBzaGlmdGVkLCB0b0RyYWdnYWJsZU1hcChhZGRlZERyYWdnYWJsZXMpKTtcblxuICByZW1vdmVkRHJhZ2dhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgIGRlbGV0ZSBkcmFnZ2FibGVNYXBbaWRdO1xuICB9KTtcbiAgcmV0dXJuIGRyYWdnYWJsZU1hcDtcbn0pO1xuXG52YXIgd2l0aE5vQW5pbWF0ZWREaXNwbGFjZW1lbnQgPSAoZnVuY3Rpb24gKGltcGFjdCkge1xuICB2YXIgZGlzcGxhY2VkID0gaW1wYWN0Lm1vdmVtZW50LmRpc3BsYWNlZDtcblxuICBpZiAoIWRpc3BsYWNlZC5sZW5ndGgpIHtcbiAgICByZXR1cm4gaW1wYWN0O1xuICB9XG5cbiAgdmFyIHdpdGhvdXRBbmltYXRpb24gPSBkaXNwbGFjZWQubWFwKGZ1bmN0aW9uIChkaXNwbGFjZW1lbnQpIHtcbiAgICBpZiAoIWRpc3BsYWNlbWVudC5zaG91bGRBbmltYXRlKSB7XG4gICAgICByZXR1cm4gZGlzcGxhY2VtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZGlzcGxhY2VtZW50LCB7XG4gICAgICBzaG91bGRBbmltYXRlOiBmYWxzZVxuICAgIH0pO1xuICB9KTtcblxuICB2YXIgcmVzdWx0ID0gX2V4dGVuZHMoe30sIGltcGFjdCwge1xuICAgIG1vdmVtZW50OiBfZXh0ZW5kcyh7fSwgaW1wYWN0Lm1vdmVtZW50LCB7XG4gICAgICBkaXNwbGFjZWQ6IHdpdGhvdXRBbmltYXRpb24sXG4gICAgICBtYXA6IGdldERpc3BsYWNlbWVudE1hcCh3aXRob3V0QW5pbWF0aW9uKVxuICAgIH0pXG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxudmFyIHdoYXRJc0RyYWdnZWRPdmVyID0gKGZ1bmN0aW9uIChpbXBhY3QpIHtcbiAgdmFyIG1lcmdlID0gaW1wYWN0Lm1lcmdlLFxuICAgICAgZGVzdGluYXRpb24gPSBpbXBhY3QuZGVzdGluYXRpb247XG5cbiAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uLmRyb3BwYWJsZUlkO1xuICB9XG5cbiAgaWYgKG1lcmdlKSB7XG4gICAgcmV0dXJuIG1lcmdlLmNvbWJpbmUuZHJvcHBhYmxlSWQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0pO1xuXG52YXIgc2hvdWxkVXNlUGxhY2Vob2xkZXIgPSAoZnVuY3Rpb24gKGRlc2NyaXB0b3IsIGltcGFjdCkge1xuICB2YXIgaXNPdmVyID0gd2hhdElzRHJhZ2dlZE92ZXIoaW1wYWN0KTtcblxuICBpZiAoIWlzT3Zlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc092ZXIgIT09IGRlc2NyaXB0b3IuZHJvcHBhYmxlSWQ7XG59KTtcblxudmFyIHBhdGNoRHJvcHBhYmxlTWFwID0gKGZ1bmN0aW9uIChkaW1lbnNpb25zLCB1cGRhdGVkKSB7XG4gIHZhciBfZXh0ZW5kczI7XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBkaW1lbnNpb25zLCB7XG4gICAgZHJvcHBhYmxlczogX2V4dGVuZHMoe30sIGRpbWVuc2lvbnMuZHJvcHBhYmxlcywgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbdXBkYXRlZC5kZXNjcmlwdG9yLmlkXSA9IHVwZGF0ZWQsIF9leHRlbmRzMikpXG4gIH0pO1xufSk7XG5cbnZhciBjbGVhclVudXNlZFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gY2xlYXJVbnVzZWRQbGFjZWhvbGRlcihfcmVmKSB7XG4gIHZhciBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRpbWVuc2lvbnMgPSBfcmVmLmRpbWVuc2lvbnM7XG4gIHZhciBsYXN0ID0gd2hhdElzRHJhZ2dlZE92ZXIocHJldmlvdXNJbXBhY3QpO1xuICB2YXIgbm93ID0gd2hhdElzRHJhZ2dlZE92ZXIoaW1wYWN0KTtcblxuICBpZiAoIWxhc3QpIHtcbiAgICByZXR1cm4gZGltZW5zaW9ucztcbiAgfVxuXG4gIGlmIChsYXN0ID09PSBub3cpIHtcbiAgICByZXR1cm4gZGltZW5zaW9ucztcbiAgfVxuXG4gIHZhciBsYXN0RHJvcHBhYmxlID0gZGltZW5zaW9ucy5kcm9wcGFibGVzW2xhc3RdO1xuXG4gIGlmICghbGFzdERyb3BwYWJsZS5zdWJqZWN0LndpdGhQbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBkaW1lbnNpb25zO1xuICB9XG5cbiAgdmFyIHVwZGF0ZWQgPSByZW1vdmVQbGFjZWhvbGRlcihsYXN0RHJvcHBhYmxlKTtcbiAgcmV0dXJuIHBhdGNoRHJvcHBhYmxlTWFwKGRpbWVuc2lvbnMsIHVwZGF0ZWQpO1xufTtcblxudmFyIGdldERpbWVuc2lvbk1hcFdpdGhQbGFjZWhvbGRlciA9IChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgdmFyIGRpbWVuc2lvbnMgPSBfcmVmMi5kaW1lbnNpb25zLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmMi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYyLmRyYWdnYWJsZSxcbiAgICAgIGltcGFjdCA9IF9yZWYyLmltcGFjdDtcbiAgdmFyIGJhc2UgPSBjbGVhclVudXNlZFBsYWNlaG9sZGVyKHtcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZGltZW5zaW9uczogZGltZW5zaW9uc1xuICB9KTtcbiAgdmFyIHVzZVBsYWNlaG9sZGVyID0gc2hvdWxkVXNlUGxhY2Vob2xkZXIoZHJhZ2dhYmxlLmRlc2NyaXB0b3IsIGltcGFjdCk7XG5cbiAgaWYgKCF1c2VQbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBiYXNlO1xuICB9XG5cbiAgdmFyIGRyb3BwYWJsZUlkID0gd2hhdElzRHJhZ2dlZE92ZXIoaW1wYWN0KTtcblxuICBpZiAoIWRyb3BwYWJsZUlkKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YXIgZHJvcHBhYmxlID0gYmFzZS5kcm9wcGFibGVzW2Ryb3BwYWJsZUlkXTtcblxuICBpZiAoZHJvcHBhYmxlLnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YXIgcGF0Y2hlZCA9IGFkZFBsYWNlaG9sZGVyKGRyb3BwYWJsZSwgZHJhZ2dhYmxlLmRpc3BsYWNlQnksIGJhc2UuZHJhZ2dhYmxlcyk7XG4gIHJldHVybiBwYXRjaERyb3BwYWJsZU1hcChiYXNlLCBwYXRjaGVkKTtcbn0pO1xuXG52YXIgdGltaW5nc0tleSA9ICdQcm9jZXNzaW5nIGR5bmFtaWMgY2hhbmdlcyc7XG52YXIgcHVibGlzaFdoaWxlRHJhZ2dpbmcgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9leHRlbmRzMiwgX2V4dGVuZHMzO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBwdWJsaXNoZWQgPSBfcmVmLnB1Ymxpc2hlZDtcbiAgc3RhcnQodGltaW5nc0tleSk7XG4gIHZhciBhZGp1c3RlZCA9IGFkanVzdE1vZGlmaWVkRHJvcHBhYmxlcyh7XG4gICAgbW9kaWZpZWQ6IHB1Ymxpc2hlZC5tb2RpZmllZCxcbiAgICBleGlzdGluZ0Ryb3BwYWJsZXM6IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlcyxcbiAgICBpbml0aWFsV2luZG93U2Nyb2xsOiBzdGF0ZS52aWV3cG9ydC5zY3JvbGwuaW5pdGlhbFxuICB9KTtcbiAgdmFyIHNoaWZ0ZWQgPSBhZGp1c3RBZGRpdGlvbnNGb3JTY3JvbGxDaGFuZ2VzKHtcbiAgICBhZGRpdGlvbnM6IHB1Ymxpc2hlZC5hZGRpdGlvbnMsXG4gICAgbW9kaWZpZWQ6IGFkanVzdGVkLFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydFxuICB9KTtcbiAgdmFyIHBhdGNoZWQgPSB7XG4gICAgZHJhZ2dhYmxlczogc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IF9leHRlbmRzKHt9LCBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXMsIHRvRHJvcHBhYmxlTWFwKGFkanVzdGVkKSlcbiAgfTtcbiAgdmFyIGRyYWdnYWJsZXMgPSBnZXREcmFnZ2FibGVNYXAoe1xuICAgIGV4aXN0aW5nOiBwYXRjaGVkLFxuICAgIGFkZGl0aW9uczogc2hpZnRlZCxcbiAgICByZW1vdmFsczogcHVibGlzaGVkLnJlbW92YWxzLFxuICAgIGluaXRpYWxXaW5kb3dTY3JvbGw6IHN0YXRlLnZpZXdwb3J0LnNjcm9sbC5pbml0aWFsXG4gIH0pO1xuICB2YXIgZHJhZ2dpbmcgPSBzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWQ7XG4gIHZhciBvcmlnaW5hbCA9IHN0YXRlLmRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tkcmFnZ2luZ107XG4gIHZhciB1cGRhdGVkID0gZHJhZ2dhYmxlc1tkcmFnZ2luZ107XG4gIHZhciBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9uTWFwV2l0aFBsYWNlaG9sZGVyKHtcbiAgICBwcmV2aW91c0ltcGFjdDogc3RhdGUuaW1wYWN0LFxuICAgIGltcGFjdDogc3RhdGUuaW1wYWN0LFxuICAgIGRyYWdnYWJsZTogdXBkYXRlZCxcbiAgICBkaW1lbnNpb25zOiB7XG4gICAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlczogcGF0Y2hlZC5kcm9wcGFibGVzXG4gICAgfVxuICB9KTtcbiAgdmFyIGNyaXRpY2FsID0ge1xuICAgIGRyb3BwYWJsZTogc3RhdGUuY3JpdGljYWwuZHJvcHBhYmxlLFxuICAgIGRyYWdnYWJsZTogdXBkYXRlZC5kZXNjcmlwdG9yXG4gIH07XG5cbiAgdmFyIF9nZXREcmFnUG9zaXRpb25zID0gZ2V0RHJhZ1Bvc2l0aW9ucyh7XG4gICAgaW5pdGlhbDogc3RhdGUuaW5pdGlhbCxcbiAgICBjdXJyZW50OiBzdGF0ZS5jdXJyZW50LFxuICAgIG9sZENsaWVudEJvcmRlckJveENlbnRlcjogb3JpZ2luYWwuY2xpZW50LmJvcmRlckJveC5jZW50ZXIsXG4gICAgbmV3Q2xpZW50Qm9yZGVyQm94Q2VudGVyOiB1cGRhdGVkLmNsaWVudC5ib3JkZXJCb3guY2VudGVyLFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydFxuICB9KSxcbiAgICAgIGluaXRpYWwgPSBfZ2V0RHJhZ1Bvc2l0aW9ucy5pbml0aWFsLFxuICAgICAgY3VycmVudCA9IF9nZXREcmFnUG9zaXRpb25zLmN1cnJlbnQ7XG5cbiAgdmFyIGltcGFjdCA9IHdpdGhOb0FuaW1hdGVkRGlzcGxhY2VtZW50KGdldERyYWdJbXBhY3Qoe1xuICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IGN1cnJlbnQucGFnZS5ib3JkZXJCb3hDZW50ZXIsXG4gICAgZHJhZ2dhYmxlOiBkaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXSxcbiAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgZHJvcHBhYmxlczogZGltZW5zaW9ucy5kcm9wcGFibGVzLFxuICAgIHByZXZpb3VzSW1wYWN0OiBub0ltcGFjdCxcbiAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnQsXG4gICAgdXNlckRpcmVjdGlvbjogc3RhdGUudXNlckRpcmVjdGlvblxuICB9KSk7XG4gIHZhciBpc09ycGhhbmVkID0gQm9vbGVhbihzdGF0ZS5tb3ZlbWVudE1vZGUgPT09ICdTTkFQJyAmJiBzdGF0ZS5pbXBhY3QuZGVzdGluYXRpb24gJiYgIWltcGFjdC5kZXN0aW5hdGlvbik7XG4gICEhaXNPcnBoYW5lZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0RyYWdnaW5nIGl0ZW0gbm8gbG9uZ2VyIGhhcyBhIHZhbGlkIGRlc3RpbmF0aW9uIGFmdGVyIGEgZHluYW1pYyB1cGRhdGUuIFRoaXMgaXMgbm90IHN1cHBvcnRlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgZmluaXNoKHRpbWluZ3NLZXkpO1xuXG4gIHZhciBkcmFnZ2luZ1N0YXRlID0gX2V4dGVuZHMoe1xuICAgIHBoYXNlOiAnRFJBR0dJTkcnXG4gIH0sIHN0YXRlLCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltcInBoYXNlXCJdID0gJ0RSQUdHSU5HJywgX2V4dGVuZHMyLmNyaXRpY2FsID0gY3JpdGljYWwsIF9leHRlbmRzMi5jdXJyZW50ID0gY3VycmVudCwgX2V4dGVuZHMyLmluaXRpYWwgPSBpbml0aWFsLCBfZXh0ZW5kczIuaW1wYWN0ID0gaW1wYWN0LCBfZXh0ZW5kczIuZGltZW5zaW9ucyA9IGRpbWVuc2lvbnMsIF9leHRlbmRzMi5mb3JjZVNob3VsZEFuaW1hdGUgPSBmYWxzZSwgX2V4dGVuZHMyKSk7XG5cbiAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycpIHtcbiAgICByZXR1cm4gZHJhZ2dpbmdTdGF0ZTtcbiAgfVxuXG4gIHZhciBkcm9wUGVuZGluZyA9IF9leHRlbmRzKHtcbiAgICBwaGFzZTogJ0RST1BfUEVORElORydcbiAgfSwgZHJhZ2dpbmdTdGF0ZSwgKF9leHRlbmRzMyA9IHt9LCBfZXh0ZW5kczNbXCJwaGFzZVwiXSA9ICdEUk9QX1BFTkRJTkcnLCBfZXh0ZW5kczMucmVhc29uID0gc3RhdGUucmVhc29uLCBfZXh0ZW5kczMuaXNXYWl0aW5nID0gZmFsc2UsIF9leHRlbmRzMykpO1xuXG4gIHJldHVybiBkcm9wUGVuZGluZztcbn0pO1xuXG52YXIgZ2V0S25vd25BY3RpdmUgPSBmdW5jdGlvbiBnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpIHtcbiAgdmFyIHJlY3QgPSBkcm9wcGFibGUuc3ViamVjdC5hY3RpdmU7XG4gICFyZWN0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGdldCBjbGlwcGVkIGFyZWEgZnJvbSBkcm9wcGFibGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZWN0O1xufTtcblxudmFyIGdldEJlc3RDcm9zc0F4aXNEcm9wcGFibGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IF9yZWYuaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgcGFnZUJvcmRlckJveENlbnRlciA9IF9yZWYucGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIHNvdXJjZSA9IF9yZWYuc291cmNlLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIGFjdGl2ZSA9IHNvdXJjZS5zdWJqZWN0LmFjdGl2ZTtcblxuICBpZiAoIWFjdGl2ZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGF4aXMgPSBzb3VyY2UuYXhpcztcbiAgdmFyIGlzQmV0d2VlblNvdXJjZUNsaXBwZWQgPSBpc1dpdGhpbihhY3RpdmVbYXhpcy5zdGFydF0sIGFjdGl2ZVtheGlzLmVuZF0pO1xuICB2YXIgY2FuZGlkYXRlcyA9IHRvRHJvcHBhYmxlTGlzdChkcm9wcGFibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHJldHVybiBkcm9wcGFibGUgIT09IHNvdXJjZTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlLmlzRW5hYmxlZDtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gQm9vbGVhbihkcm9wcGFibGUuc3ViamVjdC5hY3RpdmUpO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHJldHVybiBpc1BhcnRpYWxseVZpc2libGVUaHJvdWdoRnJhbWUodmlld3BvcnQuZnJhbWUpKGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSkpO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHZhciBhY3RpdmVPZlRhcmdldCA9IGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSk7XG5cbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4gYWN0aXZlW2F4aXMuY3Jvc3NBeGlzRW5kXSA8IGFjdGl2ZU9mVGFyZ2V0W2F4aXMuY3Jvc3NBeGlzRW5kXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aXZlT2ZUYXJnZXRbYXhpcy5jcm9zc0F4aXNTdGFydF0gPCBhY3RpdmVbYXhpcy5jcm9zc0F4aXNTdGFydF07XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgdmFyIGFjdGl2ZU9mVGFyZ2V0ID0gZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKTtcbiAgICB2YXIgaXNCZXR3ZWVuRGVzdGluYXRpb25DbGlwcGVkID0gaXNXaXRoaW4oYWN0aXZlT2ZUYXJnZXRbYXhpcy5zdGFydF0sIGFjdGl2ZU9mVGFyZ2V0W2F4aXMuZW5kXSk7XG4gICAgcmV0dXJuIGlzQmV0d2VlblNvdXJjZUNsaXBwZWQoYWN0aXZlT2ZUYXJnZXRbYXhpcy5zdGFydF0pIHx8IGlzQmV0d2VlblNvdXJjZUNsaXBwZWQoYWN0aXZlT2ZUYXJnZXRbYXhpcy5lbmRdKSB8fCBpc0JldHdlZW5EZXN0aW5hdGlvbkNsaXBwZWQoYWN0aXZlW2F4aXMuc3RhcnRdKSB8fCBpc0JldHdlZW5EZXN0aW5hdGlvbkNsaXBwZWQoYWN0aXZlW2F4aXMuZW5kXSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZmlyc3QgPSBnZXRLbm93bkFjdGl2ZShhKVtheGlzLmNyb3NzQXhpc1N0YXJ0XTtcbiAgICB2YXIgc2Vjb25kID0gZ2V0S25vd25BY3RpdmUoYilbYXhpcy5jcm9zc0F4aXNTdGFydF07XG5cbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4gZmlyc3QgLSBzZWNvbmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlY29uZCAtIGZpcnN0O1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSwgaW5kZXgsIGFycmF5KSB7XG4gICAgcmV0dXJuIGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSlbYXhpcy5jcm9zc0F4aXNTdGFydF0gPT09IGdldEtub3duQWN0aXZlKGFycmF5WzBdKVtheGlzLmNyb3NzQXhpc1N0YXJ0XTtcbiAgfSk7XG5cbiAgaWYgKCFjYW5kaWRhdGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNhbmRpZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZXNbMF07XG4gIH1cblxuICB2YXIgY29udGFpbnMgPSBjYW5kaWRhdGVzLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgdmFyIGlzV2l0aGluRHJvcHBhYmxlID0gaXNXaXRoaW4oZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKVtheGlzLnN0YXJ0XSwgZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKVtheGlzLmVuZF0pO1xuICAgIHJldHVybiBpc1dpdGhpbkRyb3BwYWJsZShwYWdlQm9yZGVyQm94Q2VudGVyW2F4aXMubGluZV0pO1xuICB9KTtcblxuICBpZiAoY29udGFpbnMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zWzBdO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5zLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gY29udGFpbnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGdldEtub3duQWN0aXZlKGEpW2F4aXMuc3RhcnRdIC0gZ2V0S25vd25BY3RpdmUoYilbYXhpcy5zdGFydF07XG4gICAgfSlbMF07XG4gIH1cblxuICByZXR1cm4gY2FuZGlkYXRlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGZpcnN0ID0gY2xvc2VzdChwYWdlQm9yZGVyQm94Q2VudGVyLCBnZXRDb3JuZXJzKGdldEtub3duQWN0aXZlKGEpKSk7XG4gICAgdmFyIHNlY29uZCA9IGNsb3Nlc3QocGFnZUJvcmRlckJveENlbnRlciwgZ2V0Q29ybmVycyhnZXRLbm93bkFjdGl2ZShiKSkpO1xuXG4gICAgaWYgKGZpcnN0ICE9PSBzZWNvbmQpIHtcbiAgICAgIHJldHVybiBmaXJzdCAtIHNlY29uZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0S25vd25BY3RpdmUoYSlbYXhpcy5zdGFydF0gLSBnZXRLbm93bkFjdGl2ZShiKVtheGlzLnN0YXJ0XTtcbiAgfSlbMF07XG59KTtcblxudmFyIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQgPSAoZnVuY3Rpb24gKGRyb3BwYWJsZSwgcG9pbnQpIHtcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuXG4gIGlmICghZnJhbWUpIHtcbiAgICByZXR1cm4gcG9pbnQ7XG4gIH1cblxuICByZXR1cm4gYWRkKHBvaW50LCBmcmFtZS5zY3JvbGwuZGlmZi5kaXNwbGFjZW1lbnQpO1xufSk7XG5cbnZhciBnZXRDbG9zZXN0RHJhZ2dhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBheGlzID0gX3JlZi5heGlzLFxuICAgICAgcGFnZUJvcmRlckJveENlbnRlciA9IF9yZWYucGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbjtcbiAgdmFyIHNvcnRlZCA9IGluc2lkZURlc3RpbmF0aW9uLmZpbHRlcihmdW5jdGlvbiAoZHJhZ2dhYmxlKSB7XG4gICAgcmV0dXJuIGlzVG90YWxseVZpc2libGUoe1xuICAgICAgdGFyZ2V0OiBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3gsXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiB0cnVlXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZGlzdGFuY2VUb0EgPSBkaXN0YW5jZShwYWdlQm9yZGVyQm94Q2VudGVyLCB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50KGRlc3RpbmF0aW9uLCBhLnBhZ2UuYm9yZGVyQm94LmNlbnRlcikpO1xuICAgIHZhciBkaXN0YW5jZVRvQiA9IGRpc3RhbmNlKHBhZ2VCb3JkZXJCb3hDZW50ZXIsIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQoZGVzdGluYXRpb24sIGIucGFnZS5ib3JkZXJCb3guY2VudGVyKSk7XG5cbiAgICBpZiAoZGlzdGFuY2VUb0EgPCBkaXN0YW5jZVRvQikge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmIChkaXN0YW5jZVRvQiA8IGRpc3RhbmNlVG9BKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gYS5wYWdlLmJvcmRlckJveFtheGlzLnN0YXJ0XSAtIGIucGFnZS5ib3JkZXJCb3hbYXhpcy5zdGFydF07XG4gIH0pO1xuICByZXR1cm4gc29ydGVkWzBdIHx8IG51bGw7XG59KTtcblxudmFyIGdldFdpbGxEaXNwbGFjZUZvcndhcmQgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGlzSW5Ib21lTGlzdCA9IF9yZWYuaXNJbkhvbWVMaXN0LFxuICAgICAgcHJvcG9zZWRJbmRleCA9IF9yZWYucHJvcG9zZWRJbmRleCxcbiAgICAgIHN0YXJ0SW5kZXhJbkhvbWUgPSBfcmVmLnN0YXJ0SW5kZXhJbkhvbWU7XG4gIHJldHVybiBpc0luSG9tZUxpc3QgPyBwcm9wb3NlZEluZGV4IDwgc3RhcnRJbmRleEluSG9tZSA6IHRydWU7XG59KTtcblxudmFyIGdldEhvbWVMb2NhdGlvbiA9IChmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICByZXR1cm4ge1xuICAgIGluZGV4OiBkZXNjcmlwdG9yLmluZGV4LFxuICAgIGRyb3BwYWJsZUlkOiBkZXNjcmlwdG9yLmRyb3BwYWJsZUlkXG4gIH07XG59KTtcblxudmFyIGdldEhvbWVJbXBhY3QgPSAoZnVuY3Rpb24gKGRyYWdnYWJsZSwgaG9tZSkge1xuICByZXR1cm4ge1xuICAgIG1vdmVtZW50OiBub01vdmVtZW50LFxuICAgIGRpcmVjdGlvbjogaG9tZS5heGlzLmRpcmVjdGlvbixcbiAgICBkZXN0aW5hdGlvbjogZ2V0SG9tZUxvY2F0aW9uKGRyYWdnYWJsZS5kZXNjcmlwdG9yKSxcbiAgICBtZXJnZTogbnVsbFxuICB9O1xufSk7XG5cbnZhciB0b0hvbWVMaXN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBtb3ZlSW50b0luZGV4T2YgPSBfcmVmLm1vdmVJbnRvSW5kZXhPZixcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuXG4gIGlmICghbW92ZUludG9JbmRleE9mKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYXhpcyA9IGRlc3RpbmF0aW9uLmF4aXM7XG4gIHZhciBob21lSW5kZXggPSBkcmFnZ2FibGUuZGVzY3JpcHRvci5pbmRleDtcbiAgdmFyIHRhcmdldEluZGV4ID0gbW92ZUludG9JbmRleE9mLmRlc2NyaXB0b3IuaW5kZXg7XG5cbiAgaWYgKGhvbWVJbmRleCA9PT0gdGFyZ2V0SW5kZXgpIHtcbiAgICByZXR1cm4gZ2V0SG9tZUltcGFjdChkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKTtcbiAgfVxuXG4gIHZhciB3aWxsRGlzcGxhY2VGb3J3YXJkID0gZ2V0V2lsbERpc3BsYWNlRm9yd2FyZCh7XG4gICAgaXNJbkhvbWVMaXN0OiB0cnVlLFxuICAgIHByb3Bvc2VkSW5kZXg6IHRhcmdldEluZGV4LFxuICAgIHN0YXJ0SW5kZXhJbkhvbWU6IGhvbWVJbmRleFxuICB9KTtcbiAgdmFyIGlzTW92aW5nQWZ0ZXJTdGFydCA9ICF3aWxsRGlzcGxhY2VGb3J3YXJkO1xuICB2YXIgbW9kaWZpZWQgPSBpc01vdmluZ0FmdGVyU3RhcnQgPyBpbnNpZGVEZXN0aW5hdGlvbi5zbGljZShob21lSW5kZXggKyAxLCB0YXJnZXRJbmRleCArIDEpLnJldmVyc2UoKSA6IGluc2lkZURlc3RpbmF0aW9uLnNsaWNlKHRhcmdldEluZGV4LCBob21lSW5kZXgpO1xuICB2YXIgZGlzcGxhY2VkID0gbW9kaWZpZWQubWFwKGZ1bmN0aW9uIChkaW1lbnNpb24pIHtcbiAgICByZXR1cm4gZ2V0RGlzcGxhY2VtZW50KHtcbiAgICAgIGRyYWdnYWJsZTogZGltZW5zaW9uLFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lXG4gICAgfSk7XG4gIH0pO1xuICAhZGlzcGxhY2VkLmxlbmd0aCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011c3QgZGlzcGxhY2UgYXMgbGVhc3Qgb25lIHRoaW5nIGlmIG5vdCBtb3ZpbmcgaW50byB0aGUgaG9tZSBpbmRleCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoZGVzdGluYXRpb24uYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnksIHdpbGxEaXNwbGFjZUZvcndhcmQpO1xuICB2YXIgaW1wYWN0ID0ge1xuICAgIG1vdmVtZW50OiB7XG4gICAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgICBkaXNwbGFjZWQ6IGRpc3BsYWNlZCxcbiAgICAgIG1hcDogZ2V0RGlzcGxhY2VtZW50TWFwKGRpc3BsYWNlZCksXG4gICAgICB3aWxsRGlzcGxhY2VGb3J3YXJkOiB3aWxsRGlzcGxhY2VGb3J3YXJkXG4gICAgfSxcbiAgICBkaXJlY3Rpb246IGF4aXMuZGlyZWN0aW9uLFxuICAgIGRlc3RpbmF0aW9uOiB7XG4gICAgICBkcm9wcGFibGVJZDogZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCxcbiAgICAgIGluZGV4OiB0YXJnZXRJbmRleFxuICAgIH0sXG4gICAgbWVyZ2U6IG51bGxcbiAgfTtcbiAgcmV0dXJuIGltcGFjdDtcbn0pO1xuXG52YXIgd2hlbkNvbWJpbmluZyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY29tYmluZSA9IF9yZWYuY29tYmluZSxcbiAgICAgIG1vdmVtZW50ID0gX3JlZi5tb3ZlbWVudCxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXM7XG4gIHZhciBncm91cGluZ1dpdGggPSBjb21iaW5lLmRyYWdnYWJsZUlkO1xuICB2YXIgaXNEaXNwbGFjZWQgPSBCb29sZWFuKG1vdmVtZW50Lm1hcFtncm91cGluZ1dpdGhdKTtcbiAgdmFyIGNlbnRlciA9IGRyYWdnYWJsZXNbZ3JvdXBpbmdXaXRoXS5wYWdlLmJvcmRlckJveC5jZW50ZXI7XG4gIHJldHVybiBpc0Rpc3BsYWNlZCA/IGFkZChjZW50ZXIsIG1vdmVtZW50LmRpc3BsYWNlZEJ5LnBvaW50KSA6IGNlbnRlcjtcbn0pO1xuXG52YXIgZGlzdGFuY2VGcm9tU3RhcnRUb0JvcmRlckJveENlbnRlciA9IGZ1bmN0aW9uIGRpc3RhbmNlRnJvbVN0YXJ0VG9Cb3JkZXJCb3hDZW50ZXIoYXhpcywgYm94KSB7XG4gIHJldHVybiBib3gubWFyZ2luW2F4aXMuc3RhcnRdICsgYm94LmJvcmRlckJveFtheGlzLnNpemVdIC8gMjtcbn07XG5cbnZhciBkaXN0YW5jZUZyb21FbmRUb0JvcmRlckJveENlbnRlciA9IGZ1bmN0aW9uIGRpc3RhbmNlRnJvbUVuZFRvQm9yZGVyQm94Q2VudGVyKGF4aXMsIGJveCkge1xuICByZXR1cm4gYm94Lm1hcmdpbltheGlzLmVuZF0gKyBib3guYm9yZGVyQm94W2F4aXMuc2l6ZV0gLyAyO1xufTtcblxudmFyIGdldENyb3NzQXhpc0JvcmRlckJveENlbnRlciA9IGZ1bmN0aW9uIGdldENyb3NzQXhpc0JvcmRlckJveENlbnRlcihheGlzLCB0YXJnZXQsIGlzTW92aW5nKSB7XG4gIHJldHVybiB0YXJnZXRbYXhpcy5jcm9zc0F4aXNTdGFydF0gKyBpc01vdmluZy5tYXJnaW5bYXhpcy5jcm9zc0F4aXNTdGFydF0gKyBpc01vdmluZy5ib3JkZXJCb3hbYXhpcy5jcm9zc0F4aXNTaXplXSAvIDI7XG59O1xuXG52YXIgZ29BZnRlciA9IGZ1bmN0aW9uIGdvQWZ0ZXIoX3JlZikge1xuICB2YXIgYXhpcyA9IF9yZWYuYXhpcyxcbiAgICAgIG1vdmVSZWxhdGl2ZVRvID0gX3JlZi5tb3ZlUmVsYXRpdmVUbyxcbiAgICAgIGlzTW92aW5nID0gX3JlZi5pc01vdmluZztcbiAgcmV0dXJuIHBhdGNoKGF4aXMubGluZSwgbW92ZVJlbGF0aXZlVG8ubWFyZ2luQm94W2F4aXMuZW5kXSArIGRpc3RhbmNlRnJvbVN0YXJ0VG9Cb3JkZXJCb3hDZW50ZXIoYXhpcywgaXNNb3ZpbmcpLCBnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIoYXhpcywgbW92ZVJlbGF0aXZlVG8ubWFyZ2luQm94LCBpc01vdmluZykpO1xufTtcbnZhciBnb0JlZm9yZSA9IGZ1bmN0aW9uIGdvQmVmb3JlKF9yZWYyKSB7XG4gIHZhciBheGlzID0gX3JlZjIuYXhpcyxcbiAgICAgIG1vdmVSZWxhdGl2ZVRvID0gX3JlZjIubW92ZVJlbGF0aXZlVG8sXG4gICAgICBpc01vdmluZyA9IF9yZWYyLmlzTW92aW5nO1xuICByZXR1cm4gcGF0Y2goYXhpcy5saW5lLCBtb3ZlUmVsYXRpdmVUby5tYXJnaW5Cb3hbYXhpcy5zdGFydF0gLSBkaXN0YW5jZUZyb21FbmRUb0JvcmRlckJveENlbnRlcihheGlzLCBpc01vdmluZyksIGdldENyb3NzQXhpc0JvcmRlckJveENlbnRlcihheGlzLCBtb3ZlUmVsYXRpdmVUby5tYXJnaW5Cb3gsIGlzTW92aW5nKSk7XG59O1xudmFyIGdvSW50b1N0YXJ0ID0gZnVuY3Rpb24gZ29JbnRvU3RhcnQoX3JlZjMpIHtcbiAgdmFyIGF4aXMgPSBfcmVmMy5heGlzLFxuICAgICAgbW92ZUludG8gPSBfcmVmMy5tb3ZlSW50byxcbiAgICAgIGlzTW92aW5nID0gX3JlZjMuaXNNb3Zpbmc7XG4gIHJldHVybiBwYXRjaChheGlzLmxpbmUsIG1vdmVJbnRvLmNvbnRlbnRCb3hbYXhpcy5zdGFydF0gKyBkaXN0YW5jZUZyb21TdGFydFRvQm9yZGVyQm94Q2VudGVyKGF4aXMsIGlzTW92aW5nKSwgZ2V0Q3Jvc3NBeGlzQm9yZGVyQm94Q2VudGVyKGF4aXMsIG1vdmVJbnRvLmNvbnRlbnRCb3gsIGlzTW92aW5nKSk7XG59O1xuXG52YXIgd2hlblJlb3JkZXJpbmcgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIG1vdmVtZW50ID0gX3JlZi5tb3ZlbWVudCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZSA9IF9yZWYuZHJvcHBhYmxlO1xuICB2YXIgaW5zaWRlRGVzdGluYXRpb24gPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCBkcmFnZ2FibGVzKTtcbiAgdmFyIGRyYWdnYWJsZVBhZ2UgPSBkcmFnZ2FibGUucGFnZTtcbiAgdmFyIGF4aXMgPSBkcm9wcGFibGUuYXhpcztcblxuICBpZiAoIWluc2lkZURlc3RpbmF0aW9uLmxlbmd0aCkge1xuICAgIHJldHVybiBnb0ludG9TdGFydCh7XG4gICAgICBheGlzOiBheGlzLFxuICAgICAgbW92ZUludG86IGRyb3BwYWJsZS5wYWdlLFxuICAgICAgaXNNb3Zpbmc6IGRyYWdnYWJsZVBhZ2VcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBkaXNwbGFjZWQgPSBtb3ZlbWVudC5kaXNwbGFjZWQsXG4gICAgICB3aWxsRGlzcGxhY2VGb3J3YXJkID0gbW92ZW1lbnQud2lsbERpc3BsYWNlRm9yd2FyZCxcbiAgICAgIGRpc3BsYWNlZEJ5ID0gbW92ZW1lbnQuZGlzcGxhY2VkQnk7XG4gIHZhciBpc092ZXJIb21lID0gaXNIb21lT2YoZHJhZ2dhYmxlLCBkcm9wcGFibGUpO1xuICB2YXIgY2xvc2VzdCA9IGRpc3BsYWNlZC5sZW5ndGggPyBkcmFnZ2FibGVzW2Rpc3BsYWNlZFswXS5kcmFnZ2FibGVJZF0gOiBudWxsO1xuXG4gIGlmICghY2xvc2VzdCkge1xuICAgIGlmIChpc092ZXJIb21lKSB7XG4gICAgICByZXR1cm4gZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LmNlbnRlcjtcbiAgICB9XG5cbiAgICB2YXIgbW92ZVJlbGF0aXZlVG8gPSBpbnNpZGVEZXN0aW5hdGlvbltpbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gZ29BZnRlcih7XG4gICAgICBheGlzOiBheGlzLFxuICAgICAgbW92ZVJlbGF0aXZlVG86IG1vdmVSZWxhdGl2ZVRvLnBhZ2UsXG4gICAgICBpc01vdmluZzogZHJhZ2dhYmxlUGFnZVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGRpc3BsYWNlZENsb3Nlc3QgPSBvZmZzZXQoY2xvc2VzdC5wYWdlLCBkaXNwbGFjZWRCeS5wb2ludCk7XG5cbiAgaWYgKHdpbGxEaXNwbGFjZUZvcndhcmQpIHtcbiAgICByZXR1cm4gZ29CZWZvcmUoe1xuICAgICAgYXhpczogYXhpcyxcbiAgICAgIG1vdmVSZWxhdGl2ZVRvOiBkaXNwbGFjZWRDbG9zZXN0LFxuICAgICAgaXNNb3Zpbmc6IGRyYWdnYWJsZVBhZ2VcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBnb0FmdGVyKHtcbiAgICBheGlzOiBheGlzLFxuICAgIG1vdmVSZWxhdGl2ZVRvOiBkaXNwbGFjZWRDbG9zZXN0LFxuICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gIH0pO1xufSk7XG5cbnZhciBnZXRSZXN1bHRXaXRob3V0RHJvcHBhYmxlRGlzcGxhY2VtZW50ID0gZnVuY3Rpb24gZ2V0UmVzdWx0V2l0aG91dERyb3BwYWJsZURpc3BsYWNlbWVudChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJvcHBhYmxlID0gX3JlZi5kcm9wcGFibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzO1xuICB2YXIgbWVyZ2UgPSBpbXBhY3QubWVyZ2U7XG4gIHZhciBkZXN0aW5hdGlvbiA9IGltcGFjdC5kZXN0aW5hdGlvbjtcbiAgdmFyIG9yaWdpbmFsID0gZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LmNlbnRlcjtcblxuICBpZiAoIWRyb3BwYWJsZSkge1xuICAgIHJldHVybiBvcmlnaW5hbDtcbiAgfVxuXG4gIGlmIChkZXN0aW5hdGlvbikge1xuICAgIHJldHVybiB3aGVuUmVvcmRlcmluZyh7XG4gICAgICBtb3ZlbWVudDogaW1wYWN0Lm1vdmVtZW50LFxuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlOiBkcm9wcGFibGVcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChtZXJnZSkge1xuICAgIHJldHVybiB3aGVuQ29tYmluaW5nKHtcbiAgICAgIG1vdmVtZW50OiBpbXBhY3QubW92ZW1lbnQsXG4gICAgICBjb21iaW5lOiBtZXJnZS5jb21iaW5lLFxuICAgICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlc1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG9yaWdpbmFsO1xufTtcblxudmFyIGdldFBhZ2VCb3JkZXJCb3hDZW50ZXIgPSAoZnVuY3Rpb24gKGFyZ3MpIHtcbiAgdmFyIHdpdGhvdXREaXNwbGFjZW1lbnQgPSBnZXRSZXN1bHRXaXRob3V0RHJvcHBhYmxlRGlzcGxhY2VtZW50KGFyZ3MpO1xuICB2YXIgZHJvcHBhYmxlID0gYXJncy5kcm9wcGFibGU7XG4gIHZhciB3aXRoRGlzcGxhY2VtZW50ID0gZHJvcHBhYmxlID8gd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudChkcm9wcGFibGUsIHdpdGhvdXREaXNwbGFjZW1lbnQpIDogd2l0aG91dERpc3BsYWNlbWVudDtcbiAgcmV0dXJuIHdpdGhEaXNwbGFjZW1lbnQ7XG59KTtcblxudmFyIGlzVG90YWxseVZpc2libGVJbk5ld0xvY2F0aW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLm5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50ID0gX3JlZi53aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50LFxuICAgICAgX3JlZiRvbmx5T25NYWluQXhpcyA9IF9yZWYub25seU9uTWFpbkF4aXMsXG4gICAgICBvbmx5T25NYWluQXhpcyA9IF9yZWYkb25seU9uTWFpbkF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRvbmx5T25NYWluQXhpcztcbiAgdmFyIGRpZmYgPSBzdWJ0cmFjdChuZXdQYWdlQm9yZGVyQm94Q2VudGVyLCBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyKTtcbiAgdmFyIHNoaWZ0ZWQgPSBvZmZzZXRCeVBvc2l0aW9uKGRyYWdnYWJsZS5wYWdlLmJvcmRlckJveCwgZGlmZik7XG4gIHZhciBhcmdzID0ge1xuICAgIHRhcmdldDogc2hpZnRlZCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudDogd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfTtcblxuICBpZiAob25seU9uTWFpbkF4aXMpIHtcbiAgICByZXR1cm4gaXNUb3RhbGx5VmlzaWJsZU9uQXhpcyhhcmdzKTtcbiAgfVxuXG4gIHJldHVybiBpc1RvdGFsbHlWaXNpYmxlKGFyZ3MpO1xufSk7XG5cbnZhciB0b0ZvcmVpZ25MaXN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIG1vdmVSZWxhdGl2ZVRvID0gX3JlZi5tb3ZlUmVsYXRpdmVUbyxcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIGF4aXMgPSBkZXN0aW5hdGlvbi5heGlzO1xuXG4gIGlmICghbW92ZVJlbGF0aXZlVG8gfHwgIWluc2lkZURlc3RpbmF0aW9uLmxlbmd0aCkge1xuICAgIHZhciBwcm9wb3NlZCA9IHtcbiAgICAgIG1vdmVtZW50OiBub01vdmVtZW50LFxuICAgICAgZGlyZWN0aW9uOiBheGlzLmRpcmVjdGlvbixcbiAgICAgIGRlc3RpbmF0aW9uOiB7XG4gICAgICAgIGRyb3BwYWJsZUlkOiBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkLFxuICAgICAgICBpbmRleDogMFxuICAgICAgfSxcbiAgICAgIG1lcmdlOiBudWxsXG4gICAgfTtcbiAgICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXIoe1xuICAgICAgaW1wYWN0OiBwcm9wb3NlZCxcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXNcbiAgICB9KTtcbiAgICB2YXIgd2l0aFBsYWNlaG9sZGVyID0gYWRkUGxhY2Vob2xkZXIoZGVzdGluYXRpb24sIGRyYWdnYWJsZS5kaXNwbGFjZUJ5LCBkcmFnZ2FibGVzKTtcbiAgICB2YXIgaXNWaXNpYmxlSW5OZXdMb2NhdGlvbiA9IGlzVG90YWxseVZpc2libGVJbk5ld0xvY2F0aW9uKHtcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb246IHdpdGhQbGFjZWhvbGRlcixcbiAgICAgIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiBmYWxzZSxcbiAgICAgIG9ubHlPbk1haW5BeGlzOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGlzVmlzaWJsZUluTmV3TG9jYXRpb24gPyBwcm9wb3NlZCA6IG51bGw7XG4gIH1cblxuICB2YXIgdGFyZ2V0SW5kZXggPSBpbnNpZGVEZXN0aW5hdGlvbi5pbmRleE9mKG1vdmVSZWxhdGl2ZVRvKTtcbiAgISh0YXJnZXRJbmRleCAhPT0gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgZHJhZ2dhYmxlIGluIGZvcmVpZ24gbGlzdCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGlzR29pbmdCZWZvcmVUYXJnZXQgPSBCb29sZWFuKHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcltkZXN0aW5hdGlvbi5heGlzLmxpbmVdIDwgbW92ZVJlbGF0aXZlVG8ucGFnZS5ib3JkZXJCb3guY2VudGVyW2Rlc3RpbmF0aW9uLmF4aXMubGluZV0pO1xuICB2YXIgcHJvcG9zZWRJbmRleCA9IGlzR29pbmdCZWZvcmVUYXJnZXQgPyB0YXJnZXRJbmRleCA6IHRhcmdldEluZGV4ICsgMTtcbiAgdmFyIGRpc3BsYWNlZCA9IGluc2lkZURlc3RpbmF0aW9uLnNsaWNlKHByb3Bvc2VkSW5kZXgpLm1hcChmdW5jdGlvbiAoZGltZW5zaW9uKSB7XG4gICAgcmV0dXJuIGdldERpc3BsYWNlbWVudCh7XG4gICAgICBkcmFnZ2FibGU6IGRpbWVuc2lvbixcbiAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdFxuICAgIH0pO1xuICB9KTtcbiAgdmFyIHdpbGxEaXNwbGFjZUZvcndhcmQgPSB0cnVlO1xuICB2YXIgZGlzcGxhY2VkQnkgPSBnZXREaXNwbGFjZWRCeShkZXN0aW5hdGlvbi5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSwgd2lsbERpc3BsYWNlRm9yd2FyZCk7XG4gIHZhciBpbXBhY3QgPSB7XG4gICAgbW92ZW1lbnQ6IHtcbiAgICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICAgIGRpc3BsYWNlZDogZGlzcGxhY2VkLFxuICAgICAgbWFwOiBnZXREaXNwbGFjZW1lbnRNYXAoZGlzcGxhY2VkKSxcbiAgICAgIHdpbGxEaXNwbGFjZUZvcndhcmQ6IHdpbGxEaXNwbGFjZUZvcndhcmRcbiAgICB9LFxuICAgIGRpcmVjdGlvbjogYXhpcy5kaXJlY3Rpb24sXG4gICAgZGVzdGluYXRpb246IHtcbiAgICAgIGRyb3BwYWJsZUlkOiBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkLFxuICAgICAgaW5kZXg6IHByb3Bvc2VkSW5kZXhcbiAgICB9LFxuICAgIG1lcmdlOiBudWxsXG4gIH07XG4gIHJldHVybiBpbXBhY3Q7XG59KTtcblxudmFyIG1vdmVUb05ld0Ryb3BwYWJsZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5wcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBtb3ZlUmVsYXRpdmVUbyA9IF9yZWYubW92ZVJlbGF0aXZlVG8sXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQ7XG5cbiAgaWYgKGluc2lkZURlc3RpbmF0aW9uLmxlbmd0aCAmJiAhbW92ZVJlbGF0aXZlVG8pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChtb3ZlUmVsYXRpdmVUbykge1xuICAgICEobW92ZVJlbGF0aXZlVG8uZGVzY3JpcHRvci5kcm9wcGFibGVJZCA9PT0gZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCB0YXJnZXQgaW4gZGVzdGluYXRpb24gZHJvcHBhYmxlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGlzTW92aW5nVG9Ib21lID0gaXNIb21lT2YoZHJhZ2dhYmxlLCBkZXN0aW5hdGlvbik7XG4gIHJldHVybiBpc01vdmluZ1RvSG9tZSA/IHRvSG9tZUxpc3Qoe1xuICAgIG1vdmVJbnRvSW5kZXhPZjogbW92ZVJlbGF0aXZlVG8sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pIDogdG9Gb3JlaWduTGlzdCh7XG4gICAgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyOiBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgbW92ZVJlbGF0aXZlVG86IG1vdmVSZWxhdGl2ZVRvLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xufSk7XG5cbnZhciB3aXRoVmlld3BvcnREaXNwbGFjZW1lbnQgPSAoZnVuY3Rpb24gKHZpZXdwb3J0LCBwb2ludCkge1xuICByZXR1cm4gYWRkKHZpZXdwb3J0LnNjcm9sbC5kaWZmLmRpc3BsYWNlbWVudCwgcG9pbnQpO1xufSk7XG5cbnZhciBnZXRDbGllbnRGcm9tUGFnZUJvcmRlckJveENlbnRlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IF9yZWYucGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICB2YXIgd2l0aG91dFBhZ2VTY3JvbGxDaGFuZ2UgPSB3aXRoVmlld3BvcnREaXNwbGFjZW1lbnQodmlld3BvcnQsIHBhZ2VCb3JkZXJCb3hDZW50ZXIpO1xuICB2YXIgb2Zmc2V0JCQxID0gc3VidHJhY3Qod2l0aG91dFBhZ2VTY3JvbGxDaGFuZ2UsIGRyYWdnYWJsZS5wYWdlLmJvcmRlckJveC5jZW50ZXIpO1xuICByZXR1cm4gYWRkKGRyYWdnYWJsZS5jbGllbnQuYm9yZGVyQm94LmNlbnRlciwgb2Zmc2V0JCQxKTtcbn0pO1xuXG52YXIgbW92ZUNyb3NzQXhpcyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgaXNPdmVyID0gX3JlZi5pc092ZXIsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcyxcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIGRlc3RpbmF0aW9uID0gZ2V0QmVzdENyb3NzQXhpc0Ryb3BwYWJsZSh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIHNvdXJjZTogaXNPdmVyLFxuICAgIGRyb3BwYWJsZXM6IGRyb3BwYWJsZXMsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xuXG4gIGlmICghZGVzdGluYXRpb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBpbnNpZGVEZXN0aW5hdGlvbiA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCwgZHJhZ2dhYmxlcyk7XG4gIHZhciBtb3ZlUmVsYXRpdmVUbyA9IGdldENsb3Nlc3REcmFnZ2FibGUoe1xuICAgIGF4aXM6IGRlc3RpbmF0aW9uLmF4aXMsXG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uXG4gIH0pO1xuICB2YXIgaW1wYWN0ID0gbW92ZVRvTmV3RHJvcHBhYmxlKHtcbiAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBtb3ZlUmVsYXRpdmVUbzogbW92ZVJlbGF0aXZlVG8sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG5cbiAgaWYgKCFpbXBhY3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBwYWdlQm9yZGVyQm94Q2VudGVyID0gZ2V0UGFnZUJvcmRlckJveENlbnRlcih7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzXG4gIH0pO1xuICB2YXIgY2xpZW50U2VsZWN0aW9uID0gZ2V0Q2xpZW50RnJvbVBhZ2VCb3JkZXJCb3hDZW50ZXIoe1xuICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IHBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGNsaWVudFNlbGVjdGlvbjogY2xpZW50U2VsZWN0aW9uLFxuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBudWxsXG4gIH07XG59KTtcblxudmFyIGZvcndhcmQgPSB7XG4gIHZlcnRpY2FsOiAnZG93bicsXG4gIGhvcml6b250YWw6ICdyaWdodCdcbn07XG52YXIgYmFja3dhcmQgPSB7XG4gIHZlcnRpY2FsOiAndXAnLFxuICBob3Jpem9udGFsOiAnbGVmdCdcbn07XG5cbnZhciBtb3ZlVG9OZXh0Q29tYmluZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBpc0luSG9tZUxpc3QgPSBfcmVmLmlzSW5Ib21lTGlzdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgb3JpZ2luYWxJbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3Q7XG5cbiAgaWYgKCFkZXN0aW5hdGlvbi5pc0NvbWJpbmVFbmFibGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocHJldmlvdXNJbXBhY3QubWVyZ2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHByZXZpb3VzSW1wYWN0LmRlc3RpbmF0aW9uO1xuICAhbG9jYXRpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdOZWVkIGEgcHJldmlvdXMgbG9jYXRpb24gdG8gbW92ZSBmcm9tIGludG8gYSBjb21iaW5lJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgY3VycmVudEluZGV4ID0gbG9jYXRpb24uaW5kZXg7XG5cbiAgdmFyIGN1cnJlbnRJbnNpZGVEZXN0aW5hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hhbGxvdyA9IG9yaWdpbmFsSW5zaWRlRGVzdGluYXRpb24uc2xpY2UoKTtcblxuICAgIGlmIChpc0luSG9tZUxpc3QpIHtcbiAgICAgIHNoYWxsb3cuc3BsaWNlKGRyYWdnYWJsZS5kZXNjcmlwdG9yLmluZGV4LCAxKTtcbiAgICB9XG5cbiAgICBzaGFsbG93LnNwbGljZShsb2NhdGlvbi5pbmRleCwgMCwgZHJhZ2dhYmxlKTtcbiAgICByZXR1cm4gc2hhbGxvdztcbiAgfSgpO1xuXG4gIHZhciB0YXJnZXRJbmRleCA9IGlzTW92aW5nRm9yd2FyZCA/IGN1cnJlbnRJbmRleCArIDEgOiBjdXJyZW50SW5kZXggLSAxO1xuXG4gIGlmICh0YXJnZXRJbmRleCA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh0YXJnZXRJbmRleCA+IGN1cnJlbnRJbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGggLSAxKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gY3VycmVudEluc2lkZURlc3RpbmF0aW9uW3RhcmdldEluZGV4XTtcbiAgdmFyIG1lcmdlID0ge1xuICAgIHdoZW5FbnRlcmVkOiBpc01vdmluZ0ZvcndhcmQgPyBmb3J3YXJkIDogYmFja3dhcmQsXG4gICAgY29tYmluZToge1xuICAgICAgZHJhZ2dhYmxlSWQ6IHRhcmdldC5kZXNjcmlwdG9yLmlkLFxuICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWRcbiAgICB9XG4gIH07XG4gIHZhciBpbXBhY3QgPSB7XG4gICAgbW92ZW1lbnQ6IHByZXZpb3VzSW1wYWN0Lm1vdmVtZW50LFxuICAgIGRlc3RpbmF0aW9uOiBudWxsLFxuICAgIGRpcmVjdGlvbjogZGVzdGluYXRpb24uYXhpcy5kaXJlY3Rpb24sXG4gICAgbWVyZ2U6IG1lcmdlXG4gIH07XG4gIHJldHVybiBpbXBhY3Q7XG59KTtcblxudmFyIGFkZENsb3Nlc3QgPSBmdW5jdGlvbiBhZGRDbG9zZXN0KGFkZCwgZGlzcGxhY2VkKSB7XG4gIHZhciBhZGRlZCA9IHtcbiAgICBkcmFnZ2FibGVJZDogYWRkLmRlc2NyaXB0b3IuaWQsXG4gICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgIHNob3VsZEFuaW1hdGU6IHRydWVcbiAgfTtcbiAgcmV0dXJuIFthZGRlZF0uY29uY2F0KGRpc3BsYWNlZCk7XG59O1xudmFyIHJlbW92ZUNsb3Nlc3QgPSBmdW5jdGlvbiByZW1vdmVDbG9zZXN0KGRpc3BsYWNlZCkge1xuICByZXR1cm4gZGlzcGxhY2VkLnNsaWNlKDEpO1xufTtcblxudmFyIGZyb21SZW9yZGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGlzSW5Ib21lTGlzdCA9IF9yZWYuaXNJbkhvbWVMaXN0LFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBpbml0aWFsSW5zaWRlID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbjtcblxuICBpZiAocHJldmlvdXNJbXBhY3QubWVyZ2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHByZXZpb3VzSW1wYWN0LmRlc3RpbmF0aW9uO1xuICAhbG9jYXRpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgbW92ZSB0byBuZXh0IGluZGV4IHdpdGhvdXQgcHJldmlvdXMgZGVzdGluYXRpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBpbnNpZGVEZXN0aW5hdGlvbiA9IGluaXRpYWxJbnNpZGUuc2xpY2UoKTtcbiAgdmFyIGN1cnJlbnRJbmRleCA9IGxvY2F0aW9uLmluZGV4O1xuICB2YXIgaXNJbkZvcmVpZ25MaXN0ID0gIWlzSW5Ib21lTGlzdDtcblxuICBpZiAoaXNJbkZvcmVpZ25MaXN0KSB7XG4gICAgaW5zaWRlRGVzdGluYXRpb24uc3BsaWNlKGxvY2F0aW9uLmluZGV4LCAwLCBkcmFnZ2FibGUpO1xuICB9XG5cbiAgdmFyIHByb3Bvc2VkSW5kZXggPSBpc01vdmluZ0ZvcndhcmQgPyBjdXJyZW50SW5kZXggKyAxIDogY3VycmVudEluZGV4IC0gMTtcblxuICBpZiAocHJvcG9zZWRJbmRleCA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChwcm9wb3NlZEluZGV4ID4gaW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9wb3NlZEluZGV4OiBwcm9wb3NlZEluZGV4LFxuICAgIG1vZGlmeURpc3BsYWNlbWVudDogdHJ1ZVxuICB9O1xufSk7XG5cbnZhciBmcm9tQ29tYmluZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNJbkhvbWVMaXN0ID0gX3JlZi5pc0luSG9tZUxpc3QsXG4gICAgICBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIG1lcmdlID0gX3JlZi5tZXJnZTtcblxuICBpZiAoIWRlc3RpbmF0aW9uLmlzQ29tYmluZUVuYWJsZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtb3ZlbWVudCA9IHByZXZpb3VzSW1wYWN0Lm1vdmVtZW50O1xuICB2YXIgY29tYmluZUlkID0gbWVyZ2UuY29tYmluZS5kcmFnZ2FibGVJZDtcbiAgdmFyIGNvbWJpbmUgPSBkcmFnZ2FibGVzW2NvbWJpbmVJZF07XG4gIHZhciBjb21iaW5lSW5kZXggPSBjb21iaW5lLmRlc2NyaXB0b3IuaW5kZXg7XG4gIHZhciBpc0NvbWJpbmVEaXNwbGFjZWQgPSBCb29sZWFuKG1vdmVtZW50Lm1hcFtjb21iaW5lSWRdKTtcblxuICBpZiAoIWlzQ29tYmluZURpc3BsYWNlZCkge1xuICAgIHZhciB3aWxsRGlzcGxhY2VGb3J3YXJkID0gZ2V0V2lsbERpc3BsYWNlRm9yd2FyZCh7XG4gICAgICBpc0luSG9tZUxpc3Q6IGlzSW5Ib21lTGlzdCxcbiAgICAgIHByb3Bvc2VkSW5kZXg6IGNvbWJpbmVJbmRleCxcbiAgICAgIHN0YXJ0SW5kZXhJbkhvbWU6IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmluZGV4XG4gICAgfSk7XG5cbiAgICBpZiAod2lsbERpc3BsYWNlRm9yd2FyZCkge1xuICAgICAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByb3Bvc2VkSW5kZXg6IGNvbWJpbmVJbmRleCArIDEsXG4gICAgICAgICAgbW9kaWZ5RGlzcGxhY2VtZW50OiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9wb3NlZEluZGV4OiBjb21iaW5lSW5kZXgsXG4gICAgICAgIG1vZGlmeURpc3BsYWNlbWVudDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9wb3NlZEluZGV4OiBjb21iaW5lSW5kZXgsXG4gICAgICAgIG1vZGlmeURpc3BsYWNlbWVudDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcHJvcG9zZWRJbmRleDogY29tYmluZUluZGV4IC0gMSxcbiAgICAgIG1vZGlmeURpc3BsYWNlbWVudDogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgdmFyIGlzRGlzcGxhY2VkRm9yd2FyZCA9IG1vdmVtZW50LndpbGxEaXNwbGFjZUZvcndhcmQ7XG4gIHZhciB2aXN1YWxJbmRleCA9IGlzRGlzcGxhY2VkRm9yd2FyZCA/IGNvbWJpbmVJbmRleCArIDEgOiBjb21iaW5lSW5kZXggLSAxO1xuXG4gIGlmIChpc0Rpc3BsYWNlZEZvcndhcmQpIHtcbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9wb3NlZEluZGV4OiB2aXN1YWxJbmRleCxcbiAgICAgICAgbW9kaWZ5RGlzcGxhY2VtZW50OiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwcm9wb3NlZEluZGV4OiB2aXN1YWxJbmRleCAtIDEsXG4gICAgICBtb2RpZnlEaXNwbGFjZW1lbnQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpc01vdmluZ0ZvcndhcmQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvcG9zZWRJbmRleDogdmlzdWFsSW5kZXggKyAxLFxuICAgICAgbW9kaWZ5RGlzcGxhY2VtZW50OiBmYWxzZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHByb3Bvc2VkSW5kZXg6IHZpc3VhbEluZGV4LFxuICAgIG1vZGlmeURpc3BsYWNlbWVudDogdHJ1ZVxuICB9O1xufSk7XG5cbnZhciBnZXRJc0luY3JlYXNpbmdEaXNwbGFjZW1lbnQgPSBmdW5jdGlvbiBnZXRJc0luY3JlYXNpbmdEaXNwbGFjZW1lbnQoX3JlZikge1xuICB2YXIgaXNJbkhvbWVMaXN0ID0gX3JlZi5pc0luSG9tZUxpc3QsXG4gICAgICBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIHByb3Bvc2VkSW5kZXggPSBfcmVmLnByb3Bvc2VkSW5kZXgsXG4gICAgICBzdGFydEluZGV4SW5Ib21lID0gX3JlZi5zdGFydEluZGV4SW5Ib21lO1xuXG4gIGlmICghaXNJbkhvbWVMaXN0KSB7XG4gICAgcmV0dXJuICFpc01vdmluZ0ZvcndhcmQ7XG4gIH1cblxuICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgcmV0dXJuIHByb3Bvc2VkSW5kZXggPiBzdGFydEluZGV4SW5Ib21lO1xuICB9XG5cbiAgcmV0dXJuIHByb3Bvc2VkSW5kZXggPCBzdGFydEluZGV4SW5Ib21lO1xufTtcblxudmFyIG1vdmVUb05leHRJbmRleCA9IChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IF9yZWYyLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGlzSW5Ib21lTGlzdCA9IF9yZWYyLmlzSW5Ib21lTGlzdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYyLmRyYWdnYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmMi5kcmFnZ2FibGVzLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmMi5kZXN0aW5hdGlvbixcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZjIuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYyLnByZXZpb3VzSW1wYWN0O1xuXG4gIHZhciBpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJldmlvdXNJbXBhY3QuZGVzdGluYXRpb24pIHtcbiAgICAgIHJldHVybiBmcm9tUmVvcmRlcih7XG4gICAgICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgICBpc0luSG9tZUxpc3Q6IGlzSW5Ib21lTGlzdCxcbiAgICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICAgICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAhcHJldmlvdXNJbXBhY3QubWVyZ2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgbW92ZSB0byBuZXh0IHNwb3Qgd2l0aG91dCBhIGRlc3RpbmF0aW9uIG9yIG1lcmdlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBmcm9tQ29tYmluZSh7XG4gICAgICBpc0luSG9tZUxpc3Q6IGlzSW5Ib21lTGlzdCxcbiAgICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgICAgbWVyZ2U6IHByZXZpb3VzSW1wYWN0Lm1lcmdlXG4gICAgfSk7XG4gIH0oKTtcblxuICBpZiAoaW5zdHJ1Y3Rpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHByb3Bvc2VkSW5kZXggPSBpbnN0cnVjdGlvbi5wcm9wb3NlZEluZGV4LFxuICAgICAgbW9kaWZ5RGlzcGxhY2VtZW50ID0gaW5zdHJ1Y3Rpb24ubW9kaWZ5RGlzcGxhY2VtZW50O1xuICB2YXIgc3RhcnRJbmRleEluSG9tZSA9IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmluZGV4O1xuICB2YXIgd2lsbERpc3BsYWNlRm9yd2FyZCA9IGdldFdpbGxEaXNwbGFjZUZvcndhcmQoe1xuICAgIGlzSW5Ib21lTGlzdDogaXNJbkhvbWVMaXN0LFxuICAgIHByb3Bvc2VkSW5kZXg6IHByb3Bvc2VkSW5kZXgsXG4gICAgc3RhcnRJbmRleEluSG9tZTogc3RhcnRJbmRleEluSG9tZVxuICB9KTtcbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoZGVzdGluYXRpb24uYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnksIHdpbGxEaXNwbGFjZUZvcndhcmQpO1xuICB2YXIgYXRQcm9wb3NlZEluZGV4ID0gaW5zaWRlRGVzdGluYXRpb25bcHJvcG9zZWRJbmRleF07XG5cbiAgdmFyIGRpc3BsYWNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW1vZGlmeURpc3BsYWNlbWVudCkge1xuICAgICAgcmV0dXJuIHByZXZpb3VzSW1wYWN0Lm1vdmVtZW50LmRpc3BsYWNlZDtcbiAgICB9XG5cbiAgICB2YXIgaXNJbmNyZWFzaW5nRGlzcGxhY2VtZW50ID0gZ2V0SXNJbmNyZWFzaW5nRGlzcGxhY2VtZW50KHtcbiAgICAgIGlzSW5Ib21lTGlzdDogaXNJbkhvbWVMaXN0LFxuICAgICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgICBwcm9wb3NlZEluZGV4OiBwcm9wb3NlZEluZGV4LFxuICAgICAgc3RhcnRJbmRleEluSG9tZTogc3RhcnRJbmRleEluSG9tZVxuICAgIH0pO1xuICAgIHZhciBsYXN0RGlzcGxhY2VkID0gcHJldmlvdXNJbXBhY3QubW92ZW1lbnQuZGlzcGxhY2VkO1xuICAgIHJldHVybiBpc0luY3JlYXNpbmdEaXNwbGFjZW1lbnQgPyBhZGRDbG9zZXN0KGF0UHJvcG9zZWRJbmRleCwgbGFzdERpc3BsYWNlZCkgOiByZW1vdmVDbG9zZXN0KGxhc3REaXNwbGFjZWQpO1xuICB9KCk7XG5cbiAgcmV0dXJuIHtcbiAgICBtb3ZlbWVudDoge1xuICAgICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgICAgd2lsbERpc3BsYWNlRm9yd2FyZDogd2lsbERpc3BsYWNlRm9yd2FyZCxcbiAgICAgIGRpc3BsYWNlZDogZGlzcGxhY2VkLFxuICAgICAgbWFwOiBnZXREaXNwbGFjZW1lbnRNYXAoZGlzcGxhY2VkKVxuICAgIH0sXG4gICAgZGlyZWN0aW9uOiBkZXN0aW5hdGlvbi5heGlzLmRpcmVjdGlvbixcbiAgICBkZXN0aW5hdGlvbjoge1xuICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsXG4gICAgICBpbmRleDogcHJvcG9zZWRJbmRleFxuICAgIH0sXG4gICAgbWVyZ2U6IG51bGxcbiAgfTtcbn0pO1xuXG52YXIgc2Nyb2xsVmlld3BvcnQgPSAoZnVuY3Rpb24gKHZpZXdwb3J0LCBuZXdTY3JvbGwpIHtcbiAgdmFyIGRpZmYgPSBzdWJ0cmFjdChuZXdTY3JvbGwsIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKTtcbiAgdmFyIGRpc3BsYWNlbWVudCA9IG5lZ2F0ZShkaWZmKTtcbiAgdmFyIGZyYW1lID0gZ2V0UmVjdCh7XG4gICAgdG9wOiBuZXdTY3JvbGwueSxcbiAgICBib3R0b206IG5ld1Njcm9sbC55ICsgdmlld3BvcnQuZnJhbWUuaGVpZ2h0LFxuICAgIGxlZnQ6IG5ld1Njcm9sbC54LFxuICAgIHJpZ2h0OiBuZXdTY3JvbGwueCArIHZpZXdwb3J0LmZyYW1lLndpZHRoXG4gIH0pO1xuICB2YXIgdXBkYXRlZCA9IHtcbiAgICBmcmFtZTogZnJhbWUsXG4gICAgc2Nyb2xsOiB7XG4gICAgICBpbml0aWFsOiB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbCxcbiAgICAgIG1heDogdmlld3BvcnQuc2Nyb2xsLm1heCxcbiAgICAgIGN1cnJlbnQ6IG5ld1Njcm9sbCxcbiAgICAgIGRpZmY6IHtcbiAgICAgICAgdmFsdWU6IGRpZmYsXG4gICAgICAgIGRpc3BsYWNlbWVudDogZGlzcGxhY2VtZW50XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlZDtcbn0pO1xuXG52YXIgd2l0aE5ld0Rpc3BsYWNlbWVudCA9IChmdW5jdGlvbiAoaW1wYWN0LCBkaXNwbGFjZWQpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBpbXBhY3QsIHtcbiAgICBtb3ZlbWVudDogX2V4dGVuZHMoe30sIGltcGFjdC5tb3ZlbWVudCwge1xuICAgICAgZGlzcGxhY2VkOiBkaXNwbGFjZWQsXG4gICAgICBtYXA6IGdldERpc3BsYWNlbWVudE1hcChkaXNwbGFjZWQpXG4gICAgfSlcbiAgfSk7XG59KTtcblxudmFyIHNwZWN1bGF0aXZlbHlJbmNyZWFzZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgbWF4U2Nyb2xsQ2hhbmdlID0gX3JlZi5tYXhTY3JvbGxDaGFuZ2U7XG4gIHZhciBkaXNwbGFjZWQgPSBpbXBhY3QubW92ZW1lbnQuZGlzcGxhY2VkO1xuICB2YXIgc2Nyb2xsZWRWaWV3cG9ydCA9IHNjcm9sbFZpZXdwb3J0KHZpZXdwb3J0LCBhZGQodmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQsIG1heFNjcm9sbENoYW5nZSkpO1xuICB2YXIgc2Nyb2xsZWREcm9wcGFibGUgPSBkZXN0aW5hdGlvbi5mcmFtZSA/IHNjcm9sbERyb3BwYWJsZShkZXN0aW5hdGlvbiwgYWRkKGRlc3RpbmF0aW9uLmZyYW1lLnNjcm9sbC5jdXJyZW50LCBtYXhTY3JvbGxDaGFuZ2UpKSA6IGRlc3RpbmF0aW9uO1xuICB2YXIgdXBkYXRlZCA9IGRpc3BsYWNlZC5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgaWYgKGVudHJ5LmlzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBnZXREaXNwbGFjZW1lbnQoe1xuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGVzW2VudHJ5LmRyYWdnYWJsZUlkXSxcbiAgICAgIGRlc3RpbmF0aW9uOiBzY3JvbGxlZERyb3BwYWJsZSxcbiAgICAgIHByZXZpb3VzSW1wYWN0OiBpbXBhY3QsXG4gICAgICB2aWV3cG9ydDogc2Nyb2xsZWRWaWV3cG9ydC5mcmFtZVxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXN1bHQuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm4gZW50cnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRyYWdnYWJsZUlkOiBlbnRyeS5kcmFnZ2FibGVJZCxcbiAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgIHNob3VsZEFuaW1hdGU6IGZhbHNlXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiB3aXRoTmV3RGlzcGxhY2VtZW50KGltcGFjdCwgdXBkYXRlZCk7XG59KTtcblxudmFyIG1vdmVUb05leHRQbGFjZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIHByZXZpb3VzQ2xpZW50U2VsZWN0aW9uID0gX3JlZi5wcmV2aW91c0NsaWVudFNlbGVjdGlvbjtcblxuICBpZiAoIWRlc3RpbmF0aW9uLmlzRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkLCBkcmFnZ2FibGVzKTtcbiAgdmFyIGlzSW5Ib21lTGlzdCA9IGlzSG9tZU9mKGRyYWdnYWJsZSwgZGVzdGluYXRpb24pO1xuICB2YXIgaW1wYWN0ID0gbW92ZVRvTmV4dENvbWJpbmUoe1xuICAgIGlzSW5Ib21lTGlzdDogaXNJbkhvbWVMaXN0LFxuICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0XG4gIH0pIHx8IG1vdmVUb05leHRJbmRleCh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgaXNJbkhvbWVMaXN0OiBpc0luSG9tZUxpc3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdFxuICB9KTtcblxuICBpZiAoIWltcGFjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBnZXRQYWdlQm9yZGVyQm94Q2VudGVyKHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcm9wcGFibGU6IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXNcbiAgfSk7XG4gIHZhciBpc1Zpc2libGVJbk5ld0xvY2F0aW9uID0gaXNUb3RhbGx5VmlzaWJsZUluTmV3TG9jYXRpb24oe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBuZXdQYWdlQm9yZGVyQm94Q2VudGVyOiBwYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiBmYWxzZSxcbiAgICBvbmx5T25NYWluQXhpczogdHJ1ZVxuICB9KTtcblxuICBpZiAoaXNWaXNpYmxlSW5OZXdMb2NhdGlvbikge1xuICAgIHZhciBjbGllbnRTZWxlY3Rpb24gPSBnZXRDbGllbnRGcm9tUGFnZUJvcmRlckJveENlbnRlcih7XG4gICAgICBwYWdlQm9yZGVyQm94Q2VudGVyOiBwYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgY2xpZW50U2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHZhciBkaXN0YW5jZSQkMSA9IHN1YnRyYWN0KHBhZ2VCb3JkZXJCb3hDZW50ZXIsIHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcik7XG4gIHZhciBjYXV0aW91cyA9IHNwZWN1bGF0aXZlbHlJbmNyZWFzZSh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIG1heFNjcm9sbENoYW5nZTogZGlzdGFuY2UkJDFcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgY2xpZW50U2VsZWN0aW9uOiBwcmV2aW91c0NsaWVudFNlbGVjdGlvbixcbiAgICBpbXBhY3Q6IGNhdXRpb3VzLFxuICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBkaXN0YW5jZSQkMVxuICB9O1xufSk7XG5cbnZhciBnZXREcm9wcGFibGVPdmVyJDEgPSBmdW5jdGlvbiBnZXREcm9wcGFibGVPdmVyKGltcGFjdCwgZHJvcHBhYmxlcykge1xuICB2YXIgaWQgPSB3aGF0SXNEcmFnZ2VkT3ZlcihpbXBhY3QpO1xuICByZXR1cm4gaWQgPyBkcm9wcGFibGVzW2lkXSA6IG51bGw7XG59O1xuXG52YXIgbW92ZUluRGlyZWN0aW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICB0eXBlID0gX3JlZi50eXBlO1xuICB2YXIgaXNBY3R1YWxseU92ZXIgPSBnZXREcm9wcGFibGVPdmVyJDEoc3RhdGUuaW1wYWN0LCBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXMpO1xuICB2YXIgaXNNYWluQXhpc01vdmVtZW50QWxsb3dlZCA9IEJvb2xlYW4oaXNBY3R1YWxseU92ZXIpO1xuICB2YXIgaG9tZSA9IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcm9wcGFibGUuaWRdO1xuICB2YXIgaXNPdmVyID0gaXNBY3R1YWxseU92ZXIgfHwgaG9tZTtcbiAgdmFyIGRpcmVjdGlvbiA9IGlzT3Zlci5heGlzLmRpcmVjdGlvbjtcbiAgdmFyIGlzTW92aW5nT25NYWluQXhpcyA9IGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiAodHlwZSA9PT0gJ01PVkVfVVAnIHx8IHR5cGUgPT09ICdNT1ZFX0RPV04nKSB8fCBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAodHlwZSA9PT0gJ01PVkVfTEVGVCcgfHwgdHlwZSA9PT0gJ01PVkVfUklHSFQnKTtcblxuICBpZiAoaXNNb3ZpbmdPbk1haW5BeGlzICYmICFpc01haW5BeGlzTW92ZW1lbnRBbGxvd2VkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gdHlwZSA9PT0gJ01PVkVfRE9XTicgfHwgdHlwZSA9PT0gJ01PVkVfUklHSFQnO1xuICB2YXIgZHJhZ2dhYmxlID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gIHZhciBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBzdGF0ZS5jdXJyZW50LnBhZ2UuYm9yZGVyQm94Q2VudGVyO1xuICB2YXIgX3N0YXRlJGRpbWVuc2lvbnMgPSBzdGF0ZS5kaW1lbnNpb25zLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9zdGF0ZSRkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gX3N0YXRlJGRpbWVuc2lvbnMuZHJvcHBhYmxlcztcbiAgdmFyIHZpZXdwb3J0ID0gc3RhdGUudmlld3BvcnQ7XG4gIHJldHVybiBpc01vdmluZ09uTWFpbkF4aXMgPyBtb3ZlVG9OZXh0UGxhY2Uoe1xuICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBpc092ZXIsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyOiBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgcHJldmlvdXNDbGllbnRTZWxlY3Rpb246IHN0YXRlLmN1cnJlbnQuY2xpZW50LnNlbGVjdGlvbixcbiAgICBwcmV2aW91c0ltcGFjdDogc3RhdGUuaW1wYWN0XG4gIH0pIDogbW92ZUNyb3NzQXhpcyh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyOiBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgaXNPdmVyOiBpc092ZXIsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBkcm9wcGFibGVzOiBkcm9wcGFibGVzLFxuICAgIHByZXZpb3VzSW1wYWN0OiBzdGF0ZS5pbXBhY3QsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xufSk7XG5cbmZ1bmN0aW9uIGlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnO1xufVxuXG52YXIgZ2V0VmVydGljYWwgPSBmdW5jdGlvbiBnZXRWZXJ0aWNhbChwcmV2aW91cywgZGlmZikge1xuICBpZiAoZGlmZiA9PT0gMCkge1xuICAgIHJldHVybiBwcmV2aW91cztcbiAgfVxuXG4gIHJldHVybiBkaWZmID4gMCA/ICdkb3duJyA6ICd1cCc7XG59O1xuXG52YXIgZ2V0SG9yaXpvbnRhbCA9IGZ1bmN0aW9uIGdldEhvcml6b250YWwocHJldmlvdXMsIGRpZmYpIHtcbiAgaWYgKGRpZmYgPT09IDApIHtcbiAgICByZXR1cm4gcHJldmlvdXM7XG4gIH1cblxuICByZXR1cm4gZGlmZiA+IDAgPyAncmlnaHQnIDogJ2xlZnQnO1xufTtcblxudmFyIGdldFVzZXJEaXJlY3Rpb24gPSAoZnVuY3Rpb24gKHByZXZpb3VzLCBvbGRQYWdlQm9yZGVyQm94Q2VudGVyLCBuZXdQYWdlQm9yZGVyQm94Q2VudGVyKSB7XG4gIHZhciBkaWZmID0gc3VidHJhY3QobmV3UGFnZUJvcmRlckJveENlbnRlciwgb2xkUGFnZUJvcmRlckJveENlbnRlcik7XG4gIHJldHVybiB7XG4gICAgaG9yaXpvbnRhbDogZ2V0SG9yaXpvbnRhbChwcmV2aW91cy5ob3Jpem9udGFsLCBkaWZmLngpLFxuICAgIHZlcnRpY2FsOiBnZXRWZXJ0aWNhbChwcmV2aW91cy52ZXJ0aWNhbCwgZGlmZi55KVxuICB9O1xufSk7XG5cbnZhciB1cGRhdGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIGZvcmNlZENsaWVudFNlbGVjdGlvbiA9IF9yZWYuY2xpZW50U2VsZWN0aW9uLFxuICAgICAgZm9yY2VkRGltZW5zaW9ucyA9IF9yZWYuZGltZW5zaW9ucyxcbiAgICAgIGZvcmNlZFZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGZvcmNlZEltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgc2Nyb2xsSnVtcFJlcXVlc3QgPSBfcmVmLnNjcm9sbEp1bXBSZXF1ZXN0O1xuICB2YXIgdmlld3BvcnQgPSBmb3JjZWRWaWV3cG9ydCB8fCBzdGF0ZS52aWV3cG9ydDtcbiAgdmFyIGN1cnJlbnRXaW5kb3dTY3JvbGwgPSB2aWV3cG9ydC5zY3JvbGwuY3VycmVudDtcbiAgdmFyIGRpbWVuc2lvbnMgPSBmb3JjZWREaW1lbnNpb25zIHx8IHN0YXRlLmRpbWVuc2lvbnM7XG4gIHZhciBjbGllbnRTZWxlY3Rpb24gPSBmb3JjZWRDbGllbnRTZWxlY3Rpb24gfHwgc3RhdGUuY3VycmVudC5jbGllbnQuc2VsZWN0aW9uO1xuICB2YXIgb2Zmc2V0JCQxID0gc3VidHJhY3QoY2xpZW50U2VsZWN0aW9uLCBzdGF0ZS5pbml0aWFsLmNsaWVudC5zZWxlY3Rpb24pO1xuICB2YXIgY2xpZW50ID0ge1xuICAgIG9mZnNldDogb2Zmc2V0JCQxLFxuICAgIHNlbGVjdGlvbjogY2xpZW50U2VsZWN0aW9uLFxuICAgIGJvcmRlckJveENlbnRlcjogYWRkKHN0YXRlLmluaXRpYWwuY2xpZW50LmJvcmRlckJveENlbnRlciwgb2Zmc2V0JCQxKVxuICB9O1xuICB2YXIgcGFnZSA9IHtcbiAgICBzZWxlY3Rpb246IGFkZChjbGllbnQuc2VsZWN0aW9uLCBjdXJyZW50V2luZG93U2Nyb2xsKSxcbiAgICBib3JkZXJCb3hDZW50ZXI6IGFkZChjbGllbnQuYm9yZGVyQm94Q2VudGVyLCBjdXJyZW50V2luZG93U2Nyb2xsKVxuICB9O1xuICB2YXIgY3VycmVudCA9IHtcbiAgICBjbGllbnQ6IGNsaWVudCxcbiAgICBwYWdlOiBwYWdlXG4gIH07XG4gIHZhciB1c2VyRGlyZWN0aW9uID0gZ2V0VXNlckRpcmVjdGlvbihzdGF0ZS51c2VyRGlyZWN0aW9uLCBzdGF0ZS5jdXJyZW50LnBhZ2UuYm9yZGVyQm94Q2VudGVyLCBjdXJyZW50LnBhZ2UuYm9yZGVyQm94Q2VudGVyKTtcblxuICBpZiAoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBwaGFzZTogJ0NPTExFQ1RJTkcnXG4gICAgfSwgc3RhdGUsIHtcbiAgICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICBjdXJyZW50OiBjdXJyZW50LFxuICAgICAgdXNlckRpcmVjdGlvbjogdXNlckRpcmVjdGlvblxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGRyYWdnYWJsZSA9IGRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgbmV3SW1wYWN0ID0gZm9yY2VkSW1wYWN0IHx8IGdldERyYWdJbXBhY3Qoe1xuICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IHBhZ2UuYm9yZGVyQm94Q2VudGVyLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRyYWdnYWJsZXM6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICBkcm9wcGFibGVzOiBkaW1lbnNpb25zLmRyb3BwYWJsZXMsXG4gICAgcHJldmlvdXNJbXBhY3Q6IHN0YXRlLmltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgdXNlckRpcmVjdGlvbjogdXNlckRpcmVjdGlvblxuICB9KTtcbiAgdmFyIHdpdGhVcGRhdGVkUGxhY2Vob2xkZXJzID0gZ2V0RGltZW5zaW9uTWFwV2l0aFBsYWNlaG9sZGVyKHtcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBpbXBhY3Q6IG5ld0ltcGFjdCxcbiAgICBwcmV2aW91c0ltcGFjdDogc3RhdGUuaW1wYWN0LFxuICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnNcbiAgfSk7XG5cbiAgdmFyIHJlc3VsdCA9IF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgIGN1cnJlbnQ6IGN1cnJlbnQsXG4gICAgdXNlckRpcmVjdGlvbjogdXNlckRpcmVjdGlvbixcbiAgICBkaW1lbnNpb25zOiB3aXRoVXBkYXRlZFBsYWNlaG9sZGVycyxcbiAgICBpbXBhY3Q6IG5ld0ltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IHNjcm9sbEp1bXBSZXF1ZXN0IHx8IG51bGwsXG4gICAgZm9yY2VTaG91bGRBbmltYXRlOiBzY3JvbGxKdW1wUmVxdWVzdCA/IGZhbHNlIDogbnVsbFxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciByZWNvbXB1dGVEaXNwbGFjZW1lbnRWaXNpYmlsaXR5ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXM7XG4gIHZhciB1cGRhdGVkID0gaW1wYWN0Lm1vdmVtZW50LmRpc3BsYWNlZC5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIGdldERpc3BsYWNlbWVudCh7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZXNbZW50cnkuZHJhZ2dhYmxlSWRdLFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3Q6IGltcGFjdCxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHdpdGhOZXdEaXNwbGFjZW1lbnQoaW1wYWN0LCB1cGRhdGVkKTtcbn0pO1xuXG52YXIgZ2V0Q2xpZW50Qm9yZGVyQm94Q2VudGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJvcHBhYmxlID0gX3JlZi5kcm9wcGFibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXIoe1xuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgZHJvcHBhYmxlOiBkcm9wcGFibGVcbiAgfSk7XG4gIHJldHVybiBnZXRDbGllbnRGcm9tUGFnZUJvcmRlckJveENlbnRlcih7XG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG59KTtcblxudmFyIHJlZnJlc2hTbmFwID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBmb3JjZWREaW1lbnNpb25zID0gX3JlZi5kaW1lbnNpb25zLFxuICAgICAgZm9yY2VkVmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICAhKHN0YXRlLm1vdmVtZW50TW9kZSA9PT0gJ1NOQVAnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgbmVlZHNWaXNpYmlsaXR5Q2hlY2sgPSBzdGF0ZS5pbXBhY3Q7XG4gIHZhciB2aWV3cG9ydCA9IGZvcmNlZFZpZXdwb3J0IHx8IHN0YXRlLnZpZXdwb3J0O1xuICB2YXIgZGltZW5zaW9ucyA9IGZvcmNlZERpbWVuc2lvbnMgfHwgc3RhdGUuZGltZW5zaW9ucztcbiAgdmFyIGRyYWdnYWJsZXMgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gZGltZW5zaW9ucy5kcm9wcGFibGVzO1xuICB2YXIgZHJhZ2dhYmxlID0gZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgaXNPdmVyID0gd2hhdElzRHJhZ2dlZE92ZXIobmVlZHNWaXNpYmlsaXR5Q2hlY2spO1xuICAhaXNPdmVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnTXVzdCBiZSBvdmVyIGEgZGVzdGluYXRpb24gaW4gU05BUCBtb3ZlbWVudCBtb2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZGVzdGluYXRpb24gPSBkcm9wcGFibGVzW2lzT3Zlcl07XG4gIHZhciBpbXBhY3QgPSByZWNvbXB1dGVEaXNwbGFjZW1lbnRWaXNpYmlsaXR5KHtcbiAgICBpbXBhY3Q6IG5lZWRzVmlzaWJpbGl0eUNoZWNrLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlc1xuICB9KTtcbiAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGdldENsaWVudEJvcmRlckJveENlbnRlcih7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9KTtcbiAgcmV0dXJuIHVwZGF0ZSh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgY2xpZW50U2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgc3RhdGU6IHN0YXRlLFxuICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xufSk7XG5cbnZhciBpc1NuYXBwaW5nID0gZnVuY3Rpb24gaXNTbmFwcGluZyhzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUubW92ZW1lbnRNb2RlID09PSAnU05BUCc7XG59O1xuXG52YXIgcG9zdERyb3BwYWJsZUNoYW5nZSA9IGZ1bmN0aW9uIHBvc3REcm9wcGFibGVDaGFuZ2Uoc3RhdGUsIHVwZGF0ZWQsIGlzRW5hYmxlZENoYW5naW5nKSB7XG4gIHZhciBkaW1lbnNpb25zID0gcGF0Y2hEcm9wcGFibGVNYXAoc3RhdGUuZGltZW5zaW9ucywgdXBkYXRlZCk7XG5cbiAgaWYgKCFpc1NuYXBwaW5nKHN0YXRlKSB8fCBpc0VuYWJsZWRDaGFuZ2luZykge1xuICAgIHJldHVybiB1cGRhdGUoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgZGltZW5zaW9uczogZGltZW5zaW9uc1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlZnJlc2hTbmFwKHtcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgZGltZW5zaW9uczogZGltZW5zaW9uc1xuICB9KTtcbn07XG5cbnZhciBpZGxlID0ge1xuICBwaGFzZTogJ0lETEUnXG59O1xudmFyIHJlZHVjZXIgPSAoZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IGlkbGU7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdDTEVBTicpIHtcbiAgICByZXR1cm4gaWRsZTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0lOSVRJQUxfUFVCTElTSCcpIHtcbiAgICAhKHN0YXRlLnBoYXNlID09PSAnSURMRScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSU5JVElBTF9QVUJMSVNIIG11c3QgY29tZSBhZnRlciBhIElETEUgcGhhc2UnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9hY3Rpb24kcGF5bG9hZCA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICBjcml0aWNhbCA9IF9hY3Rpb24kcGF5bG9hZC5jcml0aWNhbCxcbiAgICAgICAgY2xpZW50U2VsZWN0aW9uID0gX2FjdGlvbiRwYXlsb2FkLmNsaWVudFNlbGVjdGlvbixcbiAgICAgICAgdmlld3BvcnQgPSBfYWN0aW9uJHBheWxvYWQudmlld3BvcnQsXG4gICAgICAgIGRpbWVuc2lvbnMgPSBfYWN0aW9uJHBheWxvYWQuZGltZW5zaW9ucyxcbiAgICAgICAgbW92ZW1lbnRNb2RlID0gX2FjdGlvbiRwYXlsb2FkLm1vdmVtZW50TW9kZTtcbiAgICB2YXIgZHJhZ2dhYmxlID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzW2NyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gICAgdmFyIGhvbWUgPSBkaW1lbnNpb25zLmRyb3BwYWJsZXNbY3JpdGljYWwuZHJvcHBhYmxlLmlkXTtcbiAgICB2YXIgY2xpZW50ID0ge1xuICAgICAgc2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgICBib3JkZXJCb3hDZW50ZXI6IGRyYWdnYWJsZS5jbGllbnQuYm9yZGVyQm94LmNlbnRlcixcbiAgICAgIG9mZnNldDogb3JpZ2luXG4gICAgfTtcbiAgICB2YXIgaW5pdGlhbCA9IHtcbiAgICAgIGNsaWVudDogY2xpZW50LFxuICAgICAgcGFnZToge1xuICAgICAgICBzZWxlY3Rpb246IGFkZChjbGllbnQuc2VsZWN0aW9uLCB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbCksXG4gICAgICAgIGJvcmRlckJveENlbnRlcjogYWRkKGNsaWVudC5zZWxlY3Rpb24sIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGlzV2luZG93U2Nyb2xsQWxsb3dlZCA9IHRvRHJvcHBhYmxlTGlzdChkaW1lbnNpb25zLmRyb3BwYWJsZXMpLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gIWl0ZW0uaXNGaXhlZE9uUGFnZTtcbiAgICB9KTtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgcGhhc2U6ICdEUkFHR0lORycsXG4gICAgICBpc0RyYWdnaW5nOiB0cnVlLFxuICAgICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgICAgbW92ZW1lbnRNb2RlOiBtb3ZlbWVudE1vZGUsXG4gICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICAgICAgaW5pdGlhbDogaW5pdGlhbCxcbiAgICAgIGN1cnJlbnQ6IGluaXRpYWwsXG4gICAgICBpc1dpbmRvd1Njcm9sbEFsbG93ZWQ6IGlzV2luZG93U2Nyb2xsQWxsb3dlZCxcbiAgICAgIGltcGFjdDogZ2V0SG9tZUltcGFjdChkcmFnZ2FibGUsIGhvbWUpLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgdXNlckRpcmVjdGlvbjogZm9yd2FyZCxcbiAgICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBudWxsLFxuICAgICAgZm9yY2VTaG91bGRBbmltYXRlOiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnQ09MTEVDVElPTl9TVEFSVElORycpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycgfHwgc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ29sbGVjdGlvbiBjYW5ub3Qgc3RhcnQgZnJvbSBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgX3Jlc3VsdCA9IF9leHRlbmRzKHtcbiAgICAgIHBoYXNlOiAnQ09MTEVDVElORydcbiAgICB9LCBzdGF0ZSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbXCJwaGFzZVwiXSA9ICdDT0xMRUNUSU5HJywgX2V4dGVuZHMyKSk7XG5cbiAgICByZXR1cm4gX3Jlc3VsdDtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ1BVQkxJU0hfV0hJTEVfRFJBR0dJTkcnKSB7XG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiVW5leHBlY3RlZCBcIiArIGFjdGlvbi50eXBlICsgXCIgcmVjZWl2ZWQgaW4gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBwdWJsaXNoV2hpbGVEcmFnZ2luZyh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBwdWJsaXNoZWQ6IGFjdGlvbi5wYXlsb2FkXG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdNT1ZFJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAhaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBhY3Rpb24udHlwZSArIFwiIG5vdCBwZXJtaXR0ZWQgaW4gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfY2xpZW50U2VsZWN0aW9uID0gYWN0aW9uLnBheWxvYWQuY2xpZW50O1xuXG4gICAgaWYgKGlzRXF1YWwoX2NsaWVudFNlbGVjdGlvbiwgc3RhdGUuY3VycmVudC5jbGllbnQuc2VsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGUoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgY2xpZW50U2VsZWN0aW9uOiBfY2xpZW50U2VsZWN0aW9uLFxuICAgICAgaW1wYWN0OiBpc1NuYXBwaW5nKHN0YXRlKSA/IHN0YXRlLmltcGFjdCA6IG51bGxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ1VQREFURV9EUk9QUEFCTEVfU0NST0xMJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGFjdGlvbi50eXBlICsgXCIgbm90IHBlcm1pdHRlZCBpbiBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9hY3Rpb24kcGF5bG9hZDIgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgaWQgPSBfYWN0aW9uJHBheWxvYWQyLmlkLFxuICAgICAgICBvZmZzZXQkJDEgPSBfYWN0aW9uJHBheWxvYWQyLm9mZnNldDtcbiAgICB2YXIgdGFyZ2V0ID0gc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW2lkXTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbGVkID0gc2Nyb2xsRHJvcHBhYmxlKHRhcmdldCwgb2Zmc2V0JCQxKTtcbiAgICByZXR1cm4gcG9zdERyb3BwYWJsZUNoYW5nZShzdGF0ZSwgc2Nyb2xsZWQsIGZhbHNlKTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ1VQREFURV9EUk9QUEFCTEVfSVNfRU5BQkxFRCcpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBdHRlbXB0aW5nIHRvIG1vdmUgaW4gYW4gdW5zdXBwb3J0ZWQgcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfYWN0aW9uJHBheWxvYWQzID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIF9pZCA9IF9hY3Rpb24kcGF5bG9hZDMuaWQsXG4gICAgICAgIGlzRW5hYmxlZCA9IF9hY3Rpb24kcGF5bG9hZDMuaXNFbmFibGVkO1xuICAgIHZhciBfdGFyZ2V0ID0gc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW19pZF07XG4gICAgIV90YXJnZXQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGZpbmQgRHJvcHBhYmxlW2lkOiBcIiArIF9pZCArIFwiXSB0byB0b2dnbGUgaXRzIGVuYWJsZWQgc3RhdGVcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoX3RhcmdldC5pc0VuYWJsZWQgIT09IGlzRW5hYmxlZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiVHJ5aW5nIHRvIHNldCBkcm9wcGFibGUgaXNFbmFibGVkIHRvIFwiICsgU3RyaW5nKGlzRW5hYmxlZCkgKyBcIlxcbiAgICAgIGJ1dCBpdCBpcyBhbHJlYWR5IFwiICsgU3RyaW5nKF90YXJnZXQuaXNFbmFibGVkKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIHVwZGF0ZWQgPSBfZXh0ZW5kcyh7fSwgX3RhcmdldCwge1xuICAgICAgaXNFbmFibGVkOiBpc0VuYWJsZWRcbiAgICB9KTtcblxuICAgIHJldHVybiBwb3N0RHJvcHBhYmxlQ2hhbmdlKHN0YXRlLCB1cGRhdGVkLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ1VQREFURV9EUk9QUEFCTEVfSVNfQ09NQklORV9FTkFCTEVEJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAhaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkF0dGVtcHRpbmcgdG8gbW92ZSBpbiBhbiB1bnN1cHBvcnRlZCBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9hY3Rpb24kcGF5bG9hZDQgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgX2lkMiA9IF9hY3Rpb24kcGF5bG9hZDQuaWQsXG4gICAgICAgIGlzQ29tYmluZUVuYWJsZWQgPSBfYWN0aW9uJHBheWxvYWQ0LmlzQ29tYmluZUVuYWJsZWQ7XG4gICAgdmFyIF90YXJnZXQyID0gc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW19pZDJdO1xuICAgICFfdGFyZ2V0MiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgZmluZCBEcm9wcGFibGVbaWQ6IFwiICsgX2lkMiArIFwiXSB0byB0b2dnbGUgaXRzIGlzQ29tYmluZUVuYWJsZWQgc3RhdGVcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoX3RhcmdldDIuaXNDb21iaW5lRW5hYmxlZCAhPT0gaXNDb21iaW5lRW5hYmxlZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiVHJ5aW5nIHRvIHNldCBkcm9wcGFibGUgaXNDb21iaW5lRW5hYmxlZCB0byBcIiArIFN0cmluZyhpc0NvbWJpbmVFbmFibGVkKSArIFwiXFxuICAgICAgYnV0IGl0IGlzIGFscmVhZHkgXCIgKyBTdHJpbmcoX3RhcmdldDIuaXNDb21iaW5lRW5hYmxlZCkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfdXBkYXRlZCA9IF9leHRlbmRzKHt9LCBfdGFyZ2V0Miwge1xuICAgICAgaXNDb21iaW5lRW5hYmxlZDogaXNDb21iaW5lRW5hYmxlZFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBvc3REcm9wcGFibGVDaGFuZ2Uoc3RhdGUsIF91cGRhdGVkLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ01PVkVfQllfV0lORE9XX1NDUk9MTCcpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgbW92ZSBieSB3aW5kb3cgaW4gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICFzdGF0ZS5pc1dpbmRvd1Njcm9sbEFsbG93ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdXaW5kb3cgc2Nyb2xsaW5nIGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkIGZvciBmaXhlZCBsaXN0cy4gQWJvcnRpbmcgZHJhZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbmV3U2Nyb2xsID0gYWN0aW9uLnBheWxvYWQubmV3U2Nyb2xsO1xuXG4gICAgaWYgKGlzRXF1YWwoc3RhdGUudmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQsIG5ld1Njcm9sbCkpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgX3ZpZXdwb3J0ID0gc2Nyb2xsVmlld3BvcnQoc3RhdGUudmlld3BvcnQsIG5ld1Njcm9sbCk7XG5cbiAgICBpZiAoaXNTbmFwcGluZyhzdGF0ZSkpIHtcbiAgICAgIHJldHVybiByZWZyZXNoU25hcCh7XG4gICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgdmlld3BvcnQ6IF92aWV3cG9ydFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZSh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICB2aWV3cG9ydDogX3ZpZXdwb3J0XG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdVUERBVEVfVklFV1BPUlRfTUFYX1NDUk9MTCcpIHtcbiAgICAhaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCB1cGRhdGUgdmlld3BvcnQgc2Nyb2xsIGluIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbWF4U2Nyb2xsID0gYWN0aW9uLnBheWxvYWQubWF4U2Nyb2xsO1xuXG4gICAgdmFyIHdpdGhNYXhTY3JvbGwgPSBfZXh0ZW5kcyh7fSwgc3RhdGUudmlld3BvcnQsIHtcbiAgICAgIHNjcm9sbDogX2V4dGVuZHMoe30sIHN0YXRlLnZpZXdwb3J0LnNjcm9sbCwge1xuICAgICAgICBtYXg6IG1heFNjcm9sbFxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBwaGFzZTogJ0RSQUdHSU5HJ1xuICAgIH0sIHN0YXRlLCB7XG4gICAgICB2aWV3cG9ydDogd2l0aE1heFNjcm9sbFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnTU9WRV9VUCcgfHwgYWN0aW9uLnR5cGUgPT09ICdNT1ZFX0RPV04nIHx8IGFjdGlvbi50eXBlID09PSAnTU9WRV9MRUZUJyB8fCBhY3Rpb24udHlwZSA9PT0gJ01PVkVfUklHSFQnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycgfHwgc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGFjdGlvbi50eXBlICsgXCIgcmVjZWl2ZWQgd2hpbGUgbm90IGluIERSQUdHSU5HIHBoYXNlXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfcmVzdWx0MiA9IG1vdmVJbkRpcmVjdGlvbih7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICB0eXBlOiBhY3Rpb24udHlwZVxuICAgIH0pO1xuXG4gICAgaWYgKCFfcmVzdWx0Mikge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGUoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgaW1wYWN0OiBfcmVzdWx0Mi5pbXBhY3QsXG4gICAgICBjbGllbnRTZWxlY3Rpb246IF9yZXN1bHQyLmNsaWVudFNlbGVjdGlvbixcbiAgICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBfcmVzdWx0Mi5zY3JvbGxKdW1wUmVxdWVzdFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgIHZhciBfZXh0ZW5kczM7XG5cbiAgICB2YXIgcmVhc29uID0gYWN0aW9uLnBheWxvYWQucmVhc29uO1xuICAgICEoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBtb3ZlIGludG8gdGhlIERST1BfUEVORElORyBwaGFzZSBmcm9tIHRoZSBDT0xMRUNUSU5HIHBoYXNlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIG5ld1N0YXRlID0gX2V4dGVuZHMoe1xuICAgICAgcGhhc2U6ICdEUk9QX1BFTkRJTkcnXG4gICAgfSwgc3RhdGUsIChfZXh0ZW5kczMgPSB7fSwgX2V4dGVuZHMzW1wicGhhc2VcIl0gPSAnRFJPUF9QRU5ESU5HJywgX2V4dGVuZHMzLmlzV2FpdGluZyA9IHRydWUsIF9leHRlbmRzMy5yZWFzb24gPSByZWFzb24sIF9leHRlbmRzMykpO1xuXG4gICAgcmV0dXJuIG5ld1N0YXRlO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9BTklNQVRFJykge1xuICAgIHZhciBwZW5kaW5nID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBhbmltYXRlIGRyb3AgZnJvbSBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9yZXN1bHQzID0ge1xuICAgICAgcGhhc2U6ICdEUk9QX0FOSU1BVElORycsXG4gICAgICBwZW5kaW5nOiBwZW5kaW5nLFxuICAgICAgZGltZW5zaW9uczogc3RhdGUuZGltZW5zaW9uc1xuICAgIH07XG4gICAgcmV0dXJuIF9yZXN1bHQzO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScpIHtcbiAgICByZXR1cm4gaWRsZTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn0pO1xuXG52YXIgbGlmdCA9IGZ1bmN0aW9uIGxpZnQoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdMSUZUJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGluaXRpYWxQdWJsaXNoID0gZnVuY3Rpb24gaW5pdGlhbFB1Ymxpc2goYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdJTklUSUFMX1BVQkxJU0gnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgcHVibGlzaFdoaWxlRHJhZ2dpbmckMSA9IGZ1bmN0aW9uIHB1Ymxpc2hXaGlsZURyYWdnaW5nKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUFVCTElTSF9XSElMRV9EUkFHR0lORycsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBjb2xsZWN0aW9uU3RhcnRpbmcgPSBmdW5jdGlvbiBjb2xsZWN0aW9uU3RhcnRpbmcoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0NPTExFQ1RJT05fU1RBUlRJTkcnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgdXBkYXRlRHJvcHBhYmxlU2Nyb2xsID0gZnVuY3Rpb24gdXBkYXRlRHJvcHBhYmxlU2Nyb2xsKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVVBEQVRFX0RST1BQQUJMRV9TQ1JPTEwnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkID0gZnVuY3Rpb24gdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVVBEQVRFX0RST1BQQUJMRV9JU19FTkFCTEVEJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVVBEQVRFX0RST1BQQUJMRV9JU19DT01CSU5FX0VOQUJMRUQnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgbW92ZSA9IGZ1bmN0aW9uIG1vdmUoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIG1vdmVCeVdpbmRvd1Njcm9sbCA9IGZ1bmN0aW9uIG1vdmVCeVdpbmRvd1Njcm9sbChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfQllfV0lORE9XX1NDUk9MTCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbCA9IGZ1bmN0aW9uIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVVBEQVRFX1ZJRVdQT1JUX01BWF9TQ1JPTEwnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgbW92ZVVwID0gZnVuY3Rpb24gbW92ZVVwKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFX1VQJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIG1vdmVEb3duID0gZnVuY3Rpb24gbW92ZURvd24oKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfRE9XTicsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcbnZhciBtb3ZlUmlnaHQgPSBmdW5jdGlvbiBtb3ZlUmlnaHQoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfUklHSFQnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgbW92ZUxlZnQgPSBmdW5jdGlvbiBtb3ZlTGVmdCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9MRUZUJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIGNsZWFuID0gZnVuY3Rpb24gY2xlYW4oKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0NMRUFOJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIGFuaW1hdGVEcm9wID0gZnVuY3Rpb24gYW5pbWF0ZURyb3AocGVuZGluZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QX0FOSU1BVEUnLFxuICAgIHBheWxvYWQ6IHBlbmRpbmdcbiAgfTtcbn07XG52YXIgY29tcGxldGVEcm9wID0gZnVuY3Rpb24gY29tcGxldGVEcm9wKHJlc3VsdCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QX0NPTVBMRVRFJyxcbiAgICBwYXlsb2FkOiByZXN1bHRcbiAgfTtcbn07XG52YXIgZHJvcCA9IGZ1bmN0aW9uIGRyb3AoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGRyb3BQZW5kaW5nID0gZnVuY3Rpb24gZHJvcFBlbmRpbmcoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QX1BFTkRJTkcnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgZHJvcEFuaW1hdGlvbkZpbmlzaGVkID0gZnVuY3Rpb24gZHJvcEFuaW1hdGlvbkZpbmlzaGVkKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QX0FOSU1BVElPTl9GSU5JU0hFRCcsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcblxudmFyIGxpZnQkMSA9IChmdW5jdGlvbiAoZ2V0TWFyc2hhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgIT09ICdMSUZUJykge1xuICAgICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWFyc2hhbCA9IGdldE1hcnNoYWwoKTtcbiAgICAgICAgdmFyIF9hY3Rpb24kcGF5bG9hZCA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgaWQgPSBfYWN0aW9uJHBheWxvYWQuaWQsXG4gICAgICAgICAgICBjbGllbnRTZWxlY3Rpb24gPSBfYWN0aW9uJHBheWxvYWQuY2xpZW50U2VsZWN0aW9uLFxuICAgICAgICAgICAgbW92ZW1lbnRNb2RlID0gX2FjdGlvbiRwYXlsb2FkLm1vdmVtZW50TW9kZTtcbiAgICAgICAgdmFyIGluaXRpYWwgPSBnZXRTdGF0ZSgpO1xuXG4gICAgICAgIGlmIChpbml0aWFsLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICAgICAgZGlzcGF0Y2goY29tcGxldGVEcm9wKGluaXRpYWwucGVuZGluZy5yZXN1bHQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgICEoZ2V0U3RhdGUoKS5waGFzZSA9PT0gJ0lETEUnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0luY29ycmVjdCBwaGFzZSB0byBzdGFydCBhIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHZhciBzY3JvbGxPcHRpb25zID0ge1xuICAgICAgICAgIHNob3VsZFB1Ymxpc2hJbW1lZGlhdGVseTogbW92ZW1lbnRNb2RlID09PSAnU05BUCdcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICAgICAgZHJhZ2dhYmxlSWQ6IGlkLFxuICAgICAgICAgIHNjcm9sbE9wdGlvbnM6IHNjcm9sbE9wdGlvbnNcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgX21hcnNoYWwkc3RhcnRQdWJsaXNoID0gbWFyc2hhbC5zdGFydFB1Ymxpc2hpbmcocmVxdWVzdCksXG4gICAgICAgICAgICBjcml0aWNhbCA9IF9tYXJzaGFsJHN0YXJ0UHVibGlzaC5jcml0aWNhbCxcbiAgICAgICAgICAgIGRpbWVuc2lvbnMgPSBfbWFyc2hhbCRzdGFydFB1Ymxpc2guZGltZW5zaW9ucyxcbiAgICAgICAgICAgIHZpZXdwb3J0ID0gX21hcnNoYWwkc3RhcnRQdWJsaXNoLnZpZXdwb3J0O1xuXG4gICAgICAgIGRpc3BhdGNoKGluaXRpYWxQdWJsaXNoKHtcbiAgICAgICAgICBjcml0aWNhbDogY3JpdGljYWwsXG4gICAgICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICAgICAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgICAgICBtb3ZlbWVudE1vZGU6IG1vdmVtZW50TW9kZSxcbiAgICAgICAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgICAgICAgfSkpO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBzdHlsZSA9IChmdW5jdGlvbiAobWFyc2hhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICAgICAgIG1hcnNoYWwuZHJhZ2dpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFURScpIHtcbiAgICAgICAgICBtYXJzaGFsLmRyb3BwaW5nKGFjdGlvbi5wYXlsb2FkLnJlc3VsdC5yZWFzb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnQ0xFQU4nIHx8IGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScpIHtcbiAgICAgICAgICBtYXJzaGFsLnJlc3RpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgbWluRHJvcFRpbWUgPSAwLjMzO1xudmFyIG1heERyb3BUaW1lID0gMC41NTtcbnZhciBkcm9wVGltZVJhbmdlID0gbWF4RHJvcFRpbWUgLSBtaW5Ecm9wVGltZTtcbnZhciBtYXhEcm9wVGltZUF0RGlzdGFuY2UgPSAxNTAwO1xudmFyIGNhbmNlbERyb3BNb2RpZmllciA9IDAuNjtcbnZhciBnZXREcm9wRHVyYXRpb24gPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGN1cnJlbnQgPSBfcmVmLmN1cnJlbnQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICByZWFzb24gPSBfcmVmLnJlYXNvbjtcbiAgdmFyIGRpc3RhbmNlJCQxID0gZGlzdGFuY2UoY3VycmVudCwgZGVzdGluYXRpb24pO1xuXG4gIGlmIChkaXN0YW5jZSQkMSA8PSAwKSB7XG4gICAgcmV0dXJuIG1pbkRyb3BUaW1lO1xuICB9XG5cbiAgaWYgKGRpc3RhbmNlJCQxID49IG1heERyb3BUaW1lQXREaXN0YW5jZSkge1xuICAgIHJldHVybiBtYXhEcm9wVGltZTtcbiAgfVxuXG4gIHZhciBwZXJjZW50YWdlID0gZGlzdGFuY2UkJDEgLyBtYXhEcm9wVGltZUF0RGlzdGFuY2U7XG4gIHZhciBkdXJhdGlvbiA9IG1pbkRyb3BUaW1lICsgZHJvcFRpbWVSYW5nZSAqIHBlcmNlbnRhZ2U7XG4gIHZhciB3aXRoRHVyYXRpb24gPSByZWFzb24gPT09ICdDQU5DRUwnID8gZHVyYXRpb24gKiBjYW5jZWxEcm9wTW9kaWZpZXIgOiBkdXJhdGlvbjtcbiAgcmV0dXJuIE51bWJlcih3aXRoRHVyYXRpb24udG9GaXhlZCgyKSk7XG59KTtcblxudmFyIGdldE5ld0hvbWVDbGllbnRPZmZzZXQgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkaW1lbnNpb25zID0gX3JlZi5kaW1lbnNpb25zLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICB2YXIgZHJhZ2dhYmxlcyA9IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXMgPSBkaW1lbnNpb25zLmRyb3BwYWJsZXM7XG4gIHZhciBkcm9wcGFibGVJZCA9IHdoYXRJc0RyYWdnZWRPdmVyKGltcGFjdCk7XG4gIHZhciBkZXN0aW5hdGlvbiA9IGRyb3BwYWJsZUlkID8gZHJvcHBhYmxlc1tkcm9wcGFibGVJZF0gOiBudWxsO1xuICB2YXIgaG9tZSA9IGRyb3BwYWJsZXNbZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWRdO1xuICB2YXIgbmV3Q2xpZW50Q2VudGVyID0gZ2V0Q2xpZW50Qm9yZGVyQm94Q2VudGVyKHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZTogZGVzdGluYXRpb24gfHwgaG9tZSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG4gIHZhciBvZmZzZXQkJDEgPSBzdWJ0cmFjdChuZXdDbGllbnRDZW50ZXIsIGRyYWdnYWJsZS5jbGllbnQuYm9yZGVyQm94LmNlbnRlcik7XG4gIHJldHVybiBvZmZzZXQkJDE7XG59KTtcblxudmFyIGRyb3AkMSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlLFxuICAgICAgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoO1xuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSAnRFJPUCcpIHtcbiAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICB2YXIgcmVhc29uID0gYWN0aW9uLnBheWxvYWQucmVhc29uO1xuXG4gICAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJykge1xuICAgICAgICBkaXNwYXRjaChkcm9wUGVuZGluZyh7XG4gICAgICAgICAgcmVhc29uOiByZWFzb25cbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0lETEUnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzV2FpdGluZ0ZvckRyb3AgPSBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycgJiYgc3RhdGUuaXNXYWl0aW5nO1xuICAgICAgISFpc1dhaXRpbmdGb3JEcm9wID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQSBEUk9QIGFjdGlvbiBvY2N1cnJlZCB3aGlsZSBEUk9QX1BFTkRJTkcgYW5kIHN0aWxsIHdhaXRpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAhKHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGRyb3AgaW4gcGhhc2U6IFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBjcml0aWNhbCA9IHN0YXRlLmNyaXRpY2FsO1xuICAgICAgdmFyIGRpbWVuc2lvbnMgPSBzdGF0ZS5kaW1lbnNpb25zO1xuICAgICAgdmFyIGltcGFjdCA9IHJlYXNvbiA9PT0gJ0RST1AnID8gc3RhdGUuaW1wYWN0IDogbm9JbXBhY3Q7XG4gICAgICB2YXIgZHJhZ2dhYmxlID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gICAgICB2YXIgZGVzdGluYXRpb24gPSBpbXBhY3QgPyBpbXBhY3QuZGVzdGluYXRpb24gOiBudWxsO1xuICAgICAgdmFyIGNvbWJpbmUgPSBpbXBhY3QgJiYgaW1wYWN0Lm1lcmdlID8gaW1wYWN0Lm1lcmdlLmNvbWJpbmUgOiBudWxsO1xuICAgICAgdmFyIHNvdXJjZSA9IHtcbiAgICAgICAgaW5kZXg6IGNyaXRpY2FsLmRyYWdnYWJsZS5pbmRleCxcbiAgICAgICAgZHJvcHBhYmxlSWQ6IGNyaXRpY2FsLmRyb3BwYWJsZS5pZFxuICAgICAgfTtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGRyYWdnYWJsZUlkOiBkcmFnZ2FibGUuZGVzY3JpcHRvci5pZCxcbiAgICAgICAgdHlwZTogZHJhZ2dhYmxlLmRlc2NyaXB0b3IudHlwZSxcbiAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgIG1vZGU6IHN0YXRlLm1vdmVtZW50TW9kZSxcbiAgICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgICBjb21iaW5lOiBjb21iaW5lLFxuICAgICAgICByZWFzb246IHJlYXNvblxuICAgICAgfTtcbiAgICAgIHZhciBuZXdIb21lQ2xpZW50T2Zmc2V0ID0gZ2V0TmV3SG9tZUNsaWVudE9mZnNldCh7XG4gICAgICAgIGltcGFjdDogaW1wYWN0LFxuICAgICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICAgICAgdmlld3BvcnQ6IHN0YXRlLnZpZXdwb3J0XG4gICAgICB9KTtcbiAgICAgIHZhciBpc0FuaW1hdGlvblJlcXVpcmVkID0gIWlzRXF1YWwoc3RhdGUuY3VycmVudC5jbGllbnQub2Zmc2V0LCBuZXdIb21lQ2xpZW50T2Zmc2V0KSB8fCBCb29sZWFuKHJlc3VsdC5jb21iaW5lKTtcblxuICAgICAgaWYgKCFpc0FuaW1hdGlvblJlcXVpcmVkKSB7XG4gICAgICAgIGRpc3BhdGNoKGNvbXBsZXRlRHJvcChyZXN1bHQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZHJvcER1cmF0aW9uID0gZ2V0RHJvcER1cmF0aW9uKHtcbiAgICAgICAgY3VycmVudDogc3RhdGUuY3VycmVudC5jbGllbnQub2Zmc2V0LFxuICAgICAgICBkZXN0aW5hdGlvbjogbmV3SG9tZUNsaWVudE9mZnNldCxcbiAgICAgICAgcmVhc29uOiByZWFzb25cbiAgICAgIH0pO1xuICAgICAgdmFyIHBlbmRpbmcgPSB7XG4gICAgICAgIG5ld0hvbWVDbGllbnRPZmZzZXQ6IG5ld0hvbWVDbGllbnRPZmZzZXQsXG4gICAgICAgIGRyb3BEdXJhdGlvbjogZHJvcER1cmF0aW9uLFxuICAgICAgICByZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgaW1wYWN0OiBpbXBhY3RcbiAgICAgIH07XG4gICAgICBkaXNwYXRjaChhbmltYXRlRHJvcChwZW5kaW5nKSk7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgcG9zaXRpb24gPSBmdW5jdGlvbiBwb3NpdGlvbihpbmRleCkge1xuICByZXR1cm4gaW5kZXggKyAxO1xufTtcblxudmFyIG9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gb25EcmFnU3RhcnQoc3RhcnQpIHtcbiAgcmV0dXJuIFwiXFxuICBZb3UgaGF2ZSBsaWZ0ZWQgYW4gaXRlbSBpbiBwb3NpdGlvbiBcIiArIHBvc2l0aW9uKHN0YXJ0LnNvdXJjZS5pbmRleCkgKyBcIi5cXG4gIFVzZSB0aGUgYXJyb3cga2V5cyB0byBtb3ZlLCBzcGFjZSBiYXIgdG8gZHJvcCwgYW5kIGVzY2FwZSB0byBjYW5jZWwuXFxuXCI7XG59O1xuXG52YXIgd2l0aExvY2F0aW9uID0gZnVuY3Rpb24gd2l0aExvY2F0aW9uKHNvdXJjZSwgZGVzdGluYXRpb24pIHtcbiAgdmFyIGlzSW5Ib21lTGlzdCA9IHNvdXJjZS5kcm9wcGFibGVJZCA9PT0gZGVzdGluYXRpb24uZHJvcHBhYmxlSWQ7XG4gIHZhciBzdGFydFBvc2l0aW9uID0gcG9zaXRpb24oc291cmNlLmluZGV4KTtcbiAgdmFyIGVuZFBvc2l0aW9uID0gcG9zaXRpb24oZGVzdGluYXRpb24uaW5kZXgpO1xuXG4gIGlmIChpc0luSG9tZUxpc3QpIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICBZb3UgaGF2ZSBtb3ZlZCB0aGUgaXRlbSBmcm9tIHBvc2l0aW9uIFwiICsgc3RhcnRQb3NpdGlvbiArIFwiXFxuICAgICAgdG8gcG9zaXRpb24gXCIgKyBlbmRQb3NpdGlvbiArIFwiXFxuICAgIFwiO1xuICB9XG5cbiAgcmV0dXJuIFwiXFxuICAgIFlvdSBoYXZlIG1vdmVkIHRoZSBpdGVtIGZyb20gcG9zaXRpb24gXCIgKyBzdGFydFBvc2l0aW9uICsgXCJcXG4gICAgaW4gbGlzdCBcIiArIHNvdXJjZS5kcm9wcGFibGVJZCArIFwiXFxuICAgIHRvIGxpc3QgXCIgKyBkZXN0aW5hdGlvbi5kcm9wcGFibGVJZCArIFwiXFxuICAgIGluIHBvc2l0aW9uIFwiICsgZW5kUG9zaXRpb24gKyBcIlxcbiAgXCI7XG59O1xuXG52YXIgd2l0aENvbWJpbmUgPSBmdW5jdGlvbiB3aXRoQ29tYmluZShpZCwgc291cmNlLCBjb21iaW5lKSB7XG4gIHZhciBpbkhvbWVMaXN0ID0gc291cmNlLmRyb3BwYWJsZUlkID09PSBjb21iaW5lLmRyb3BwYWJsZUlkO1xuXG4gIGlmIChpbkhvbWVMaXN0KSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgVGhlIGl0ZW0gXCIgKyBpZCArIFwiXFxuICAgICAgaGFzIGJlZW4gY29tYmluZWQgd2l0aCBcIiArIGNvbWJpbmUuZHJhZ2dhYmxlSWQ7XG4gIH1cblxuICByZXR1cm4gXCJcXG4gICAgICBUaGUgaXRlbSBcIiArIGlkICsgXCJcXG4gICAgICBpbiBsaXN0IFwiICsgc291cmNlLmRyb3BwYWJsZUlkICsgXCJcXG4gICAgICBoYXMgYmVlbiBjb21iaW5lZCB3aXRoIFwiICsgY29tYmluZS5kcmFnZ2FibGVJZCArIFwiXFxuICAgICAgaW4gbGlzdCBcIiArIGNvbWJpbmUuZHJvcHBhYmxlSWQgKyBcIlxcbiAgICBcIjtcbn07XG5cbnZhciBvbkRyYWdVcGRhdGUgPSBmdW5jdGlvbiBvbkRyYWdVcGRhdGUodXBkYXRlKSB7XG4gIHZhciBsb2NhdGlvbiA9IHVwZGF0ZS5kZXN0aW5hdGlvbjtcblxuICBpZiAobG9jYXRpb24pIHtcbiAgICByZXR1cm4gd2l0aExvY2F0aW9uKHVwZGF0ZS5zb3VyY2UsIGxvY2F0aW9uKTtcbiAgfVxuXG4gIHZhciBjb21iaW5lID0gdXBkYXRlLmNvbWJpbmU7XG5cbiAgaWYgKGNvbWJpbmUpIHtcbiAgICByZXR1cm4gd2l0aENvbWJpbmUodXBkYXRlLmRyYWdnYWJsZUlkLCB1cGRhdGUuc291cmNlLCBjb21iaW5lKTtcbiAgfVxuXG4gIHJldHVybiAnWW91IGFyZSBvdmVyIGFuIGFyZWEgdGhhdCBjYW5ub3QgYmUgZHJvcHBlZCBvbic7XG59O1xuXG52YXIgcmV0dXJuZWRUb1N0YXJ0ID0gZnVuY3Rpb24gcmV0dXJuZWRUb1N0YXJ0KHNvdXJjZSkge1xuICByZXR1cm4gXCJcXG4gIFRoZSBpdGVtIGhhcyByZXR1cm5lZCB0byBpdHMgc3RhcnRpbmcgcG9zaXRpb25cXG4gIG9mIFwiICsgcG9zaXRpb24oc291cmNlLmluZGV4KSArIFwiXFxuXCI7XG59O1xuXG52YXIgb25EcmFnRW5kID0gZnVuY3Rpb24gb25EcmFnRW5kKHJlc3VsdCkge1xuICBpZiAocmVzdWx0LnJlYXNvbiA9PT0gJ0NBTkNFTCcpIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICBNb3ZlbWVudCBjYW5jZWxsZWQuXFxuICAgICAgXCIgKyByZXR1cm5lZFRvU3RhcnQocmVzdWx0LnNvdXJjZSkgKyBcIlxcbiAgICBcIjtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHJlc3VsdC5kZXN0aW5hdGlvbjtcbiAgdmFyIGNvbWJpbmUgPSByZXN1bHQuY29tYmluZTtcblxuICBpZiAobG9jYXRpb24pIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICBZb3UgaGF2ZSBkcm9wcGVkIHRoZSBpdGVtLlxcbiAgICAgIFwiICsgd2l0aExvY2F0aW9uKHJlc3VsdC5zb3VyY2UsIGxvY2F0aW9uKSArIFwiXFxuICAgIFwiO1xuICB9XG5cbiAgaWYgKGNvbWJpbmUpIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICBZb3UgaGF2ZSBkcm9wcGVkIHRoZSBpdGVtLlxcbiAgICAgIFwiICsgd2l0aENvbWJpbmUocmVzdWx0LmRyYWdnYWJsZUlkLCByZXN1bHQuc291cmNlLCBjb21iaW5lKSArIFwiXFxuICAgIFwiO1xuICB9XG5cbiAgcmV0dXJuIFwiXFxuICAgIFRoZSBpdGVtIGhhcyBiZWVuIGRyb3BwZWQgd2hpbGUgbm90IG92ZXIgYSBkcm9wIGFyZWEuXFxuICAgIFwiICsgcmV0dXJuZWRUb1N0YXJ0KHJlc3VsdC5zb3VyY2UpICsgXCJcXG4gIFwiO1xufTtcblxudmFyIHByZXNldCA9IHtcbiAgb25EcmFnU3RhcnQ6IG9uRHJhZ1N0YXJ0LFxuICBvbkRyYWdVcGRhdGU6IG9uRHJhZ1VwZGF0ZSxcbiAgb25EcmFnRW5kOiBvbkRyYWdFbmRcbn07XG5cbnZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHNwYWNlc0FuZFRhYnMgPSAvWyBcXHRdezIsfS9nO1xuXG52YXIgY2xlYW4kMSA9IGZ1bmN0aW9uIGNsZWFuKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKHNwYWNlc0FuZFRhYnMsICcgJykudHJpbSgpO1xufTtcblxudmFyIGdldERldk1lc3NhZ2UgPSBmdW5jdGlvbiBnZXREZXZNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIGNsZWFuJDEoXCJcXG4gICVjcmVhY3QtYmVhdXRpZnVsLWRuZFxcblxcbiAgJWNcIiArIGNsZWFuJDEobWVzc2FnZSkgKyBcIlxcblxcbiAgJWNcXHVEODNEXFx1REM3N1xcdTIwMEQgVGhpcyBpcyBhIGRldmVsb3BtZW50IG9ubHkgbWVzc2FnZS4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxcblwiKTtcbn07XG5cbnZhciBnZXRGb3JtYXR0ZWRNZXNzYWdlID0gZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkTWVzc2FnZShtZXNzYWdlKSB7XG4gIHJldHVybiBbZ2V0RGV2TWVzc2FnZShtZXNzYWdlKSwgJ2NvbG9yOiAjMDBDNTg0OyBmb250LXNpemU6IDEuMmVtOyBmb250LXdlaWdodDogYm9sZDsnLCAnbGluZS1oZWlnaHQ6IDEuNScsICdjb2xvcjogIzcyMzg3NDsnXTtcbn07XG52YXIgaXNEaXNhYmxlZEZsYWcgPSAnX19yZWFjdC1iZWF1dGlmdWwtZG5kLWRpc2FibGUtZGV2LXdhcm5pbmdzJztcbnZhciB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIHZhciBfY29uc29sZTtcblxuICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvd1tpc0Rpc2FibGVkRmxhZ10pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAoX2NvbnNvbGUgPSBjb25zb2xlKS53YXJuLmFwcGx5KF9jb25zb2xlLCBnZXRGb3JtYXR0ZWRNZXNzYWdlKG1lc3NhZ2UpKTtcbn07XG5cbnZhciBnZXRFeHBpcmluZ0Fubm91bmNlID0gKGZ1bmN0aW9uIChhbm5vdW5jZSkge1xuICB2YXIgd2FzQ2FsbGVkID0gZmFsc2U7XG4gIHZhciBpc0V4cGlyZWQgPSBmYWxzZTtcbiAgdmFyIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlzRXhwaXJlZCA9IHRydWU7XG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQobWVzc2FnZSkge1xuICAgIGlmICh3YXNDYWxsZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ0Fubm91bmNlbWVudCBhbHJlYWR5IG1hZGUuIE5vdCBtYWtpbmcgYSBzZWNvbmQgYW5ub3VuY2VtZW50JykgOiB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzRXhwaXJlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgQW5ub3VuY2VtZW50cyBjYW5ub3QgYmUgbWFkZSBhc3luY2hyb25vdXNseS5cXG4gICAgICAgIERlZmF1bHQgbWVzc2FnZSBoYXMgYWxyZWFkeSBiZWVuIGFubm91bmNlZC5cXG4gICAgICBcIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FzQ2FsbGVkID0gdHJ1ZTtcbiAgICBhbm5vdW5jZShtZXNzYWdlKTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgfTtcblxuICByZXN1bHQud2FzQ2FsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB3YXNDYWxsZWQ7XG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG52YXIgZ2V0QXN5bmNNYXJzaGFsID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVudHJpZXMgPSBbXTtcblxuICB2YXIgZXhlY3V0ZSA9IGZ1bmN0aW9uIGV4ZWN1dGUodGltZXJJZCkge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleChlbnRyaWVzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0udGltZXJJZCA9PT0gdGltZXJJZDtcbiAgICB9KTtcbiAgICAhKGluZGV4ICE9PSAtMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgZmluZCB0aW1lcicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfZW50cmllcyRzcGxpY2UgPSBlbnRyaWVzLnNwbGljZShpbmRleCwgMSksXG4gICAgICAgIGVudHJ5ID0gX2VudHJpZXMkc3BsaWNlWzBdO1xuXG4gICAgZW50cnkuY2FsbGJhY2soKTtcbiAgfTtcblxuICB2YXIgYWRkID0gZnVuY3Rpb24gYWRkKGZuKSB7XG4gICAgdmFyIHRpbWVySWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBleGVjdXRlKHRpbWVySWQpO1xuICAgIH0pO1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIHRpbWVySWQ6IHRpbWVySWQsXG4gICAgICBjYWxsYmFjazogZm5cbiAgICB9O1xuICAgIGVudHJpZXMucHVzaChlbnRyeSk7XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKCFlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzaGFsbG93ID0gZW50cmllcy5jb25jYXQoKTtcbiAgICBlbnRyaWVzLmxlbmd0aCA9IDA7XG4gICAgc2hhbGxvdy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgY2xlYXJUaW1lb3V0KGVudHJ5LnRpbWVySWQpO1xuICAgICAgZW50cnkuY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGFkZDogYWRkLFxuICAgIGZsdXNoOiBmbHVzaFxuICB9O1xufSk7XG5cbnZhciBhcmVMb2NhdGlvbnNFcXVhbCA9IGZ1bmN0aW9uIGFyZUxvY2F0aW9uc0VxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgaWYgKGZpcnN0ID09IG51bGwgJiYgc2Vjb25kID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChmaXJzdCA9PSBudWxsIHx8IHNlY29uZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZpcnN0LmRyb3BwYWJsZUlkID09PSBzZWNvbmQuZHJvcHBhYmxlSWQgJiYgZmlyc3QuaW5kZXggPT09IHNlY29uZC5pbmRleDtcbn07XG52YXIgaXNDb21iaW5lRXF1YWwgPSBmdW5jdGlvbiBpc0NvbWJpbmVFcXVhbChmaXJzdCwgc2Vjb25kKSB7XG4gIGlmIChmaXJzdCA9PSBudWxsICYmIHNlY29uZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZmlyc3QgPT0gbnVsbCB8fCBzZWNvbmQgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmaXJzdC5kcmFnZ2FibGVJZCA9PT0gc2Vjb25kLmRyYWdnYWJsZUlkICYmIGZpcnN0LmRyb3BwYWJsZUlkID09PSBzZWNvbmQuZHJvcHBhYmxlSWQ7XG59O1xudmFyIGlzQ3JpdGljYWxFcXVhbCA9IGZ1bmN0aW9uIGlzQ3JpdGljYWxFcXVhbChmaXJzdCwgc2Vjb25kKSB7XG4gIGlmIChmaXJzdCA9PT0gc2Vjb25kKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgaXNEcmFnZ2FibGVFcXVhbCA9IGZpcnN0LmRyYWdnYWJsZS5pZCA9PT0gc2Vjb25kLmRyYWdnYWJsZS5pZCAmJiBmaXJzdC5kcmFnZ2FibGUuZHJvcHBhYmxlSWQgPT09IHNlY29uZC5kcmFnZ2FibGUuZHJvcHBhYmxlSWQgJiYgZmlyc3QuZHJhZ2dhYmxlLnR5cGUgPT09IHNlY29uZC5kcmFnZ2FibGUudHlwZSAmJiBmaXJzdC5kcmFnZ2FibGUuaW5kZXggPT09IHNlY29uZC5kcmFnZ2FibGUuaW5kZXg7XG4gIHZhciBpc0Ryb3BwYWJsZUVxdWFsID0gZmlyc3QuZHJvcHBhYmxlLmlkID09PSBzZWNvbmQuZHJvcHBhYmxlLmlkICYmIGZpcnN0LmRyb3BwYWJsZS50eXBlID09PSBzZWNvbmQuZHJvcHBhYmxlLnR5cGU7XG4gIHJldHVybiBpc0RyYWdnYWJsZUVxdWFsICYmIGlzRHJvcHBhYmxlRXF1YWw7XG59O1xuXG52YXIgd2l0aFRpbWluZ3MgPSBmdW5jdGlvbiB3aXRoVGltaW5ncyhrZXksIGZuKSB7XG4gIHN0YXJ0KGtleSk7XG4gIGZuKCk7XG4gIGZpbmlzaChrZXkpO1xufTtcblxudmFyIGdldERyYWdTdGFydCA9IGZ1bmN0aW9uIGdldERyYWdTdGFydChjcml0aWNhbCwgbW9kZSkge1xuICByZXR1cm4ge1xuICAgIGRyYWdnYWJsZUlkOiBjcml0aWNhbC5kcmFnZ2FibGUuaWQsXG4gICAgdHlwZTogY3JpdGljYWwuZHJvcHBhYmxlLnR5cGUsXG4gICAgc291cmNlOiB7XG4gICAgICBkcm9wcGFibGVJZDogY3JpdGljYWwuZHJvcHBhYmxlLmlkLFxuICAgICAgaW5kZXg6IGNyaXRpY2FsLmRyYWdnYWJsZS5pbmRleFxuICAgIH0sXG4gICAgbW9kZTogbW9kZVxuICB9O1xufTtcblxudmFyIGV4ZWN1dGUgPSBmdW5jdGlvbiBleGVjdXRlKHJlc3BvbmRlciwgZGF0YSwgYW5ub3VuY2UsIGdldERlZmF1bHRNZXNzYWdlKSB7XG4gIGlmICghcmVzcG9uZGVyKSB7XG4gICAgYW5ub3VuY2UoZ2V0RGVmYXVsdE1lc3NhZ2UoZGF0YSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB3aWxsRXhwaXJlID0gZ2V0RXhwaXJpbmdBbm5vdW5jZShhbm5vdW5jZSk7XG4gIHZhciBwcm92aWRlZCA9IHtcbiAgICBhbm5vdW5jZTogd2lsbEV4cGlyZVxuICB9O1xuICByZXNwb25kZXIoZGF0YSwgcHJvdmlkZWQpO1xuXG4gIGlmICghd2lsbEV4cGlyZS53YXNDYWxsZWQoKSkge1xuICAgIGFubm91bmNlKGdldERlZmF1bHRNZXNzYWdlKGRhdGEpKTtcbiAgfVxufTtcblxudmFyIGdldFB1Ymxpc2hlciA9IChmdW5jdGlvbiAoZ2V0UmVzcG9uZGVycywgYW5ub3VuY2UpIHtcbiAgdmFyIGFzeW5jTWFyc2hhbCA9IGdldEFzeW5jTWFyc2hhbCgpO1xuICB2YXIgZHJhZ2dpbmcgPSBudWxsO1xuXG4gIHZhciBiZWZvcmVTdGFydCA9IGZ1bmN0aW9uIGJlZm9yZVN0YXJ0KGNyaXRpY2FsLCBtb2RlKSB7XG4gICAgISFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaXJlIG9uQmVmb3JlRHJhZ1N0YXJ0IGFzIGEgZHJhZyBzdGFydCBoYXMgYWxyZWFkeSBiZWVuIHB1Ymxpc2hlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB3aXRoVGltaW5ncygnb25CZWZvcmVEcmFnU3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZm4gPSBnZXRSZXNwb25kZXJzKCkub25CZWZvcmVEcmFnU3RhcnQ7XG5cbiAgICAgIGlmIChmbikge1xuICAgICAgICBmbihnZXREcmFnU3RhcnQoY3JpdGljYWwsIG1vZGUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgc3RhcnQkJDEgPSBmdW5jdGlvbiBzdGFydCQkMShjcml0aWNhbCwgbW9kZSkge1xuICAgICEhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmlyZSBvbkJlZm9yZURyYWdTdGFydCBhcyBhIGRyYWcgc3RhcnQgaGFzIGFscmVhZHkgYmVlbiBwdWJsaXNoZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGRhdGEgPSBnZXREcmFnU3RhcnQoY3JpdGljYWwsIG1vZGUpO1xuICAgIGRyYWdnaW5nID0ge1xuICAgICAgbW9kZTogbW9kZSxcbiAgICAgIGxhc3RDcml0aWNhbDogY3JpdGljYWwsXG4gICAgICBsYXN0TG9jYXRpb246IGRhdGEuc291cmNlLFxuICAgICAgbGFzdENvbWJpbmU6IG51bGxcbiAgICB9O1xuICAgIGFzeW5jTWFyc2hhbC5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgd2l0aFRpbWluZ3MoJ29uRHJhZ1N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXhlY3V0ZShnZXRSZXNwb25kZXJzKCkub25EcmFnU3RhcnQsIGRhdGEsIGFubm91bmNlLCBwcmVzZXQub25EcmFnU3RhcnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShjcml0aWNhbCwgaW1wYWN0KSB7XG4gICAgdmFyIGxvY2F0aW9uID0gaW1wYWN0LmRlc3RpbmF0aW9uO1xuICAgIHZhciBjb21iaW5lID0gaW1wYWN0Lm1lcmdlID8gaW1wYWN0Lm1lcmdlLmNvbWJpbmUgOiBudWxsO1xuICAgICFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaXJlIG9uRHJhZ01vdmUgd2hlbiBvbkRyYWdTdGFydCBoYXMgbm90IGJlZW4gY2FsbGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoYXNDcml0aWNhbENoYW5nZWQgPSAhaXNDcml0aWNhbEVxdWFsKGNyaXRpY2FsLCBkcmFnZ2luZy5sYXN0Q3JpdGljYWwpO1xuXG4gICAgaWYgKGhhc0NyaXRpY2FsQ2hhbmdlZCkge1xuICAgICAgZHJhZ2dpbmcubGFzdENyaXRpY2FsID0gY3JpdGljYWw7XG4gICAgfVxuXG4gICAgdmFyIGhhc0xvY2F0aW9uQ2hhbmdlZCA9ICFhcmVMb2NhdGlvbnNFcXVhbChkcmFnZ2luZy5sYXN0TG9jYXRpb24sIGxvY2F0aW9uKTtcblxuICAgIGlmIChoYXNMb2NhdGlvbkNoYW5nZWQpIHtcbiAgICAgIGRyYWdnaW5nLmxhc3RMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgIH1cblxuICAgIHZhciBoYXNHcm91cGluZ0NoYW5nZWQgPSAhaXNDb21iaW5lRXF1YWwoZHJhZ2dpbmcubGFzdENvbWJpbmUsIGNvbWJpbmUpO1xuXG4gICAgaWYgKGhhc0dyb3VwaW5nQ2hhbmdlZCkge1xuICAgICAgZHJhZ2dpbmcubGFzdENvbWJpbmUgPSBjb21iaW5lO1xuICAgIH1cblxuICAgIGlmICghaGFzQ3JpdGljYWxDaGFuZ2VkICYmICFoYXNMb2NhdGlvbkNoYW5nZWQgJiYgIWhhc0dyb3VwaW5nQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0gX2V4dGVuZHMoe30sIGdldERyYWdTdGFydChjcml0aWNhbCwgZHJhZ2dpbmcubW9kZSksIHtcbiAgICAgIGNvbWJpbmU6IGNvbWJpbmUsXG4gICAgICBkZXN0aW5hdGlvbjogbG9jYXRpb25cbiAgICB9KTtcblxuICAgIGFzeW5jTWFyc2hhbC5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgd2l0aFRpbWluZ3MoJ29uRHJhZ1VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGUoZ2V0UmVzcG9uZGVycygpLm9uRHJhZ1VwZGF0ZSwgZGF0YSwgYW5ub3VuY2UsIHByZXNldC5vbkRyYWdVcGRhdGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgZmx1c2ggcmVzcG9uZGVycyB3aGlsZSBkcmFnZ2luZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBhc3luY01hcnNoYWwuZmx1c2goKTtcbiAgfTtcblxuICB2YXIgZHJvcCA9IGZ1bmN0aW9uIGRyb3AocmVzdWx0KSB7XG4gICAgIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpcmUgb25EcmFnRW5kIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgb25EcmFnU3RhcnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgZHJhZ2dpbmcgPSBudWxsO1xuICAgIHdpdGhUaW1pbmdzKCdvbkRyYWdFbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZXhlY3V0ZShnZXRSZXNwb25kZXJzKCkub25EcmFnRW5kLCByZXN1bHQsIGFubm91bmNlLCBwcmVzZXQub25EcmFnRW5kKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IF9leHRlbmRzKHt9LCBnZXREcmFnU3RhcnQoZHJhZ2dpbmcubGFzdENyaXRpY2FsLCBkcmFnZ2luZy5tb2RlKSwge1xuICAgICAgY29tYmluZTogbnVsbCxcbiAgICAgIGRlc3RpbmF0aW9uOiBudWxsLFxuICAgICAgcmVhc29uOiAnQ0FOQ0VMJ1xuICAgIH0pO1xuXG4gICAgZHJvcChyZXN1bHQpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYmVmb3JlU3RhcnQ6IGJlZm9yZVN0YXJ0LFxuICAgIHN0YXJ0OiBzdGFydCQkMSxcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICBmbHVzaDogZmx1c2gsXG4gICAgZHJvcDogZHJvcCxcbiAgICBhYm9ydDogYWJvcnRcbiAgfTtcbn0pO1xuXG52YXIgcmVzcG9uZGVycyA9IChmdW5jdGlvbiAoZ2V0UmVzcG9uZGVycywgYW5ub3VuY2UpIHtcbiAgdmFyIHB1Ymxpc2hlciA9IGdldFB1Ymxpc2hlcihnZXRSZXNwb25kZXJzLCBhbm5vdW5jZSk7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0lOSVRJQUxfUFVCTElTSCcpIHtcbiAgICAgICAgICB2YXIgY3JpdGljYWwgPSBhY3Rpb24ucGF5bG9hZC5jcml0aWNhbDtcbiAgICAgICAgICBwdWJsaXNoZXIuYmVmb3JlU3RhcnQoY3JpdGljYWwsIGFjdGlvbi5wYXlsb2FkLm1vdmVtZW50TW9kZSk7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHB1Ymxpc2hlci5zdGFydChjcml0aWNhbCwgYWN0aW9uLnBheWxvYWQubW92ZW1lbnRNb2RlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJykge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgICBwdWJsaXNoZXIuZmx1c2goKTtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgcHVibGlzaGVyLmRyb3AocmVzdWx0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KGFjdGlvbik7XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnQ0xFQU4nKSB7XG4gICAgICAgICAgcHVibGlzaGVyLmFib3J0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUkFHR0lORycpIHtcbiAgICAgICAgICBwdWJsaXNoZXIudXBkYXRlKHN0YXRlLmNyaXRpY2FsLCBzdGF0ZS5pbXBhY3QpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGRyb3BBbmltYXRpb25GaW5pc2ggPSAoZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICBpZiAoYWN0aW9uLnR5cGUgIT09ICdEUk9QX0FOSU1BVElPTl9GSU5JU0hFRCcpIHtcbiAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAhKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaW5pc2ggYSBkcm9wIGFuaW1hdGluZyB3aGVuIG5vIGRyb3AgaXMgb2NjdXJyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgc3RvcmUuZGlzcGF0Y2goY29tcGxldGVEcm9wKHN0YXRlLnBlbmRpbmcucmVzdWx0KSk7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgZGltZW5zaW9uTWFyc2hhbFN0b3BwZXIgPSAoZnVuY3Rpb24gKGdldE1hcnNoYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnIHx8IGFjdGlvbi50eXBlID09PSAnQ0xFQU4nIHx8IGFjdGlvbi50eXBlID09PSAnRFJPUF9BTklNQVRFJykge1xuICAgICAgICAgIHZhciBtYXJzaGFsID0gZ2V0TWFyc2hhbCgpO1xuICAgICAgICAgIG1hcnNoYWwuc3RvcFB1Ymxpc2hpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgc2hvdWxkRW5kID0gZnVuY3Rpb24gc2hvdWxkRW5kKGFjdGlvbikge1xuICByZXR1cm4gYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFURScgfHwgYWN0aW9uLnR5cGUgPT09ICdDTEVBTic7XG59O1xuXG52YXIgc2hvdWxkQ2FuY2VsUGVuZGluZyA9IGZ1bmN0aW9uIHNob3VsZENhbmNlbFBlbmRpbmcoYWN0aW9uKSB7XG4gIHJldHVybiBhY3Rpb24udHlwZSA9PT0gJ0NPTExFQ1RJT05fU1RBUlRJTkcnO1xufTtcblxudmFyIGF1dG9TY3JvbGwgPSAoZnVuY3Rpb24gKGdldFNjcm9sbGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChzaG91bGRFbmQoYWN0aW9uKSkge1xuICAgICAgICAgIGdldFNjcm9sbGVyKCkuc3RvcCgpO1xuICAgICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkQ2FuY2VsUGVuZGluZyhhY3Rpb24pKSB7XG4gICAgICAgICAgZ2V0U2Nyb2xsZXIoKS5jYW5jZWxQZW5kaW5nKCk7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0lOSVRJQUxfUFVCTElTSCcpIHtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgdmFyIHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAhKHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHBoYXNlIHRvIGJlIERSQUdHSU5HIGFmdGVyIElOSVRJQUxfUFVCTElTSCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICBnZXRTY3JvbGxlcigpLnN0YXJ0KHN0YXRlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgIGdldFNjcm9sbGVyKCkuc2Nyb2xsKHN0b3JlLmdldFN0YXRlKCkpO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBwZW5kaW5nRHJvcCA9IChmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIG5leHQoYWN0aW9uKTtcblxuICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSAnUFVCTElTSF9XSElMRV9EUkFHR0lORycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9zdEFjdGlvblN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgaWYgKHBvc3RBY3Rpb25TdGF0ZS5waGFzZSAhPT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocG9zdEFjdGlvblN0YXRlLmlzV2FpdGluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN0b3JlLmRpc3BhdGNoKGRyb3Aoe1xuICAgICAgICByZWFzb246IHBvc3RBY3Rpb25TdGF0ZS5yZWFzb25cbiAgICAgIH0pKTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBnZXRNYXhXaW5kb3dTY3JvbGwgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAhZG9jID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGdldCBtYXggc2Nyb2xsIHdpdGhvdXQgYSBkb2N1bWVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG1heFNjcm9sbCA9IGdldE1heFNjcm9sbCh7XG4gICAgc2Nyb2xsSGVpZ2h0OiBkb2Muc2Nyb2xsSGVpZ2h0LFxuICAgIHNjcm9sbFdpZHRoOiBkb2Muc2Nyb2xsV2lkdGgsXG4gICAgd2lkdGg6IGRvYy5jbGllbnRXaWR0aCxcbiAgICBoZWlnaHQ6IGRvYy5jbGllbnRIZWlnaHRcbiAgfSk7XG4gIHJldHVybiBtYXhTY3JvbGw7XG59KTtcblxudmFyIHNob3VsZENoZWNrT25BY3Rpb24gPSBmdW5jdGlvbiBzaG91bGRDaGVja09uQWN0aW9uKGFjdGlvbikge1xuICByZXR1cm4gYWN0aW9uLnR5cGUgPT09ICdNT1ZFJyB8fCBhY3Rpb24udHlwZSA9PT0gJ01PVkVfVVAnIHx8IGFjdGlvbi50eXBlID09PSAnTU9WRV9SSUdIVCcgfHwgYWN0aW9uLnR5cGUgPT09ICdNT1ZFX0RPV04nIHx8IGFjdGlvbi50eXBlID09PSAnTU9WRV9MRUZUJyB8fCBhY3Rpb24udHlwZSA9PT0gJ01PVkVfQllfV0lORE9XX1NDUk9MTCc7XG59O1xuXG52YXIgd2FzRGVzdGluYXRpb25DaGFuZ2UgPSBmdW5jdGlvbiB3YXNEZXN0aW5hdGlvbkNoYW5nZShwcmV2aW91cywgY3VycmVudCwgYWN0aW9uKSB7XG4gIGlmICghc2hvdWxkQ2hlY2tPbkFjdGlvbihhY3Rpb24pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFpc01vdmVtZW50QWxsb3dlZChwcmV2aW91cykgfHwgIWlzTW92ZW1lbnRBbGxvd2VkKGN1cnJlbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHdoYXRJc0RyYWdnZWRPdmVyKHByZXZpb3VzLmltcGFjdCkgPT09IHdoYXRJc0RyYWdnZWRPdmVyKGN1cnJlbnQuaW1wYWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxudmFyIGdldFVwZGF0ZWRWaWV3cG9ydE1heCA9IGZ1bmN0aW9uIGdldFVwZGF0ZWRWaWV3cG9ydE1heCh2aWV3cG9ydCkge1xuICB2YXIgbWF4U2Nyb2xsID0gZ2V0TWF4V2luZG93U2Nyb2xsKCk7XG5cbiAgaWYgKGlzRXF1YWwodmlld3BvcnQuc2Nyb2xsLm1heCwgbWF4U2Nyb2xsKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG1heFNjcm9sbDtcbn07XG5cbnZhciB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbE9uRGVzdGluYXRpb25DaGFuZ2UgPSAoZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICB2YXIgcHJldmlvdXMgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgdmFyIGN1cnJlbnQgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICBpZiAoIWN1cnJlbnQuaXNEcmFnZ2luZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghd2FzRGVzdGluYXRpb25DaGFuZ2UocHJldmlvdXMsIGN1cnJlbnQsIGFjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWF4U2Nyb2xsID0gZ2V0VXBkYXRlZFZpZXdwb3J0TWF4KGN1cnJlbnQudmlld3BvcnQpO1xuXG4gICAgICBpZiAobWF4U2Nyb2xsKSB7XG4gICAgICAgIG5leHQodXBkYXRlVmlld3BvcnRNYXhTY3JvbGwoe1xuICAgICAgICAgIG1heFNjcm9sbDogbWF4U2Nyb2xsXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBjb21wb3NlRW5oYW5jZXJzID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOiBjb21wb3NlO1xudmFyIGNyZWF0ZVN0b3JlJDEgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGdldERpbWVuc2lvbk1hcnNoYWwgPSBfcmVmLmdldERpbWVuc2lvbk1hcnNoYWwsXG4gICAgICBzdHlsZU1hcnNoYWwgPSBfcmVmLnN0eWxlTWFyc2hhbCxcbiAgICAgIGdldFJlc3BvbmRlcnMgPSBfcmVmLmdldFJlc3BvbmRlcnMsXG4gICAgICBhbm5vdW5jZSA9IF9yZWYuYW5ub3VuY2UsXG4gICAgICBnZXRTY3JvbGxlciA9IF9yZWYuZ2V0U2Nyb2xsZXI7XG4gIHJldHVybiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBjb21wb3NlRW5oYW5jZXJzKGFwcGx5TWlkZGxld2FyZShzdHlsZShzdHlsZU1hcnNoYWwpLCBkaW1lbnNpb25NYXJzaGFsU3RvcHBlcihnZXREaW1lbnNpb25NYXJzaGFsKSwgbGlmdCQxKGdldERpbWVuc2lvbk1hcnNoYWwpLCBkcm9wJDEsIGRyb3BBbmltYXRpb25GaW5pc2gsIHBlbmRpbmdEcm9wLCB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbE9uRGVzdGluYXRpb25DaGFuZ2UsIGF1dG9TY3JvbGwoZ2V0U2Nyb2xsZXIpLCByZXNwb25kZXJzKGdldFJlc3BvbmRlcnMsIGFubm91bmNlKSkpKTtcbn0pO1xuXG52YXIgY2xlYW4kMiA9IGZ1bmN0aW9uIGNsZWFuKCkge1xuICByZXR1cm4ge1xuICAgIGFkZGl0aW9uczoge30sXG4gICAgcmVtb3ZhbHM6IHt9LFxuICAgIG1vZGlmaWVkOiB7fVxuICB9O1xufTtcblxudmFyIHRpbWluZ0tleSA9ICdQdWJsaXNoIGNvbGxlY3Rpb24gZnJvbSBET00nO1xudmFyIGNyZWF0ZVB1Ymxpc2hlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZ2V0RW50cmllcyA9IF9yZWYuZ2V0RW50cmllcyxcbiAgICAgIGNhbGxiYWNrcyA9IF9yZWYuY2FsbGJhY2tzO1xuXG4gIHZhciBhZHZhbmNlZFVzYWdlV2FybmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHt9O1xuICAgIH1cblxuICAgIHZhciBoYXNBbm5vdW5jZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGhhc0Fubm91bmNlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGhhc0Fubm91bmNlZCA9IHRydWU7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgICBBZHZhbmNlZCB1c2FnZSB3YXJuaW5nOiB5b3UgYXJlIGFkZGluZyBvciByZW1vdmluZyBhIGRpbWVuc2lvbiBkdXJpbmcgYSBkcmFnXFxuICAgICAgICBUaGlzIGFuIGFkdmFuY2VkIGZlYXR1cmUuXFxuXFxuICAgICAgICBNb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9ndWlkZXMvY2hhbmdlcy13aGlsZS1kcmFnZ2luZy5tZFxcbiAgICAgIFwiKSA6IHZvaWQgMDtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIHN0YWdpbmcgPSBjbGVhbiQyKCk7XG4gIHZhciBmcmFtZUlkID0gbnVsbDtcblxuICB2YXIgY29sbGVjdCA9IGZ1bmN0aW9uIGNvbGxlY3QoKSB7XG4gICAgYWR2YW5jZWRVc2FnZVdhcm5pbmcoKTtcblxuICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBmcmFtZUlkID0gbnVsbDtcbiAgICAgIGNhbGxiYWNrcy5jb2xsZWN0aW9uU3RhcnRpbmcoKTtcbiAgICAgIHN0YXJ0KHRpbWluZ0tleSk7XG4gICAgICB2YXIgZW50cmllcyA9IGdldEVudHJpZXMoKTtcbiAgICAgIHZhciBfc3RhZ2luZyA9IHN0YWdpbmcsXG4gICAgICAgICAgYWRkaXRpb25zID0gX3N0YWdpbmcuYWRkaXRpb25zLFxuICAgICAgICAgIHJlbW92YWxzID0gX3N0YWdpbmcucmVtb3ZhbHMsXG4gICAgICAgICAgbW9kaWZpZWQgPSBfc3RhZ2luZy5tb2RpZmllZDtcblxuICAgICAgdmFyIGFkZGVkID0gX09iamVjdCRrZXlzKGFkZGl0aW9ucykubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gZW50cmllcy5kcmFnZ2FibGVzW2lkXS5nZXREaW1lbnNpb24ob3JpZ2luKTtcbiAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuZGVzY3JpcHRvci5pbmRleCAtIGIuZGVzY3JpcHRvci5pbmRleDtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdXBkYXRlZCA9IF9PYmplY3Qka2V5cyhtb2RpZmllZCkubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzLmRyb3BwYWJsZXNbaWRdO1xuICAgICAgICAhZW50cnkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmluZCBkeW5hbWljYWxseSBhZGRlZCBkcm9wcGFibGUgaW4gY2FjaGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybiBlbnRyeS5jYWxsYmFja3MucmVjb2xsZWN0KCk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgYWRkaXRpb25zOiBhZGRlZCxcbiAgICAgICAgcmVtb3ZhbHM6IF9PYmplY3Qka2V5cyhyZW1vdmFscyksXG4gICAgICAgIG1vZGlmaWVkOiB1cGRhdGVkXG4gICAgICB9O1xuICAgICAgc3RhZ2luZyA9IGNsZWFuJDIoKTtcbiAgICAgIGZpbmlzaCh0aW1pbmdLZXkpO1xuICAgICAgY2FsbGJhY2tzLnB1Ymxpc2gocmVzdWx0KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgYWRkJCQxID0gZnVuY3Rpb24gYWRkJCQxKGRlc2NyaXB0b3IpIHtcbiAgICBzdGFnaW5nLmFkZGl0aW9uc1tkZXNjcmlwdG9yLmlkXSA9IGRlc2NyaXB0b3I7XG4gICAgc3RhZ2luZy5tb2RpZmllZFtkZXNjcmlwdG9yLmRyb3BwYWJsZUlkXSA9IHRydWU7XG5cbiAgICBpZiAoc3RhZ2luZy5yZW1vdmFsc1tkZXNjcmlwdG9yLmlkXSkge1xuICAgICAgZGVsZXRlIHN0YWdpbmcucmVtb3ZhbHNbZGVzY3JpcHRvci5pZF07XG4gICAgfVxuXG4gICAgY29sbGVjdCgpO1xuICB9O1xuXG4gIHZhciByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoZGVzY3JpcHRvcikge1xuICAgIHN0YWdpbmcucmVtb3ZhbHNbZGVzY3JpcHRvci5pZF0gPSBkZXNjcmlwdG9yO1xuICAgIHN0YWdpbmcubW9kaWZpZWRbZGVzY3JpcHRvci5kcm9wcGFibGVJZF0gPSB0cnVlO1xuXG4gICAgaWYgKHN0YWdpbmcuYWRkaXRpb25zW2Rlc2NyaXB0b3IuaWRdKSB7XG4gICAgICBkZWxldGUgc3RhZ2luZy5hZGRpdGlvbnNbZGVzY3JpcHRvci5pZF07XG4gICAgfVxuXG4gICAgY29sbGVjdCgpO1xuICB9O1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBpZiAoIWZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcbiAgICBmcmFtZUlkID0gbnVsbDtcbiAgICBzdGFnaW5nID0gY2xlYW4kMigpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkOiBhZGQkJDEsXG4gICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgc3RvcDogc3RvcFxuICB9O1xufSk7XG5cbnZhciBnZXRXaW5kb3dTY3JvbGwgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfTtcbn0pO1xuXG52YXIgZ2V0Vmlld3BvcnQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgc2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKCk7XG4gIHZhciBtYXhTY3JvbGwgPSBnZXRNYXhXaW5kb3dTY3JvbGwoKTtcbiAgdmFyIHRvcCA9IHNjcm9sbC55O1xuICB2YXIgbGVmdCA9IHNjcm9sbC54O1xuICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAhZG9jID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgd2lkdGggPSBkb2MuY2xpZW50V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBkb2MuY2xpZW50SGVpZ2h0O1xuICB2YXIgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gIHZhciBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gIHZhciBmcmFtZSA9IGdldFJlY3Qoe1xuICAgIHRvcDogdG9wLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIGJvdHRvbTogYm90dG9tXG4gIH0pO1xuICB2YXIgdmlld3BvcnQgPSB7XG4gICAgZnJhbWU6IGZyYW1lLFxuICAgIHNjcm9sbDoge1xuICAgICAgaW5pdGlhbDogc2Nyb2xsLFxuICAgICAgY3VycmVudDogc2Nyb2xsLFxuICAgICAgbWF4OiBtYXhTY3JvbGwsXG4gICAgICBkaWZmOiB7XG4gICAgICAgIHZhbHVlOiBvcmlnaW4sXG4gICAgICAgIGRpc3BsYWNlbWVudDogb3JpZ2luXG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gdmlld3BvcnQ7XG59KTtcblxudmFyIGdldEluaXRpYWxQdWJsaXNoID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjcml0aWNhbCA9IF9yZWYuY3JpdGljYWwsXG4gICAgICBzY3JvbGxPcHRpb25zID0gX3JlZi5zY3JvbGxPcHRpb25zLFxuICAgICAgZW50cmllcyA9IF9yZWYuZW50cmllcztcbiAgdmFyIHRpbWluZ0tleSA9ICdJbml0aWFsIGNvbGxlY3Rpb24gZnJvbSBET00nO1xuICBzdGFydCh0aW1pbmdLZXkpO1xuICB2YXIgdmlld3BvcnQgPSBnZXRWaWV3cG9ydCgpO1xuICB2YXIgd2luZG93U2Nyb2xsID0gdmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQ7XG4gIHZhciBob21lID0gY3JpdGljYWwuZHJvcHBhYmxlO1xuICB2YXIgZHJvcHBhYmxlcyA9IHZhbHVlcyhlbnRyaWVzLmRyb3BwYWJsZXMpLmZpbHRlcihmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gZW50cnkuZGVzY3JpcHRvci50eXBlID09PSBob21lLnR5cGU7XG4gIH0pLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gZW50cnkuY2FsbGJhY2tzLmdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsKHdpbmRvd1Njcm9sbCwgc2Nyb2xsT3B0aW9ucyk7XG4gIH0pO1xuICB2YXIgZHJhZ2dhYmxlcyA9IHZhbHVlcyhlbnRyaWVzLmRyYWdnYWJsZXMpLmZpbHRlcihmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gZW50cnkuZGVzY3JpcHRvci50eXBlID09PSBjcml0aWNhbC5kcmFnZ2FibGUudHlwZTtcbiAgfSkubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5nZXREaW1lbnNpb24od2luZG93U2Nyb2xsKTtcbiAgfSk7XG4gIHZhciBkaW1lbnNpb25zID0ge1xuICAgIGRyYWdnYWJsZXM6IHRvRHJhZ2dhYmxlTWFwKGRyYWdnYWJsZXMpLFxuICAgIGRyb3BwYWJsZXM6IHRvRHJvcHBhYmxlTWFwKGRyb3BwYWJsZXMpXG4gIH07XG4gIGZpbmlzaCh0aW1pbmdLZXkpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciB0aHJvd0lmQWRkT3JSZW1vdmVPZldyb25nVHlwZSA9IGZ1bmN0aW9uIHRocm93SWZBZGRPclJlbW92ZU9mV3JvbmdUeXBlKGNvbGxlY3Rpb24sIGRlc2NyaXB0b3IpIHtcbiAgIShjb2xsZWN0aW9uLmNyaXRpY2FsLmRyYWdnYWJsZS50eXBlID09PSBkZXNjcmlwdG9yLnR5cGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIldlIGhhdmUgZGV0ZWN0ZWQgdGhhdCB5b3UgaGF2ZSBhZGRlZCBhIERyYWdnYWJsZSBkdXJpbmcgYSBkcmFnLlxcbiAgICAgIFRoaXMgaXMgbm90IG9mIHRoZSBzYW1lIHR5cGUgYXMgdGhlIGRyYWdnaW5nIGl0ZW1cXG5cXG4gICAgICBEcmFnZ2luZyB0eXBlOiBcIiArIGNvbGxlY3Rpb24uY3JpdGljYWwuZHJhZ2dhYmxlLnR5cGUgKyBcIi5cXG4gICAgICBBZGRlZCB0eXBlOiBcIiArIGRlc2NyaXB0b3IudHlwZSArIFwiXFxuXFxuICAgICAgV2UgYXJlIG5vdCBhbGxvd2luZyB0aGlzIGFzIHlvdSBjYW4gcnVuIGludG8gcHJvYmxlbXMgaWYgeW91ciBjaGFuZ2VcXG4gICAgICBoYXMgc2hpZnRlZCB0aGUgcG9zaXRpb25pbmcgb2Ygb3RoZXIgRHJvcHBhYmxlcywgb3IgaGFzIGNoYW5nZWQgdGhlIHNpemUgb2YgdGhlIHBhZ2VcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufTtcblxudmFyIGNyZWF0ZURpbWVuc2lvbk1hcnNoYWwgPSAoZnVuY3Rpb24gKGNhbGxiYWNrcykge1xuICB2YXIgZW50cmllcyA9IHtcbiAgICBkcm9wcGFibGVzOiB7fSxcbiAgICBkcmFnZ2FibGVzOiB7fVxuICB9O1xuICB2YXIgY29sbGVjdGlvbiA9IG51bGw7XG4gIHZhciBwdWJsaXNoZXIgPSBjcmVhdGVQdWJsaXNoZXIoe1xuICAgIGNhbGxiYWNrczoge1xuICAgICAgcHVibGlzaDogY2FsbGJhY2tzLnB1Ymxpc2hXaGlsZURyYWdnaW5nLFxuICAgICAgY29sbGVjdGlvblN0YXJ0aW5nOiBjYWxsYmFja3MuY29sbGVjdGlvblN0YXJ0aW5nXG4gICAgfSxcbiAgICBnZXRFbnRyaWVzOiBmdW5jdGlvbiBnZXRFbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcmVnaXN0ZXJEcmFnZ2FibGUgPSBmdW5jdGlvbiByZWdpc3RlckRyYWdnYWJsZShkZXNjcmlwdG9yLCBnZXREaW1lbnNpb24pIHtcbiAgICB2YXIgZW50cnkgPSB7XG4gICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgZ2V0RGltZW5zaW9uOiBnZXREaW1lbnNpb25cbiAgICB9O1xuICAgIGVudHJpZXMuZHJhZ2dhYmxlc1tkZXNjcmlwdG9yLmlkXSA9IGVudHJ5O1xuXG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhyb3dJZkFkZE9yUmVtb3ZlT2ZXcm9uZ1R5cGUoY29sbGVjdGlvbiwgZGVzY3JpcHRvcik7XG4gICAgcHVibGlzaGVyLmFkZChkZXNjcmlwdG9yKTtcbiAgfTtcblxuICB2YXIgdXBkYXRlRHJhZ2dhYmxlID0gZnVuY3Rpb24gdXBkYXRlRHJhZ2dhYmxlKHByZXZpb3VzLCBkZXNjcmlwdG9yLCBnZXREaW1lbnNpb24pIHtcbiAgICAhZW50cmllcy5kcmFnZ2FibGVzW3ByZXZpb3VzLmlkXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCB1cGRhdGUgZHJhZ2dhYmxlIHJlZ2lzdHJhdGlvbiBhcyBubyBwcmV2aW91cyByZWdpc3RyYXRpb24gd2FzIGZvdW5kJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGRlbGV0ZSBlbnRyaWVzLmRyYWdnYWJsZXNbcHJldmlvdXMuaWRdO1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgICBnZXREaW1lbnNpb246IGdldERpbWVuc2lvblxuICAgIH07XG4gICAgZW50cmllcy5kcmFnZ2FibGVzW2Rlc2NyaXB0b3IuaWRdID0gZW50cnk7XG4gIH07XG5cbiAgdmFyIHVucmVnaXN0ZXJEcmFnZ2FibGUgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyRHJhZ2dhYmxlKGRlc2NyaXB0b3IpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzLmRyYWdnYWJsZXNbZGVzY3JpcHRvci5pZF07XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCB1bnJlZ2lzdGVyIERyYWdnYWJsZSB3aXRoIGlkOlxcbiAgICAgIFwiICsgZGVzY3JpcHRvci5pZCArIFwiIGFzIGl0IGlzIG5vdCByZWdpc3RlcmVkXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChlbnRyeS5kZXNjcmlwdG9yICE9PSBkZXNjcmlwdG9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsZXRlIGVudHJpZXMuZHJhZ2dhYmxlc1tkZXNjcmlwdG9yLmlkXTtcblxuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICEoY29sbGVjdGlvbi5jcml0aWNhbC5kcmFnZ2FibGUuaWQgIT09IGRlc2NyaXB0b3IuaWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHJlbW92ZSB0aGUgZHJhZ2dpbmcgaXRlbSBkdXJpbmcgYSBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHRocm93SWZBZGRPclJlbW92ZU9mV3JvbmdUeXBlKGNvbGxlY3Rpb24sIGRlc2NyaXB0b3IpO1xuICAgIHB1Ymxpc2hlci5yZW1vdmUoZGVzY3JpcHRvcik7XG4gIH07XG5cbiAgdmFyIHJlZ2lzdGVyRHJvcHBhYmxlID0gZnVuY3Rpb24gcmVnaXN0ZXJEcm9wcGFibGUoZGVzY3JpcHRvciwgZHJvcHBhYmxlQ2FsbGJhY2tzKSB7XG4gICAgdmFyIGlkID0gZGVzY3JpcHRvci5pZDtcbiAgICBlbnRyaWVzLmRyb3BwYWJsZXNbaWRdID0ge1xuICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgIGNhbGxiYWNrczogZHJvcHBhYmxlQ2FsbGJhY2tzXG4gICAgfTtcbiAgICAhIWNvbGxlY3Rpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgYWRkIGEgRHJvcHBhYmxlIGR1cmluZyBhIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZSA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZShwcmV2aW91cywgZGVzY3JpcHRvciwgZHJvcHBhYmxlQ2FsbGJhY2tzKSB7XG4gICAgIWVudHJpZXMuZHJvcHBhYmxlc1twcmV2aW91cy5pZF0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgdXBkYXRlIGRyb3BwYWJsZSByZWdpc3RyYXRpb24gYXMgbm8gcHJldmlvdXMgcmVnaXN0cmF0aW9uIHdhcyBmb3VuZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBkZWxldGUgZW50cmllcy5kcm9wcGFibGVzW3ByZXZpb3VzLmlkXTtcbiAgICB2YXIgZW50cnkgPSB7XG4gICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgY2FsbGJhY2tzOiBkcm9wcGFibGVDYWxsYmFja3NcbiAgICB9O1xuICAgIGVudHJpZXMuZHJvcHBhYmxlc1tkZXNjcmlwdG9yLmlkXSA9IGVudHJ5O1xuICAgICEhY29sbGVjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1lvdSBhcmUgbm90IGFibGUgdG8gdXBkYXRlIHRoZSBpZCBvciB0eXBlIG9mIGEgZHJvcHBhYmxlIGR1cmluZyBhIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIHVucmVnaXN0ZXJEcm9wcGFibGUgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyRHJvcHBhYmxlKGRlc2NyaXB0b3IpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzLmRyb3BwYWJsZXNbZGVzY3JpcHRvci5pZF07XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCB1bnJlZ2lzdGVyIERyb3BwYWJsZSB3aXRoIGlkIFwiICsgZGVzY3JpcHRvci5pZCArIFwiIGFzIGFzIGl0IGlzIG5vdCByZWdpc3RlcmVkXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChlbnRyeS5kZXNjcmlwdG9yICE9PSBkZXNjcmlwdG9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsZXRlIGVudHJpZXMuZHJvcHBhYmxlc1tkZXNjcmlwdG9yLmlkXTtcbiAgICAhIWNvbGxlY3Rpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgYWRkIGEgRHJvcHBhYmxlIGR1cmluZyBhIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZChpZCwgaXNFbmFibGVkKSB7XG4gICAgIWVudHJpZXMuZHJvcHBhYmxlc1tpZF0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHVwZGF0ZSBpcyBlbmFibGVkIGZsYWcgb2YgRHJvcHBhYmxlIFwiICsgaWQgKyBcIiBhcyBpdCBpcyBub3QgcmVnaXN0ZXJlZFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsYmFja3MudXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkKHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGlzRW5hYmxlZDogaXNFbmFibGVkXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkKGlkLCBpc0NvbWJpbmVFbmFibGVkKSB7XG4gICAgIWVudHJpZXMuZHJvcHBhYmxlc1tpZF0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHVwZGF0ZSBpc0NvbWJpbmVFbmFibGVkIGZsYWcgb2YgRHJvcHBhYmxlIFwiICsgaWQgKyBcIiBhcyBpdCBpcyBub3QgcmVnaXN0ZXJlZFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsYmFja3MudXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCh7XG4gICAgICBpZDogaWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkOiBpc0NvbWJpbmVFbmFibGVkXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZVNjcm9sbCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZVNjcm9sbChpZCwgbmV3U2Nyb2xsKSB7XG4gICAgIWVudHJpZXMuZHJvcHBhYmxlc1tpZF0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHVwZGF0ZSB0aGUgc2Nyb2xsIG9uIERyb3BwYWJsZSBcIiArIGlkICsgXCIgYXMgaXQgaXMgbm90IHJlZ2lzdGVyZWRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2tzLnVwZGF0ZURyb3BwYWJsZVNjcm9sbCh7XG4gICAgICBpZDogaWQsXG4gICAgICBvZmZzZXQ6IG5ld1Njcm9sbFxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzY3JvbGxEcm9wcGFibGUgPSBmdW5jdGlvbiBzY3JvbGxEcm9wcGFibGUoaWQsIGNoYW5nZSkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXMuZHJvcHBhYmxlc1tpZF07XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBzY3JvbGwgRHJvcHBhYmxlIFwiICsgaWQgKyBcIiBhcyBpdCBpcyBub3QgcmVnaXN0ZXJlZFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlbnRyeS5jYWxsYmFja3Muc2Nyb2xsKGNoYW5nZSk7XG4gIH07XG5cbiAgdmFyIHN0b3BQdWJsaXNoaW5nID0gZnVuY3Rpb24gc3RvcFB1Ymxpc2hpbmcoKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHVibGlzaGVyLnN0b3AoKTtcbiAgICB2YXIgaG9tZSA9IGNvbGxlY3Rpb24uY3JpdGljYWwuZHJvcHBhYmxlO1xuICAgIHZhbHVlcyhlbnRyaWVzLmRyb3BwYWJsZXMpLmZpbHRlcihmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHJldHVybiBlbnRyeS5kZXNjcmlwdG9yLnR5cGUgPT09IGhvbWUudHlwZTtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGVudHJ5LmNhbGxiYWNrcy5kcmFnU3RvcHBlZCgpO1xuICAgIH0pO1xuICAgIGNvbGxlY3Rpb24gPSBudWxsO1xuICB9O1xuXG4gIHZhciBzdGFydFB1Ymxpc2hpbmcgPSBmdW5jdGlvbiBzdGFydFB1Ymxpc2hpbmcocmVxdWVzdCkge1xuICAgICEhY29sbGVjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdGFydCBjYXB0dXJpbmcgY3JpdGljYWwgZGltZW5zaW9ucyBhcyB0aGVyZSBpcyBhbHJlYWR5IGEgY29sbGVjdGlvbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzLmRyYWdnYWJsZXNbcmVxdWVzdC5kcmFnZ2FibGVJZF07XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgY3JpdGljYWwgZHJhZ2dhYmxlIGVudHJ5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBob21lID0gZW50cmllcy5kcm9wcGFibGVzW2VudHJ5LmRlc2NyaXB0b3IuZHJvcHBhYmxlSWRdO1xuICAgICFob21lID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgY3JpdGljYWwgZHJvcHBhYmxlIGVudHJ5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjcml0aWNhbCA9IHtcbiAgICAgIGRyYWdnYWJsZTogZW50cnkuZGVzY3JpcHRvcixcbiAgICAgIGRyb3BwYWJsZTogaG9tZS5kZXNjcmlwdG9yXG4gICAgfTtcbiAgICBjb2xsZWN0aW9uID0ge1xuICAgICAgY3JpdGljYWw6IGNyaXRpY2FsXG4gICAgfTtcbiAgICByZXR1cm4gZ2V0SW5pdGlhbFB1Ymxpc2goe1xuICAgICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgICAgZW50cmllczogZW50cmllcyxcbiAgICAgIHNjcm9sbE9wdGlvbnM6IHJlcXVlc3Quc2Nyb2xsT3B0aW9uc1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBtYXJzaGFsID0ge1xuICAgIHJlZ2lzdGVyRHJhZ2dhYmxlOiByZWdpc3RlckRyYWdnYWJsZSxcbiAgICB1cGRhdGVEcmFnZ2FibGU6IHVwZGF0ZURyYWdnYWJsZSxcbiAgICB1bnJlZ2lzdGVyRHJhZ2dhYmxlOiB1bnJlZ2lzdGVyRHJhZ2dhYmxlLFxuICAgIHJlZ2lzdGVyRHJvcHBhYmxlOiByZWdpc3RlckRyb3BwYWJsZSxcbiAgICB1cGRhdGVEcm9wcGFibGU6IHVwZGF0ZURyb3BwYWJsZSxcbiAgICB1bnJlZ2lzdGVyRHJvcHBhYmxlOiB1bnJlZ2lzdGVyRHJvcHBhYmxlLFxuICAgIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZDogdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkLFxuICAgIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQsXG4gICAgc2Nyb2xsRHJvcHBhYmxlOiBzY3JvbGxEcm9wcGFibGUsXG4gICAgdXBkYXRlRHJvcHBhYmxlU2Nyb2xsOiB1cGRhdGVEcm9wcGFibGVTY3JvbGwsXG4gICAgc3RhcnRQdWJsaXNoaW5nOiBzdGFydFB1Ymxpc2hpbmcsXG4gICAgc3RvcFB1Ymxpc2hpbmc6IHN0b3BQdWJsaXNoaW5nXG4gIH07XG4gIHJldHVybiBtYXJzaGFsO1xufSk7XG5cbnZhciBjdXJ2ZXMgPSB7XG4gIG91dE9mVGhlV2F5OiAnY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSknLFxuICBkcm9wOiAnY3ViaWMtYmV6aWVyKC4yLDEsLjEsMSknXG59O1xudmFyIGNvbWJpbmUgPSB7XG4gIG9wYWNpdHk6IHtcbiAgICBkcm9wOiAwLFxuICAgIGNvbWJpbmluZzogMC43XG4gIH0sXG4gIHNjYWxlOiB7XG4gICAgZHJvcDogMC43NVxuICB9XG59O1xudmFyIG91dE9mVGhlV2F5VGltZSA9IDAuMjtcbnZhciBvdXRPZlRoZVdheVRpbWluZyA9IG91dE9mVGhlV2F5VGltZSArIFwicyBcIiArIGN1cnZlcy5vdXRPZlRoZVdheTtcbnZhciB0cmFuc2l0aW9ucyA9IHtcbiAgZmx1aWQ6IFwib3BhY2l0eSBcIiArIG91dE9mVGhlV2F5VGltaW5nLFxuICBzbmFwOiBcInRyYW5zZm9ybSBcIiArIG91dE9mVGhlV2F5VGltaW5nICsgXCIsIG9wYWNpdHkgXCIgKyBvdXRPZlRoZVdheVRpbWluZyxcbiAgZHJvcDogZnVuY3Rpb24gZHJvcChkdXJhdGlvbikge1xuICAgIHZhciB0aW1pbmcgPSBkdXJhdGlvbiArIFwicyBcIiArIGN1cnZlcy5kcm9wO1xuICAgIHJldHVybiBcInRyYW5zZm9ybSBcIiArIHRpbWluZyArIFwiLCBvcGFjaXR5IFwiICsgdGltaW5nO1xuICB9LFxuICBvdXRPZlRoZVdheTogXCJ0cmFuc2Zvcm0gXCIgKyBvdXRPZlRoZVdheVRpbWluZ1xufTtcblxudmFyIG1vdmVUbyA9IGZ1bmN0aW9uIG1vdmVUbyhvZmZzZXQkJDEpIHtcbiAgcmV0dXJuIGlzRXF1YWwob2Zmc2V0JCQxLCBvcmlnaW4pID8gbnVsbCA6IFwidHJhbnNsYXRlKFwiICsgb2Zmc2V0JCQxLnggKyBcInB4LCBcIiArIG9mZnNldCQkMS55ICsgXCJweClcIjtcbn07XG5cbnZhciB0cmFuc2Zvcm1zID0ge1xuICBtb3ZlVG86IG1vdmVUbyxcbiAgZHJvcDogZnVuY3Rpb24gZHJvcChvZmZzZXQkJDEsIGlzQ29tYmluaW5nKSB7XG4gICAgdmFyIHRyYW5zbGF0ZSA9IG1vdmVUbyhvZmZzZXQkJDEpO1xuXG4gICAgaWYgKCF0cmFuc2xhdGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghaXNDb21iaW5pbmcpIHtcbiAgICAgIHJldHVybiB0cmFuc2xhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZSArIFwiIHNjYWxlKFwiICsgY29tYmluZS5zY2FsZS5kcm9wICsgXCIpXCI7XG4gIH1cbn07XG5cbnZhciBwcmVmaXggPSAnZGF0YS1yZWFjdC1iZWF1dGlmdWwtZG5kJztcbnZhciBkcmFnSGFuZGxlID0gcHJlZml4ICsgXCItZHJhZy1oYW5kbGVcIjtcbnZhciBkcmFnZ2FibGUgPSBwcmVmaXggKyBcIi1kcmFnZ2FibGVcIjtcbnZhciBkcm9wcGFibGUgPSBwcmVmaXggKyBcIi1kcm9wcGFibGVcIjtcblxudmFyIG1ha2VHZXRTZWxlY3RvciA9IGZ1bmN0aW9uIG1ha2VHZXRTZWxlY3Rvcihjb250ZXh0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIFwiW1wiICsgYXR0cmlidXRlICsgXCI9XFxcIlwiICsgY29udGV4dCArIFwiXFxcIl1cIjtcbiAgfTtcbn07XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiBnZXRTdHlsZXMocnVsZXMsIHByb3BlcnR5KSB7XG4gIHJldHVybiBydWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICB2YXIgdmFsdWUgPSBydWxlLnN0eWxlc1twcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGUuc2VsZWN0b3IgKyBcIiB7IFwiICsgdmFsdWUgKyBcIiB9XCI7XG4gIH0pLmpvaW4oJyAnKTtcbn07XG5cbnZhciBub1BvaW50ZXJFdmVudHMgPSAncG9pbnRlci1ldmVudHM6IG5vbmU7JztcbnZhciBnZXRTdHlsZXMkMSA9IChmdW5jdGlvbiAoc3R5bGVDb250ZXh0KSB7XG4gIHZhciBnZXRTZWxlY3RvciA9IG1ha2VHZXRTZWxlY3RvcihzdHlsZUNvbnRleHQpO1xuXG4gIHZhciBkcmFnSGFuZGxlJCQxID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBncmFiQ3Vyc29yID0gXCJcXG4gICAgICBjdXJzb3I6IC13ZWJraXQtZ3JhYjtcXG4gICAgICBjdXJzb3I6IGdyYWI7XFxuICAgIFwiO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RvcjogZ2V0U2VsZWN0b3IoZHJhZ0hhbmRsZSksXG4gICAgICBzdHlsZXM6IHtcbiAgICAgICAgYWx3YXlzOiBcIlxcbiAgICAgICAgICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxuICAgICAgICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLDAsMCwwKTtcXG4gICAgICAgICAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XFxuICAgICAgICBcIixcbiAgICAgICAgcmVzdGluZzogZ3JhYkN1cnNvcixcbiAgICAgICAgZHJhZ2dpbmc6IG5vUG9pbnRlckV2ZW50cyxcbiAgICAgICAgZHJvcEFuaW1hdGluZzogZ3JhYkN1cnNvclxuICAgICAgfVxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgZHJhZ2dhYmxlJCQxID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0cmFuc2l0aW9uID0gXCJcXG4gICAgICB0cmFuc2l0aW9uOiBcIiArIHRyYW5zaXRpb25zLm91dE9mVGhlV2F5ICsgXCI7XFxuICAgIFwiO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RvcjogZ2V0U2VsZWN0b3IoZHJhZ2dhYmxlKSxcbiAgICAgIHN0eWxlczoge1xuICAgICAgICBkcmFnZ2luZzogdHJhbnNpdGlvbixcbiAgICAgICAgZHJvcEFuaW1hdGluZzogdHJhbnNpdGlvbixcbiAgICAgICAgdXNlckNhbmNlbDogdHJhbnNpdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgZHJvcHBhYmxlJCQxID0ge1xuICAgIHNlbGVjdG9yOiBnZXRTZWxlY3Rvcihkcm9wcGFibGUpLFxuICAgIHN0eWxlczoge1xuICAgICAgYWx3YXlzOiBcIm92ZXJmbG93LWFuY2hvcjogbm9uZTtcIlxuICAgIH1cbiAgfTtcbiAgdmFyIGJvZHkgPSB7XG4gICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICBzdHlsZXM6IHtcbiAgICAgIGRyYWdnaW5nOiBcIlxcbiAgICAgICAgY3Vyc29yOiBncmFiYmluZztcXG4gICAgICAgIGN1cnNvcjogLXdlYmtpdC1ncmFiYmluZztcXG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICBvdmVyZmxvdy1hbmNob3I6IG5vbmU7XFxuICAgICAgXCJcbiAgICB9XG4gIH07XG4gIHZhciBydWxlcyA9IFtkcmFnZ2FibGUkJDEsIGRyYWdIYW5kbGUkJDEsIGRyb3BwYWJsZSQkMSwgYm9keV07XG4gIHJldHVybiB7XG4gICAgYWx3YXlzOiBnZXRTdHlsZXMocnVsZXMsICdhbHdheXMnKSxcbiAgICByZXN0aW5nOiBnZXRTdHlsZXMocnVsZXMsICdyZXN0aW5nJyksXG4gICAgZHJhZ2dpbmc6IGdldFN0eWxlcyhydWxlcywgJ2RyYWdnaW5nJyksXG4gICAgZHJvcEFuaW1hdGluZzogZ2V0U3R5bGVzKHJ1bGVzLCAnZHJvcEFuaW1hdGluZycpLFxuICAgIHVzZXJDYW5jZWw6IGdldFN0eWxlcyhydWxlcywgJ3VzZXJDYW5jZWwnKVxuICB9O1xufSk7XG5cbnZhciBjb3VudCA9IDA7XG52YXIgcmVzZXRTdHlsZUNvbnRleHQgPSBmdW5jdGlvbiByZXNldFN0eWxlQ29udGV4dCgpIHtcbiAgY291bnQgPSAwO1xufTtcblxudmFyIGdldEhlYWQgPSBmdW5jdGlvbiBnZXRIZWFkKCkge1xuICB2YXIgaGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbiAgIWhlYWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmluZCB0aGUgaGVhZCB0byBhcHBlbmQgYSBzdHlsZSB0bycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGhlYWQ7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWwoKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIGVsLnR5cGUgPSAndGV4dC9jc3MnO1xuICByZXR1cm4gZWw7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVNYXJzaGFsID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRleHQgPSBcIlwiICsgY291bnQrKztcbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyQxKGNvbnRleHQpO1xuICB2YXIgYWx3YXlzID0gbnVsbDtcbiAgdmFyIGR5bmFtaWMgPSBudWxsO1xuICB2YXIgc2V0U3R5bGUgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChlbCwgcHJvcG9zZWQpIHtcbiAgICAhZWwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc2V0IHN0eWxlIG9mIHN0eWxlIHRhZyBpZiBub3QgbW91bnRlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBlbC5pbm5lckhUTUwgPSBwcm9wb3NlZDtcbiAgfSk7XG5cbiAgdmFyIG1vdW50ID0gZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgISghYWx3YXlzICYmICFkeW5hbWljKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1N0eWxlIG1hcnNoYWwgYWxyZWFkeSBtb3VudGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGFsd2F5cyA9IGNyZWF0ZVN0eWxlRWwoKTtcbiAgICBkeW5hbWljID0gY3JlYXRlU3R5bGVFbCgpO1xuICAgIGFsd2F5cy5zZXRBdHRyaWJ1dGUocHJlZml4ICsgXCItYWx3YXlzXCIsIGNvbnRleHQpO1xuICAgIGR5bmFtaWMuc2V0QXR0cmlidXRlKHByZWZpeCArIFwiLWR5bmFtaWNcIiwgY29udGV4dCk7XG4gICAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKGFsd2F5cyk7XG4gICAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKGR5bmFtaWMpO1xuICAgIHNldFN0eWxlKGFsd2F5cywgc3R5bGVzLmFsd2F5cyk7XG4gICAgc2V0U3R5bGUoZHluYW1pYywgc3R5bGVzLnJlc3RpbmcpO1xuICB9O1xuXG4gIHZhciBkcmFnZ2luZyA9IGZ1bmN0aW9uIGRyYWdnaW5nKCkge1xuICAgIHJldHVybiBzZXRTdHlsZShkeW5hbWljLCBzdHlsZXMuZHJhZ2dpbmcpO1xuICB9O1xuXG4gIHZhciBkcm9wcGluZyA9IGZ1bmN0aW9uIGRyb3BwaW5nKHJlYXNvbikge1xuICAgIGlmIChyZWFzb24gPT09ICdEUk9QJykge1xuICAgICAgc2V0U3R5bGUoZHluYW1pYywgc3R5bGVzLmRyb3BBbmltYXRpbmcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldFN0eWxlKGR5bmFtaWMsIHN0eWxlcy51c2VyQ2FuY2VsKTtcbiAgfTtcblxuICB2YXIgcmVzdGluZyA9IGZ1bmN0aW9uIHJlc3RpbmcoKSB7XG4gICAgcmV0dXJuIHNldFN0eWxlKGR5bmFtaWMsIHN0eWxlcy5yZXN0aW5nKTtcbiAgfTtcblxuICB2YXIgdW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgIShhbHdheXMgJiYgZHluYW1pYykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgdW5tb3VudCBzdHlsZSBtYXJzaGFsIGFzIGl0IGlzIGFscmVhZHkgdW5tb3VudGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGdldEhlYWQoKS5yZW1vdmVDaGlsZChhbHdheXMpO1xuICAgIGdldEhlYWQoKS5yZW1vdmVDaGlsZChkeW5hbWljKTtcbiAgICBhbHdheXMgPSBudWxsO1xuICAgIGR5bmFtaWMgPSBudWxsO1xuICB9O1xuXG4gIHZhciBtYXJzaGFsID0ge1xuICAgIGRyYWdnaW5nOiBkcmFnZ2luZyxcbiAgICBkcm9wcGluZzogZHJvcHBpbmcsXG4gICAgcmVzdGluZzogcmVzdGluZyxcbiAgICBzdHlsZUNvbnRleHQ6IGNvbnRleHQsXG4gICAgbW91bnQ6IG1vdW50LFxuICAgIHVubW91bnQ6IHVubW91bnRcbiAgfTtcbiAgcmV0dXJuIG1hcnNoYWw7XG59KTtcblxudmFyIGNhblN0YXJ0RHJhZyA9IChmdW5jdGlvbiAoc3RhdGUsIGlkKSB7XG4gIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0lETEUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc3RhdGUucGhhc2UgIT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc3RhdGUucGVuZGluZy5yZXN1bHQuZHJhZ2dhYmxlSWQgPT09IGlkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlLnBlbmRpbmcucmVzdWx0LnJlYXNvbiA9PT0gJ0RST1AnO1xufSk7XG5cbnZhciBzY3JvbGxXaW5kb3cgPSAoZnVuY3Rpb24gKGNoYW5nZSkge1xuICB3aW5kb3cuc2Nyb2xsQnkoY2hhbmdlLngsIGNoYW5nZS55KTtcbn0pO1xuXG52YXIgY291bnQkMSA9IDA7XG52YXIgdmlzdWFsbHlIaWRkZW4gPSB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzFweCcsXG4gIGhlaWdodDogJzFweCcsXG4gIG1hcmdpbjogJy0xcHgnLFxuICBib3JkZXI6ICcwJyxcbiAgcGFkZGluZzogJzAnLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIGNsaXA6ICdyZWN0KDAgMCAwIDApJyxcbiAgJ2NsaXAtcGF0aCc6ICdpbnNldCgxMDAlKSdcbn07XG5cbnZhciBnZXRCb2R5ID0gZnVuY3Rpb24gZ2V0Qm9keSgpIHtcbiAgIWRvY3VtZW50LmJvZHkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdBbm5vdW5jZXIgY2Fubm90IGZpbmQgZG9jdW1lbnQuYm9keScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG59O1xuXG52YXIgY3JlYXRlQW5ub3VuY2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gXCJyZWFjdC1iZWF1dGlmdWwtZG5kLWFubm91bmNlbWVudC1cIiArIGNvdW50JDErKztcbiAgdmFyIGVsID0gbnVsbDtcblxuICB2YXIgYW5ub3VuY2UgPSBmdW5jdGlvbiBhbm5vdW5jZShtZXNzYWdlKSB7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIEEgc2NyZWVuIHJlYWRlciBtZXNzYWdlIHdhcyB0cnlpbmcgdG8gYmUgYW5ub3VuY2VkIGJ1dCBpdCB3YXMgdW5hYmxlIHRvIGRvIHNvLlxcbiAgICAgIFRoaXMgY2FuIG9jY3VyIGlmIHlvdSB1bm1vdW50IHlvdXIgPERyYWdEcm9wQ29udGV4dCAvPiBpbiB5b3VyIG9uRHJhZ0VuZC5cXG4gICAgICBDb25zaWRlciBjYWxsaW5nIHByb3ZpZGVkLmFubm91bmNlKCkgYmVmb3JlIHRoZSB1bm1vdW50IHNvIHRoYXQgdGhlIGluc3RydWN0aW9uIHdpbGxcXG4gICAgICBub3QgYmUgbG9zdCBmb3IgdXNlcnMgcmVseWluZyBvbiBhIHNjcmVlbiByZWFkZXIuXFxuXFxuICAgICAgTWVzc2FnZSBub3QgcGFzc2VkIHRvIHNjcmVlbiByZWFkZXI6XFxuXFxuICAgICAgXFxcIlwiICsgbWVzc2FnZSArIFwiXFxcIlxcbiAgICBcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIG1vdW50ID0gZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgISFlbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Fubm91bmNlciBhbHJlYWR5IG1vdW50ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbC5pZCA9IGlkO1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ2Fzc2VydGl2ZScpO1xuICAgIGVsLnNldEF0dHJpYnV0ZSgncm9sZScsICdsb2cnKTtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtYXRvbWljJywgJ3RydWUnKTtcblxuICAgIF9PYmplY3QkYXNzaWduKGVsLnN0eWxlLCB2aXN1YWxseUhpZGRlbik7XG5cbiAgICBnZXRCb2R5KCkuYXBwZW5kQ2hpbGQoZWwpO1xuICB9O1xuXG4gIHZhciB1bm1vdW50ID0gZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICAhZWwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdXaWxsIG5vdCB1bm1vdW50IGFubm91bmNlciBhcyBpdCBpcyBhbHJlYWR5IHVubW91bnRlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBnZXRCb2R5KCkucmVtb3ZlQ2hpbGQoZWwpO1xuICAgIGVsID0gbnVsbDtcbiAgfTtcblxuICB2YXIgYW5ub3VuY2VyID0ge1xuICAgIGFubm91bmNlOiBhbm5vdW5jZSxcbiAgICBpZDogaWQsXG4gICAgbW91bnQ6IG1vdW50LFxuICAgIHVubW91bnQ6IHVubW91bnRcbiAgfTtcbiAgcmV0dXJuIGFubm91bmNlcjtcbn0pO1xuXG52YXIgZ2V0U2Nyb2xsYWJsZURyb3BwYWJsZXMgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChkcm9wcGFibGVzKSB7XG4gIHJldHVybiB0b0Ryb3BwYWJsZUxpc3QoZHJvcHBhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICBpZiAoIWRyb3BwYWJsZS5pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWRyb3BwYWJsZS5mcmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn0pO1xuXG52YXIgZ2V0U2Nyb2xsYWJsZURyb3BwYWJsZU92ZXIgPSBmdW5jdGlvbiBnZXRTY3JvbGxhYmxlRHJvcHBhYmxlT3Zlcih0YXJnZXQsIGRyb3BwYWJsZXMpIHtcbiAgdmFyIG1heWJlID0gZmluZChnZXRTY3JvbGxhYmxlRHJvcHBhYmxlcyhkcm9wcGFibGVzKSwgZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgICFkcm9wcGFibGUuZnJhbWUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdJbnZhbGlkIHJlc3VsdCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gaXNQb3NpdGlvbkluRnJhbWUoZHJvcHBhYmxlLmZyYW1lLnBhZ2VNYXJnaW5Cb3gpKHRhcmdldCk7XG4gIH0pO1xuICByZXR1cm4gbWF5YmU7XG59O1xuXG52YXIgZ2V0QmVzdFNjcm9sbGFibGVEcm9wcGFibGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNlbnRlciA9IF9yZWYuY2VudGVyLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcztcblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICB2YXIgX2RpbWVuc2lvbiA9IGRyb3BwYWJsZXNbZGVzdGluYXRpb25dO1xuXG4gICAgaWYgKCFfZGltZW5zaW9uLmZyYW1lKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gX2RpbWVuc2lvbjtcbiAgfVxuXG4gIHZhciBkaW1lbnNpb24gPSBnZXRTY3JvbGxhYmxlRHJvcHBhYmxlT3ZlcihjZW50ZXIsIGRyb3BwYWJsZXMpO1xuICByZXR1cm4gZGltZW5zaW9uO1xufSk7XG5cbnZhciBjb25maWcgPSB7XG4gIHN0YXJ0RnJvbVBlcmNlbnRhZ2U6IDAuMjUsXG4gIG1heFNjcm9sbEF0UGVyY2VudGFnZTogMC4wNSxcbiAgbWF4UGl4ZWxTY3JvbGw6IDI4LFxuICBlYXNlOiBmdW5jdGlvbiBlYXNlKHBlcmNlbnRhZ2UpIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocGVyY2VudGFnZSwgMik7XG4gIH0sXG4gIGR1cmF0aW9uRGFtcGVuaW5nOiB7XG4gICAgc3RvcERhbXBlbmluZ0F0OiAxMjAwLFxuICAgIGFjY2VsZXJhdGVBdDogMzYwXG4gIH1cbn07XG5cbnZhciBnZXREaXN0YW5jZVRocmVzaG9sZHMgPSAoZnVuY3Rpb24gKGNvbnRhaW5lciwgYXhpcykge1xuICB2YXIgc3RhcnRTY3JvbGxpbmdGcm9tID0gY29udGFpbmVyW2F4aXMuc2l6ZV0gKiBjb25maWcuc3RhcnRGcm9tUGVyY2VudGFnZTtcbiAgdmFyIG1heFNjcm9sbFZhbHVlQXQgPSBjb250YWluZXJbYXhpcy5zaXplXSAqIGNvbmZpZy5tYXhTY3JvbGxBdFBlcmNlbnRhZ2U7XG4gIHZhciB0aHJlc2hvbGRzID0ge1xuICAgIHN0YXJ0U2Nyb2xsaW5nRnJvbTogc3RhcnRTY3JvbGxpbmdGcm9tLFxuICAgIG1heFNjcm9sbFZhbHVlQXQ6IG1heFNjcm9sbFZhbHVlQXRcbiAgfTtcbiAgcmV0dXJuIHRocmVzaG9sZHM7XG59KTtcblxudmFyIGdldFBlcmNlbnRhZ2UgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHN0YXJ0T2ZSYW5nZSA9IF9yZWYuc3RhcnRPZlJhbmdlLFxuICAgICAgZW5kT2ZSYW5nZSA9IF9yZWYuZW5kT2ZSYW5nZSxcbiAgICAgIGN1cnJlbnQgPSBfcmVmLmN1cnJlbnQ7XG4gIHZhciByYW5nZSA9IGVuZE9mUmFuZ2UgLSBzdGFydE9mUmFuZ2U7XG5cbiAgaWYgKHJhbmdlID09PSAwKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIERldGVjdGVkIGRpc3RhbmNlIHJhbmdlIG9mIDAgaW4gdGhlIGZsdWlkIGF1dG8gc2Nyb2xsZXJcXG4gICAgICBUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHdvdWxkIGNhdXNlIGEgZGl2aWRlIGJ5IDAgaXNzdWUuXFxuICAgICAgTm90IGFsbG93aW5nIGFuIGF1dG8gc2Nyb2xsXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBjdXJyZW50SW5SYW5nZSA9IGN1cnJlbnQgLSBzdGFydE9mUmFuZ2U7XG4gIHZhciBwZXJjZW50YWdlID0gY3VycmVudEluUmFuZ2UgLyByYW5nZTtcbiAgcmV0dXJuIHBlcmNlbnRhZ2U7XG59KTtcblxudmFyIG1pblNjcm9sbCA9IDE7XG5cbnZhciBnZXRWYWx1ZUZyb21EaXN0YW5jZSA9IChmdW5jdGlvbiAoZGlzdGFuY2VUb0VkZ2UsIHRocmVzaG9sZHMpIHtcbiAgaWYgKGRpc3RhbmNlVG9FZGdlID4gdGhyZXNob2xkcy5zdGFydFNjcm9sbGluZ0Zyb20pIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChkaXN0YW5jZVRvRWRnZSA8PSB0aHJlc2hvbGRzLm1heFNjcm9sbFZhbHVlQXQpIHtcbiAgICByZXR1cm4gY29uZmlnLm1heFBpeGVsU2Nyb2xsO1xuICB9XG5cbiAgaWYgKGRpc3RhbmNlVG9FZGdlID09PSB0aHJlc2hvbGRzLnN0YXJ0U2Nyb2xsaW5nRnJvbSkge1xuICAgIHJldHVybiBtaW5TY3JvbGw7XG4gIH1cblxuICB2YXIgcGVyY2VudGFnZUZyb21NYXhTY3JvbGxWYWx1ZUF0ID0gZ2V0UGVyY2VudGFnZSh7XG4gICAgc3RhcnRPZlJhbmdlOiB0aHJlc2hvbGRzLm1heFNjcm9sbFZhbHVlQXQsXG4gICAgZW5kT2ZSYW5nZTogdGhyZXNob2xkcy5zdGFydFNjcm9sbGluZ0Zyb20sXG4gICAgY3VycmVudDogZGlzdGFuY2VUb0VkZ2VcbiAgfSk7XG4gIHZhciBwZXJjZW50YWdlRnJvbVN0YXJ0U2Nyb2xsaW5nRnJvbSA9IDEgLSBwZXJjZW50YWdlRnJvbU1heFNjcm9sbFZhbHVlQXQ7XG4gIHZhciBzY3JvbGwgPSBjb25maWcubWF4UGl4ZWxTY3JvbGwgKiBjb25maWcuZWFzZShwZXJjZW50YWdlRnJvbVN0YXJ0U2Nyb2xsaW5nRnJvbSk7XG4gIHJldHVybiBNYXRoLmNlaWwoc2Nyb2xsKTtcbn0pO1xuXG52YXIgYWNjZWxlcmF0ZUF0ID0gY29uZmlnLmR1cmF0aW9uRGFtcGVuaW5nLmFjY2VsZXJhdGVBdDtcbnZhciBzdG9wQXQgPSBjb25maWcuZHVyYXRpb25EYW1wZW5pbmcuc3RvcERhbXBlbmluZ0F0O1xudmFyIGRhbXBlblZhbHVlQnlUaW1lID0gKGZ1bmN0aW9uIChwcm9wb3NlZFNjcm9sbCwgZHJhZ1N0YXJ0VGltZSkge1xuICB2YXIgc3RhcnRPZlJhbmdlID0gZHJhZ1N0YXJ0VGltZTtcbiAgdmFyIGVuZE9mUmFuZ2UgPSBzdG9wQXQ7XG5cbiAgdmFyIG5vdyA9IF9EYXRlJG5vdygpO1xuXG4gIHZhciBydW5UaW1lID0gbm93IC0gc3RhcnRPZlJhbmdlO1xuXG4gIGlmIChydW5UaW1lID49IHN0b3BBdCkge1xuICAgIHJldHVybiBwcm9wb3NlZFNjcm9sbDtcbiAgfVxuXG4gIGlmIChydW5UaW1lIDwgYWNjZWxlcmF0ZUF0KSB7XG4gICAgcmV0dXJuIG1pblNjcm9sbDtcbiAgfVxuXG4gIHZhciBiZXR3ZWVuQWNjZWxlcmF0ZUF0QW5kU3RvcEF0UGVyY2VudGFnZSA9IGdldFBlcmNlbnRhZ2Uoe1xuICAgIHN0YXJ0T2ZSYW5nZTogYWNjZWxlcmF0ZUF0LFxuICAgIGVuZE9mUmFuZ2U6IGVuZE9mUmFuZ2UsXG4gICAgY3VycmVudDogcnVuVGltZVxuICB9KTtcbiAgdmFyIHNjcm9sbCA9IHByb3Bvc2VkU2Nyb2xsICogY29uZmlnLmVhc2UoYmV0d2VlbkFjY2VsZXJhdGVBdEFuZFN0b3BBdFBlcmNlbnRhZ2UpO1xuICByZXR1cm4gTWF0aC5jZWlsKHNjcm9sbCk7XG59KTtcblxudmFyIGdldFZhbHVlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkaXN0YW5jZVRvRWRnZSA9IF9yZWYuZGlzdGFuY2VUb0VkZ2UsXG4gICAgICB0aHJlc2hvbGRzID0gX3JlZi50aHJlc2hvbGRzLFxuICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmc7XG4gIHZhciBzY3JvbGwgPSBnZXRWYWx1ZUZyb21EaXN0YW5jZShkaXN0YW5jZVRvRWRnZSwgdGhyZXNob2xkcyk7XG5cbiAgaWYgKHNjcm9sbCA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKCFzaG91bGRVc2VUaW1lRGFtcGVuaW5nKSB7XG4gICAgcmV0dXJuIHNjcm9sbDtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heChkYW1wZW5WYWx1ZUJ5VGltZShzY3JvbGwsIGRyYWdTdGFydFRpbWUpLCBtaW5TY3JvbGwpO1xufSk7XG5cbnZhciBnZXRTY3JvbGxPbkF4aXMgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyLFxuICAgICAgZGlzdGFuY2VUb0VkZ2VzID0gX3JlZi5kaXN0YW5jZVRvRWRnZXMsXG4gICAgICBkcmFnU3RhcnRUaW1lID0gX3JlZi5kcmFnU3RhcnRUaW1lLFxuICAgICAgYXhpcyA9IF9yZWYuYXhpcyxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmc7XG4gIHZhciB0aHJlc2hvbGRzID0gZ2V0RGlzdGFuY2VUaHJlc2hvbGRzKGNvbnRhaW5lciwgYXhpcyk7XG4gIHZhciBpc0Nsb3NlclRvRW5kID0gZGlzdGFuY2VUb0VkZ2VzW2F4aXMuZW5kXSA8IGRpc3RhbmNlVG9FZGdlc1theGlzLnN0YXJ0XTtcblxuICBpZiAoaXNDbG9zZXJUb0VuZCkge1xuICAgIHJldHVybiBnZXRWYWx1ZSh7XG4gICAgICBkaXN0YW5jZVRvRWRnZTogZGlzdGFuY2VUb0VkZ2VzW2F4aXMuZW5kXSxcbiAgICAgIHRocmVzaG9sZHM6IHRocmVzaG9sZHMsXG4gICAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC0xICogZ2V0VmFsdWUoe1xuICAgIGRpc3RhbmNlVG9FZGdlOiBkaXN0YW5jZVRvRWRnZXNbYXhpcy5zdGFydF0sXG4gICAgdGhyZXNob2xkczogdGhyZXNob2xkcyxcbiAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgfSk7XG59KTtcblxudmFyIGFkanVzdEZvclNpemVMaW1pdHMgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IF9yZWYuc3ViamVjdCxcbiAgICAgIHByb3Bvc2VkU2Nyb2xsID0gX3JlZi5wcm9wb3NlZFNjcm9sbDtcbiAgdmFyIGlzVG9vQmlnVmVydGljYWxseSA9IHN1YmplY3QuaGVpZ2h0ID4gY29udGFpbmVyLmhlaWdodDtcbiAgdmFyIGlzVG9vQmlnSG9yaXpvbnRhbGx5ID0gc3ViamVjdC53aWR0aCA+IGNvbnRhaW5lci53aWR0aDtcblxuICBpZiAoIWlzVG9vQmlnSG9yaXpvbnRhbGx5ICYmICFpc1Rvb0JpZ1ZlcnRpY2FsbHkpIHtcbiAgICByZXR1cm4gcHJvcG9zZWRTY3JvbGw7XG4gIH1cblxuICBpZiAoaXNUb29CaWdIb3Jpem9udGFsbHkgJiYgaXNUb29CaWdWZXJ0aWNhbGx5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGlzVG9vQmlnSG9yaXpvbnRhbGx5ID8gMCA6IHByb3Bvc2VkU2Nyb2xsLngsXG4gICAgeTogaXNUb29CaWdWZXJ0aWNhbGx5ID8gMCA6IHByb3Bvc2VkU2Nyb2xsLnlcbiAgfTtcbn0pO1xuXG52YXIgY2xlYW4kMyA9IGFwcGx5KGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG59KTtcbnZhciBnZXRTY3JvbGwgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBjb250YWluZXIgPSBfcmVmLmNvbnRhaW5lcixcbiAgICAgIHN1YmplY3QgPSBfcmVmLnN1YmplY3QsXG4gICAgICBjZW50ZXIgPSBfcmVmLmNlbnRlcixcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmc7XG4gIHZhciBkaXN0YW5jZVRvRWRnZXMgPSB7XG4gICAgdG9wOiBjZW50ZXIueSAtIGNvbnRhaW5lci50b3AsXG4gICAgcmlnaHQ6IGNvbnRhaW5lci5yaWdodCAtIGNlbnRlci54LFxuICAgIGJvdHRvbTogY29udGFpbmVyLmJvdHRvbSAtIGNlbnRlci55LFxuICAgIGxlZnQ6IGNlbnRlci54IC0gY29udGFpbmVyLmxlZnRcbiAgfTtcbiAgdmFyIHkgPSBnZXRTY3JvbGxPbkF4aXMoe1xuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGRpc3RhbmNlVG9FZGdlczogZGlzdGFuY2VUb0VkZ2VzLFxuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgYXhpczogdmVydGljYWwsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcbiAgdmFyIHggPSBnZXRTY3JvbGxPbkF4aXMoe1xuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGRpc3RhbmNlVG9FZGdlczogZGlzdGFuY2VUb0VkZ2VzLFxuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgYXhpczogaG9yaXpvbnRhbCxcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuICB2YXIgcmVxdWlyZWQgPSBjbGVhbiQzKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSk7XG5cbiAgaWYgKGlzRXF1YWwocmVxdWlyZWQsIG9yaWdpbikpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBsaW1pdGVkID0gYWRqdXN0Rm9yU2l6ZUxpbWl0cyh7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBwcm9wb3NlZFNjcm9sbDogcmVxdWlyZWRcbiAgfSk7XG5cbiAgaWYgKCFsaW1pdGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaXNFcXVhbChsaW1pdGVkLCBvcmlnaW4pID8gbnVsbCA6IGxpbWl0ZWQ7XG59KTtcblxudmFyIHNtYWxsZXN0U2lnbmVkID0gYXBwbHkoZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlID4gMCA/IDEgOiAtMTtcbn0pO1xudmFyIGdldE92ZXJsYXAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBnZXRSZW1haW5kZXIgPSBmdW5jdGlvbiBnZXRSZW1haW5kZXIodGFyZ2V0LCBtYXgpIHtcbiAgICBpZiAodGFyZ2V0IDwgMCkge1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0ID4gbWF4KSB7XG4gICAgICByZXR1cm4gdGFyZ2V0IC0gbWF4O1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBjdXJyZW50ID0gX3JlZi5jdXJyZW50LFxuICAgICAgICBtYXggPSBfcmVmLm1heCxcbiAgICAgICAgY2hhbmdlID0gX3JlZi5jaGFuZ2U7XG4gICAgdmFyIHRhcmdldFNjcm9sbCA9IGFkZChjdXJyZW50LCBjaGFuZ2UpO1xuICAgIHZhciBvdmVybGFwID0ge1xuICAgICAgeDogZ2V0UmVtYWluZGVyKHRhcmdldFNjcm9sbC54LCBtYXgueCksXG4gICAgICB5OiBnZXRSZW1haW5kZXIodGFyZ2V0U2Nyb2xsLnksIG1heC55KVxuICAgIH07XG5cbiAgICBpZiAoaXNFcXVhbChvdmVybGFwLCBvcmlnaW4pKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3ZlcmxhcDtcbiAgfTtcbn0oKTtcbnZhciBjYW5QYXJ0aWFsbHlTY3JvbGwgPSBmdW5jdGlvbiBjYW5QYXJ0aWFsbHlTY3JvbGwoX3JlZjIpIHtcbiAgdmFyIHJhd01heCA9IF9yZWYyLm1heCxcbiAgICAgIGN1cnJlbnQgPSBfcmVmMi5jdXJyZW50LFxuICAgICAgY2hhbmdlID0gX3JlZjIuY2hhbmdlO1xuICB2YXIgbWF4ID0ge1xuICAgIHg6IE1hdGgubWF4KGN1cnJlbnQueCwgcmF3TWF4LngpLFxuICAgIHk6IE1hdGgubWF4KGN1cnJlbnQueSwgcmF3TWF4LnkpXG4gIH07XG4gIHZhciBzbWFsbGVzdENoYW5nZSA9IHNtYWxsZXN0U2lnbmVkKGNoYW5nZSk7XG4gIHZhciBvdmVybGFwID0gZ2V0T3ZlcmxhcCh7XG4gICAgbWF4OiBtYXgsXG4gICAgY3VycmVudDogY3VycmVudCxcbiAgICBjaGFuZ2U6IHNtYWxsZXN0Q2hhbmdlXG4gIH0pO1xuXG4gIGlmICghb3ZlcmxhcCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNtYWxsZXN0Q2hhbmdlLnggIT09IDAgJiYgb3ZlcmxhcC54ID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc21hbGxlc3RDaGFuZ2UueSAhPT0gMCAmJiBvdmVybGFwLnkgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgY2FuU2Nyb2xsV2luZG93ID0gZnVuY3Rpb24gY2FuU2Nyb2xsV2luZG93KHZpZXdwb3J0LCBjaGFuZ2UpIHtcbiAgcmV0dXJuIGNhblBhcnRpYWxseVNjcm9sbCh7XG4gICAgY3VycmVudDogdmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQsXG4gICAgbWF4OiB2aWV3cG9ydC5zY3JvbGwubWF4LFxuICAgIGNoYW5nZTogY2hhbmdlXG4gIH0pO1xufTtcbnZhciBnZXRXaW5kb3dPdmVybGFwID0gZnVuY3Rpb24gZ2V0V2luZG93T3ZlcmxhcCh2aWV3cG9ydCwgY2hhbmdlKSB7XG4gIGlmICghY2FuU2Nyb2xsV2luZG93KHZpZXdwb3J0LCBjaGFuZ2UpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbWF4ID0gdmlld3BvcnQuc2Nyb2xsLm1heDtcbiAgdmFyIGN1cnJlbnQgPSB2aWV3cG9ydC5zY3JvbGwuY3VycmVudDtcbiAgcmV0dXJuIGdldE92ZXJsYXAoe1xuICAgIGN1cnJlbnQ6IGN1cnJlbnQsXG4gICAgbWF4OiBtYXgsXG4gICAgY2hhbmdlOiBjaGFuZ2VcbiAgfSk7XG59O1xudmFyIGNhblNjcm9sbERyb3BwYWJsZSA9IGZ1bmN0aW9uIGNhblNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUsIGNoYW5nZSkge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYW5QYXJ0aWFsbHlTY3JvbGwoe1xuICAgIGN1cnJlbnQ6IGZyYW1lLnNjcm9sbC5jdXJyZW50LFxuICAgIG1heDogZnJhbWUuc2Nyb2xsLm1heCxcbiAgICBjaGFuZ2U6IGNoYW5nZVxuICB9KTtcbn07XG52YXIgZ2V0RHJvcHBhYmxlT3ZlcmxhcCA9IGZ1bmN0aW9uIGdldERyb3BwYWJsZU92ZXJsYXAoZHJvcHBhYmxlLCBjaGFuZ2UpIHtcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuXG4gIGlmICghZnJhbWUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghY2FuU2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZSwgY2hhbmdlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGdldE92ZXJsYXAoe1xuICAgIGN1cnJlbnQ6IGZyYW1lLnNjcm9sbC5jdXJyZW50LFxuICAgIG1heDogZnJhbWUuc2Nyb2xsLm1heCxcbiAgICBjaGFuZ2U6IGNoYW5nZVxuICB9KTtcbn07XG5cbnZhciBnZXRXaW5kb3dTY3JvbGxDaGFuZ2UgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIHN1YmplY3QgPSBfcmVmLnN1YmplY3QsXG4gICAgICBjZW50ZXIgPSBfcmVmLmNlbnRlcixcbiAgICAgIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX3JlZi5zaG91bGRVc2VUaW1lRGFtcGVuaW5nO1xuICB2YXIgc2Nyb2xsID0gZ2V0U2Nyb2xsKHtcbiAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgIGNvbnRhaW5lcjogdmlld3BvcnQuZnJhbWUsXG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBjZW50ZXI6IGNlbnRlcixcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuICByZXR1cm4gc2Nyb2xsICYmIGNhblNjcm9sbFdpbmRvdyh2aWV3cG9ydCwgc2Nyb2xsKSA/IHNjcm9sbCA6IG51bGw7XG59KTtcblxudmFyIGdldERyb3BwYWJsZVNjcm9sbENoYW5nZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJvcHBhYmxlID0gX3JlZi5kcm9wcGFibGUsXG4gICAgICBzdWJqZWN0ID0gX3JlZi5zdWJqZWN0LFxuICAgICAgY2VudGVyID0gX3JlZi5jZW50ZXIsXG4gICAgICBkcmFnU3RhcnRUaW1lID0gX3JlZi5kcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZztcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuXG4gIGlmICghZnJhbWUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzY3JvbGwgPSBnZXRTY3JvbGwoe1xuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgY29udGFpbmVyOiBmcmFtZS5wYWdlTWFyZ2luQm94LFxuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgY2VudGVyOiBjZW50ZXIsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcbiAgcmV0dXJuIHNjcm9sbCAmJiBjYW5TY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLCBzY3JvbGwpID8gc2Nyb2xsIDogbnVsbDtcbn0pO1xuXG52YXIgc2Nyb2xsJDEgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX3JlZi5zaG91bGRVc2VUaW1lRGFtcGVuaW5nLFxuICAgICAgc2Nyb2xsV2luZG93ID0gX3JlZi5zY3JvbGxXaW5kb3csXG4gICAgICBzY3JvbGxEcm9wcGFibGUgPSBfcmVmLnNjcm9sbERyb3BwYWJsZTtcbiAgdmFyIGNlbnRlciA9IHN0YXRlLmN1cnJlbnQucGFnZS5ib3JkZXJCb3hDZW50ZXI7XG4gIHZhciBkcmFnZ2FibGUgPSBzdGF0ZS5kaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgdmFyIHN1YmplY3QgPSBkcmFnZ2FibGUucGFnZS5tYXJnaW5Cb3g7XG5cbiAgaWYgKHN0YXRlLmlzV2luZG93U2Nyb2xsQWxsb3dlZCkge1xuICAgIHZhciB2aWV3cG9ydCA9IHN0YXRlLnZpZXdwb3J0O1xuXG4gICAgdmFyIF9jaGFuZ2UgPSBnZXRXaW5kb3dTY3JvbGxDaGFuZ2Uoe1xuICAgICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICBjZW50ZXI6IGNlbnRlcixcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgICB9KTtcblxuICAgIGlmIChfY2hhbmdlKSB7XG4gICAgICBzY3JvbGxXaW5kb3coX2NoYW5nZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdmFyIGRyb3BwYWJsZSA9IGdldEJlc3RTY3JvbGxhYmxlRHJvcHBhYmxlKHtcbiAgICBjZW50ZXI6IGNlbnRlcixcbiAgICBkZXN0aW5hdGlvbjogd2hhdElzRHJhZ2dlZE92ZXIoc3RhdGUuaW1wYWN0KSxcbiAgICBkcm9wcGFibGVzOiBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNcbiAgfSk7XG5cbiAgaWYgKCFkcm9wcGFibGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2hhbmdlID0gZ2V0RHJvcHBhYmxlU2Nyb2xsQ2hhbmdlKHtcbiAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgIGRyb3BwYWJsZTogZHJvcHBhYmxlLFxuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgY2VudGVyOiBjZW50ZXIsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcblxuICBpZiAoY2hhbmdlKSB7XG4gICAgc2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCBjaGFuZ2UpO1xuICB9XG59KTtcblxudmFyIGNyZWF0ZUZsdWlkU2Nyb2xsZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHNjcm9sbFdpbmRvdyA9IF9yZWYuc2Nyb2xsV2luZG93LFxuICAgICAgc2Nyb2xsRHJvcHBhYmxlID0gX3JlZi5zY3JvbGxEcm9wcGFibGU7XG4gIHZhciBzY2hlZHVsZVdpbmRvd1Njcm9sbCA9IHJhZlNjaGQoc2Nyb2xsV2luZG93KTtcbiAgdmFyIHNjaGVkdWxlRHJvcHBhYmxlU2Nyb2xsID0gcmFmU2NoZChzY3JvbGxEcm9wcGFibGUpO1xuICB2YXIgZHJhZ2dpbmcgPSBudWxsO1xuXG4gIHZhciB0cnlTY3JvbGwgPSBmdW5jdGlvbiB0cnlTY3JvbGwoc3RhdGUpIHtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmx1aWQgc2Nyb2xsIGlmIG5vdCBkcmFnZ2luZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2RyYWdnaW5nID0gZHJhZ2dpbmcsXG4gICAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfZHJhZ2dpbmcuc2hvdWxkVXNlVGltZURhbXBlbmluZyxcbiAgICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9kcmFnZ2luZy5kcmFnU3RhcnRUaW1lO1xuICAgIHNjcm9sbCQxKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNjcm9sbFdpbmRvdzogc2NoZWR1bGVXaW5kb3dTY3JvbGwsXG4gICAgICBzY3JvbGxEcm9wcGFibGU6IHNjaGVkdWxlRHJvcHBhYmxlU2Nyb2xsLFxuICAgICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgY2FuY2VsUGVuZGluZyA9IGZ1bmN0aW9uIGNhbmNlbFBlbmRpbmcoKSB7XG4gICAgIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGNhbmNlbCBwZW5kaW5nIGZsdWlkIHNjcm9sbCB3aGVuIG5vdCBzdGFydGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHNjaGVkdWxlV2luZG93U2Nyb2xsLmNhbmNlbCgpO1xuICAgIHNjaGVkdWxlRHJvcHBhYmxlU2Nyb2xsLmNhbmNlbCgpO1xuICB9O1xuXG4gIHZhciBzdGFydCQkMSA9IGZ1bmN0aW9uIHN0YXJ0JCQxKHN0YXRlKSB7XG4gICAgc3RhcnQoJ3N0YXJ0aW5nIGZsdWlkIHNjcm9sbGVyJyk7XG4gICAgISFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdGFydCBhdXRvIHNjcm9sbGluZyB3aGVuIGFscmVhZHkgc3RhcnRlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBkcmFnU3RhcnRUaW1lID0gX0RhdGUkbm93KCk7XG5cbiAgICB2YXIgd2FzU2Nyb2xsTmVlZGVkID0gZmFsc2U7XG5cbiAgICB2YXIgZmFrZVNjcm9sbENhbGxiYWNrID0gZnVuY3Rpb24gZmFrZVNjcm9sbENhbGxiYWNrKCkge1xuICAgICAgd2FzU2Nyb2xsTmVlZGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgc2Nyb2xsJDEoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgZHJhZ1N0YXJ0VGltZTogMCxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IGZhbHNlLFxuICAgICAgc2Nyb2xsV2luZG93OiBmYWtlU2Nyb2xsQ2FsbGJhY2ssXG4gICAgICBzY3JvbGxEcm9wcGFibGU6IGZha2VTY3JvbGxDYWxsYmFja1xuICAgIH0pO1xuICAgIGRyYWdnaW5nID0ge1xuICAgICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHdhc1Njcm9sbE5lZWRlZFxuICAgIH07XG4gICAgZmluaXNoKCdzdGFydGluZyBmbHVpZCBzY3JvbGxlcicpO1xuXG4gICAgaWYgKHdhc1Njcm9sbE5lZWRlZCkge1xuICAgICAgdHJ5U2Nyb2xsKHN0YXRlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0b3AgPSBmdW5jdGlvbiBzdG9wKCkge1xuICAgIGlmICghZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYW5jZWxQZW5kaW5nKCk7XG4gICAgZHJhZ2dpbmcgPSBudWxsO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0JCQxLFxuICAgIHN0b3A6IHN0b3AsXG4gICAgY2FuY2VsUGVuZGluZzogY2FuY2VsUGVuZGluZyxcbiAgICBzY3JvbGw6IHRyeVNjcm9sbFxuICB9O1xufSk7XG5cbnZhciBjcmVhdGVKdW1wU2Nyb2xsZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIG1vdmUgPSBfcmVmLm1vdmUsXG4gICAgICBzY3JvbGxEcm9wcGFibGUgPSBfcmVmLnNjcm9sbERyb3BwYWJsZSxcbiAgICAgIHNjcm9sbFdpbmRvdyA9IF9yZWYuc2Nyb2xsV2luZG93O1xuXG4gIHZhciBtb3ZlQnlPZmZzZXQgPSBmdW5jdGlvbiBtb3ZlQnlPZmZzZXQoc3RhdGUsIG9mZnNldCQkMSkge1xuICAgIHZhciBjbGllbnQgPSBhZGQoc3RhdGUuY3VycmVudC5jbGllbnQuc2VsZWN0aW9uLCBvZmZzZXQkJDEpO1xuICAgIG1vdmUoe1xuICAgICAgY2xpZW50OiBjbGllbnRcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgc2Nyb2xsRHJvcHBhYmxlQXNNdWNoQXNJdENhbiA9IGZ1bmN0aW9uIHNjcm9sbERyb3BwYWJsZUFzTXVjaEFzSXRDYW4oZHJvcHBhYmxlLCBjaGFuZ2UpIHtcbiAgICBpZiAoIWNhblNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUsIGNoYW5nZSkpIHtcbiAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuXG4gICAgdmFyIG92ZXJsYXAgPSBnZXREcm9wcGFibGVPdmVybGFwKGRyb3BwYWJsZSwgY2hhbmdlKTtcblxuICAgIGlmICghb3ZlcmxhcCkge1xuICAgICAgc2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCBjaGFuZ2UpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHdoYXRUaGVEcm9wcGFibGVDYW5TY3JvbGwgPSBzdWJ0cmFjdChjaGFuZ2UsIG92ZXJsYXApO1xuICAgIHNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUuZGVzY3JpcHRvci5pZCwgd2hhdFRoZURyb3BwYWJsZUNhblNjcm9sbCk7XG4gICAgdmFyIHJlbWFpbmRlciA9IHN1YnRyYWN0KGNoYW5nZSwgd2hhdFRoZURyb3BwYWJsZUNhblNjcm9sbCk7XG4gICAgcmV0dXJuIHJlbWFpbmRlcjtcbiAgfTtcblxuICB2YXIgc2Nyb2xsV2luZG93QXNNdWNoQXNJdENhbiA9IGZ1bmN0aW9uIHNjcm9sbFdpbmRvd0FzTXVjaEFzSXRDYW4oaXNXaW5kb3dTY3JvbGxBbGxvd2VkLCB2aWV3cG9ydCwgY2hhbmdlKSB7XG4gICAgaWYgKCFpc1dpbmRvd1Njcm9sbEFsbG93ZWQpIHtcbiAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuXG4gICAgaWYgKCFjYW5TY3JvbGxXaW5kb3codmlld3BvcnQsIGNoYW5nZSkpIHtcbiAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuXG4gICAgdmFyIG92ZXJsYXAgPSBnZXRXaW5kb3dPdmVybGFwKHZpZXdwb3J0LCBjaGFuZ2UpO1xuXG4gICAgaWYgKCFvdmVybGFwKSB7XG4gICAgICBzY3JvbGxXaW5kb3coY2hhbmdlKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aGF0VGhlV2luZG93Q2FuU2Nyb2xsID0gc3VidHJhY3QoY2hhbmdlLCBvdmVybGFwKTtcbiAgICBzY3JvbGxXaW5kb3cod2hhdFRoZVdpbmRvd0NhblNjcm9sbCk7XG4gICAgdmFyIHJlbWFpbmRlciA9IHN1YnRyYWN0KGNoYW5nZSwgd2hhdFRoZVdpbmRvd0NhblNjcm9sbCk7XG4gICAgcmV0dXJuIHJlbWFpbmRlcjtcbiAgfTtcblxuICB2YXIganVtcFNjcm9sbGVyID0gZnVuY3Rpb24ganVtcFNjcm9sbGVyKHN0YXRlKSB7XG4gICAgdmFyIHJlcXVlc3QgPSBzdGF0ZS5zY3JvbGxKdW1wUmVxdWVzdDtcblxuICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZXN0aW5hdGlvbiA9IHdoYXRJc0RyYWdnZWRPdmVyKHN0YXRlLmltcGFjdCk7XG4gICAgIWRlc3RpbmF0aW9uID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHBlcmZvcm0gYSBqdW1wIHNjcm9sbCB3aGVuIHRoZXJlIGlzIG5vIGRlc3RpbmF0aW9uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBkcm9wcGFibGVSZW1haW5kZXIgPSBzY3JvbGxEcm9wcGFibGVBc011Y2hBc0l0Q2FuKHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tkZXN0aW5hdGlvbl0sIHJlcXVlc3QpO1xuXG4gICAgaWYgKCFkcm9wcGFibGVSZW1haW5kZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmlld3BvcnQgPSBzdGF0ZS52aWV3cG9ydDtcbiAgICB2YXIgd2luZG93UmVtYWluZGVyID0gc2Nyb2xsV2luZG93QXNNdWNoQXNJdENhbihzdGF0ZS5pc1dpbmRvd1Njcm9sbEFsbG93ZWQsIHZpZXdwb3J0LCBkcm9wcGFibGVSZW1haW5kZXIpO1xuXG4gICAgaWYgKCF3aW5kb3dSZW1haW5kZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtb3ZlQnlPZmZzZXQoc3RhdGUsIHdpbmRvd1JlbWFpbmRlcik7XG4gIH07XG5cbiAgcmV0dXJuIGp1bXBTY3JvbGxlcjtcbn0pO1xuXG52YXIgY3JlYXRlQXV0b1Njcm9sbGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzY3JvbGxEcm9wcGFibGUgPSBfcmVmLnNjcm9sbERyb3BwYWJsZSxcbiAgICAgIHNjcm9sbFdpbmRvdyA9IF9yZWYuc2Nyb2xsV2luZG93LFxuICAgICAgbW92ZSA9IF9yZWYubW92ZTtcbiAgdmFyIGZsdWlkU2Nyb2xsZXIgPSBjcmVhdGVGbHVpZFNjcm9sbGVyKHtcbiAgICBzY3JvbGxXaW5kb3c6IHNjcm9sbFdpbmRvdyxcbiAgICBzY3JvbGxEcm9wcGFibGU6IHNjcm9sbERyb3BwYWJsZVxuICB9KTtcbiAgdmFyIGp1bXBTY3JvbGwgPSBjcmVhdGVKdW1wU2Nyb2xsZXIoe1xuICAgIG1vdmU6IG1vdmUsXG4gICAgc2Nyb2xsV2luZG93OiBzY3JvbGxXaW5kb3csXG4gICAgc2Nyb2xsRHJvcHBhYmxlOiBzY3JvbGxEcm9wcGFibGVcbiAgfSk7XG5cbiAgdmFyIHNjcm9sbCA9IGZ1bmN0aW9uIHNjcm9sbChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5waGFzZSAhPT0gJ0RSQUdHSU5HJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5tb3ZlbWVudE1vZGUgPT09ICdGTFVJRCcpIHtcbiAgICAgIGZsdWlkU2Nyb2xsZXIuc2Nyb2xsKHN0YXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXN0YXRlLnNjcm9sbEp1bXBSZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAganVtcFNjcm9sbChzdGF0ZSk7XG4gIH07XG5cbiAgdmFyIHNjcm9sbGVyID0ge1xuICAgIHNjcm9sbDogc2Nyb2xsLFxuICAgIGNhbmNlbFBlbmRpbmc6IGZsdWlkU2Nyb2xsZXIuY2FuY2VsUGVuZGluZyxcbiAgICBzdGFydDogZmx1aWRTY3JvbGxlci5zdGFydCxcbiAgICBzdG9wOiBmbHVpZFNjcm9sbGVyLnN0b3BcbiAgfTtcbiAgcmV0dXJuIHNjcm9sbGVyO1xufSk7XG5cbnZhciBwcmVmaXgkMSA9IGZ1bmN0aW9uIHByZWZpeChrZXkpIHtcbiAgcmV0dXJuIFwicHJpdmF0ZS1yZWFjdC1iZWF1dGlmdWwtZG5kLWtleS1kby1ub3QtdXNlLVwiICsga2V5O1xufTtcblxudmFyIHN0b3JlS2V5ID0gcHJlZml4JDEoJ3N0b3JlJyk7XG52YXIgZHJvcHBhYmxlSWRLZXkgPSBwcmVmaXgkMSgnZHJvcHBhYmxlLWlkJyk7XG52YXIgZHJvcHBhYmxlVHlwZUtleSA9IHByZWZpeCQxKCdkcm9wcGFibGUtdHlwZScpO1xudmFyIGRpbWVuc2lvbk1hcnNoYWxLZXkgPSBwcmVmaXgkMSgnZGltZW5zaW9uLW1hcnNoYWwnKTtcbnZhciBzdHlsZUNvbnRleHRLZXkgPSBwcmVmaXgkMSgnc3R5bGUtY29udGV4dCcpO1xudmFyIGNhbkxpZnRDb250ZXh0S2V5ID0gcHJlZml4JDEoJ2Nhbi1saWZ0Jyk7XG5cbnZhciBwZWVyRGVwZW5kZW5jaWVzID0ge1xuXHRyZWFjdDogXCJeMTYuMy4xXCJcbn07XG5cbnZhciBzZW12ZXIgPSAvKFxcZCspXFwuKFxcZCspXFwuKFxcZCspLztcblxudmFyIGdldFZlcnNpb24gPSBmdW5jdGlvbiBnZXRWZXJzaW9uKHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBzZW12ZXIuZXhlYyh2YWx1ZSk7XG4gICEocmVzdWx0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIlVuYWJsZSB0byBwYXJzZSBSZWFjdCB2ZXJzaW9uIFwiICsgdmFsdWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG1ham9yID0gTnVtYmVyKHJlc3VsdFsxXSk7XG4gIHZhciBtaW5vciA9IE51bWJlcihyZXN1bHRbMl0pO1xuICB2YXIgcGF0Y2ggPSBOdW1iZXIocmVzdWx0WzNdKTtcbiAgcmV0dXJuIHtcbiAgICBtYWpvcjogbWFqb3IsXG4gICAgbWlub3I6IG1pbm9yLFxuICAgIHBhdGNoOiBwYXRjaCxcbiAgICByYXc6IHZhbHVlXG4gIH07XG59O1xuXG52YXIgaXNTYXRpc2ZpZWQgPSBmdW5jdGlvbiBpc1NhdGlzZmllZChleHBlY3RlZCwgYWN0dWFsKSB7XG4gIGlmIChhY3R1YWwubWFqb3IgPiBleHBlY3RlZC5tYWpvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGFjdHVhbC5tYWpvciA8IGV4cGVjdGVkLm1ham9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGFjdHVhbC5taW5vciA+IGV4cGVjdGVkLm1pbm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoYWN0dWFsLm1pbm9yIDwgZXhwZWN0ZWQubWlub3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gYWN0dWFsLnBhdGNoID49IGV4cGVjdGVkLnBhdGNoO1xufTtcblxudmFyIGNoZWNrUmVhY3RWZXJzaW9uID0gKGZ1bmN0aW9uIChwZWVyRGVwVmFsdWUsIGFjdHVhbFZhbHVlKSB7XG4gIHZhciBwZWVyRGVwID0gZ2V0VmVyc2lvbihwZWVyRGVwVmFsdWUpO1xuICB2YXIgYWN0dWFsID0gZ2V0VmVyc2lvbihhY3R1YWxWYWx1ZSk7XG5cbiAgaWYgKGlzU2F0aXNmaWVkKHBlZXJEZXAsIGFjdHVhbCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgIFJlYWN0IHZlcnNpb246IFtcIiArIGFjdHVhbC5yYXcgKyBcIl1cXG4gICAgZG9lcyBub3Qgc2F0aXNmeSBleHBlY3RlZCBwZWVyIGRlcGVuZGVuY3kgdmVyc2lvbjogW1wiICsgcGVlckRlcC5yYXcgKyBcIl1cXG5cXG4gICAgVGhpcyBjYW4gcmVzdWx0IGluIHJ1biB0aW1lIGJ1Z3MsIGFuZCBldmVuIGZhdGFsIGNyYXNoZXNcXG4gIFwiKSA6IHZvaWQgMDtcbn0pO1xuXG52YXIgX0RyYWdEcm9wQ29udGV4dCRjaGlsO1xudmFyIHJlc2V0U2VydmVyQ29udGV4dCA9IGZ1bmN0aW9uIHJlc2V0U2VydmVyQ29udGV4dCgpIHtcbiAgcmVzZXRTdHlsZUNvbnRleHQoKTtcbn07XG5cbnZhciBwcmludEZhdGFsRGV2RXJyb3IgPSBmdW5jdGlvbiBwcmludEZhdGFsRGV2RXJyb3IoZXJyb3IpIHtcbiAgdmFyIF9jb25zb2xlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgKF9jb25zb2xlID0gY29uc29sZSkuZXJyb3IuYXBwbHkoX2NvbnNvbGUsIGdldEZvcm1hdHRlZE1lc3NhZ2UoXCJcXG4gICAgICBBbiBlcnJvciBoYXMgb2NjdXJyZWQgd2hpbGUgYSBkcmFnIGlzIG9jY3VycmluZy5cXG4gICAgICBBbnkgZXhpc3RpbmcgZHJhZyB3aWxsIGJlIGNhbmNlbGxlZC5cXG5cXG4gICAgICA+IFwiICsgZXJyb3IubWVzc2FnZSArIFwiXFxuICAgICAgXCIpKTtcblxuICBjb25zb2xlLmVycm9yKCdyYXcnLCBlcnJvcik7XG59O1xuXG52YXIgRHJhZ0Ryb3BDb250ZXh0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRHJhZ0Ryb3BDb250ZXh0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFnRHJvcENvbnRleHQocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5zdG9yZSA9IHZvaWQgMDtcbiAgICBfdGhpcy5kaW1lbnNpb25NYXJzaGFsID0gdm9pZCAwO1xuICAgIF90aGlzLnN0eWxlTWFyc2hhbCA9IHZvaWQgMDtcbiAgICBfdGhpcy5hdXRvU2Nyb2xsZXIgPSB2b2lkIDA7XG4gICAgX3RoaXMuYW5ub3VuY2VyID0gdm9pZCAwO1xuICAgIF90aGlzLnVuc3Vic2NyaWJlID0gdm9pZCAwO1xuXG4gICAgX3RoaXMuY2FuTGlmdCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcmV0dXJuIGNhblN0YXJ0RHJhZyhfdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLCBpZCk7XG4gICAgfTtcblxuICAgIF90aGlzLm9uRmF0YWxFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcHJpbnRGYXRhbERldkVycm9yKGVycm9yKTtcblxuICAgICAgdmFyIHN0YXRlID0gX3RoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgaWYgKHN0YXRlLnBoYXNlICE9PSAnSURMRScpIHtcbiAgICAgICAgX3RoaXMuc3RvcmUuZGlzcGF0Y2goY2xlYW4oKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uV2luZG93RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBfdGhpcy5vbkZhdGFsRXJyb3IoZXJyb3IpO1xuICAgIH07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgISh0eXBlb2YgcHJvcHMub25EcmFnRW5kID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0EgRHJhZ0Ryb3BDb250ZXh0IHJlcXVpcmVzIGFuIG9uRHJhZ0VuZCBmdW5jdGlvbiB0byBwZXJmb3JtIHJlb3JkZXJpbmcgbG9naWMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgX3RoaXMuYW5ub3VuY2VyID0gY3JlYXRlQW5ub3VuY2VyKCk7XG4gICAgX3RoaXMuc3R5bGVNYXJzaGFsID0gY3JlYXRlU3R5bGVNYXJzaGFsKCk7XG4gICAgX3RoaXMuc3RvcmUgPSBjcmVhdGVTdG9yZSQxKHtcbiAgICAgIGdldERpbWVuc2lvbk1hcnNoYWw6IGZ1bmN0aW9uIGdldERpbWVuc2lvbk1hcnNoYWwoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5kaW1lbnNpb25NYXJzaGFsO1xuICAgICAgfSxcbiAgICAgIHN0eWxlTWFyc2hhbDogX3RoaXMuc3R5bGVNYXJzaGFsLFxuICAgICAgZ2V0UmVzcG9uZGVyczogZnVuY3Rpb24gZ2V0UmVzcG9uZGVycygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvbkJlZm9yZURyYWdTdGFydDogX3RoaXMucHJvcHMub25CZWZvcmVEcmFnU3RhcnQsXG4gICAgICAgICAgb25EcmFnU3RhcnQ6IF90aGlzLnByb3BzLm9uRHJhZ1N0YXJ0LFxuICAgICAgICAgIG9uRHJhZ0VuZDogX3RoaXMucHJvcHMub25EcmFnRW5kLFxuICAgICAgICAgIG9uRHJhZ1VwZGF0ZTogX3RoaXMucHJvcHMub25EcmFnVXBkYXRlXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgYW5ub3VuY2U6IF90aGlzLmFubm91bmNlci5hbm5vdW5jZSxcbiAgICAgIGdldFNjcm9sbGVyOiBmdW5jdGlvbiBnZXRTY3JvbGxlcigpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmF1dG9TY3JvbGxlcjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgY2FsbGJhY2tzID0gYmluZEFjdGlvbkNyZWF0b3JzKHtcbiAgICAgIHB1Ymxpc2hXaGlsZURyYWdnaW5nOiBwdWJsaXNoV2hpbGVEcmFnZ2luZyQxLFxuICAgICAgdXBkYXRlRHJvcHBhYmxlU2Nyb2xsOiB1cGRhdGVEcm9wcGFibGVTY3JvbGwsXG4gICAgICB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZCxcbiAgICAgIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBjb2xsZWN0aW9uU3RhcnRpbmc6IGNvbGxlY3Rpb25TdGFydGluZ1xuICAgIH0sIF90aGlzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICBfdGhpcy5kaW1lbnNpb25NYXJzaGFsID0gY3JlYXRlRGltZW5zaW9uTWFyc2hhbChjYWxsYmFja3MpO1xuICAgIF90aGlzLmF1dG9TY3JvbGxlciA9IGNyZWF0ZUF1dG9TY3JvbGxlcihfZXh0ZW5kcyh7XG4gICAgICBzY3JvbGxXaW5kb3c6IHNjcm9sbFdpbmRvdyxcbiAgICAgIHNjcm9sbERyb3BwYWJsZTogX3RoaXMuZGltZW5zaW9uTWFyc2hhbC5zY3JvbGxEcm9wcGFibGVcbiAgICB9LCBiaW5kQWN0aW9uQ3JlYXRvcnMoe1xuICAgICAgbW92ZTogbW92ZVxuICAgIH0sIF90aGlzLnN0b3JlLmRpc3BhdGNoKSkpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEcmFnRHJvcENvbnRleHQucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW3N0b3JlS2V5XSA9IHRoaXMuc3RvcmUsIF9yZWZbZGltZW5zaW9uTWFyc2hhbEtleV0gPSB0aGlzLmRpbWVuc2lvbk1hcnNoYWwsIF9yZWZbc3R5bGVDb250ZXh0S2V5XSA9IHRoaXMuc3R5bGVNYXJzaGFsLnN0eWxlQ29udGV4dCwgX3JlZltjYW5MaWZ0Q29udGV4dEtleV0gPSB0aGlzLmNhbkxpZnQsIF9yZWY7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5vbldpbmRvd0Vycm9yKTtcbiAgICB0aGlzLnN0eWxlTWFyc2hhbC5tb3VudCgpO1xuICAgIHRoaXMuYW5ub3VuY2VyLm1vdW50KCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tSZWFjdFZlcnNpb24ocGVlckRlcGVuZGVuY2llcy5yZWFjdCwgUmVhY3QudmVyc2lvbik7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRDYXRjaCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZENhdGNoKGVycm9yKSB7XG4gICAgdGhpcy5vbkZhdGFsRXJyb3IoZXJyb3IpO1xuXG4gICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5kZXhPZignSW52YXJpYW50IGZhaWxlZCcpICE9PSAtMSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7fSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyb3I7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5vbldpbmRvd0Vycm9yKTtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgIT09ICdJRExFJykge1xuICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChjbGVhbigpKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0eWxlTWFyc2hhbC51bm1vdW50KCk7XG4gICAgdGhpcy5hbm5vdW5jZXIudW5tb3VudCgpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH07XG5cbiAgcmV0dXJuIERyYWdEcm9wQ29udGV4dDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRHJhZ0Ryb3BDb250ZXh0LmNoaWxkQ29udGV4dFR5cGVzID0gKF9EcmFnRHJvcENvbnRleHQkY2hpbCA9IHt9LCBfRHJhZ0Ryb3BDb250ZXh0JGNoaWxbc3RvcmVLZXldID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pLmlzUmVxdWlyZWQsIF9EcmFnRHJvcENvbnRleHQkY2hpbFtkaW1lbnNpb25NYXJzaGFsS2V5XSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX0RyYWdEcm9wQ29udGV4dCRjaGlsW3N0eWxlQ29udGV4dEtleV0gPSBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsIF9EcmFnRHJvcENvbnRleHQkY2hpbFtjYW5MaWZ0Q29udGV4dEtleV0gPSBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBfRHJhZ0Ryb3BDb250ZXh0JGNoaWwpO1xuXG52YXIgaXNFcXVhbCQyID0gZnVuY3Rpb24gaXNFcXVhbChiYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYmFzZSA9PT0gdmFsdWU7XG4gIH07XG59O1xuXG52YXIgaXNTY3JvbGwgPSBpc0VxdWFsJDIoJ3Njcm9sbCcpO1xudmFyIGlzQXV0byA9IGlzRXF1YWwkMignYXV0bycpO1xudmFyIGlzVmlzaWJsZSQxID0gaXNFcXVhbCQyKCd2aXNpYmxlJyk7XG5cbnZhciBpc0VpdGhlciA9IGZ1bmN0aW9uIGlzRWl0aGVyKG92ZXJmbG93LCBmbikge1xuICByZXR1cm4gZm4ob3ZlcmZsb3cub3ZlcmZsb3dYKSB8fCBmbihvdmVyZmxvdy5vdmVyZmxvd1kpO1xufTtcblxudmFyIGlzQm90aCA9IGZ1bmN0aW9uIGlzQm90aChvdmVyZmxvdywgZm4pIHtcbiAgcmV0dXJuIGZuKG92ZXJmbG93Lm92ZXJmbG93WCkgJiYgZm4ob3ZlcmZsb3cub3ZlcmZsb3dZKTtcbn07XG5cbnZhciBpc0VsZW1lbnRTY3JvbGxhYmxlID0gZnVuY3Rpb24gaXNFbGVtZW50U2Nyb2xsYWJsZShlbCkge1xuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHZhciBvdmVyZmxvdyA9IHtcbiAgICBvdmVyZmxvd1g6IHN0eWxlLm92ZXJmbG93WCxcbiAgICBvdmVyZmxvd1k6IHN0eWxlLm92ZXJmbG93WVxuICB9O1xuICByZXR1cm4gaXNFaXRoZXIob3ZlcmZsb3csIGlzU2Nyb2xsKSB8fCBpc0VpdGhlcihvdmVyZmxvdywgaXNBdXRvKTtcbn07XG5cbnZhciBpc0JvZHlTY3JvbGxhYmxlID0gZnVuY3Rpb24gaXNCb2R5U2Nyb2xsYWJsZSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICFib2R5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAhaHRtbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIGlmICghaXNFbGVtZW50U2Nyb2xsYWJsZShib2R5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBodG1sU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcbiAgdmFyIGh0bWxPdmVyZmxvdyA9IHtcbiAgICBvdmVyZmxvd1g6IGh0bWxTdHlsZS5vdmVyZmxvd1gsXG4gICAgb3ZlcmZsb3dZOiBodG1sU3R5bGUub3ZlcmZsb3dZXG4gIH07XG5cbiAgaWYgKGlzQm90aChodG1sT3ZlcmZsb3csIGlzVmlzaWJsZSQxKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgV2UgaGF2ZSBkZXRlY3RlZCB0aGF0IHlvdXIgPGJvZHk+IGVsZW1lbnQgbWlnaHQgYmUgYSBzY3JvbGwgY29udGFpbmVyLlxcbiAgICBXZSBoYXZlIGZvdW5kIG5vIHJlbGlhYmxlIHdheSBvZiBkZXRlY3Rpbmcgd2hldGhlciB0aGUgPGJvZHk+IGVsZW1lbnQgaXMgYSBzY3JvbGwgY29udGFpbmVyLlxcbiAgICBVbmRlciBtb3N0IGNpcmN1bXN0YW5jZXMgYSA8Ym9keT4gc2Nyb2xsIGJhciB3aWxsIGJlIG9uIHRoZSA8aHRtbD4gZWxlbWVudCAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KVxcblxcbiAgICBCZWNhdXNlIHdlIGNhbm5vdCBkZXRlcm1pbmUgaWYgdGhlIDxib2R5PiBpcyBhIHNjcm9sbCBjb250YWluZXIsIGFuZCBnZW5lcmFsbHkgaXQgaXMgbm90IG9uZSxcXG4gICAgd2Ugd2lsbCBiZSB0cmVhdGluZyB0aGUgPGJvZHk+IGFzICpub3QqIGEgc2Nyb2xsIGNvbnRhaW5lclxcblxcbiAgICBNb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9ndWlkZXMvaG93LXdlLWRldGVjdC1zY3JvbGwtY29udGFpbmVycy5tZFxcbiAgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgZ2V0Q2xvc2VzdFNjcm9sbGFibGUgPSBmdW5jdGlvbiBnZXRDbG9zZXN0U2Nyb2xsYWJsZShlbCkge1xuICBpZiAoZWwgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIGlzQm9keVNjcm9sbGFibGUoKSA/IGVsIDogbnVsbDtcbiAgfVxuXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWlzRWxlbWVudFNjcm9sbGFibGUoZWwpKSB7XG4gICAgcmV0dXJuIGdldENsb3Nlc3RTY3JvbGxhYmxlKGVsLnBhcmVudEVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufTtcblxudmFyIGNoZWNrRm9yTmVzdGVkU2Nyb2xsQ29udGFpbmVycyA9IChmdW5jdGlvbiAoc2Nyb2xsYWJsZSkge1xuICBpZiAoIXNjcm9sbGFibGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYW5vdGhlclNjcm9sbFBhcmVudCA9IGdldENsb3Nlc3RTY3JvbGxhYmxlKHNjcm9sbGFibGUucGFyZW50RWxlbWVudCk7XG5cbiAgaWYgKCFhbm90aGVyU2Nyb2xsUGFyZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICBEcm9wcGFibGU6IHVuc3VwcG9ydGVkIG5lc3RlZCBzY3JvbGwgY29udGFpbmVyIGRldGVjdGVkLlxcbiAgICBBIERyb3BwYWJsZSBjYW4gb25seSBoYXZlIG9uZSBzY3JvbGwgcGFyZW50ICh3aGljaCBjYW4gYmUgaXRzZWxmKVxcbiAgICBOZXN0ZWQgc2Nyb2xsIGNvbnRhaW5lcnMgYXJlIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLlxcblxcbiAgICBXZSBob3BlIHRvIHN1cHBvcnQgbmVzdGVkIHNjcm9sbCBjb250YWluZXJzIHNvb246IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9pc3N1ZXMvMTMxXFxuICBcIikgOiB2b2lkIDA7XG59KTtcblxudmFyIGdldFNjcm9sbCQxID0gKGZ1bmN0aW9uIChlbCkge1xuICByZXR1cm4ge1xuICAgIHg6IGVsLnNjcm9sbExlZnQsXG4gICAgeTogZWwuc2Nyb2xsVG9wXG4gIH07XG59KTtcblxudmFyIGdldElzRml4ZWQgPSBmdW5jdGlvbiBnZXRJc0ZpeGVkKGVsKSB7XG4gIGlmICghZWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG5cbiAgaWYgKHN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZ2V0SXNGaXhlZChlbC5wYXJlbnRFbGVtZW50KTtcbn07XG5cbnZhciBnZXRFbnYgPSAoZnVuY3Rpb24gKHN0YXJ0KSB7XG4gIHZhciBjbG9zZXN0U2Nyb2xsYWJsZSA9IGdldENsb3Nlc3RTY3JvbGxhYmxlKHN0YXJ0KTtcbiAgdmFyIGlzRml4ZWRPblBhZ2UgPSBnZXRJc0ZpeGVkKHN0YXJ0KTtcbiAgcmV0dXJuIHtcbiAgICBjbG9zZXN0U2Nyb2xsYWJsZTogY2xvc2VzdFNjcm9sbGFibGUsXG4gICAgaXNGaXhlZE9uUGFnZTogaXNGaXhlZE9uUGFnZVxuICB9O1xufSk7XG5cbnZhciBnZXRDbGllbnQgPSBmdW5jdGlvbiBnZXRDbGllbnQodGFyZ2V0UmVmLCBjbG9zZXN0U2Nyb2xsYWJsZSkge1xuICB2YXIgYmFzZSA9IGdldEJveCh0YXJnZXRSZWYpO1xuXG4gIGlmICghY2xvc2VzdFNjcm9sbGFibGUpIHtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIGlmICh0YXJnZXRSZWYgIT09IGNsb3Nlc3RTY3JvbGxhYmxlKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YXIgdG9wID0gYmFzZS5wYWRkaW5nQm94LnRvcCAtIGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbFRvcDtcbiAgdmFyIGxlZnQgPSBiYXNlLnBhZGRpbmdCb3gubGVmdCAtIGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbExlZnQ7XG4gIHZhciBib3R0b20gPSB0b3AgKyBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxIZWlnaHQ7XG4gIHZhciByaWdodCA9IGxlZnQgKyBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxXaWR0aDtcbiAgdmFyIHBhZGRpbmdCb3ggPSB7XG4gICAgdG9wOiB0b3AsXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIGJvdHRvbTogYm90dG9tLFxuICAgIGxlZnQ6IGxlZnRcbiAgfTtcbiAgdmFyIGJvcmRlckJveCA9IGV4cGFuZChwYWRkaW5nQm94LCBiYXNlLmJvcmRlcik7XG4gIHZhciBjbGllbnQgPSBjcmVhdGVCb3goe1xuICAgIGJvcmRlckJveDogYm9yZGVyQm94LFxuICAgIG1hcmdpbjogYmFzZS5tYXJnaW4sXG4gICAgYm9yZGVyOiBiYXNlLmJvcmRlcixcbiAgICBwYWRkaW5nOiBiYXNlLnBhZGRpbmdcbiAgfSk7XG4gIHJldHVybiBjbGllbnQ7XG59O1xuXG52YXIgZ2V0RGltZW5zaW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciByZWYgPSBfcmVmLnJlZixcbiAgICAgIGRlc2NyaXB0b3IgPSBfcmVmLmRlc2NyaXB0b3IsXG4gICAgICBlbnYgPSBfcmVmLmVudixcbiAgICAgIHdpbmRvd1Njcm9sbCA9IF9yZWYud2luZG93U2Nyb2xsLFxuICAgICAgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb24sXG4gICAgICBpc0Ryb3BEaXNhYmxlZCA9IF9yZWYuaXNEcm9wRGlzYWJsZWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkID0gX3JlZi5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgc2hvdWxkQ2xpcFN1YmplY3QgPSBfcmVmLnNob3VsZENsaXBTdWJqZWN0O1xuICB2YXIgY2xvc2VzdFNjcm9sbGFibGUgPSBlbnYuY2xvc2VzdFNjcm9sbGFibGU7XG4gIHZhciBjbGllbnQgPSBnZXRDbGllbnQocmVmLCBjbG9zZXN0U2Nyb2xsYWJsZSk7XG4gIHZhciBwYWdlID0gd2l0aFNjcm9sbChjbGllbnQsIHdpbmRvd1Njcm9sbCk7XG5cbiAgdmFyIGNsb3Nlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGZyYW1lQ2xpZW50ID0gZ2V0Qm94KGNsb3Nlc3RTY3JvbGxhYmxlKTtcbiAgICB2YXIgc2Nyb2xsU2l6ZSA9IHtcbiAgICAgIHNjcm9sbEhlaWdodDogY2xvc2VzdFNjcm9sbGFibGUuc2Nyb2xsSGVpZ2h0LFxuICAgICAgc2Nyb2xsV2lkdGg6IGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbFdpZHRoXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgY2xpZW50OiBmcmFtZUNsaWVudCxcbiAgICAgIHBhZ2U6IHdpdGhTY3JvbGwoZnJhbWVDbGllbnQsIHdpbmRvd1Njcm9sbCksXG4gICAgICBzY3JvbGw6IGdldFNjcm9sbCQxKGNsb3Nlc3RTY3JvbGxhYmxlKSxcbiAgICAgIHNjcm9sbFNpemU6IHNjcm9sbFNpemUsXG4gICAgICBzaG91bGRDbGlwU3ViamVjdDogc2hvdWxkQ2xpcFN1YmplY3RcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGRpbWVuc2lvbiA9IGdldERyb3BwYWJsZURpbWVuc2lvbih7XG4gICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICBpc0VuYWJsZWQ6ICFpc0Ryb3BEaXNhYmxlZCxcbiAgICBpc0NvbWJpbmVFbmFibGVkOiBpc0NvbWJpbmVFbmFibGVkLFxuICAgIGlzRml4ZWRPblBhZ2U6IGVudi5pc0ZpeGVkT25QYWdlLFxuICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgIGNsaWVudDogY2xpZW50LFxuICAgIHBhZ2U6IHBhZ2UsXG4gICAgY2xvc2VzdDogY2xvc2VzdFxuICB9KTtcbiAgcmV0dXJuIGRpbWVuc2lvbjtcbn0pO1xuXG52YXIgX0Ryb3BwYWJsZURpbWVuc2lvblB1O1xuXG52YXIgZ2V0Q2xvc2VzdFNjcm9sbGFibGUkMSA9IGZ1bmN0aW9uIGdldENsb3Nlc3RTY3JvbGxhYmxlKGRyYWdnaW5nKSB7XG4gIHJldHVybiBkcmFnZ2luZyAmJiBkcmFnZ2luZy5lbnYuY2xvc2VzdFNjcm9sbGFibGUgfHwgbnVsbDtcbn07XG5cbnZhciBpbW1lZGlhdGUgPSB7XG4gIHBhc3NpdmU6IGZhbHNlXG59O1xudmFyIGRlbGF5ZWQgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbnZhciBnZXRMaXN0ZW5lck9wdGlvbnMgPSBmdW5jdGlvbiBnZXRMaXN0ZW5lck9wdGlvbnMob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zaG91bGRQdWJsaXNoSW1tZWRpYXRlbHkgPyBpbW1lZGlhdGUgOiBkZWxheWVkO1xufTtcblxudmFyIHdpdGhvdXRQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIHdpdGhvdXRQbGFjZWhvbGRlcihwbGFjZWhvbGRlciwgZm4pIHtcbiAgaWYgKCFwbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBmbigpO1xuICB9XG5cbiAgdmFyIGxhc3QgPSBwbGFjZWhvbGRlci5zdHlsZS5kaXNwbGF5O1xuICBwbGFjZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB2YXIgcmVzdWx0ID0gZm4oKTtcbiAgcGxhY2Vob2xkZXIuc3R5bGUuZGlzcGxheSA9IGxhc3Q7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgRHJvcHBhYmxlRGltZW5zaW9uUHVibGlzaGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRHJvcHBhYmxlRGltZW5zaW9uUHVibGlzaGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wcGFibGVEaW1lbnNpb25QdWJsaXNoZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5kcmFnZ2luZyA9IHZvaWQgMDtcbiAgICBfdGhpcy5jYWxsYmFja3MgPSB2b2lkIDA7XG4gICAgX3RoaXMucHVibGlzaGVkRGVzY3JpcHRvciA9IG51bGw7XG5cbiAgICBfdGhpcy5nZXRDbG9zZXN0U2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuZHJhZ2dpbmc7XG5cbiAgICAgIGlmICghZHJhZ2dpbmcgfHwgIWRyYWdnaW5nLmVudi5jbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgICAgICByZXR1cm4gb3JpZ2luO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0U2Nyb2xsJDEoZHJhZ2dpbmcuZW52LmNsb3Nlc3RTY3JvbGxhYmxlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMubWVtb2l6ZWRVcGRhdGVTY3JvbGwgPSBtZW1vaXplT25lKGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAhX3RoaXMucHVibGlzaGVkRGVzY3JpcHRvciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCB1cGRhdGUgc2Nyb2xsIG9uIHVucHVibGlzaGVkIGRyb3BwYWJsZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBuZXdTY3JvbGwgPSB7XG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH07XG4gICAgICB2YXIgbWFyc2hhbCA9IF90aGlzLmNvbnRleHRbZGltZW5zaW9uTWFyc2hhbEtleV07XG4gICAgICBtYXJzaGFsLnVwZGF0ZURyb3BwYWJsZVNjcm9sbChfdGhpcy5wdWJsaXNoZWREZXNjcmlwdG9yLmlkLCBuZXdTY3JvbGwpO1xuICAgIH0pO1xuXG4gICAgX3RoaXMudXBkYXRlU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNjcm9sbCA9IF90aGlzLmdldENsb3Nlc3RTY3JvbGwoKTtcblxuICAgICAgX3RoaXMubWVtb2l6ZWRVcGRhdGVTY3JvbGwoc2Nyb2xsLngsIHNjcm9sbC55KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2NoZWR1bGVTY3JvbGxVcGRhdGUgPSByYWZTY2hkKF90aGlzLnVwZGF0ZVNjcm9sbCk7XG5cbiAgICBfdGhpcy5vbkNsb3Nlc3RTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZHJhZ2dpbmcgPSBfdGhpcy5kcmFnZ2luZztcbiAgICAgIHZhciBjbG9zZXN0JCQxID0gZ2V0Q2xvc2VzdFNjcm9sbGFibGUkMShfdGhpcy5kcmFnZ2luZyk7XG4gICAgICAhKGRyYWdnaW5nICYmIGNsb3Nlc3QkJDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgc2Nyb2xsIG9wdGlvbnMgd2hpbGUgc2Nyb2xsaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIG9wdGlvbnMgPSBkcmFnZ2luZy5zY3JvbGxPcHRpb25zO1xuXG4gICAgICBpZiAob3B0aW9ucy5zaG91bGRQdWJsaXNoSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlU2Nyb2xsKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zY2hlZHVsZVNjcm9sbFVwZGF0ZSgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zY3JvbGwgPSBmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgICB2YXIgY2xvc2VzdCQkMSA9IGdldENsb3Nlc3RTY3JvbGxhYmxlJDEoX3RoaXMuZHJhZ2dpbmcpO1xuICAgICAgIWNsb3Nlc3QkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc2Nyb2xsIGEgZHJvcHBhYmxlIHdpdGggbm8gY2xvc2VzdCBzY3JvbGxhYmxlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgY2xvc2VzdCQkMS5zY3JvbGxUb3AgKz0gY2hhbmdlLnk7XG4gICAgICBjbG9zZXN0JCQxLnNjcm9sbExlZnQgKz0gY2hhbmdlLng7XG4gICAgfTtcblxuICAgIF90aGlzLmRyYWdTdG9wcGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuZHJhZ2dpbmc7XG4gICAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RvcCBkcmFnIHdoZW4gbm8gYWN0aXZlIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgY2xvc2VzdCQkMSA9IGdldENsb3Nlc3RTY3JvbGxhYmxlJDEoZHJhZ2dpbmcpO1xuICAgICAgX3RoaXMuZHJhZ2dpbmcgPSBudWxsO1xuXG4gICAgICBpZiAoIWNsb3Nlc3QkJDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zY2hlZHVsZVNjcm9sbFVwZGF0ZS5jYW5jZWwoKTtcblxuICAgICAgY2xvc2VzdCQkMS5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdGhpcy5vbkNsb3Nlc3RTY3JvbGwsIGdldExpc3RlbmVyT3B0aW9ucyhkcmFnZ2luZy5zY3JvbGxPcHRpb25zKSk7XG4gICAgfTtcblxuICAgIF90aGlzLmdldE1lbW9pemVkRGVzY3JpcHRvciA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGlkLCB0eXBlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHR5cGU6IHR5cGVcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBfdGhpcy5wdWJsaXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1hcnNoYWwgPSBfdGhpcy5jb250ZXh0W2RpbWVuc2lvbk1hcnNoYWxLZXldO1xuXG4gICAgICB2YXIgZGVzY3JpcHRvciA9IF90aGlzLmdldE1lbW9pemVkRGVzY3JpcHRvcihfdGhpcy5wcm9wcy5kcm9wcGFibGVJZCwgX3RoaXMucHJvcHMudHlwZSk7XG5cbiAgICAgIGlmICghX3RoaXMucHVibGlzaGVkRGVzY3JpcHRvcikge1xuICAgICAgICBtYXJzaGFsLnJlZ2lzdGVyRHJvcHBhYmxlKGRlc2NyaXB0b3IsIF90aGlzLmNhbGxiYWNrcyk7XG4gICAgICAgIF90aGlzLnB1Ymxpc2hlZERlc2NyaXB0b3IgPSBkZXNjcmlwdG9yO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wdWJsaXNoZWREZXNjcmlwdG9yID09PSBkZXNjcmlwdG9yKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWFyc2hhbC51cGRhdGVEcm9wcGFibGUoX3RoaXMucHVibGlzaGVkRGVzY3JpcHRvciwgZGVzY3JpcHRvciwgX3RoaXMuY2FsbGJhY2tzKTtcbiAgICAgIF90aGlzLnB1Ymxpc2hlZERlc2NyaXB0b3IgPSBkZXNjcmlwdG9yO1xuICAgIH07XG5cbiAgICBfdGhpcy51bnB1Ymxpc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAhX3RoaXMucHVibGlzaGVkRGVzY3JpcHRvciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCB1bnB1Ymxpc2ggZGVzY3JpcHRvciB3aGVuIG5vbmUgaXMgcHVibGlzaGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIG1hcnNoYWwgPSBfdGhpcy5jb250ZXh0W2RpbWVuc2lvbk1hcnNoYWxLZXldO1xuICAgICAgbWFyc2hhbC51bnJlZ2lzdGVyRHJvcHBhYmxlKF90aGlzLnB1Ymxpc2hlZERlc2NyaXB0b3IpO1xuICAgICAgX3RoaXMucHVibGlzaGVkRGVzY3JpcHRvciA9IG51bGw7XG4gICAgfTtcblxuICAgIF90aGlzLnJlY29sbGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmRyYWdnaW5nO1xuICAgICAgdmFyIGNsb3Nlc3QkJDEgPSBnZXRDbG9zZXN0U2Nyb2xsYWJsZSQxKGRyYWdnaW5nKTtcbiAgICAgICEoZHJhZ2dpbmcgJiYgY2xvc2VzdCQkMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSByZWNvbGxlY3QgRHJvcHBhYmxlIGNsaWVudCBmb3IgRHJvcHBhYmxlcyB0aGF0IGhhdmUgYSBzY3JvbGwgY29udGFpbmVyJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHdpdGhvdXRQbGFjZWhvbGRlcihfdGhpcy5wcm9wcy5nZXRQbGFjZWhvbGRlclJlZigpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXREaW1lbnNpb24oe1xuICAgICAgICAgIHJlZjogZHJhZ2dpbmcucmVmLFxuICAgICAgICAgIGRlc2NyaXB0b3I6IGRyYWdnaW5nLmRlc2NyaXB0b3IsXG4gICAgICAgICAgZW52OiBkcmFnZ2luZy5lbnYsXG4gICAgICAgICAgd2luZG93U2Nyb2xsOiBvcmlnaW4sXG4gICAgICAgICAgZGlyZWN0aW9uOiBfdGhpcy5wcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgICAgaXNEcm9wRGlzYWJsZWQ6IF90aGlzLnByb3BzLmlzRHJvcERpc2FibGVkLFxuICAgICAgICAgIGlzQ29tYmluZUVuYWJsZWQ6IF90aGlzLnByb3BzLmlzQ29tYmluZUVuYWJsZWQsXG4gICAgICAgICAgc2hvdWxkQ2xpcFN1YmplY3Q6ICFfdGhpcy5wcm9wcy5pZ25vcmVDb250YWluZXJDbGlwcGluZ1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXREaW1lbnNpb25BbmRXYXRjaFNjcm9sbCA9IGZ1bmN0aW9uICh3aW5kb3dTY3JvbGwsIG9wdGlvbnMpIHtcbiAgICAgICEhX3RoaXMuZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY29sbGVjdCBhIGRyb3BwYWJsZSB3aGlsZSBhIGRyYWcgaXMgb2NjdXJyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBfdGhpcy5wdWJsaXNoZWREZXNjcmlwdG9yO1xuICAgICAgIWRlc2NyaXB0b3IgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZ2V0IGRpbWVuc2lvbiBmb3IgdW5wdWJsaXNoZWQgZHJvcHBhYmxlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgICB2YXIgcmVmID0gX3RoaXMucHJvcHMuZ2V0RHJvcHBhYmxlUmVmKCk7XG5cbiAgICAgICFyZWYgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY29sbGVjdCB3aXRob3V0IGEgZHJvcHBhYmxlIHJlZicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBlbnYgPSBnZXRFbnYocmVmKTtcbiAgICAgIHZhciBkcmFnZ2luZyA9IHtcbiAgICAgICAgcmVmOiByZWYsXG4gICAgICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgICAgIGVudjogZW52LFxuICAgICAgICBzY3JvbGxPcHRpb25zOiBvcHRpb25zXG4gICAgICB9O1xuICAgICAgX3RoaXMuZHJhZ2dpbmcgPSBkcmFnZ2luZztcbiAgICAgIHZhciBkaW1lbnNpb24gPSBnZXREaW1lbnNpb24oe1xuICAgICAgICByZWY6IHJlZixcbiAgICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgICAgZW52OiBlbnYsXG4gICAgICAgIHdpbmRvd1Njcm9sbDogd2luZG93U2Nyb2xsLFxuICAgICAgICBkaXJlY3Rpb246IF90aGlzLnByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgaXNEcm9wRGlzYWJsZWQ6IF90aGlzLnByb3BzLmlzRHJvcERpc2FibGVkLFxuICAgICAgICBpc0NvbWJpbmVFbmFibGVkOiBfdGhpcy5wcm9wcy5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgICBzaG91bGRDbGlwU3ViamVjdDogIV90aGlzLnByb3BzLmlnbm9yZUNvbnRhaW5lckNsaXBwaW5nXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVudi5jbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgICAgICBlbnYuY2xvc2VzdFNjcm9sbGFibGUuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgX3RoaXMub25DbG9zZXN0U2Nyb2xsLCBnZXRMaXN0ZW5lck9wdGlvbnMoZHJhZ2dpbmcuc2Nyb2xsT3B0aW9ucykpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tGb3JOZXN0ZWRTY3JvbGxDb250YWluZXJzKGVudi5jbG9zZXN0U2Nyb2xsYWJsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRpbWVuc2lvbjtcbiAgICB9O1xuXG4gICAgdmFyIGNhbGxiYWNrcyA9IHtcbiAgICAgIGdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsOiBfdGhpcy5nZXREaW1lbnNpb25BbmRXYXRjaFNjcm9sbCxcbiAgICAgIHJlY29sbGVjdDogX3RoaXMucmVjb2xsZWN0LFxuICAgICAgZHJhZ1N0b3BwZWQ6IF90aGlzLmRyYWdTdG9wcGVkLFxuICAgICAgc2Nyb2xsOiBfdGhpcy5zY3JvbGxcbiAgICB9O1xuICAgIF90aGlzLmNhbGxiYWNrcyA9IGNhbGxiYWNrcztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcHBhYmxlRGltZW5zaW9uUHVibGlzaGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnB1Ymxpc2goKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHRoaXMucHVibGlzaCgpO1xuXG4gICAgaWYgKCF0aGlzLmRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlzRGlzYWJsZWRDaGFuZ2VkID0gdGhpcy5wcm9wcy5pc0Ryb3BEaXNhYmxlZCAhPT0gcHJldlByb3BzLmlzRHJvcERpc2FibGVkO1xuICAgIHZhciBpc0NvbWJpbmVDaGFuZ2VkID0gdGhpcy5wcm9wcy5pc0NvbWJpbmVFbmFibGVkICE9PSBwcmV2UHJvcHMuaXNDb21iaW5lRW5hYmxlZDtcblxuICAgIGlmICghaXNEaXNhYmxlZENoYW5nZWQgJiYgIWlzQ29tYmluZUNoYW5nZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbWFyc2hhbCA9IHRoaXMuY29udGV4dFtkaW1lbnNpb25NYXJzaGFsS2V5XTtcblxuICAgIGlmIChpc0Rpc2FibGVkQ2hhbmdlZCkge1xuICAgICAgbWFyc2hhbC51cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQodGhpcy5wcm9wcy5kcm9wcGFibGVJZCwgIXRoaXMucHJvcHMuaXNEcm9wRGlzYWJsZWQpO1xuICAgIH1cblxuICAgIGlmIChpc0NvbWJpbmVDaGFuZ2VkKSB7XG4gICAgICBtYXJzaGFsLnVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQodGhpcy5wcm9wcy5kcm9wcGFibGVJZCwgdGhpcy5wcm9wcy5pc0NvbWJpbmVFbmFibGVkKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuZHJhZ2dpbmcpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ3VubW91bnRpbmcgZHJvcHBhYmxlIHdoaWxlIGEgZHJhZyBpcyBvY2N1cnJpbmcnKSA6IHZvaWQgMDtcbiAgICAgIHRoaXMuZHJhZ1N0b3BwZWQoKTtcbiAgICB9XG5cbiAgICB0aGlzLnVucHVibGlzaCgpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH07XG5cbiAgcmV0dXJuIERyb3BwYWJsZURpbWVuc2lvblB1Ymxpc2hlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRHJvcHBhYmxlRGltZW5zaW9uUHVibGlzaGVyLmNvbnRleHRUeXBlcyA9IChfRHJvcHBhYmxlRGltZW5zaW9uUHUgPSB7fSwgX0Ryb3BwYWJsZURpbWVuc2lvblB1W2RpbWVuc2lvbk1hcnNoYWxLZXldID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfRHJvcHBhYmxlRGltZW5zaW9uUHUpO1xuXG52YXIgUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUGxhY2Vob2xkZXIsIF9QdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQbGFjZWhvbGRlcigpIHtcbiAgICByZXR1cm4gX1B1cmVDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsYWNlaG9sZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBwbGFjZWhvbGRlciA9IHRoaXMucHJvcHMucGxhY2Vob2xkZXI7XG4gICAgdmFyIGNsaWVudCA9IHBsYWNlaG9sZGVyLmNsaWVudCxcbiAgICAgICAgZGlzcGxheSA9IHBsYWNlaG9sZGVyLmRpc3BsYXksXG4gICAgICAgIHRhZ05hbWUgPSBwbGFjZWhvbGRlci50YWdOYW1lO1xuICAgIHZhciBzdHlsZSA9IHtcbiAgICAgIGRpc3BsYXk6IGRpc3BsYXksXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIHdpZHRoOiBjbGllbnQuYm9yZGVyQm94LndpZHRoLFxuICAgICAgaGVpZ2h0OiBjbGllbnQuYm9yZGVyQm94LmhlaWdodCxcbiAgICAgIG1hcmdpblRvcDogY2xpZW50Lm1hcmdpbi50b3AsXG4gICAgICBtYXJnaW5SaWdodDogY2xpZW50Lm1hcmdpbi5yaWdodCxcbiAgICAgIG1hcmdpbkJvdHRvbTogY2xpZW50Lm1hcmdpbi5ib3R0b20sXG4gICAgICBtYXJnaW5MZWZ0OiBjbGllbnQubWFyZ2luLmxlZnQsXG4gICAgICBmbGV4U2hyaW5rOiAnMCcsXG4gICAgICBmbGV4R3JvdzogJzAnLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh0YWdOYW1lLCB7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICByZWY6IHRoaXMucHJvcHMuaW5uZXJSZWZcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGxhY2Vob2xkZXI7XG59KFB1cmVDb21wb25lbnQpO1xuXG52YXIgdGhyb3dJZlJlZklzSW52YWxpZCA9IChmdW5jdGlvbiAocmVmKSB7XG4gICEocmVmICYmIHJlZiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJcXG4gICAgcHJvdmlkZWQuaW5uZXJSZWYgaGFzIG5vdCBiZWVuIHByb3ZpZGVkIHdpdGggYSBIVE1MRWxlbWVudC5cXG5cXG4gICAgWW91IGNhbiBmaW5kIGEgZ3VpZGUgb24gdXNpbmcgdGhlIGlubmVyUmVmIGNhbGxiYWNrIGZ1bmN0aW9ucyBhdDpcXG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvZ3VpZGVzL3VzaW5nLWlubmVyLXJlZi5tZFxcbiAgXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn0pO1xuXG52YXIgY2hlY2tPd25Qcm9wcyA9IChmdW5jdGlvbiAocHJvcHMpIHtcbiAgIXByb3BzLmRyb3BwYWJsZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQSBEcm9wcGFibGUgcmVxdWlyZXMgYSBkcm9wcGFibGVJZCBwcm9wJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKHR5cGVvZiBwcm9wcy5pc0Ryb3BEaXNhYmxlZCA9PT0gJ2Jvb2xlYW4nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2lzRHJvcERpc2FibGVkIG11c3QgYmUgYSBib29sZWFuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKHR5cGVvZiBwcm9wcy5pc0NvbWJpbmVFbmFibGVkID09PSAnYm9vbGVhbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnaXNDb21iaW5lRW5hYmxlZCBtdXN0IGJlIGEgYm9vbGVhbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgISh0eXBlb2YgcHJvcHMuaWdub3JlQ29udGFpbmVyQ2xpcHBpbmcgPT09ICdib29sZWFuJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdpZ25vcmVDb250YWluZXJDbGlwcGluZyBtdXN0IGJlIGEgYm9vbGVhbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn0pO1xuXG52YXIgX0Ryb3BwYWJsZSRjb250ZXh0VHlwLCBfRHJvcHBhYmxlJGNoaWxkQ29udGU7XG5cbnZhciBEcm9wcGFibGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wcGFibGUsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyb3BwYWJsZShwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIF90aGlzLnN0eWxlQ29udGV4dCA9IHZvaWQgMDtcbiAgICBfdGhpcy5yZWYgPSBudWxsO1xuICAgIF90aGlzLnBsYWNlaG9sZGVyUmVmID0gbnVsbDtcblxuICAgIF90aGlzLnNldFBsYWNlaG9sZGVyUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMucGxhY2Vob2xkZXJSZWYgPSByZWY7XG4gICAgfTtcblxuICAgIF90aGlzLmdldFBsYWNlaG9sZGVyUmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnBsYWNlaG9sZGVyUmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBpZiAocmVmID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZiA9PT0gX3RoaXMucmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucmVmID0gcmVmO1xuICAgICAgdGhyb3dJZlJlZklzSW52YWxpZChyZWYpO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXREcm9wcGFibGVSZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdHlsZUNvbnRleHQgPSBjb250ZXh0W3N0eWxlQ29udGV4dEtleV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tPd25Qcm9wcyhwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyb3BwYWJsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3ZhbHVlO1xuXG4gICAgdmFyIHZhbHVlID0gKF92YWx1ZSA9IHt9LCBfdmFsdWVbZHJvcHBhYmxlSWRLZXldID0gdGhpcy5wcm9wcy5kcm9wcGFibGVJZCwgX3ZhbHVlW2Ryb3BwYWJsZVR5cGVLZXldID0gdGhpcy5wcm9wcy50eXBlLCBfdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aHJvd0lmUmVmSXNJbnZhbGlkKHRoaXMucmVmKTtcbiAgICB0aGlzLndhcm5JZlBsYWNlaG9sZGVyTm90TW91bnRlZCgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy53YXJuSWZQbGFjZWhvbGRlck5vdE1vdW50ZWQoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnJlZiA9IG51bGw7XG4gICAgdGhpcy5wbGFjZWhvbGRlclJlZiA9IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLndhcm5JZlBsYWNlaG9sZGVyTm90TW91bnRlZCA9IGZ1bmN0aW9uIHdhcm5JZlBsYWNlaG9sZGVyTm90TW91bnRlZCgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5wcm9wcy5wbGFjZWhvbGRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyUmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIERyb3BwYWJsZSBzZXR1cCBpc3N1ZTogRHJvcHBhYmxlUHJvdmlkZWQgPiBwbGFjZWhvbGRlciBjb3VsZCBub3QgYmUgZm91bmQuXFxuICAgICAgUGxlYXNlIGJlIHN1cmUgdG8gYWRkIHRoZSB7cHJvdmlkZWQucGxhY2Vob2xkZXJ9IE5vZGUgYXMgYSBjaGlsZCBvZiB5b3VyIERyb3BwYWJsZVxcblxcbiAgICAgIE1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZCMxLXByb3ZpZGVkLWRyb3BwYWJsZXByb3ZpZGVkXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0UGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlcigpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMucGxhY2Vob2xkZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBsYWNlaG9sZGVyLCB7XG4gICAgICBwbGFjZWhvbGRlcjogdGhpcy5wcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgIGlubmVyUmVmOiB0aGlzLnNldFBsYWNlaG9sZGVyUmVmXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRwcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wcy50eXBlLFxuICAgICAgICBkcm9wcGFibGVJZCA9IF90aGlzJHByb3BzLmRyb3BwYWJsZUlkLFxuICAgICAgICBpc0Ryb3BEaXNhYmxlZCA9IF90aGlzJHByb3BzLmlzRHJvcERpc2FibGVkLFxuICAgICAgICBpc0NvbWJpbmVFbmFibGVkID0gX3RoaXMkcHJvcHMuaXNDb21iaW5lRW5hYmxlZCxcbiAgICAgICAgaWdub3JlQ29udGFpbmVyQ2xpcHBpbmcgPSBfdGhpcyRwcm9wcy5pZ25vcmVDb250YWluZXJDbGlwcGluZyxcbiAgICAgICAgaXNEcmFnZ2luZ092ZXIgPSBfdGhpcyRwcm9wcy5pc0RyYWdnaW5nT3ZlcixcbiAgICAgICAgZHJhZ2dpbmdPdmVyV2l0aCA9IF90aGlzJHByb3BzLmRyYWdnaW5nT3ZlcldpdGg7XG4gICAgdmFyIHByb3ZpZGVkID0ge1xuICAgICAgaW5uZXJSZWY6IHRoaXMuc2V0UmVmLFxuICAgICAgcGxhY2Vob2xkZXI6IHRoaXMuZ2V0UGxhY2Vob2xkZXIoKSxcbiAgICAgIGRyb3BwYWJsZVByb3BzOiB7XG4gICAgICAgICdkYXRhLXJlYWN0LWJlYXV0aWZ1bC1kbmQtZHJvcHBhYmxlJzogdGhpcy5zdHlsZUNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzbmFwc2hvdCA9IHtcbiAgICAgIGlzRHJhZ2dpbmdPdmVyOiBpc0RyYWdnaW5nT3ZlcixcbiAgICAgIGRyYWdnaW5nT3ZlcldpdGg6IGRyYWdnaW5nT3ZlcldpdGhcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3BwYWJsZURpbWVuc2lvblB1Ymxpc2hlciwge1xuICAgICAgZHJvcHBhYmxlSWQ6IGRyb3BwYWJsZUlkLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgICAgaWdub3JlQ29udGFpbmVyQ2xpcHBpbmc6IGlnbm9yZUNvbnRhaW5lckNsaXBwaW5nLFxuICAgICAgaXNEcm9wRGlzYWJsZWQ6IGlzRHJvcERpc2FibGVkLFxuICAgICAgaXNDb21iaW5lRW5hYmxlZDogaXNDb21iaW5lRW5hYmxlZCxcbiAgICAgIGdldERyb3BwYWJsZVJlZjogdGhpcy5nZXREcm9wcGFibGVSZWYsXG4gICAgICBnZXRQbGFjZWhvbGRlclJlZjogdGhpcy5nZXRQbGFjZWhvbGRlclJlZlxuICAgIH0sIGNoaWxkcmVuKHByb3ZpZGVkLCBzbmFwc2hvdCkpO1xuICB9O1xuXG4gIHJldHVybiBEcm9wcGFibGU7XG59KENvbXBvbmVudCk7XG5cbkRyb3BwYWJsZS5jb250ZXh0VHlwZXMgPSAoX0Ryb3BwYWJsZSRjb250ZXh0VHlwID0ge30sIF9Ecm9wcGFibGUkY29udGV4dFR5cFtzdHlsZUNvbnRleHRLZXldID0gUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLCBfRHJvcHBhYmxlJGNvbnRleHRUeXApO1xuRHJvcHBhYmxlLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Ecm9wcGFibGUkY2hpbGRDb250ZSA9IHt9LCBfRHJvcHBhYmxlJGNoaWxkQ29udGVbZHJvcHBhYmxlSWRLZXldID0gUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLCBfRHJvcHBhYmxlJGNoaWxkQ29udGVbZHJvcHBhYmxlVHlwZUtleV0gPSBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsIF9Ecm9wcGFibGUkY2hpbGRDb250ZSk7XG5cbnZhciBpc1N0cmljdEVxdWFsID0gKGZ1bmN0aW9uIChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSk7XG5cbnZhciBkZWZhdWx0TWFwUHJvcHMgPSB7XG4gIGlzRHJhZ2dpbmdPdmVyOiBmYWxzZSxcbiAgZHJhZ2dpbmdPdmVyV2l0aDogbnVsbCxcbiAgcGxhY2Vob2xkZXI6IG51bGxcbn07XG52YXIgbWFrZU1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1ha2VNYXBTdGF0ZVRvUHJvcHMoKSB7XG4gIHZhciBnZXRNYXBQcm9wcyA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGlzRHJhZ2dpbmdPdmVyLCBkcmFnZ2luZ092ZXJXaXRoLCBwbGFjZWhvbGRlcikge1xuICAgIHJldHVybiB7XG4gICAgICBpc0RyYWdnaW5nT3ZlcjogaXNEcmFnZ2luZ092ZXIsXG4gICAgICBkcmFnZ2luZ092ZXJXaXRoOiBkcmFnZ2luZ092ZXJXaXRoLFxuICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyXG4gICAgfTtcbiAgfSk7XG5cbiAgdmFyIGdldERyYWdnaW5nT3ZlclByb3BzID0gZnVuY3Rpb24gZ2V0RHJhZ2dpbmdPdmVyUHJvcHMoaWQsIGRyYWdnYWJsZSwgaW1wYWN0KSB7XG4gICAgdmFyIGlzT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKGltcGFjdCkgPT09IGlkO1xuXG4gICAgaWYgKCFpc092ZXIpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TWFwUHJvcHM7XG4gICAgfVxuXG4gICAgdmFyIHVzZVBsYWNlaG9sZGVyID0gc2hvdWxkVXNlUGxhY2Vob2xkZXIoZHJhZ2dhYmxlLmRlc2NyaXB0b3IsIGltcGFjdCk7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0gdXNlUGxhY2Vob2xkZXIgPyBkcmFnZ2FibGUucGxhY2Vob2xkZXIgOiBudWxsO1xuICAgIHJldHVybiBnZXRNYXBQcm9wcyh0cnVlLCBkcmFnZ2FibGUuZGVzY3JpcHRvci5pZCwgcGxhY2Vob2xkZXIpO1xuICB9O1xuXG4gIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIGlmIChvd25Qcm9wcy5pc0Ryb3BEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRNYXBQcm9wcztcbiAgICB9XG5cbiAgICB2YXIgaWQgPSBvd25Qcm9wcy5kcm9wcGFibGVJZDtcblxuICAgIGlmIChzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICB2YXIgZHJhZ2dhYmxlID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gICAgICByZXR1cm4gZ2V0RHJhZ2dpbmdPdmVyUHJvcHMoaWQsIGRyYWdnYWJsZSwgc3RhdGUuaW1wYWN0KTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICAgIHZhciBfZHJhZ2dhYmxlID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLnBlbmRpbmcucmVzdWx0LmRyYWdnYWJsZUlkXTtcbiAgICAgIHJldHVybiBnZXREcmFnZ2luZ092ZXJQcm9wcyhpZCwgX2RyYWdnYWJsZSwgc3RhdGUucGVuZGluZy5pbXBhY3QpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZhdWx0TWFwUHJvcHM7XG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdERUZBVUxUJyxcbiAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICBpc0Ryb3BEaXNhYmxlZDogZmFsc2UsXG4gIGlzQ29tYmluZUVuYWJsZWQ6IGZhbHNlLFxuICBpZ25vcmVDb250YWluZXJDbGlwcGluZzogZmFsc2Vcbn07XG52YXIgQ29ubmVjdGVkRHJvcHBhYmxlID0gY29ubmVjdChtYWtlTWFwU3RhdGVUb1Byb3BzLCBudWxsLCBudWxsLCB7XG4gIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgcHVyZTogdHJ1ZSxcbiAgYXJlU3RhdGVQcm9wc0VxdWFsOiBpc1N0cmljdEVxdWFsXG59KShEcm9wcGFibGUpO1xuQ29ubmVjdGVkRHJvcHBhYmxlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9EcmFnZ2FibGVEaW1lbnNpb25QdTtcblxudmFyIERyYWdnYWJsZURpbWVuc2lvblB1Ymxpc2hlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKERyYWdnYWJsZURpbWVuc2lvblB1Ymxpc2hlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJhZ2dhYmxlRGltZW5zaW9uUHVibGlzaGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbC5hcHBseShfQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnB1Ymxpc2hlZERlc2NyaXB0b3IgPSBudWxsO1xuICAgIF90aGlzLmdldE1lbW9pemVkRGVzY3JpcHRvciA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGlkLCBpbmRleCwgZHJvcHBhYmxlSWQsIHR5cGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBkcm9wcGFibGVJZDogZHJvcHBhYmxlSWQsXG4gICAgICAgIHR5cGU6IHR5cGVcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBfdGhpcy5wdWJsaXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1hcnNoYWwgPSBfdGhpcy5jb250ZXh0W2RpbWVuc2lvbk1hcnNoYWxLZXldO1xuXG4gICAgICB2YXIgZGVzY3JpcHRvciA9IF90aGlzLmdldE1lbW9pemVkRGVzY3JpcHRvcihfdGhpcy5wcm9wcy5kcmFnZ2FibGVJZCwgX3RoaXMucHJvcHMuaW5kZXgsIF90aGlzLnByb3BzLmRyb3BwYWJsZUlkLCBfdGhpcy5wcm9wcy50eXBlKTtcblxuICAgICAgaWYgKCFfdGhpcy5wdWJsaXNoZWREZXNjcmlwdG9yKSB7XG4gICAgICAgIG1hcnNoYWwucmVnaXN0ZXJEcmFnZ2FibGUoZGVzY3JpcHRvciwgX3RoaXMuZ2V0RGltZW5zaW9uKTtcbiAgICAgICAgX3RoaXMucHVibGlzaGVkRGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlc2NyaXB0b3IgPT09IF90aGlzLnB1Ymxpc2hlZERlc2NyaXB0b3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtYXJzaGFsLnVwZGF0ZURyYWdnYWJsZShfdGhpcy5wdWJsaXNoZWREZXNjcmlwdG9yLCBkZXNjcmlwdG9yLCBfdGhpcy5nZXREaW1lbnNpb24pO1xuICAgICAgX3RoaXMucHVibGlzaGVkRGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XG4gICAgfTtcblxuICAgIF90aGlzLnVucHVibGlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICFfdGhpcy5wdWJsaXNoZWREZXNjcmlwdG9yID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHVucHVibGlzaCBkZXNjcmlwdG9yIHdoZW4gbm9uZSBpcyBwdWJsaXNoZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbWFyc2hhbCA9IF90aGlzLmNvbnRleHRbZGltZW5zaW9uTWFyc2hhbEtleV07XG4gICAgICBtYXJzaGFsLnVucmVnaXN0ZXJEcmFnZ2FibGUoX3RoaXMucHVibGlzaGVkRGVzY3JpcHRvcik7XG4gICAgICBfdGhpcy5wdWJsaXNoZWREZXNjcmlwdG9yID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gKHdpbmRvd1Njcm9sbCkge1xuICAgICAgaWYgKHdpbmRvd1Njcm9sbCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHdpbmRvd1Njcm9sbCA9IG9yaWdpbjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldFJlZiA9IF90aGlzLnByb3BzLmdldERyYWdnYWJsZVJlZigpO1xuXG4gICAgICB2YXIgZGVzY3JpcHRvciA9IF90aGlzLnB1Ymxpc2hlZERlc2NyaXB0b3I7XG4gICAgICAhdGFyZ2V0UmVmID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRHJhZ2dhYmxlRGltZW5zaW9uUHVibGlzaGVyIGNhbm5vdCBjYWxjdWxhdGUgYSBkaW1lbnNpb24gd2hlbiBub3QgYXR0YWNoZWQgdG8gdGhlIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICFkZXNjcmlwdG9yID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGdldCBkaW1lbnNpb24gZm9yIHVucHVibGlzaGVkIGRyYWdnYWJsZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBjb21wdXRlZFN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRhcmdldFJlZik7XG4gICAgICB2YXIgYm9yZGVyQm94ID0gdGFyZ2V0UmVmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGNsaWVudCA9IGNhbGN1bGF0ZUJveChib3JkZXJCb3gsIGNvbXB1dGVkU3R5bGVzKTtcbiAgICAgIHZhciBwYWdlID0gd2l0aFNjcm9sbChjbGllbnQsIHdpbmRvd1Njcm9sbCk7XG4gICAgICB2YXIgcGxhY2Vob2xkZXIgPSB7XG4gICAgICAgIGNsaWVudDogY2xpZW50LFxuICAgICAgICB0YWdOYW1lOiB0YXJnZXRSZWYudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBkaXNwbGF5OiBjb21wdXRlZFN0eWxlcy5kaXNwbGF5XG4gICAgICB9O1xuICAgICAgdmFyIGRpc3BsYWNlQnkgPSB7XG4gICAgICAgIHg6IGNsaWVudC5tYXJnaW5Cb3gud2lkdGgsXG4gICAgICAgIHk6IGNsaWVudC5tYXJnaW5Cb3guaGVpZ2h0XG4gICAgICB9O1xuICAgICAgdmFyIGRpbWVuc2lvbiA9IHtcbiAgICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICBkaXNwbGFjZUJ5OiBkaXNwbGFjZUJ5LFxuICAgICAgICBjbGllbnQ6IGNsaWVudCxcbiAgICAgICAgcGFnZTogcGFnZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBkaW1lbnNpb247XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEcmFnZ2FibGVEaW1lbnNpb25QdWJsaXNoZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHVibGlzaCgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5wdWJsaXNoKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bnB1Ymxpc2goKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9O1xuXG4gIHJldHVybiBEcmFnZ2FibGVEaW1lbnNpb25QdWJsaXNoZXI7XG59KENvbXBvbmVudCk7XG5cbkRyYWdnYWJsZURpbWVuc2lvblB1Ymxpc2hlci5jb250ZXh0VHlwZXMgPSAoX0RyYWdnYWJsZURpbWVuc2lvblB1ID0ge30sIF9EcmFnZ2FibGVEaW1lbnNpb25QdVtkaW1lbnNpb25NYXJzaGFsS2V5XSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX0RyYWdnYWJsZURpbWVuc2lvblB1KTtcblxudmFyIGdldFdpbmRvd0Zyb21SZWYgPSAoZnVuY3Rpb24gKHJlZikge1xuICByZXR1cm4gcmVmID8gcmVmLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59KTtcblxudmFyIHNlbGVjdG9yID0gXCJbXCIgKyBkcmFnSGFuZGxlICsgXCJdXCI7XG5cbnZhciBpc1NWRyA9IGZ1bmN0aW9uIGlzU1ZHKGVsKSB7XG4gIGlmICh0eXBlb2YgU1ZHRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZWwgaW5zdGFuY2VvZiBTVkdFbGVtZW50O1xufTtcblxudmFyIHRocm93SWZTVkcgPSBmdW5jdGlvbiB0aHJvd0lmU1ZHKGVsKSB7XG4gICEhaXNTVkcoZWwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgZHJhZyBoYW5kbGUgY2Fubm90IGJlIGFuIFNWR0VsZW1lbnQ6IGl0IGhhcyBpbmNvbnNpc3RlbnQgZm9jdXMgc3VwcG9ydC5cXG5cXG4gICAgTW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvZ3VpZGVzL2RyYWdnaW5nLXN2Z3MubWRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufTtcblxudmFyIGdldERyYWdIYW5kbGVSZWYgPSBmdW5jdGlvbiBnZXREcmFnSGFuZGxlUmVmKGRyYWdnYWJsZVJlZikge1xuICBpZiAoZHJhZ2dhYmxlUmVmLmhhc0F0dHJpYnV0ZShkcmFnSGFuZGxlKSkge1xuICAgIHRocm93SWZTVkcoZHJhZ2dhYmxlUmVmKTtcbiAgICByZXR1cm4gZHJhZ2dhYmxlUmVmO1xuICB9XG5cbiAgdmFyIGVsID0gZHJhZ2dhYmxlUmVmLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB0aHJvd0lmU1ZHKGRyYWdnYWJsZVJlZik7XG4gICFlbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJcXG4gICAgICBDYW5ub3QgZmluZCBkcmFnIGhhbmRsZSBlbGVtZW50IGluc2lkZSBvZiBEcmFnZ2FibGUuXFxuICAgICAgUGxlYXNlIGJlIHN1cmUgdG8gYXBwbHkgdGhlIHsuLi5wcm92aWRlZC5kcmFnSGFuZGxlUHJvcHN9IHRvIHlvdXIgRHJhZ2dhYmxlXFxuXFxuICAgICAgTW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kI2RyYWdnYWJsZVxcbiAgICBcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQSBkcmFnIGhhbmRsZSBtdXN0IGJlIGEgSFRNTEVsZW1lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciByZXRhaW5pbmdGb2N1c0ZvciA9IG51bGw7XG52YXIgbGlzdGVuZXJPcHRpb25zID0ge1xuICBjYXB0dXJlOiB0cnVlXG59O1xuXG52YXIgY2xlYXJSZXRlbnRpb25PbkZvY3VzQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaXNCb3VuZCA9IGZhbHNlO1xuXG4gIHZhciBiaW5kID0gZnVuY3Rpb24gYmluZCgpIHtcbiAgICBpZiAoaXNCb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlzQm91bmQgPSB0cnVlO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIG9uV2luZG93Rm9jdXNDaGFuZ2UsIGxpc3RlbmVyT3B0aW9ucyk7XG4gIH07XG5cbiAgdmFyIHVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICBpZiAoIWlzQm91bmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpc0JvdW5kID0gZmFsc2U7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb25XaW5kb3dGb2N1c0NoYW5nZSwgbGlzdGVuZXJPcHRpb25zKTtcbiAgfTtcblxuICB2YXIgb25XaW5kb3dGb2N1c0NoYW5nZSA9IGZ1bmN0aW9uIG9uV2luZG93Rm9jdXNDaGFuZ2UoKSB7XG4gICAgdW5iaW5kKCk7XG4gICAgcmV0YWluaW5nRm9jdXNGb3IgPSBudWxsO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgcmV0dXJuIGJpbmQoKTtcbiAgfTtcblxuICByZXN1bHQuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmJpbmQoKTtcbiAgfTtcblxuICByZXR1cm4gcmVzdWx0O1xufSgpO1xuXG52YXIgcmV0YWluID0gZnVuY3Rpb24gcmV0YWluKGlkKSB7XG4gIHJldGFpbmluZ0ZvY3VzRm9yID0gaWQ7XG4gIGNsZWFyUmV0ZW50aW9uT25Gb2N1c0NoYW5nZSgpO1xufTtcblxudmFyIHRyeVJlc3RvcmVGb2N1cyA9IGZ1bmN0aW9uIHRyeVJlc3RvcmVGb2N1cyhpZCwgZHJhZ2dhYmxlUmVmKSB7XG4gIGlmICghcmV0YWluaW5nRm9jdXNGb3IpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaWQgIT09IHJldGFpbmluZ0ZvY3VzRm9yKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0YWluaW5nRm9jdXNGb3IgPSBudWxsO1xuICBjbGVhclJldGVudGlvbk9uRm9jdXNDaGFuZ2UuY2FuY2VsKCk7XG4gIHZhciBkcmFnSGFuZGxlUmVmID0gZ2V0RHJhZ0hhbmRsZVJlZihkcmFnZ2FibGVSZWYpO1xuXG4gIGlmICghZHJhZ0hhbmRsZVJlZikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ0NvdWxkIG5vdCBmaW5kIGRyYWcgaGFuZGxlIGluIHRoZSBET00gdG8gZm9jdXMgb24gaXQnKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBkcmFnSGFuZGxlUmVmLmZvY3VzKCk7XG59O1xuXG52YXIgcmV0YWluZXIgPSB7XG4gIHJldGFpbjogcmV0YWluLFxuICB0cnlSZXN0b3JlRm9jdXM6IHRyeVJlc3RvcmVGb2N1c1xufTtcblxudmFyIGludGVyYWN0aXZlVGFnTmFtZXMgPSB7XG4gIGlucHV0OiB0cnVlLFxuICBidXR0b246IHRydWUsXG4gIHRleHRhcmVhOiB0cnVlLFxuICBzZWxlY3Q6IHRydWUsXG4gIG9wdGlvbjogdHJ1ZSxcbiAgb3B0Z3JvdXA6IHRydWUsXG4gIHZpZGVvOiB0cnVlLFxuICBhdWRpbzogdHJ1ZVxufTtcblxudmFyIGlzQW5JbnRlcmFjdGl2ZUVsZW1lbnQgPSBmdW5jdGlvbiBpc0FuSW50ZXJhY3RpdmVFbGVtZW50KHBhcmVudCwgY3VycmVudCkge1xuICBpZiAoY3VycmVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGhhc0FuSW50ZXJhY3RpdmVUYWcgPSBCb29sZWFuKGludGVyYWN0aXZlVGFnTmFtZXNbY3VycmVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCldKTtcblxuICBpZiAoaGFzQW5JbnRlcmFjdGl2ZVRhZykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGF0dHJpYnV0ZSA9IGN1cnJlbnQuZ2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKTtcblxuICBpZiAoYXR0cmlidXRlID09PSAndHJ1ZScgfHwgYXR0cmlidXRlID09PSAnJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGN1cnJlbnQgPT09IHBhcmVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc0FuSW50ZXJhY3RpdmVFbGVtZW50KHBhcmVudCwgY3VycmVudC5wYXJlbnRFbGVtZW50KTtcbn07XG5cbnZhciBzaG91bGRBbGxvd0RyYWdnaW5nRnJvbVRhcmdldCA9IChmdW5jdGlvbiAoZXZlbnQsIHByb3BzKSB7XG4gIGlmIChwcm9wcy5jYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldCxcbiAgICAgIGN1cnJlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuXG4gIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQpIHx8ICEoY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gIWlzQW5JbnRlcmFjdGl2ZUVsZW1lbnQoY3VycmVudFRhcmdldCwgdGFyZ2V0KTtcbn0pO1xuXG52YXIgY3JlYXRlU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChjYWxsYmFja3MpIHtcbiAgdmFyIG1lbW9pemVkTW92ZSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB2YXIgcG9pbnQgPSB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeVxuICAgIH07XG4gICAgY2FsbGJhY2tzLm9uTW92ZShwb2ludCk7XG4gIH0pO1xuICB2YXIgbW92ZSA9IHJhZlNjaGQoZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgcmV0dXJuIG1lbW9pemVkTW92ZShwb2ludC54LCBwb2ludC55KTtcbiAgfSk7XG4gIHZhciBtb3ZlVXAgPSByYWZTY2hkKGNhbGxiYWNrcy5vbk1vdmVVcCk7XG4gIHZhciBtb3ZlRG93biA9IHJhZlNjaGQoY2FsbGJhY2tzLm9uTW92ZURvd24pO1xuICB2YXIgbW92ZVJpZ2h0ID0gcmFmU2NoZChjYWxsYmFja3Mub25Nb3ZlUmlnaHQpO1xuICB2YXIgbW92ZUxlZnQgPSByYWZTY2hkKGNhbGxiYWNrcy5vbk1vdmVMZWZ0KTtcbiAgdmFyIHdpbmRvd1Njcm9sbE1vdmUgPSByYWZTY2hkKGNhbGxiYWNrcy5vbldpbmRvd1Njcm9sbCk7XG5cbiAgdmFyIGNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBtb3ZlLmNhbmNlbCgpO1xuICAgIG1vdmVVcC5jYW5jZWwoKTtcbiAgICBtb3ZlRG93bi5jYW5jZWwoKTtcbiAgICBtb3ZlUmlnaHQuY2FuY2VsKCk7XG4gICAgbW92ZUxlZnQuY2FuY2VsKCk7XG4gICAgd2luZG93U2Nyb2xsTW92ZS5jYW5jZWwoKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG1vdmU6IG1vdmUsXG4gICAgbW92ZVVwOiBtb3ZlVXAsXG4gICAgbW92ZURvd246IG1vdmVEb3duLFxuICAgIG1vdmVSaWdodDogbW92ZVJpZ2h0LFxuICAgIG1vdmVMZWZ0OiBtb3ZlTGVmdCxcbiAgICB3aW5kb3dTY3JvbGxNb3ZlOiB3aW5kb3dTY3JvbGxNb3ZlLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59KTtcblxudmFyIHNsb3BweUNsaWNrVGhyZXNob2xkID0gNTtcbnZhciBpc1Nsb3BweUNsaWNrVGhyZXNob2xkRXhjZWVkZWQgPSAoZnVuY3Rpb24gKG9yaWdpbmFsLCBjdXJyZW50KSB7XG4gIHJldHVybiBNYXRoLmFicyhjdXJyZW50LnggLSBvcmlnaW5hbC54KSA+PSBzbG9wcHlDbGlja1RocmVzaG9sZCB8fCBNYXRoLmFicyhjdXJyZW50LnkgLSBvcmlnaW5hbC55KSA+PSBzbG9wcHlDbGlja1RocmVzaG9sZDtcbn0pO1xuXG52YXIgdGFiID0gOTtcbnZhciBlbnRlciA9IDEzO1xudmFyIGVzY2FwZSA9IDI3O1xudmFyIHNwYWNlID0gMzI7XG52YXIgcGFnZVVwID0gMzM7XG52YXIgcGFnZURvd24gPSAzNDtcbnZhciBlbmQgPSAzNTtcbnZhciBob21lID0gMzY7XG52YXIgYXJyb3dMZWZ0ID0gMzc7XG52YXIgYXJyb3dVcCA9IDM4O1xudmFyIGFycm93UmlnaHQgPSAzOTtcbnZhciBhcnJvd0Rvd24gPSA0MDtcblxudmFyIF9wcmV2ZW50ZWRLZXlzO1xudmFyIHByZXZlbnRlZEtleXMgPSAoX3ByZXZlbnRlZEtleXMgPSB7fSwgX3ByZXZlbnRlZEtleXNbZW50ZXJdID0gdHJ1ZSwgX3ByZXZlbnRlZEtleXNbdGFiXSA9IHRydWUsIF9wcmV2ZW50ZWRLZXlzKTtcbnZhciBwcmV2ZW50U3RhbmRhcmRLZXlFdmVudHMgPSAoZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmIChwcmV2ZW50ZWRLZXlzW2V2ZW50LmtleUNvZGVdKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufSk7XG5cbnZhciBnZXRPcHRpb25zID0gZnVuY3Rpb24gZ2V0T3B0aW9ucyhzaGFyZWQsIGZyb21CaW5kaW5nKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgc2hhcmVkLCBmcm9tQmluZGluZyk7XG59O1xuXG52YXIgYmluZEV2ZW50cyA9IGZ1bmN0aW9uIGJpbmRFdmVudHMoZWwsIGJpbmRpbmdzLCBzaGFyZWRPcHRpb25zKSB7XG4gIGJpbmRpbmdzLmZvckVhY2goZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGdldE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgYmluZGluZy5vcHRpb25zKTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGJpbmRpbmcuZXZlbnROYW1lLCBiaW5kaW5nLmZuLCBvcHRpb25zKTtcbiAgfSk7XG59O1xudmFyIHVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uIHVuYmluZEV2ZW50cyhlbCwgYmluZGluZ3MsIHNoYXJlZE9wdGlvbnMpIHtcbiAgYmluZGluZ3MuZm9yRWFjaChmdW5jdGlvbiAoYmluZGluZykge1xuICAgIHZhciBvcHRpb25zID0gZ2V0T3B0aW9ucyhzaGFyZWRPcHRpb25zLCBiaW5kaW5nLm9wdGlvbnMpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoYmluZGluZy5ldmVudE5hbWUsIGJpbmRpbmcuZm4sIG9wdGlvbnMpO1xuICB9KTtcbn07XG5cbnZhciBzaGFyZWRPcHRpb25zID0ge1xuICBjYXB0dXJlOiB0cnVlXG59O1xudmFyIGNyZWF0ZVBvc3REcmFnRXZlbnRQcmV2ZW50ZXIgPSAoZnVuY3Rpb24gKGdldFdpbmRvdykge1xuICB2YXIgaXNCb3VuZCA9IGZhbHNlO1xuXG4gIHZhciBiaW5kID0gZnVuY3Rpb24gYmluZCgpIHtcbiAgICBpZiAoaXNCb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlzQm91bmQgPSB0cnVlO1xuICAgIGJpbmRFdmVudHMoZ2V0V2luZG93KCksIHBvaW50ZXJFdmVudHMsIHNoYXJlZE9wdGlvbnMpO1xuICB9O1xuXG4gIHZhciB1bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgaWYgKCFpc0JvdW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaXNCb3VuZCA9IGZhbHNlO1xuICAgIHVuYmluZEV2ZW50cyhnZXRXaW5kb3coKSwgcG9pbnRlckV2ZW50cywgc2hhcmVkT3B0aW9ucyk7XG4gIH07XG5cbiAgdmFyIHBvaW50ZXJFdmVudHMgPSBbe1xuICAgIGV2ZW50TmFtZTogJ2NsaWNrJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB1bmJpbmQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdtb3VzZWRvd24nLFxuICAgIGZuOiB1bmJpbmRcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3RvdWNoc3RhcnQnLFxuICAgIGZuOiB1bmJpbmRcbiAgfV07XG5cbiAgdmFyIHByZXZlbnROZXh0ID0gZnVuY3Rpb24gcHJldmVudE5leHQoKSB7XG4gICAgaWYgKGlzQm91bmQpIHtcbiAgICAgIHVuYmluZCgpO1xuICAgIH1cblxuICAgIGJpbmQoKTtcbiAgfTtcblxuICB2YXIgcHJldmVudGVyID0ge1xuICAgIHByZXZlbnROZXh0OiBwcmV2ZW50TmV4dCxcbiAgICBhYm9ydDogdW5iaW5kXG4gIH07XG4gIHJldHVybiBwcmV2ZW50ZXI7XG59KTtcblxudmFyIGNyZWF0ZUV2ZW50TWFyc2hhbCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBpc01vdXNlRG93bkhhbmRsZWQgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlID0gZnVuY3Rpb24gaGFuZGxlKCkge1xuICAgICEhaXNNb3VzZURvd25IYW5kbGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGhhbmRsZSBtb3VzZSBkb3duIGFzIGl0IGlzIGFscmVhZHkgaGFuZGxlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpc01vdXNlRG93bkhhbmRsZWQgPSB0cnVlO1xuICB9O1xuXG4gIHZhciBpc0hhbmRsZWQgPSBmdW5jdGlvbiBpc0hhbmRsZWQoKSB7XG4gICAgcmV0dXJuIGlzTW91c2VEb3duSGFuZGxlZDtcbiAgfTtcblxuICB2YXIgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBpc01vdXNlRG93bkhhbmRsZWQgPSBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGhhbmRsZTogaGFuZGxlLFxuICAgIGlzSGFuZGxlZDogaXNIYW5kbGVkLFxuICAgIHJlc2V0OiByZXNldFxuICB9O1xufSk7XG5cbnZhciBzdXBwb3J0ZWRFdmVudE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBiYXNlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YXIgY2FuZGlkYXRlcyA9IFtiYXNlLCBcIm1zXCIgKyBiYXNlLCBcIndlYmtpdFwiICsgYmFzZSwgXCJtb3pcIiArIGJhc2UsIFwib1wiICsgYmFzZV07XG4gIHZhciBzdXBwb3J0ZWQgPSBmaW5kKGNhbmRpZGF0ZXMsIGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICByZXR1cm4gXCJvblwiICsgZXZlbnROYW1lIGluIGRvY3VtZW50O1xuICB9KTtcbiAgcmV0dXJuIHN1cHBvcnRlZCB8fCBiYXNlO1xufSgpO1xuXG52YXIgcHJpbWFyeUJ1dHRvbiA9IDA7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG52YXIgbW91c2VEb3duTWFyc2hhbCA9IGNyZWF0ZUV2ZW50TWFyc2hhbCgpO1xudmFyIGNyZWF0ZU1vdXNlU2Vuc29yID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjYWxsYmFja3MgPSBfcmVmLmNhbGxiYWNrcyxcbiAgICAgIGdldFdpbmRvdyA9IF9yZWYuZ2V0V2luZG93LFxuICAgICAgY2FuU3RhcnRDYXB0dXJpbmcgPSBfcmVmLmNhblN0YXJ0Q2FwdHVyaW5nO1xuICB2YXIgc3RhdGUgPSB7XG4gICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgcGVuZGluZzogbnVsbFxuICB9O1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5ld1N0YXRlKSB7XG4gICAgc3RhdGUgPSBuZXdTdGF0ZTtcbiAgfTtcblxuICB2YXIgaXNEcmFnZ2luZyA9IGZ1bmN0aW9uIGlzRHJhZ2dpbmcoKSB7XG4gICAgcmV0dXJuIHN0YXRlLmlzRHJhZ2dpbmc7XG4gIH07XG5cbiAgdmFyIGlzQ2FwdHVyaW5nID0gZnVuY3Rpb24gaXNDYXB0dXJpbmcoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oc3RhdGUucGVuZGluZyB8fCBzdGF0ZS5pc0RyYWdnaW5nKTtcbiAgfTtcblxuICB2YXIgc2NoZWR1bGUgPSBjcmVhdGVTY2hlZHVsZXIoY2FsbGJhY2tzKTtcbiAgdmFyIHBvc3REcmFnRXZlbnRQcmV2ZW50ZXIgPSBjcmVhdGVQb3N0RHJhZ0V2ZW50UHJldmVudGVyKGdldFdpbmRvdyk7XG5cbiAgdmFyIHN0YXJ0RHJhZ2dpbmcgPSBmdW5jdGlvbiBzdGFydERyYWdnaW5nKGZuKSB7XG4gICAgaWYgKGZuID09PSB2b2lkIDApIHtcbiAgICAgIGZuID0gbm9vcDtcbiAgICB9XG5cbiAgICBzZXRTdGF0ZSh7XG4gICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgaXNEcmFnZ2luZzogdHJ1ZVxuICAgIH0pO1xuICAgIGZuKCk7XG4gIH07XG5cbiAgdmFyIHN0b3BEcmFnZ2luZyA9IGZ1bmN0aW9uIHN0b3BEcmFnZ2luZyhmbiwgc2hvdWxkQmxvY2tDbGljaykge1xuICAgIGlmIChmbiA9PT0gdm9pZCAwKSB7XG4gICAgICBmbiA9IG5vb3A7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZEJsb2NrQ2xpY2sgPT09IHZvaWQgMCkge1xuICAgICAgc2hvdWxkQmxvY2tDbGljayA9IHRydWU7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUuY2FuY2VsKCk7XG4gICAgdW5iaW5kV2luZG93RXZlbnRzKCk7XG4gICAgbW91c2VEb3duTWFyc2hhbC5yZXNldCgpO1xuXG4gICAgaWYgKHNob3VsZEJsb2NrQ2xpY2spIHtcbiAgICAgIHBvc3REcmFnRXZlbnRQcmV2ZW50ZXIucHJldmVudE5leHQoKTtcbiAgICB9XG5cbiAgICBzZXRTdGF0ZSh7XG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICAgIHBlbmRpbmc6IG51bGxcbiAgICB9KTtcbiAgICBmbigpO1xuICB9O1xuXG4gIHZhciBzdGFydFBlbmRpbmdEcmFnID0gZnVuY3Rpb24gc3RhcnRQZW5kaW5nRHJhZyhwb2ludCkge1xuICAgIHNldFN0YXRlKHtcbiAgICAgIHBlbmRpbmc6IHBvaW50LFxuICAgICAgaXNEcmFnZ2luZzogZmFsc2VcbiAgICB9KTtcbiAgICBiaW5kV2luZG93RXZlbnRzKCk7XG4gIH07XG5cbiAgdmFyIHN0b3BQZW5kaW5nRHJhZyA9IGZ1bmN0aW9uIHN0b3BQZW5kaW5nRHJhZygpIHtcbiAgICBzdG9wRHJhZ2dpbmcobm9vcCwgZmFsc2UpO1xuICB9O1xuXG4gIHZhciBraWxsID0gZnVuY3Rpb24ga2lsbChmbikge1xuICAgIGlmIChmbiA9PT0gdm9pZCAwKSB7XG4gICAgICBmbiA9IG5vb3A7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBlbmRpbmcpIHtcbiAgICAgIHN0b3BQZW5kaW5nRHJhZygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICBzdG9wRHJhZ2dpbmcoZm4pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAga2lsbCgpO1xuICAgIHBvc3REcmFnRXZlbnRQcmV2ZW50ZXIuYWJvcnQoKTtcbiAgfTtcblxuICB2YXIgY2FuY2VsID0gZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGtpbGwoY2FsbGJhY2tzLm9uQ2FuY2VsKTtcbiAgfTtcblxuICB2YXIgd2luZG93QmluZGluZ3MgPSBbe1xuICAgIGV2ZW50TmFtZTogJ21vdXNlbW92ZScsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICB2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uLFxuICAgICAgICAgIGNsaWVudFggPSBldmVudC5jbGllbnRYLFxuICAgICAgICAgIGNsaWVudFkgPSBldmVudC5jbGllbnRZO1xuXG4gICAgICBpZiAoYnV0dG9uICE9PSBwcmltYXJ5QnV0dG9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICB4OiBjbGllbnRYLFxuICAgICAgICB5OiBjbGllbnRZXG4gICAgICB9O1xuXG4gICAgICBpZiAoc3RhdGUuaXNEcmFnZ2luZykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzY2hlZHVsZS5tb3ZlKHBvaW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN0YXRlLnBlbmRpbmcpIHtcbiAgICAgICAgc3RvcFBlbmRpbmdEcmFnKCk7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHRoZXJlIHRvIGJlIGFuIGFjdGl2ZSBvciBwZW5kaW5nIGRyYWcgd2hlbiB3aW5kb3cgbW91c2Vtb3ZlIGV2ZW50IGlzIHJlY2VpdmVkJykgOiBpbnZhcmlhbnQoZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU2xvcHB5Q2xpY2tUaHJlc2hvbGRFeGNlZWRlZChzdGF0ZS5wZW5kaW5nLCBwb2ludCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc3RhcnREcmFnZ2luZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja3Mub25MaWZ0KHtcbiAgICAgICAgICBjbGllbnRTZWxlY3Rpb246IHBvaW50LFxuICAgICAgICAgIG1vdmVtZW50TW9kZTogJ0ZMVUlEJ1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ21vdXNldXAnLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgaWYgKHN0YXRlLnBlbmRpbmcpIHtcbiAgICAgICAgc3RvcFBlbmRpbmdEcmFnKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHN0b3BEcmFnZ2luZyhjYWxsYmFja3Mub25Ecm9wKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdtb3VzZWRvd24nLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgaWYgKHN0YXRlLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgc3RvcERyYWdnaW5nKGNhbGxiYWNrcy5vbkNhbmNlbCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAna2V5ZG93bicsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoIXN0YXRlLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGVzY2FwZSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwcmV2ZW50U3RhbmRhcmRLZXlFdmVudHMoZXZlbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3Jlc2l6ZScsXG4gICAgZm46IGNhbmNlbFxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAnc2Nyb2xsJyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9LFxuICAgIGZuOiBmdW5jdGlvbiBmbigpIHtcbiAgICAgIGlmIChzdGF0ZS5wZW5kaW5nKSB7XG4gICAgICAgIHN0b3BQZW5kaW5nRHJhZygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLndpbmRvd1Njcm9sbE1vdmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd3ZWJraXRtb3VzZWZvcmNlY2hhbmdlZCcsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQud2Via2l0Rm9yY2UgPT0gbnVsbCB8fCBNb3VzZUV2ZW50LldFQktJVF9GT1JDRV9BVF9GT1JDRV9NT1VTRV9ET1dOID09IG51bGwpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygnaGFuZGxpbmcgYSBtb3VzZSBmb3JjZSBjaGFuZ2VkIGV2ZW50IHdoZW4gaXQgaXMgbm90IHN1cHBvcnRlZCcpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBmb3JjZVByZXNzVGhyZXNob2xkID0gTW91c2VFdmVudC5XRUJLSVRfRk9SQ0VfQVRfRk9SQ0VfTU9VU0VfRE9XTjtcbiAgICAgIHZhciBpc0ZvcmNlUHJlc3NpbmcgPSBldmVudC53ZWJraXRGb3JjZSA+PSBmb3JjZVByZXNzVGhyZXNob2xkO1xuXG4gICAgICBpZiAoaXNGb3JjZVByZXNzaW5nKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogc3VwcG9ydGVkRXZlbnROYW1lLFxuICAgIGZuOiBjYW5jZWxcbiAgfV07XG5cbiAgdmFyIGJpbmRXaW5kb3dFdmVudHMgPSBmdW5jdGlvbiBiaW5kV2luZG93RXZlbnRzKCkge1xuICAgIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICBiaW5kRXZlbnRzKHdpbiwgd2luZG93QmluZGluZ3MsIHtcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgdW5iaW5kV2luZG93RXZlbnRzID0gZnVuY3Rpb24gdW5iaW5kV2luZG93RXZlbnRzKCkge1xuICAgIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICB1bmJpbmRFdmVudHMod2luLCB3aW5kb3dCaW5kaW5ncywge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBvbk1vdXNlRG93biA9IGZ1bmN0aW9uIG9uTW91c2VEb3duKGV2ZW50KSB7XG4gICAgaWYgKG1vdXNlRG93bk1hcnNoYWwuaXNIYW5kbGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAhIWlzQ2FwdHVyaW5nKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgbm90IGJlIGFibGUgdG8gcGVyZm9ybSBhIG1vdXNlIGRvd24gd2hpbGUgYSBkcmFnIG9yIHBlbmRpbmcgZHJhZyBpcyBvY2N1cnJpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIWNhblN0YXJ0Q2FwdHVyaW5nKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5idXR0b24gIT09IHByaW1hcnlCdXR0b24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmFsdEtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1vdXNlRG93bk1hcnNoYWwuaGFuZGxlKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgcG9pbnQgPSB7XG4gICAgICB4OiBldmVudC5jbGllbnRYLFxuICAgICAgeTogZXZlbnQuY2xpZW50WVxuICAgIH07XG4gICAgc3RhcnRQZW5kaW5nRHJhZyhwb2ludCk7XG4gIH07XG5cbiAgdmFyIHNlbnNvciA9IHtcbiAgICBvbk1vdXNlRG93bjogb25Nb3VzZURvd24sXG4gICAga2lsbDoga2lsbCxcbiAgICBpc0NhcHR1cmluZzogaXNDYXB0dXJpbmcsXG4gICAgaXNEcmFnZ2luZzogaXNEcmFnZ2luZyxcbiAgICB1bm1vdW50OiB1bm1vdW50XG4gIH07XG4gIHJldHVybiBzZW5zb3I7XG59KTtcblxudmFyIGdldEJvcmRlckJveENlbnRlclBvc2l0aW9uID0gKGZ1bmN0aW9uIChlbCkge1xuICByZXR1cm4gZ2V0UmVjdChlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkuY2VudGVyO1xufSk7XG5cbnZhciBfc2Nyb2xsSnVtcEtleXM7XG52YXIgc2Nyb2xsSnVtcEtleXMgPSAoX3Njcm9sbEp1bXBLZXlzID0ge30sIF9zY3JvbGxKdW1wS2V5c1twYWdlRG93bl0gPSB0cnVlLCBfc2Nyb2xsSnVtcEtleXNbcGFnZVVwXSA9IHRydWUsIF9zY3JvbGxKdW1wS2V5c1tob21lXSA9IHRydWUsIF9zY3JvbGxKdW1wS2V5c1tlbmRdID0gdHJ1ZSwgX3Njcm9sbEp1bXBLZXlzKTtcblxudmFyIG5vb3AkMSA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxudmFyIGNyZWF0ZUtleWJvYXJkU2Vuc29yID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjYWxsYmFja3MgPSBfcmVmLmNhbGxiYWNrcyxcbiAgICAgIGdldFdpbmRvdyA9IF9yZWYuZ2V0V2luZG93LFxuICAgICAgZ2V0RHJhZ2dhYmxlUmVmID0gX3JlZi5nZXREcmFnZ2FibGVSZWYsXG4gICAgICBjYW5TdGFydENhcHR1cmluZyA9IF9yZWYuY2FuU3RhcnRDYXB0dXJpbmc7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICBpc0RyYWdnaW5nOiBmYWxzZVxuICB9O1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5ld1N0YXRlKSB7XG4gICAgc3RhdGUgPSBuZXdTdGF0ZTtcbiAgfTtcblxuICB2YXIgc3RhcnREcmFnZ2luZyA9IGZ1bmN0aW9uIHN0YXJ0RHJhZ2dpbmcoZm4pIHtcbiAgICBpZiAoZm4gPT09IHZvaWQgMCkge1xuICAgICAgZm4gPSBub29wJDE7XG4gICAgfVxuXG4gICAgc2V0U3RhdGUoe1xuICAgICAgaXNEcmFnZ2luZzogdHJ1ZVxuICAgIH0pO1xuICAgIGJpbmRXaW5kb3dFdmVudHMoKTtcbiAgICBmbigpO1xuICB9O1xuXG4gIHZhciBzdG9wRHJhZ2dpbmcgPSBmdW5jdGlvbiBzdG9wRHJhZ2dpbmcocG9zdERyYWdGbikge1xuICAgIGlmIChwb3N0RHJhZ0ZuID09PSB2b2lkIDApIHtcbiAgICAgIHBvc3REcmFnRm4gPSBub29wJDE7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUuY2FuY2VsKCk7XG4gICAgdW5iaW5kV2luZG93RXZlbnRzKCk7XG4gICAgc2V0U3RhdGUoe1xuICAgICAgaXNEcmFnZ2luZzogZmFsc2VcbiAgICB9KTtcbiAgICBwb3N0RHJhZ0ZuKCk7XG4gIH07XG5cbiAgdmFyIGtpbGwgPSBmdW5jdGlvbiBraWxsKCkge1xuICAgIGlmIChzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICBzdG9wRHJhZ2dpbmcoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBzdG9wRHJhZ2dpbmcoY2FsbGJhY2tzLm9uQ2FuY2VsKTtcbiAgfTtcblxuICB2YXIgaXNEcmFnZ2luZyA9IGZ1bmN0aW9uIGlzRHJhZ2dpbmcoKSB7XG4gICAgcmV0dXJuIHN0YXRlLmlzRHJhZ2dpbmc7XG4gIH07XG5cbiAgdmFyIHNjaGVkdWxlID0gY3JlYXRlU2NoZWR1bGVyKGNhbGxiYWNrcyk7XG5cbiAgdmFyIG9uS2V5RG93biA9IGZ1bmN0aW9uIG9uS2V5RG93bihldmVudCkge1xuICAgIGlmICghaXNEcmFnZ2luZygpKSB7XG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghY2FuU3RhcnRDYXB0dXJpbmcoZXZlbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT09IHNwYWNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiA9IGdldERyYWdnYWJsZVJlZigpO1xuICAgICAgIXJlZiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdGFydCBhIGtleWJvYXJkIGRyYWcgd2l0aG91dCBhIGRyYWdnYWJsZSByZWYnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgY2VudGVyID0gZ2V0Qm9yZGVyQm94Q2VudGVyUG9zaXRpb24ocmVmKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzdGFydERyYWdnaW5nKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrcy5vbkxpZnQoe1xuICAgICAgICAgIGNsaWVudFNlbGVjdGlvbjogY2VudGVyLFxuICAgICAgICAgIG1vdmVtZW50TW9kZTogJ1NOQVAnXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGVzY2FwZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNhbmNlbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5rZXlDb2RlID09PSBzcGFjZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHN0b3BEcmFnZ2luZyhjYWxsYmFja3Mub25Ecm9wKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gYXJyb3dEb3duKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2NoZWR1bGUubW92ZURvd24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gYXJyb3dVcCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNjaGVkdWxlLm1vdmVVcCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5rZXlDb2RlID09PSBhcnJvd1JpZ2h0KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2NoZWR1bGUubW92ZVJpZ2h0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGFycm93TGVmdCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNjaGVkdWxlLm1vdmVMZWZ0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbEp1bXBLZXlzW2V2ZW50LmtleUNvZGVdKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByZXZlbnRTdGFuZGFyZEtleUV2ZW50cyhldmVudCk7XG4gIH07XG5cbiAgdmFyIHdpbmRvd0JpbmRpbmdzID0gW3tcbiAgICBldmVudE5hbWU6ICdtb3VzZWRvd24nLFxuICAgIGZuOiBjYW5jZWxcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ21vdXNldXAnLFxuICAgIGZuOiBjYW5jZWxcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ2NsaWNrJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd0b3VjaHN0YXJ0JyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdyZXNpemUnLFxuICAgIGZuOiBjYW5jZWxcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3doZWVsJyxcbiAgICBmbjogY2FuY2VsLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdzY3JvbGwnLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSxcbiAgICBmbjogY2FsbGJhY2tzLm9uV2luZG93U2Nyb2xsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6IHN1cHBvcnRlZEV2ZW50TmFtZSxcbiAgICBmbjogY2FuY2VsXG4gIH1dO1xuXG4gIHZhciBiaW5kV2luZG93RXZlbnRzID0gZnVuY3Rpb24gYmluZFdpbmRvd0V2ZW50cygpIHtcbiAgICBiaW5kRXZlbnRzKGdldFdpbmRvdygpLCB3aW5kb3dCaW5kaW5ncywge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciB1bmJpbmRXaW5kb3dFdmVudHMgPSBmdW5jdGlvbiB1bmJpbmRXaW5kb3dFdmVudHMoKSB7XG4gICAgdW5iaW5kRXZlbnRzKGdldFdpbmRvdygpLCB3aW5kb3dCaW5kaW5ncywge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzZW5zb3IgPSB7XG4gICAgb25LZXlEb3duOiBvbktleURvd24sXG4gICAga2lsbDoga2lsbCxcbiAgICBpc0RyYWdnaW5nOiBpc0RyYWdnaW5nLFxuICAgIGlzQ2FwdHVyaW5nOiBpc0RyYWdnaW5nLFxuICAgIHVubW91bnQ6IGtpbGxcbiAgfTtcbiAgcmV0dXJuIHNlbnNvcjtcbn0pO1xuXG52YXIgdGltZUZvckxvbmdQcmVzcyA9IDE1MDtcbnZhciBmb3JjZVByZXNzVGhyZXNob2xkID0gMC4xNTtcbnZhciB0b3VjaFN0YXJ0TWFyc2hhbCA9IGNyZWF0ZUV2ZW50TWFyc2hhbCgpO1xuXG52YXIgbm9vcCQyID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG52YXIgd2Via2l0SGFjayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0dWIgPSB7XG4gICAgcHJldmVudFRvdWNoTW92ZTogbm9vcCQyLFxuICAgIHJlbGVhc2VUb3VjaE1vdmU6IG5vb3AkMlxuICB9O1xuXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzdHViO1xuICB9XG5cbiAgaWYgKCEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSkge1xuICAgIHJldHVybiBzdHViO1xuICB9XG5cbiAgdmFyIGlzQmxvY2tpbmcgPSBmYWxzZTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICghaXNCbG9ja2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmU6IGZhbHNlXG4gIH0pO1xuXG4gIHZhciBwcmV2ZW50VG91Y2hNb3ZlID0gZnVuY3Rpb24gcHJldmVudFRvdWNoTW92ZSgpIHtcbiAgICBpc0Jsb2NraW5nID0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgcmVsZWFzZVRvdWNoTW92ZSA9IGZ1bmN0aW9uIHJlbGVhc2VUb3VjaE1vdmUoKSB7XG4gICAgaXNCbG9ja2luZyA9IGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcHJldmVudFRvdWNoTW92ZTogcHJldmVudFRvdWNoTW92ZSxcbiAgICByZWxlYXNlVG91Y2hNb3ZlOiByZWxlYXNlVG91Y2hNb3ZlXG4gIH07XG59KCk7XG5cbnZhciBpbml0aWFsID0ge1xuICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgcGVuZGluZzogbnVsbCxcbiAgaGFzTW92ZWQ6IGZhbHNlLFxuICBsb25nUHJlc3NUaW1lcklkOiBudWxsXG59O1xudmFyIGNyZWF0ZVRvdWNoU2Vuc29yID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjYWxsYmFja3MgPSBfcmVmLmNhbGxiYWNrcyxcbiAgICAgIGdldFdpbmRvdyA9IF9yZWYuZ2V0V2luZG93LFxuICAgICAgY2FuU3RhcnRDYXB0dXJpbmcgPSBfcmVmLmNhblN0YXJ0Q2FwdHVyaW5nO1xuICB2YXIgc3RhdGUgPSBpbml0aWFsO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKHBhcnRpYWwpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwgcGFydGlhbCk7XG4gIH07XG5cbiAgdmFyIGlzRHJhZ2dpbmcgPSBmdW5jdGlvbiBpc0RyYWdnaW5nKCkge1xuICAgIHJldHVybiBzdGF0ZS5pc0RyYWdnaW5nO1xuICB9O1xuXG4gIHZhciBpc0NhcHR1cmluZyA9IGZ1bmN0aW9uIGlzQ2FwdHVyaW5nKCkge1xuICAgIHJldHVybiBCb29sZWFuKHN0YXRlLnBlbmRpbmcgfHwgc3RhdGUuaXNEcmFnZ2luZyB8fCBzdGF0ZS5sb25nUHJlc3NUaW1lcklkKTtcbiAgfTtcblxuICB2YXIgc2NoZWR1bGUgPSBjcmVhdGVTY2hlZHVsZXIoY2FsbGJhY2tzKTtcbiAgdmFyIHBvc3REcmFnRXZlbnRQcmV2ZW50ZXIgPSBjcmVhdGVQb3N0RHJhZ0V2ZW50UHJldmVudGVyKGdldFdpbmRvdyk7XG5cbiAgdmFyIHN0YXJ0RHJhZ2dpbmcgPSBmdW5jdGlvbiBzdGFydERyYWdnaW5nKCkge1xuICAgIHZhciBwZW5kaW5nID0gc3RhdGUucGVuZGluZztcblxuICAgIGlmICghcGVuZGluZykge1xuICAgICAgc3RvcFBlbmRpbmdEcmFnKCk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdjYW5ub3Qgc3RhcnQgYSB0b3VjaCBkcmFnIHdpdGhvdXQgYSBwZW5kaW5nIHBvc2l0aW9uJykgOiBpbnZhcmlhbnQoZmFsc2UpO1xuICAgIH1cblxuICAgIHNldFN0YXRlKHtcbiAgICAgIGlzRHJhZ2dpbmc6IHRydWUsXG4gICAgICBoYXNNb3ZlZDogZmFsc2UsXG4gICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgbG9uZ1ByZXNzVGltZXJJZDogbnVsbFxuICAgIH0pO1xuICAgIGNhbGxiYWNrcy5vbkxpZnQoe1xuICAgICAgY2xpZW50U2VsZWN0aW9uOiBwZW5kaW5nLFxuICAgICAgbW92ZW1lbnRNb2RlOiAnRkxVSUQnXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHN0b3BEcmFnZ2luZyA9IGZ1bmN0aW9uIHN0b3BEcmFnZ2luZyhmbikge1xuICAgIGlmIChmbiA9PT0gdm9pZCAwKSB7XG4gICAgICBmbiA9IG5vb3AkMjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS5jYW5jZWwoKTtcbiAgICB0b3VjaFN0YXJ0TWFyc2hhbC5yZXNldCgpO1xuICAgIHdlYmtpdEhhY2sucmVsZWFzZVRvdWNoTW92ZSgpO1xuICAgIHVuYmluZFdpbmRvd0V2ZW50cygpO1xuICAgIHBvc3REcmFnRXZlbnRQcmV2ZW50ZXIucHJldmVudE5leHQoKTtcbiAgICBzZXRTdGF0ZShpbml0aWFsKTtcbiAgICBmbigpO1xuICB9O1xuXG4gIHZhciBzdGFydFBlbmRpbmdEcmFnID0gZnVuY3Rpb24gc3RhcnRQZW5kaW5nRHJhZyhldmVudCkge1xuICAgIHZhciB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XG4gICAgdmFyIGNsaWVudFggPSB0b3VjaC5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gdG91Y2guY2xpZW50WTtcbiAgICB2YXIgcG9pbnQgPSB7XG4gICAgICB4OiBjbGllbnRYLFxuICAgICAgeTogY2xpZW50WVxuICAgIH07XG4gICAgdmFyIGxvbmdQcmVzc1RpbWVySWQgPSBzZXRUaW1lb3V0KHN0YXJ0RHJhZ2dpbmcsIHRpbWVGb3JMb25nUHJlc3MpO1xuICAgIHNldFN0YXRlKHtcbiAgICAgIGxvbmdQcmVzc1RpbWVySWQ6IGxvbmdQcmVzc1RpbWVySWQsXG4gICAgICBwZW5kaW5nOiBwb2ludCxcbiAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgaGFzTW92ZWQ6IGZhbHNlXG4gICAgfSk7XG4gICAgYmluZFdpbmRvd0V2ZW50cygpO1xuICB9O1xuXG4gIHZhciBzdG9wUGVuZGluZ0RyYWcgPSBmdW5jdGlvbiBzdG9wUGVuZGluZ0RyYWcoKSB7XG4gICAgaWYgKHN0YXRlLmxvbmdQcmVzc1RpbWVySWQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzdGF0ZS5sb25nUHJlc3NUaW1lcklkKTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS5jYW5jZWwoKTtcbiAgICB0b3VjaFN0YXJ0TWFyc2hhbC5yZXNldCgpO1xuICAgIHdlYmtpdEhhY2sucmVsZWFzZVRvdWNoTW92ZSgpO1xuICAgIHVuYmluZFdpbmRvd0V2ZW50cygpO1xuICAgIHNldFN0YXRlKGluaXRpYWwpO1xuICB9O1xuXG4gIHZhciBraWxsID0gZnVuY3Rpb24ga2lsbChmbikge1xuICAgIGlmIChmbiA9PT0gdm9pZCAwKSB7XG4gICAgICBmbiA9IG5vb3AkMjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGVuZGluZykge1xuICAgICAgc3RvcFBlbmRpbmdEcmFnKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmlzRHJhZ2dpbmcpIHtcbiAgICAgIHN0b3BEcmFnZ2luZyhmbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciB1bm1vdW50ID0gZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICBraWxsKCk7XG4gICAgcG9zdERyYWdFdmVudFByZXZlbnRlci5hYm9ydCgpO1xuICB9O1xuXG4gIHZhciBjYW5jZWwgPSBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAga2lsbChjYWxsYmFja3Mub25DYW5jZWwpO1xuICB9O1xuXG4gIHZhciB3aW5kb3dCaW5kaW5ncyA9IFt7XG4gICAgZXZlbnROYW1lOiAndG91Y2htb3ZlJyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0sXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoIXN0YXRlLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgc3RvcFBlbmRpbmdEcmFnKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzdGF0ZS5oYXNNb3ZlZCkge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgaGFzTW92ZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBfZXZlbnQkdG91Y2hlcyQgPSBldmVudC50b3VjaGVzWzBdLFxuICAgICAgICAgIGNsaWVudFggPSBfZXZlbnQkdG91Y2hlcyQuY2xpZW50WCxcbiAgICAgICAgICBjbGllbnRZID0gX2V2ZW50JHRvdWNoZXMkLmNsaWVudFk7XG4gICAgICB2YXIgcG9pbnQgPSB7XG4gICAgICAgIHg6IGNsaWVudFgsXG4gICAgICAgIHk6IGNsaWVudFlcbiAgICAgIH07XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2NoZWR1bGUubW92ZShwb2ludCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAndG91Y2hlbmQnLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgaWYgKCFzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICAgIHN0b3BQZW5kaW5nRHJhZygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzdG9wRHJhZ2dpbmcoY2FsbGJhY2tzLm9uRHJvcCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAndG91Y2hjYW5jZWwnLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgaWYgKCFzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICAgIHN0b3BQZW5kaW5nRHJhZygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzdG9wRHJhZ2dpbmcoY2FsbGJhY2tzLm9uQ2FuY2VsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd0b3VjaHN0YXJ0JyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdvcmllbnRhdGlvbmNoYW5nZScsXG4gICAgZm46IGNhbmNlbFxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAncmVzaXplJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdzY3JvbGwnLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0sXG4gICAgZm46IGZ1bmN0aW9uIGZuKCkge1xuICAgICAgaWYgKHN0YXRlLnBlbmRpbmcpIHtcbiAgICAgICAgc3RvcFBlbmRpbmdEcmFnKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUud2luZG93U2Nyb2xsTW92ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ2NvbnRleHRtZW51JyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAna2V5ZG93bicsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoIXN0YXRlLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGVzY2FwZSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBjYW5jZWwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd0b3VjaGZvcmNlY2hhbmdlJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIGlmIChzdGF0ZS5oYXNNb3ZlZCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XG5cbiAgICAgIGlmICh0b3VjaC5mb3JjZSA+PSBmb3JjZVByZXNzVGhyZXNob2xkKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogc3VwcG9ydGVkRXZlbnROYW1lLFxuICAgIGZuOiBjYW5jZWxcbiAgfV07XG5cbiAgdmFyIGJpbmRXaW5kb3dFdmVudHMgPSBmdW5jdGlvbiBiaW5kV2luZG93RXZlbnRzKCkge1xuICAgIGJpbmRFdmVudHMoZ2V0V2luZG93KCksIHdpbmRvd0JpbmRpbmdzLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVuYmluZFdpbmRvd0V2ZW50cyA9IGZ1bmN0aW9uIHVuYmluZFdpbmRvd0V2ZW50cygpIHtcbiAgICB1bmJpbmRFdmVudHMoZ2V0V2luZG93KCksIHdpbmRvd0JpbmRpbmdzLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIG9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICAgIGlmICh0b3VjaFN0YXJ0TWFyc2hhbC5pc0hhbmRsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICEhaXNDYXB0dXJpbmcoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBub3QgYmUgYWJsZSB0byBwZXJmb3JtIGEgdG91Y2ggc3RhcnQgd2hpbGUgYSBkcmFnIG9yIHBlbmRpbmcgZHJhZyBpcyBvY2N1cnJpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIWNhblN0YXJ0Q2FwdHVyaW5nKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRvdWNoU3RhcnRNYXJzaGFsLmhhbmRsZSgpO1xuICAgIHdlYmtpdEhhY2sucHJldmVudFRvdWNoTW92ZSgpO1xuICAgIHN0YXJ0UGVuZGluZ0RyYWcoZXZlbnQpO1xuICB9O1xuXG4gIHZhciBzZW5zb3IgPSB7XG4gICAgb25Ub3VjaFN0YXJ0OiBvblRvdWNoU3RhcnQsXG4gICAga2lsbDoga2lsbCxcbiAgICBpc0NhcHR1cmluZzogaXNDYXB0dXJpbmcsXG4gICAgaXNEcmFnZ2luZzogaXNEcmFnZ2luZyxcbiAgICB1bm1vdW50OiB1bm1vdW50XG4gIH07XG4gIHJldHVybiBzZW5zb3I7XG59KTtcblxudmFyIF9EcmFnSGFuZGxlJGNvbnRleHRUeTtcblxudmFyIHByZXZlbnRIdG1sNURuZCA9IGZ1bmN0aW9uIHByZXZlbnRIdG1sNURuZChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufTtcblxudmFyIERyYWdIYW5kbGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcmFnSGFuZGxlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFnSGFuZGxlKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgX3RoaXMubW91c2VTZW5zb3IgPSB2b2lkIDA7XG4gICAgX3RoaXMua2V5Ym9hcmRTZW5zb3IgPSB2b2lkIDA7XG4gICAgX3RoaXMudG91Y2hTZW5zb3IgPSB2b2lkIDA7XG4gICAgX3RoaXMuc2Vuc29ycyA9IHZvaWQgMDtcbiAgICBfdGhpcy5zdHlsZUNvbnRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuY2FuTGlmdCA9IHZvaWQgMDtcbiAgICBfdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5sYXN0RHJhZ2dhYmxlUmVmID0gdm9pZCAwO1xuXG4gICAgX3RoaXMub25Gb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmlzRm9jdXNlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIF90aGlzLm9uQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbktleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5tb3VzZVNlbnNvci5pc0NhcHR1cmluZygpIHx8IF90aGlzLnRvdWNoU2Vuc29yLmlzQ2FwdHVyaW5nKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5rZXlib2FyZFNlbnNvci5vbktleURvd24oZXZlbnQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLmtleWJvYXJkU2Vuc29yLmlzQ2FwdHVyaW5nKCkgfHwgX3RoaXMubW91c2VTZW5zb3IuaXNDYXB0dXJpbmcoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm1vdXNlU2Vuc29yLm9uTW91c2VEb3duKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMubW91c2VTZW5zb3IuaXNDYXB0dXJpbmcoKSB8fCBfdGhpcy5rZXlib2FyZFNlbnNvci5pc0NhcHR1cmluZygpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMudG91Y2hTZW5zb3Iub25Ub3VjaFN0YXJ0KGV2ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY2FuU3RhcnRDYXB0dXJpbmcgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5pc0FueVNlbnNvckNhcHR1cmluZygpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5jYW5MaWZ0KF90aGlzLnByb3BzLmRyYWdnYWJsZUlkKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaG91bGRBbGxvd0RyYWdnaW5nRnJvbVRhcmdldChldmVudCwgX3RoaXMucHJvcHMpO1xuICAgIH07XG5cbiAgICBfdGhpcy5pc0FueVNlbnNvckNhcHR1cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zZW5zb3JzLnNvbWUoZnVuY3Rpb24gKHNlbnNvcikge1xuICAgICAgICByZXR1cm4gc2Vuc29yLmlzQ2FwdHVyaW5nKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0UHJvdmlkZWQgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChpc0VuYWJsZWQpIHtcbiAgICAgIGlmICghaXNFbmFibGVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvdmlkZWQgPSB7XG4gICAgICAgIG9uTW91c2VEb3duOiBfdGhpcy5vbk1vdXNlRG93bixcbiAgICAgICAgb25LZXlEb3duOiBfdGhpcy5vbktleURvd24sXG4gICAgICAgIG9uVG91Y2hTdGFydDogX3RoaXMub25Ub3VjaFN0YXJ0LFxuICAgICAgICBvbkZvY3VzOiBfdGhpcy5vbkZvY3VzLFxuICAgICAgICBvbkJsdXI6IF90aGlzLm9uQmx1cixcbiAgICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICAgICdkYXRhLXJlYWN0LWJlYXV0aWZ1bC1kbmQtZHJhZy1oYW5kbGUnOiBfdGhpcy5zdHlsZUNvbnRleHQsXG4gICAgICAgICdhcmlhLXJvbGVkZXNjcmlwdGlvbic6ICdEcmFnZ2FibGUgaXRlbS4gUHJlc3Mgc3BhY2UgYmFyIHRvIGxpZnQnLFxuICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICBvbkRyYWdTdGFydDogcHJldmVudEh0bWw1RG5kXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHByb3ZpZGVkO1xuICAgIH0pO1xuXG4gICAgdmFyIGdldFdpbmRvdyA9IGZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgICAgIHJldHVybiBnZXRXaW5kb3dGcm9tUmVmKF90aGlzLnByb3BzLmdldERyYWdnYWJsZVJlZigpKTtcbiAgICB9O1xuXG4gICAgdmFyIGFyZ3MgPSB7XG4gICAgICBjYWxsYmFja3M6IF90aGlzLnByb3BzLmNhbGxiYWNrcyxcbiAgICAgIGdldERyYWdnYWJsZVJlZjogX3RoaXMucHJvcHMuZ2V0RHJhZ2dhYmxlUmVmLFxuICAgICAgZ2V0V2luZG93OiBnZXRXaW5kb3csXG4gICAgICBjYW5TdGFydENhcHR1cmluZzogX3RoaXMuY2FuU3RhcnRDYXB0dXJpbmdcbiAgICB9O1xuICAgIF90aGlzLm1vdXNlU2Vuc29yID0gY3JlYXRlTW91c2VTZW5zb3IoYXJncyk7XG4gICAgX3RoaXMua2V5Ym9hcmRTZW5zb3IgPSBjcmVhdGVLZXlib2FyZFNlbnNvcihhcmdzKTtcbiAgICBfdGhpcy50b3VjaFNlbnNvciA9IGNyZWF0ZVRvdWNoU2Vuc29yKGFyZ3MpO1xuICAgIF90aGlzLnNlbnNvcnMgPSBbX3RoaXMubW91c2VTZW5zb3IsIF90aGlzLmtleWJvYXJkU2Vuc29yLCBfdGhpcy50b3VjaFNlbnNvcl07XG4gICAgX3RoaXMuc3R5bGVDb250ZXh0ID0gY29udGV4dFtzdHlsZUNvbnRleHRLZXldO1xuICAgIF90aGlzLmNhbkxpZnQgPSBjb250ZXh0W2NhbkxpZnRDb250ZXh0S2V5XTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJhZ0hhbmRsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIGRyYWdnYWJsZVJlZiA9IHRoaXMucHJvcHMuZ2V0RHJhZ2dhYmxlUmVmKCk7XG4gICAgdGhpcy5sYXN0RHJhZ2dhYmxlUmVmID0gZHJhZ2dhYmxlUmVmO1xuICAgICFkcmFnZ2FibGVSZWYgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZ2V0IGRyYWdnYWJsZSByZWYgZnJvbSBkcmFnIGhhbmRsZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmICghdGhpcy5wcm9wcy5pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZHJhZ0hhbmRsZVJlZiA9IGdldERyYWdIYW5kbGVSZWYoZHJhZ2dhYmxlUmVmKTtcbiAgICByZXRhaW5lci50cnlSZXN0b3JlRm9jdXModGhpcy5wcm9wcy5kcmFnZ2FibGVJZCwgZHJhZ0hhbmRsZVJlZik7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzLnByb3BzLmdldERyYWdnYWJsZVJlZigpO1xuXG4gICAgaWYgKHJlZiAhPT0gdGhpcy5sYXN0RHJhZ2dhYmxlUmVmKSB7XG4gICAgICB0aGlzLmxhc3REcmFnZ2FibGVSZWYgPSByZWY7XG5cbiAgICAgIGlmIChyZWYgJiYgdGhpcy5pc0ZvY3VzZWQgJiYgdGhpcy5wcm9wcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgZ2V0RHJhZ0hhbmRsZVJlZihyZWYpLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGlzQ2FwdHVyaW5nID0gdGhpcy5pc0FueVNlbnNvckNhcHR1cmluZygpO1xuXG4gICAgaWYgKCFpc0NhcHR1cmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpc0JlaW5nRGlzYWJsZWQgPSBwcmV2UHJvcHMuaXNFbmFibGVkICYmICF0aGlzLnByb3BzLmlzRW5hYmxlZDtcblxuICAgIGlmIChpc0JlaW5nRGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2Vuc29ycy5mb3JFYWNoKGZ1bmN0aW9uIChzZW5zb3IpIHtcbiAgICAgICAgaWYgKCFzZW5zb3IuaXNDYXB0dXJpbmcoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3YXNEcmFnZ2luZyA9IHNlbnNvci5pc0RyYWdnaW5nKCk7XG4gICAgICAgIHNlbnNvci5raWxsKCk7XG5cbiAgICAgICAgaWYgKHdhc0RyYWdnaW5nKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygnWW91IGhhdmUgZGlzYWJsZWQgZHJhZ2dpbmcgb24gYSBEcmFnZ2FibGUgd2hpbGUgaXQgd2FzIGRyYWdnaW5nLiBUaGUgZHJhZyBoYXMgYmVlbiBjYW5jZWxsZWQnKSA6IHZvaWQgMDtcblxuICAgICAgICAgIF90aGlzMi5wcm9wcy5jYWxsYmFja3Mub25DYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGlzRHJhZ0Fib3J0ZWQgPSBwcmV2UHJvcHMuaXNEcmFnZ2luZyAmJiAhdGhpcy5wcm9wcy5pc0RyYWdnaW5nO1xuXG4gICAgaWYgKGlzRHJhZ0Fib3J0ZWQpIHtcbiAgICAgIHRoaXMuc2Vuc29ycy5mb3JFYWNoKGZ1bmN0aW9uIChzZW5zb3IpIHtcbiAgICAgICAgaWYgKHNlbnNvci5pc0NhcHR1cmluZygpKSB7XG4gICAgICAgICAgc2Vuc29yLmtpbGwoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdGhpcy5zZW5zb3JzLmZvckVhY2goZnVuY3Rpb24gKHNlbnNvcikge1xuICAgICAgdmFyIHdhc0RyYWdnaW5nID0gc2Vuc29yLmlzRHJhZ2dpbmcoKTtcbiAgICAgIHNlbnNvci51bm1vdW50KCk7XG5cbiAgICAgIGlmICh3YXNEcmFnZ2luZykge1xuICAgICAgICBfdGhpczMucHJvcHMuY2FsbGJhY2tzLm9uQ2FuY2VsKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgc2hvdWxkUmV0YWluRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzMy5wcm9wcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzMy5pc0ZvY3VzZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMzLnByb3BzLmlzRHJhZ2dpbmcgfHwgX3RoaXMzLnByb3BzLmlzRHJvcEFuaW1hdGluZztcbiAgICB9KCk7XG5cbiAgICBpZiAoc2hvdWxkUmV0YWluRm9jdXMpIHtcbiAgICAgIHJldGFpbmVyLnJldGFpbih0aGlzLnByb3BzLmRyYWdnYWJsZUlkKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBpc0VuYWJsZWQgPSBfdGhpcyRwcm9wcy5pc0VuYWJsZWQ7XG4gICAgcmV0dXJuIGNoaWxkcmVuKHRoaXMuZ2V0UHJvdmlkZWQoaXNFbmFibGVkKSk7XG4gIH07XG5cbiAgcmV0dXJuIERyYWdIYW5kbGU7XG59KENvbXBvbmVudCk7XG5cbkRyYWdIYW5kbGUuY29udGV4dFR5cGVzID0gKF9EcmFnSGFuZGxlJGNvbnRleHRUeSA9IHt9LCBfRHJhZ0hhbmRsZSRjb250ZXh0VHlbc3R5bGVDb250ZXh0S2V5XSA9IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCwgX0RyYWdIYW5kbGUkY29udGV4dFR5W2NhbkxpZnRDb250ZXh0S2V5XSA9IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIF9EcmFnSGFuZGxlJGNvbnRleHRUeSk7XG5cbnZhciBjaGVja093blByb3BzJDEgPSAoZnVuY3Rpb24gKHByb3BzKSB7XG4gICFfTnVtYmVyJGlzSW50ZWdlcihwcm9wcy5pbmRleCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEcmFnZ2FibGUgcmVxdWlyZXMgYW4gaW50ZWdlciBpbmRleCBwcm9wJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhcHJvcHMuZHJhZ2dhYmxlSWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEcmFnZ2FibGUgcmVxdWlyZXMgYSBkcmFnZ2FibGVJZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgISh0eXBlb2YgcHJvcHMuaXNEcmFnRGlzYWJsZWQgPT09ICdib29sZWFuJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0RyYWdEaXNhYmxlZCBtdXN0IGJlIGEgYm9vbGVhbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn0pO1xuXG52YXIgX0RyYWdnYWJsZSRjb250ZXh0VHlwO1xudmFyIHpJbmRleE9wdGlvbnMgPSB7XG4gIGRyYWdnaW5nOiA1MDAwLFxuICBkcm9wQW5pbWF0aW5nOiA0NTAwXG59O1xuXG52YXIgZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uID0gZnVuY3Rpb24gZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uKHNob3VsZEFuaW1hdGVEcmFnTW92ZW1lbnQsIGRyb3BwaW5nKSB7XG4gIGlmIChkcm9wcGluZykge1xuICAgIHJldHVybiB0cmFuc2l0aW9ucy5kcm9wKGRyb3BwaW5nLmR1cmF0aW9uKTtcbiAgfVxuXG4gIGlmIChzaG91bGRBbmltYXRlRHJhZ01vdmVtZW50KSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25zLnNuYXA7XG4gIH1cblxuICByZXR1cm4gdHJhbnNpdGlvbnMuZmx1aWQ7XG59O1xuXG52YXIgZ2V0RHJhZ2dpbmdPcGFjaXR5ID0gZnVuY3Rpb24gZ2V0RHJhZ2dpbmdPcGFjaXR5KGlzQ29tYmluaW5nLCBpc0Ryb3BBbmltYXRpbmcpIHtcbiAgaWYgKCFpc0NvbWJpbmluZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGlzRHJvcEFuaW1hdGluZyA/IGNvbWJpbmUub3BhY2l0eS5kcm9wIDogY29tYmluZS5vcGFjaXR5LmNvbWJpbmluZztcbn07XG5cbnZhciBnZXRTaG91bGREcmFnZ2luZ0FuaW1hdGUgPSBmdW5jdGlvbiBnZXRTaG91bGREcmFnZ2luZ0FuaW1hdGUoZHJhZ2dpbmcpIHtcbiAgaWYgKGRyYWdnaW5nLmZvcmNlU2hvdWxkQW5pbWF0ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGRyYWdnaW5nLmZvcmNlU2hvdWxkQW5pbWF0ZTtcbiAgfVxuXG4gIHJldHVybiBkcmFnZ2luZy5tb2RlID09PSAnU05BUCc7XG59O1xuXG52YXIgRHJhZ2dhYmxlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRHJhZ2dhYmxlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFnZ2FibGUocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5jYWxsYmFja3MgPSB2b2lkIDA7XG4gICAgX3RoaXMuc3R5bGVDb250ZXh0ID0gdm9pZCAwO1xuICAgIF90aGlzLnJlZiA9IG51bGw7XG5cbiAgICBfdGhpcy5vbk1vdmVFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZHJhZ2dpbmcgJiYgX3RoaXMucHJvcHMuZHJhZ2dpbmcuZHJvcHBpbmcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMuZHJvcEFuaW1hdGlvbkZpbmlzaGVkKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uTGlmdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBzdGFydCgnTElGVCcpO1xuICAgICAgdmFyIHJlZiA9IF90aGlzLnJlZjtcbiAgICAgICFyZWYgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICEhX3RoaXMucHJvcHMuaXNEcmFnRGlzYWJsZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgbGlmdCBhIERyYWdnYWJsZSB3aGVuIGl0IGlzIGRpc2FibGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IG9wdGlvbnMuY2xpZW50U2VsZWN0aW9uLFxuICAgICAgICAgIG1vdmVtZW50TW9kZSA9IG9wdGlvbnMubW92ZW1lbnRNb2RlO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbGlmdCA9IF90aGlzJHByb3BzLmxpZnQsXG4gICAgICAgICAgZHJhZ2dhYmxlSWQgPSBfdGhpcyRwcm9wcy5kcmFnZ2FibGVJZDtcbiAgICAgIGxpZnQoe1xuICAgICAgICBpZDogZHJhZ2dhYmxlSWQsXG4gICAgICAgIGNsaWVudFNlbGVjdGlvbjogY2xpZW50U2VsZWN0aW9uLFxuICAgICAgICBtb3ZlbWVudE1vZGU6IG1vdmVtZW50TW9kZVxuICAgICAgfSk7XG4gICAgICBmaW5pc2goJ0xJRlQnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0UmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgaWYgKHJlZiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWYgPT09IF90aGlzLnJlZikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnJlZiA9IHJlZjtcbiAgICAgIHRocm93SWZSZWZJc0ludmFsaWQocmVmKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0RHJhZ2dhYmxlUmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0RHJhZ2dpbmdTdHlsZSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyYWdnaW5nKSB7XG4gICAgICB2YXIgZGltZW5zaW9uID0gZHJhZ2dpbmcuZGltZW5zaW9uO1xuICAgICAgdmFyIGJveCA9IGRpbWVuc2lvbi5jbGllbnQ7XG4gICAgICB2YXIgb2Zmc2V0JCQxID0gZHJhZ2dpbmcub2Zmc2V0LFxuICAgICAgICAgIGNvbWJpbmVXaXRoID0gZHJhZ2dpbmcuY29tYmluZVdpdGgsXG4gICAgICAgICAgZHJvcHBpbmcgPSBkcmFnZ2luZy5kcm9wcGluZztcbiAgICAgIHZhciBpc0NvbWJpbmluZyA9IEJvb2xlYW4oY29tYmluZVdpdGgpO1xuICAgICAgdmFyIHNob3VsZEFuaW1hdGUgPSBnZXRTaG91bGREcmFnZ2luZ0FuaW1hdGUoZHJhZ2dpbmcpO1xuICAgICAgdmFyIGlzRHJvcEFuaW1hdGluZyA9IEJvb2xlYW4oZHJvcHBpbmcpO1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGlzRHJvcEFuaW1hdGluZyA/IHRyYW5zZm9ybXMuZHJvcChvZmZzZXQkJDEsIGlzQ29tYmluaW5nKSA6IHRyYW5zZm9ybXMubW92ZVRvKG9mZnNldCQkMSk7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICB0b3A6IGJveC5tYXJnaW5Cb3gudG9wLFxuICAgICAgICBsZWZ0OiBib3gubWFyZ2luQm94LmxlZnQsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICB3aWR0aDogYm94LmJvcmRlckJveC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBib3guYm9yZGVyQm94LmhlaWdodCxcbiAgICAgICAgdHJhbnNpdGlvbjogZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uKHNob3VsZEFuaW1hdGUsIGRyb3BwaW5nKSxcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICAgIG9wYWNpdHk6IGdldERyYWdnaW5nT3BhY2l0eShpc0NvbWJpbmluZywgaXNEcm9wQW5pbWF0aW5nKSxcbiAgICAgICAgekluZGV4OiBpc0Ryb3BBbmltYXRpbmcgPyB6SW5kZXhPcHRpb25zLmRyb3BBbmltYXRpbmcgOiB6SW5kZXhPcHRpb25zLmRyYWdnaW5nLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSk7XG4gICAgX3RoaXMuZ2V0U2Vjb25kYXJ5U3R5bGUgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChzZWNvbmRhcnkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3Jtcy5tb3ZlVG8oc2Vjb25kYXJ5Lm9mZnNldCksXG4gICAgICAgIHRyYW5zaXRpb246IHNlY29uZGFyeS5zaG91bGRBbmltYXRlRGlzcGxhY2VtZW50ID8gbnVsbCA6ICdub25lJ1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBfdGhpcy5nZXREcmFnZ2luZ1Byb3ZpZGVkID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJhZ2dpbmcsIGRyYWdIYW5kbGVQcm9wcykge1xuICAgICAgdmFyIHN0eWxlID0gX3RoaXMuZ2V0RHJhZ2dpbmdTdHlsZShkcmFnZ2luZyk7XG5cbiAgICAgIHZhciBpc0Ryb3BwaW5nID0gQm9vbGVhbihkcmFnZ2luZy5kcm9wcGluZyk7XG4gICAgICB2YXIgcHJvdmlkZWQgPSB7XG4gICAgICAgIGlubmVyUmVmOiBfdGhpcy5zZXRSZWYsXG4gICAgICAgIGRyYWdnYWJsZVByb3BzOiB7XG4gICAgICAgICAgJ2RhdGEtcmVhY3QtYmVhdXRpZnVsLWRuZC1kcmFnZ2FibGUnOiBfdGhpcy5zdHlsZUNvbnRleHQsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgIG9uVHJhbnNpdGlvbkVuZDogaXNEcm9wcGluZyA/IF90aGlzLm9uTW92ZUVuZCA6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgZHJhZ0hhbmRsZVByb3BzOiBkcmFnSGFuZGxlUHJvcHNcbiAgICAgIH07XG4gICAgICByZXR1cm4gcHJvdmlkZWQ7XG4gICAgfSk7XG4gICAgX3RoaXMuZ2V0U2Vjb25kYXJ5UHJvdmlkZWQgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChzZWNvbmRhcnksIGRyYWdIYW5kbGVQcm9wcykge1xuICAgICAgdmFyIHN0eWxlID0gX3RoaXMuZ2V0U2Vjb25kYXJ5U3R5bGUoc2Vjb25kYXJ5KTtcblxuICAgICAgdmFyIHByb3ZpZGVkID0ge1xuICAgICAgICBpbm5lclJlZjogX3RoaXMuc2V0UmVmLFxuICAgICAgICBkcmFnZ2FibGVQcm9wczoge1xuICAgICAgICAgICdkYXRhLXJlYWN0LWJlYXV0aWZ1bC1kbmQtZHJhZ2dhYmxlJzogX3RoaXMuc3R5bGVDb250ZXh0LFxuICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICBvblRyYW5zaXRpb25FbmQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgZHJhZ0hhbmRsZVByb3BzOiBkcmFnSGFuZGxlUHJvcHNcbiAgICAgIH07XG4gICAgICByZXR1cm4gcHJvdmlkZWQ7XG4gICAgfSk7XG4gICAgX3RoaXMuZ2V0RHJhZ2dpbmdTbmFwc2hvdCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyYWdnaW5nKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0RyYWdnaW5nOiB0cnVlLFxuICAgICAgICBpc0Ryb3BBbmltYXRpbmc6IEJvb2xlYW4oZHJhZ2dpbmcuZHJvcHBpbmcpLFxuICAgICAgICBkcm9wQW5pbWF0aW9uOiBkcmFnZ2luZy5kcm9wcGluZyxcbiAgICAgICAgbW9kZTogZHJhZ2dpbmcubW9kZSxcbiAgICAgICAgZHJhZ2dpbmdPdmVyOiBkcmFnZ2luZy5kcmFnZ2luZ092ZXIsXG4gICAgICAgIGNvbWJpbmVXaXRoOiBkcmFnZ2luZy5jb21iaW5lV2l0aCxcbiAgICAgICAgY29tYmluZVRhcmdldEZvcjogbnVsbFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBfdGhpcy5nZXRTZWNvbmRhcnlTbmFwc2hvdCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHNlY29uZGFyeSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgICAgIGlzRHJvcEFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgIGRyb3BBbmltYXRpb246IG51bGwsXG4gICAgICAgIG1vZGU6IG51bGwsXG4gICAgICAgIGRyYWdnaW5nT3ZlcjogbnVsbCxcbiAgICAgICAgY29tYmluZVRhcmdldEZvcjogc2Vjb25kYXJ5LmNvbWJpbmVUYXJnZXRGb3IsXG4gICAgICAgIGNvbWJpbmVXaXRoOiBudWxsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX3RoaXMucmVuZGVyQ2hpbGRyZW4gPSBmdW5jdGlvbiAoZHJhZ0hhbmRsZVByb3BzKSB7XG4gICAgICB2YXIgZHJhZ2dpbmcgPSBfdGhpcy5wcm9wcy5kcmFnZ2luZztcbiAgICAgIHZhciBzZWNvbmRhcnkgPSBfdGhpcy5wcm9wcy5zZWNvbmRhcnk7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBfdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgIHZhciBfY2hpbGQgPSBjaGlsZHJlbihfdGhpcy5nZXREcmFnZ2luZ1Byb3ZpZGVkKGRyYWdnaW5nLCBkcmFnSGFuZGxlUHJvcHMpLCBfdGhpcy5nZXREcmFnZ2luZ1NuYXBzaG90KGRyYWdnaW5nKSk7XG5cbiAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gUmVhY3QuY3JlYXRlRWxlbWVudChQbGFjZWhvbGRlciwge1xuICAgICAgICAgIHBsYWNlaG9sZGVyOiBkcmFnZ2luZy5kaW1lbnNpb24ucGxhY2Vob2xkZXJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBfY2hpbGQsIHBsYWNlaG9sZGVyKTtcbiAgICAgIH1cblxuICAgICAgIXNlY29uZGFyeSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0lmIG5vIERyYWdnaW5nTWFwUHJvcHMgYXJlIHByb3ZpZGVkLCB0aGVuIFNlY29uZGFyeU1hcFByb3BzIGFyZSByZXF1aXJlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuKF90aGlzLmdldFNlY29uZGFyeVByb3ZpZGVkKHNlY29uZGFyeSwgZHJhZ0hhbmRsZVByb3BzKSwgX3RoaXMuZ2V0U2Vjb25kYXJ5U25hcHNob3Qoc2Vjb25kYXJ5KSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgY2hpbGQpO1xuICAgIH07XG5cbiAgICB2YXIgY2FsbGJhY2tzID0ge1xuICAgICAgb25MaWZ0OiBfdGhpcy5vbkxpZnQsXG4gICAgICBvbk1vdmU6IGZ1bmN0aW9uIG9uTW92ZShjbGllbnRTZWxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLm1vdmUoe1xuICAgICAgICAgIGNsaWVudDogY2xpZW50U2VsZWN0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uRHJvcDogZnVuY3Rpb24gb25Ecm9wKCkge1xuICAgICAgICByZXR1cm4gcHJvcHMuZHJvcCh7XG4gICAgICAgICAgcmVhc29uOiAnRFJPUCdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25DYW5jZWw6IGZ1bmN0aW9uIG9uQ2FuY2VsKCkge1xuICAgICAgICByZXR1cm4gcHJvcHMuZHJvcCh7XG4gICAgICAgICAgcmVhc29uOiAnQ0FOQ0VMJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbk1vdmVVcDogcHJvcHMubW92ZVVwLFxuICAgICAgb25Nb3ZlRG93bjogcHJvcHMubW92ZURvd24sXG4gICAgICBvbk1vdmVSaWdodDogcHJvcHMubW92ZVJpZ2h0LFxuICAgICAgb25Nb3ZlTGVmdDogcHJvcHMubW92ZUxlZnQsXG4gICAgICBvbldpbmRvd1Njcm9sbDogZnVuY3Rpb24gb25XaW5kb3dTY3JvbGwoKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5tb3ZlQnlXaW5kb3dTY3JvbGwoe1xuICAgICAgICAgIG5ld1Njcm9sbDogZ2V0V2luZG93U2Nyb2xsKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gICAgX3RoaXMuc3R5bGVDb250ZXh0ID0gY29udGV4dFtzdHlsZUNvbnRleHRLZXldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrT3duUHJvcHMkMShwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyYWdnYWJsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5yZWYgPSBudWxsO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRyYWdnYWJsZUlkID0gX3RoaXMkcHJvcHMyLmRyYWdnYWJsZUlkLFxuICAgICAgICBpbmRleCA9IF90aGlzJHByb3BzMi5pbmRleCxcbiAgICAgICAgZHJhZ2dpbmcgPSBfdGhpcyRwcm9wczIuZHJhZ2dpbmcsXG4gICAgICAgIGlzRHJhZ0Rpc2FibGVkID0gX3RoaXMkcHJvcHMyLmlzRHJhZ0Rpc2FibGVkLFxuICAgICAgICBkaXNhYmxlSW50ZXJhY3RpdmVFbGVtZW50QmxvY2tpbmcgPSBfdGhpcyRwcm9wczIuZGlzYWJsZUludGVyYWN0aXZlRWxlbWVudEJsb2NraW5nO1xuICAgIHZhciBkcm9wcGFibGVJZCA9IHRoaXMuY29udGV4dFtkcm9wcGFibGVJZEtleV07XG4gICAgdmFyIHR5cGUgPSB0aGlzLmNvbnRleHRbZHJvcHBhYmxlVHlwZUtleV07XG4gICAgdmFyIGlzRHJhZ2dpbmcgPSBCb29sZWFuKGRyYWdnaW5nKTtcbiAgICB2YXIgaXNEcm9wQW5pbWF0aW5nID0gQm9vbGVhbihkcmFnZ2luZyAmJiBkcmFnZ2luZy5kcm9wcGluZyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJhZ2dhYmxlRGltZW5zaW9uUHVibGlzaGVyLCB7XG4gICAgICBrZXk6IGRyYWdnYWJsZUlkLFxuICAgICAgZHJhZ2dhYmxlSWQ6IGRyYWdnYWJsZUlkLFxuICAgICAgZHJvcHBhYmxlSWQ6IGRyb3BwYWJsZUlkLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgIGdldERyYWdnYWJsZVJlZjogdGhpcy5nZXREcmFnZ2FibGVSZWZcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KERyYWdIYW5kbGUsIHtcbiAgICAgIGRyYWdnYWJsZUlkOiBkcmFnZ2FibGVJZCxcbiAgICAgIGlzRHJhZ2dpbmc6IGlzRHJhZ2dpbmcsXG4gICAgICBpc0Ryb3BBbmltYXRpbmc6IGlzRHJvcEFuaW1hdGluZyxcbiAgICAgIGlzRW5hYmxlZDogIWlzRHJhZ0Rpc2FibGVkLFxuICAgICAgY2FsbGJhY2tzOiB0aGlzLmNhbGxiYWNrcyxcbiAgICAgIGdldERyYWdnYWJsZVJlZjogdGhpcy5nZXREcmFnZ2FibGVSZWYsXG4gICAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50czogZGlzYWJsZUludGVyYWN0aXZlRWxlbWVudEJsb2NraW5nXG4gICAgfSwgdGhpcy5yZW5kZXJDaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBEcmFnZ2FibGU7XG59KENvbXBvbmVudCk7XG5cbkRyYWdnYWJsZS5jb250ZXh0VHlwZXMgPSAoX0RyYWdnYWJsZSRjb250ZXh0VHlwID0ge30sIF9EcmFnZ2FibGUkY29udGV4dFR5cFtkcm9wcGFibGVJZEtleV0gPSBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsIF9EcmFnZ2FibGUkY29udGV4dFR5cFtkcm9wcGFibGVUeXBlS2V5XSA9IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCwgX0RyYWdnYWJsZSRjb250ZXh0VHlwW3N0eWxlQ29udGV4dEtleV0gPSBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsIF9EcmFnZ2FibGUkY29udGV4dFR5cCk7XG5cbnZhciBnZXRDb21iaW5lV2l0aCA9IGZ1bmN0aW9uIGdldENvbWJpbmVXaXRoKGltcGFjdCkge1xuICBpZiAoIWltcGFjdC5tZXJnZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGltcGFjdC5tZXJnZS5jb21iaW5lLmRyYWdnYWJsZUlkO1xufTtcblxudmFyIGRlZmF1bHRNYXBQcm9wcyQxID0ge1xuICBzZWNvbmRhcnk6IHtcbiAgICBvZmZzZXQ6IG9yaWdpbixcbiAgICBjb21iaW5lVGFyZ2V0Rm9yOiBudWxsLFxuICAgIHNob3VsZEFuaW1hdGVEaXNwbGFjZW1lbnQ6IHRydWVcbiAgfSxcbiAgZHJhZ2dpbmc6IG51bGxcbn07XG52YXIgbWFrZU1hcFN0YXRlVG9Qcm9wcyQxID0gZnVuY3Rpb24gbWFrZU1hcFN0YXRlVG9Qcm9wcygpIHtcbiAgdmFyIG1lbW9pemVkT2Zmc2V0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeVxuICAgIH07XG4gIH0pO1xuICB2YXIgZ2V0U2Vjb25kYXJ5UHJvcHMgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChvZmZzZXQkJDEsIGNvbWJpbmVUYXJnZXRGb3IsIHNob3VsZEFuaW1hdGVEaXNwbGFjZW1lbnQpIHtcbiAgICBpZiAoY29tYmluZVRhcmdldEZvciA9PT0gdm9pZCAwKSB7XG4gICAgICBjb21iaW5lVGFyZ2V0Rm9yID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc2Vjb25kYXJ5OiB7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0JCQxLFxuICAgICAgICBjb21iaW5lVGFyZ2V0Rm9yOiBjb21iaW5lVGFyZ2V0Rm9yLFxuICAgICAgICBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50OiBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50XG4gICAgICB9LFxuICAgICAgZHJhZ2dpbmc6IG51bGxcbiAgICB9O1xuICB9KTtcbiAgdmFyIGdldERyYWdnaW5nUHJvcHMgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChvZmZzZXQkJDEsIG1vZGUsIGRpbWVuc2lvbiwgZHJhZ2dpbmdPdmVyLCBjb21iaW5lV2l0aCwgZm9yY2VTaG91bGRBbmltYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRyYWdnaW5nOiB7XG4gICAgICAgIG1vZGU6IG1vZGUsXG4gICAgICAgIGRyb3BwaW5nOiBudWxsLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCQkMSxcbiAgICAgICAgZGltZW5zaW9uOiBkaW1lbnNpb24sXG4gICAgICAgIGRyYWdnaW5nT3ZlcjogZHJhZ2dpbmdPdmVyLFxuICAgICAgICBjb21iaW5lV2l0aDogY29tYmluZVdpdGgsXG4gICAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZm9yY2VTaG91bGRBbmltYXRlXG4gICAgICB9LFxuICAgICAgc2Vjb25kYXJ5OiBudWxsXG4gICAgfTtcbiAgfSk7XG5cbiAgdmFyIGdldFNlY29uZGFyeU1vdmVtZW50ID0gZnVuY3Rpb24gZ2V0U2Vjb25kYXJ5TW92ZW1lbnQob3duSWQsIGRyYWdnaW5nSWQsIGltcGFjdCkge1xuICAgIHZhciBtYXAgPSBpbXBhY3QubW92ZW1lbnQubWFwO1xuICAgIHZhciBkaXNwbGFjZW1lbnQgPSBtYXBbb3duSWRdO1xuICAgIHZhciBtb3ZlbWVudCA9IGltcGFjdC5tb3ZlbWVudDtcbiAgICB2YXIgbWVyZ2UgPSBpbXBhY3QubWVyZ2U7XG4gICAgdmFyIGlzQ29tYmluZWRXaXRoID0gQm9vbGVhbihtZXJnZSAmJiBtZXJnZS5jb21iaW5lLmRyYWdnYWJsZUlkID09PSBvd25JZCk7XG4gICAgdmFyIGRpc3BsYWNlZEJ5ID0gbW92ZW1lbnQuZGlzcGxhY2VkQnkucG9pbnQ7XG4gICAgdmFyIG9mZnNldCQkMSA9IG1lbW9pemVkT2Zmc2V0KGRpc3BsYWNlZEJ5LngsIGRpc3BsYWNlZEJ5LnkpO1xuXG4gICAgaWYgKGlzQ29tYmluZWRXaXRoKSB7XG4gICAgICByZXR1cm4gZ2V0U2Vjb25kYXJ5UHJvcHMoZGlzcGxhY2VtZW50ID8gb2Zmc2V0JCQxIDogb3JpZ2luLCBkcmFnZ2luZ0lkLCBkaXNwbGFjZW1lbnQgPyBkaXNwbGFjZW1lbnQuc2hvdWxkQW5pbWF0ZSA6IHRydWUpO1xuICAgIH1cblxuICAgIGlmICghZGlzcGxhY2VtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIWRpc3BsYWNlbWVudC5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRTZWNvbmRhcnlQcm9wcyhvZmZzZXQkJDEsIG51bGwsIGRpc3BsYWNlbWVudC5zaG91bGRBbmltYXRlKTtcbiAgfTtcblxuICB2YXIgZHJhZ2dpbmdTZWxlY3RvciA9IGZ1bmN0aW9uIGRyYWdnaW5nU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgaWYgKHN0YXRlLmlzRHJhZ2dpbmcpIHtcbiAgICAgIGlmIChzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWQgIT09IG93blByb3BzLmRyYWdnYWJsZUlkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2Zmc2V0JCQxID0gc3RhdGUuY3VycmVudC5jbGllbnQub2Zmc2V0O1xuICAgICAgdmFyIGRpbWVuc2lvbiA9IHN0YXRlLmRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tvd25Qcm9wcy5kcmFnZ2FibGVJZF07XG4gICAgICB2YXIgbW9kZSA9IHN0YXRlLm1vdmVtZW50TW9kZTtcbiAgICAgIHZhciBkcmFnZ2luZ092ZXIgPSB3aGF0SXNEcmFnZ2VkT3ZlcihzdGF0ZS5pbXBhY3QpO1xuICAgICAgdmFyIGNvbWJpbmVXaXRoID0gZ2V0Q29tYmluZVdpdGgoc3RhdGUuaW1wYWN0KTtcbiAgICAgIHZhciBmb3JjZVNob3VsZEFuaW1hdGUgPSBzdGF0ZS5mb3JjZVNob3VsZEFuaW1hdGU7XG4gICAgICByZXR1cm4gZ2V0RHJhZ2dpbmdQcm9wcyhtZW1vaXplZE9mZnNldChvZmZzZXQkJDEueCwgb2Zmc2V0JCQxLnkpLCBtb2RlLCBkaW1lbnNpb24sIGRyYWdnaW5nT3ZlciwgY29tYmluZVdpdGgsIGZvcmNlU2hvdWxkQW5pbWF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICB2YXIgcGVuZGluZyA9IHN0YXRlLnBlbmRpbmc7XG5cbiAgICAgIGlmIChwZW5kaW5nLnJlc3VsdC5kcmFnZ2FibGVJZCAhPT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfZHJhZ2dpbmdPdmVyID0gd2hhdElzRHJhZ2dlZE92ZXIocGVuZGluZy5pbXBhY3QpO1xuXG4gICAgICB2YXIgX2NvbWJpbmVXaXRoID0gZ2V0Q29tYmluZVdpdGgocGVuZGluZy5pbXBhY3QpO1xuXG4gICAgICB2YXIgZHVyYXRpb24gPSBwZW5kaW5nLmRyb3BEdXJhdGlvbjtcbiAgICAgIHZhciBfbW9kZSA9IHBlbmRpbmcucmVzdWx0Lm1vZGU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkcmFnZ2luZzoge1xuICAgICAgICAgIG9mZnNldDogcGVuZGluZy5uZXdIb21lQ2xpZW50T2Zmc2V0LFxuICAgICAgICAgIGRpbWVuc2lvbjogc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW293blByb3BzLmRyYWdnYWJsZUlkXSxcbiAgICAgICAgICBkcmFnZ2luZ092ZXI6IF9kcmFnZ2luZ092ZXIsXG4gICAgICAgICAgY29tYmluZVdpdGg6IF9jb21iaW5lV2l0aCxcbiAgICAgICAgICBtb2RlOiBfbW9kZSxcbiAgICAgICAgICBmb3JjZVNob3VsZEFuaW1hdGU6IG51bGwsXG4gICAgICAgICAgZHJvcHBpbmc6IHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgIGN1cnZlOiBjdXJ2ZXMuZHJvcCxcbiAgICAgICAgICAgIG1vdmVUbzogcGVuZGluZy5uZXdIb21lQ2xpZW50T2Zmc2V0LFxuICAgICAgICAgICAgb3BhY2l0eTogX2NvbWJpbmVXaXRoID8gY29tYmluZS5vcGFjaXR5LmRyb3AgOiBudWxsLFxuICAgICAgICAgICAgc2NhbGU6IF9jb21iaW5lV2l0aCA/IGNvbWJpbmUuc2NhbGUuZHJvcCA6IG51bGxcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNlY29uZGFyeTogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgc2Vjb25kYXJ5U2VsZWN0b3IgPSBmdW5jdGlvbiBzZWNvbmRhcnlTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICBpZiAoc3RhdGUuaXNEcmFnZ2luZykge1xuICAgICAgaWYgKHN0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZCA9PT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRTZWNvbmRhcnlNb3ZlbWVudChvd25Qcm9wcy5kcmFnZ2FibGVJZCwgc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkLCBzdGF0ZS5pbXBhY3QpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0RST1BfQU5JTUFUSU5HJykge1xuICAgICAgaWYgKHN0YXRlLnBlbmRpbmcucmVzdWx0LmRyYWdnYWJsZUlkID09PSBvd25Qcm9wcy5kcmFnZ2FibGVJZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFNlY29uZGFyeU1vdmVtZW50KG93blByb3BzLmRyYWdnYWJsZUlkLCBzdGF0ZS5wZW5kaW5nLnJlc3VsdC5kcmFnZ2FibGVJZCwgc3RhdGUucGVuZGluZy5pbXBhY3QpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBkcmFnZ2luZ1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykgfHwgc2Vjb25kYXJ5U2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB8fCBkZWZhdWx0TWFwUHJvcHMkMTtcbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59O1xudmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgbGlmdDogbGlmdCxcbiAgbW92ZTogbW92ZSxcbiAgbW92ZVVwOiBtb3ZlVXAsXG4gIG1vdmVEb3duOiBtb3ZlRG93bixcbiAgbW92ZUxlZnQ6IG1vdmVMZWZ0LFxuICBtb3ZlUmlnaHQ6IG1vdmVSaWdodCxcbiAgbW92ZUJ5V2luZG93U2Nyb2xsOiBtb3ZlQnlXaW5kb3dTY3JvbGwsXG4gIGRyb3A6IGRyb3AsXG4gIGRyb3BBbmltYXRpb25GaW5pc2hlZDogZHJvcEFuaW1hdGlvbkZpbmlzaGVkXG59O1xudmFyIGRlZmF1bHRQcm9wcyQxID0ge1xuICBpc0RyYWdEaXNhYmxlZDogZmFsc2UsXG4gIGRpc2FibGVJbnRlcmFjdGl2ZUVsZW1lbnRCbG9ja2luZzogZmFsc2Vcbn07XG52YXIgQ29ubmVjdGVkRHJhZ2dhYmxlID0gY29ubmVjdChtYWtlTWFwU3RhdGVUb1Byb3BzJDEsIG1hcERpc3BhdGNoVG9Qcm9wcywgbnVsbCwge1xuICBzdG9yZUtleTogc3RvcmVLZXksXG4gIHB1cmU6IHRydWUsXG4gIGFyZVN0YXRlUHJvcHNFcXVhbDogaXNTdHJpY3RFcXVhbFxufSkoRHJhZ2dhYmxlKTtcbkNvbm5lY3RlZERyYWdnYWJsZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHMkMTtcblxuZXhwb3J0IHsgRHJhZ0Ryb3BDb250ZXh0LCBDb25uZWN0ZWREcm9wcGFibGUgYXMgRHJvcHBhYmxlLCBDb25uZWN0ZWREcmFnZ2FibGUgYXMgRHJhZ2dhYmxlLCByZXNldFNlcnZlckNvbnRleHQgfTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHtcclxuICBEcmFnRHJvcENvbnRleHQsXHJcbiAgRHJvcHBhYmxlLFxyXG4gIERyYWdnYWJsZSxcclxuICBEcm9wUmVzdWx0XHJcbn0gZnJvbSBcInJlYWN0LWJlYXV0aWZ1bC1kbmRcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRHJhZ2dhYmxlSXRlbVByb3BzIHt9XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNvcnRlZExpc3RQcm9wcyB7fVxyXG5cclxuLyoqXHJcbiAqIEJhZGdlXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIFNvcnRlZExpc3RcclxuICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudDxTb3J0ZWRMaXN0UHJvcHM+fVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ydGVkTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxTb3J0ZWRMaXN0UHJvcHM+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogU29ydGVkTGlzdFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgY2hpbGRzID0gY2hpbGRyZW4gYXMgUmVhY3QuUmVhY3RFbGVtZW50PERyYWdnYWJsZUl0ZW1Qcm9wcz5bXTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8RHJhZ0Ryb3BDb250ZXh0IG9uRHJhZ0VuZD17dGhpcy5vbkRyYWdFbmR9PlxyXG4gICAgICAgIDxEcm9wcGFibGUgZHJvcHBhYmxlSWQ9XCJkcm9wcGFibGVcIj5cclxuICAgICAgICAgIHsocHJvdmlkZWQsIHNuYXBzaG90KSA9PiAoXHJcbiAgICAgICAgICAgIDxkaXYgcmVmPXtwcm92aWRlZC5pbm5lclJlZn0+XHJcbiAgICAgICAgICAgICAge2NoaWxkcy5tYXAoXHJcbiAgICAgICAgICAgICAgICAoaXRlbTogUmVhY3QuUmVhY3RFbGVtZW50PERyYWdnYWJsZUl0ZW1Qcm9wcz4sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGl0ZW0ua2V5IHx8IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxEcmFnZ2FibGVcclxuICAgICAgICAgICAgICAgICAgICAgIGtleT17a2V5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlSWQ9e2tleS50b1N0cmluZygpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXg9e2luZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIHsocHJvdmlkZWQsIHNuYXBzaG90KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e3Byb3ZpZGVkLmlubmVyUmVmfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5wcm92aWRlZC5kcmFnZ2FibGVQcm9wc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ucHJvdmlkZWQuZHJhZ0hhbmRsZVByb3BzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgICAgICA8L0RyYWdnYWJsZT5cclxuICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgIHtwcm92aWRlZC5wbGFjZWhvbGRlcn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvRHJvcHBhYmxlPlxyXG4gICAgICA8L0RyYWdEcm9wQ29udGV4dD5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBvbkRyYWdFbmQgPSAocmVzdWx0OiBEcm9wUmVzdWx0KSA9PiB7XHJcbiAgICB3aW5kb3cuY29uc29sZS5sb2cocmVzdWx0KTtcclxuICB9O1xyXG59XHJcbiIsIi8qKlxyXG4gKiDQotC40L/RiyDRgNCw0LfQvNC10YDQvtCyXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGVudW0ge251bWJlcn1cclxuICovXHJcbmV4cG9ydCBlbnVtIFNpemUge1xyXG4gIFNtYWxsID0gXCJzbWFsbFwiLFxyXG4gIE1lZGl1bSA9IFwibWVkaXVtXCIsXHJcbiAgTGFyZ2UgPSBcImxhcmdlXCJcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBVSUJ1dHRvbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uXCI7XHJcbmltcG9ydCB7IFNpemUgfSBmcm9tIFwiLi4vTW9kZWxzL1NpemVcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2ltcGxlQnV0dG9uUHJvcHMge1xyXG4gIGNvbG9yPzogQnV0dG9uQ29sb3I7XHJcbiAgaHJlZj86IHN0cmluZztcclxuICBkaXNhYmxlZD86IGJvb2xlYW47XHJcbiAgb25DbGljaz86ICgpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEJ1dHRvbkNvbG9yIHtcclxuICBEZWZhdWx0ID0gXCJkZWZhdWx0XCIsXHJcbiAgUHJpbWFyeSA9IFwicHJpbWFyeVwiLFxyXG4gIFNlY29uZGFyeSA9IFwic2Vjb25kYXJ5XCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQnV0dG9uVmFyaWFudCB7XHJcbiAgRmxhdCA9IFwiZmxhdFwiLFxyXG4gIE91dGxpbmVkID0gXCJvdXRsaW5lZFwiLFxyXG4gIENvbnRhaW5lZCA9IFwiY29udGFpbmVkXCJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCdXR0b25Qcm9wcyBleHRlbmRzIFNpbXBsZUJ1dHRvblByb3BzIHtcclxuICB2YXJpYW50PzogQnV0dG9uVmFyaWFudDtcclxuICBzaXplPzogU2l6ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqINCa0L3QvtC/0LrQsFxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBCdXR0b25cclxuICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudDxCdXR0b25Qcm9wcz59XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8QnV0dG9uUHJvcHM+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogQnV0dG9uUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgdmFyaWFudCwgY29sb3IsIHNpemUsIGhyZWYsIGRpc2FibGVkLCBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxVSUJ1dHRvblxyXG4gICAgICAgIHZhcmlhbnQ9e3ZhcmlhbnQgfHwgQnV0dG9uVmFyaWFudC5PdXRsaW5lZH1cclxuICAgICAgICBjb2xvcj17Y29sb3IgfHwgQnV0dG9uQ29sb3IuRGVmYXVsdH1cclxuICAgICAgICBkaXNhYmxlZD17ISFkaXNhYmxlZH1cclxuICAgICAgICBocmVmPXtocmVmfVxyXG4gICAgICAgIHNpemU9e3NpemUgfHwgU2l6ZS5TbWFsbH1cclxuICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XHJcbiAgICAgID5cclxuICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgIDwvVUlCdXR0b24+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgb25DbGljayA9IChlOiBSZWFjdC5DaGFuZ2VFdmVudDx7fT4pID0+IHtcclxuICAgIGNvbnN0IG9uQ2xpY2sgPSB0aGlzLnByb3BzLm9uQ2xpY2s7XHJcbiAgICBpZiAob25DbGljaykge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIG9uQ2xpY2soKTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IElDYW5TdHlsZWQgZnJvbSBcIi4uL01vZGVscy9JQ2FuU3R5bGVkXCI7XHJcbmltcG9ydCB7IFNpbXBsZUJ1dHRvblByb3BzLCBCdXR0b25Db2xvciB9IGZyb20gXCIuLi9VSS9CdXR0b25cIjtcclxuaW1wb3J0IFVJSWNvbkJ1dHRvbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvSWNvbkJ1dHRvblwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJY29uQnV0dG9uUHJvcHMgZXh0ZW5kcyBTaW1wbGVCdXR0b25Qcm9wcywgSUNhblN0eWxlZCB7fVxyXG5cclxuLyoqXHJcbiAqINCa0L3QvtC/0LrQsCDRgSDQuNC60L7QvdC60L7QuVxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBJY29uQnV0dG9uXHJcbiAqIEBleHRlbmRzIHtSZWFjdC5Db21wb25lbnQ8SWNvbkJ1dHRvblByb3BzPn1cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEljb25CdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SWNvbkJ1dHRvblByb3BzPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IEljb25CdXR0b25Qcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyBjbGFzc05hbWUsIGNvbG9yLCBocmVmLCBkaXNhYmxlZCwgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8VUlJY29uQnV0dG9uXHJcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XHJcbiAgICAgICAgY29sb3I9e2NvbG9yIHx8IEJ1dHRvbkNvbG9yLkRlZmF1bHR9XHJcbiAgICAgICAgZGlzYWJsZWQ9eyEhZGlzYWJsZWR9XHJcbiAgICAgICAgaHJlZj17aHJlZn1cclxuICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XHJcbiAgICAgID5cclxuICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgIDwvVUlJY29uQnV0dG9uPlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9uQ2xpY2sgPSAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8e30+KSA9PiB7XHJcbiAgICBjb25zdCBvbkNsaWNrID0gdGhpcy5wcm9wcy5vbkNsaWNrO1xyXG4gICAgaWYgKG9uQ2xpY2spIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICBvbkNsaWNrKCk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBJV2l0aFN0eWxlcyBmcm9tIFwiLi4vTW9kZWxzL0lXaXRoU3R5bGVzXCI7XHJcbmltcG9ydCBQYXBlciBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvUGFwZXJcIjtcclxuaW1wb3J0IElucHV0QmFzZSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvSW5wdXRCYXNlXCI7XHJcbmltcG9ydCBEaXZpZGVyIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9EaXZpZGVyXCI7XHJcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gXCIuL0ljb25CdXR0b25cIjtcclxuaW1wb3J0IHsgQnV0dG9uQ29sb3IgfSBmcm9tIFwiLi9CdXR0b25cIjtcclxuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb250cm9sUHJvcHMgZXh0ZW5kcyBJV2l0aFN0eWxlcyB7XHJcbiAgcGxhY2Vob2xkZXI6IHN0cmluZztcclxuICBvbkNoYW5nZT86ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcbiAgcm9vdDoge1xyXG4gICAgcGFkZGluZzogXCIycHggNHB4XCIsXHJcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcclxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcbiAgICB3aWR0aDogNDAwXHJcbiAgfSxcclxuICBpbnB1dDoge1xyXG4gICAgbWFyZ2luTGVmdDogOCxcclxuICAgIGZsZXg6IDFcclxuICB9LFxyXG4gIGljb25CdXR0b246IHtcclxuICAgIHBhZGRpbmc6IDEwXHJcbiAgfSxcclxuICBkaXZpZGVyOiB7XHJcbiAgICB3aWR0aDogMSxcclxuICAgIGhlaWdodDogMjgsXHJcbiAgICBtYXJnaW46IDRcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQmFkZ2VcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAY2xhc3MgQ29udHJvbFxyXG4gKiBAZXh0ZW5kcyB7UmVhY3QuQ29tcG9uZW50PENvbnRyb2xQcm9wcz59XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29udHJvbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxDb250cm9sUHJvcHM+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogQ29udHJvbFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGNsYXNzZXMsIHBsYWNlaG9sZGVyLCBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxQYXBlciBjbGFzc05hbWU9e2NsYXNzZXNbXCJyb290XCJdfSBlbGV2YXRpb249ezF9PlxyXG4gICAgICAgIDxJbnB1dEJhc2UgY2xhc3NOYW1lPXtjbGFzc2VzW1wiaW5wdXRcIl19IHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn0gLz5cclxuICAgICAgICA8RGl2aWRlciBjbGFzc05hbWU9e2NsYXNzZXNbXCJkaXZpZGVyXCJdfSAvPlxyXG4gICAgICAgIDxJY29uQnV0dG9uXHJcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2hhbmdlfVxyXG4gICAgICAgICAgY29sb3I9e0J1dHRvbkNvbG9yLlByaW1hcnl9XHJcbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXNbXCJpY29uQnV0dG9uXCJdfVxyXG4gICAgICAgICAgYXJpYS1sYWJlbD1cIkRpcmVjdGlvbnNcIlxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2UgPSAoKSA9PiB7fTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMpKENvbnRyb2wpO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBDb250cm9sIGZyb20gXCIuLi9VSS9Db250cm9sXCI7XHJcbmltcG9ydCBBZGRDaXJjbGUgZnJvbSBcIkBtYXRlcmlhbC11aS9pY29ucy9BZGRDaXJjbGVcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJvbHNQcm9wcyB7fVxyXG5cclxuLyoqXHJcbiAqINCe0YHQvdC+0LLQvdC+0Lkg0LrQvtC80L/QvtC90LXQvdGCINC/0YDQuNC70L7QttC10L3QuNGPXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIENvbnRyb2xzXHJcbiAqIEBleHRlbmRzIHtSZWFjdC5Db21wb25lbnQ8Q29udHJvbHNDb250ZXh0Pn1cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PENvbnRyb2xzUHJvcHM+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogQ29udHJvbHNQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPENvbnRyb2wgcGxhY2Vob2xkZXI9e1wi0JTQvtCx0LDQstC40YLRjCDQv9GD0L3QutGCINC90LAg0LrQsNGA0YLRg1wifT5cclxuICAgICAgICA8QWRkQ2lyY2xlIC8+XHJcbiAgICAgIDwvQ29udHJvbD5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNvcnRlZExpc3QgZnJvbSBcIi4uL1VJL1NvcnRlZExpc3RcIjtcclxuaW1wb3J0IENvbnRyb2xzIGZyb20gXCIuL0NvbnRyb2xzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNpZGViYXJQcm9wcyB7fVxyXG5cclxuLyoqXHJcbiAqINCe0YHQvdC+0LLQvdC+0Lkg0LrQvtC80L/QvtC90LXQvdGCINC/0YDQuNC70L7QttC10L3QuNGPXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIFNpZGViYXJcclxuICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudDxTaWRlYmFyQ29udGV4dD59XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaWRlYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFNpZGViYXJQcm9wcz4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBTaWRlYmFyUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICA8Q29udHJvbHMgLz5cclxuICAgICAgICA8U29ydGVkTGlzdD5cclxuICAgICAgICAgIDxkaXYga2V5PVwiMVwiPlNpZGViYXIgMTwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBrZXk9XCIyXCI+U2lkZWJhciAyPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGtleT1cIjNcIj5TaWRlYmFyIDM8L2Rpdj5cclxuICAgICAgICA8L1NvcnRlZExpc3Q+XHJcbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IExheW91dCBmcm9tIFwiLi4vVUkvTGF5b3V0XCI7XHJcbmltcG9ydCBTaWRlYmFyIGZyb20gXCIuL1NpZGViYXJcIjtcclxuaW1wb3J0IElTdG9yZSBmcm9tIFwiLi4vTW9kZWxzL0lTdG9yZVwiO1xyXG5pbXBvcnQgQ3NzQmFzZWxpbmUgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL0Nzc0Jhc2VsaW5lXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFByb3BzIHt9XHJcblxyXG5leHBvcnQgdHlwZSBBcHBJbnB1dHMgPSBBcHBQcm9wcyAmIElTdG9yZTtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogSVN0b3JlLCBwcm9wczogQXBwUHJvcHMpID0+ICh7XHJcbiAgcG9pbnRzOiBzdGF0ZS5wb2ludHNcclxufSk7XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7fTtcclxuXHJcbmV4cG9ydCB0eXBlIEFwcENvbnRleHQgPSBBcHBJbnB1dHMgJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzO1xyXG5cclxuLyoqXHJcbiAqINCe0YHQvdC+0LLQvdC+0Lkg0LrQvtC80L/QvtC90LXQvdGCINC/0YDQuNC70L7QttC10L3QuNGPXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIEFwcFxyXG4gKiBAZXh0ZW5kcyB7UmVhY3QuQ29tcG9uZW50PEFwcENvbnRleHQ+fVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxBcHBDb250ZXh0PiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IEFwcENvbnRleHQpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICA8Q3NzQmFzZWxpbmUgLz5cclxuICAgICAgICA8TGF5b3V0IHNpZGViYXI9ezxTaWRlYmFyIC8+fT5hcHA8L0xheW91dD5cclxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxyXG4gIG1hcFN0YXRlVG9Qcm9wcyxcclxuICBtYXBEaXNwYXRjaFRvUHJvcHNcclxuKShBcHApO1xyXG4iLCJpbXBvcnQgSUFjdGlvbiBmcm9tIFwiLi4vTW9kZWxzL0lBY3Rpb25cIjtcclxuaW1wb3J0IElTdG9yZSBmcm9tIFwiLi4vTW9kZWxzL0lTdG9yZVwiO1xyXG5pbXBvcnQgeyBQb2ludHMgfSBmcm9tIFwiLi4vTW9kZWxzL0lQb2ludFwiO1xyXG5cclxuLyoqXHJcbiAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC/0YDQuNC70L7QttC10L3QuNGPXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGludGVyZmFjZSBJSW5pdFxyXG4gKiBAZXh0ZW5kcyB7SUFjdGlvbn1cclxuICogQGV4dGVuZHMge0lTdG9yZX1cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUluaXQgZXh0ZW5kcyBJQWN0aW9uLCBJU3RvcmUge1xyXG4gIHR5cGU6IFwiSU5JVF9BUFBcIjtcclxuICBwb2ludHM6IFBvaW50cztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEluaXQgPSAoKTogSUluaXQgPT4gKHtcclxuICB0eXBlOiBcIklOSVRfQVBQXCIsXHJcbiAgcG9pbnRzOiBuZXcgQXJyYXkoKVxyXG59KTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgQXBwIGZyb20gXCIuL0NvbXBvbmVudHMvQXBwXCI7XHJcbmltcG9ydCByZWR1Y2VyIGZyb20gXCIuL1JlZHVjZXJzXCI7XHJcbmltcG9ydCB7IEluaXQgfSBmcm9tIFwiLi9BY3Rpb25zXCI7XHJcblxyXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIpO1xyXG5cclxuc3RvcmUuZGlzcGF0Y2goSW5pdCgpKTtcclxuXHJcblJlYWN0RE9NLnJlbmRlcihcclxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgIDxBcHAgLz5cclxuICA8L1Byb3ZpZGVyPixcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKVxyXG4pO1xyXG4iLCJpbXBvcnQgeyBBY3Rpb25zIH0gZnJvbSBcIi4uL0FjdGlvbnNcIjtcclxuaW1wb3J0IElTdG9yZSBmcm9tIFwiLi4vTW9kZWxzL0lTdG9yZVwiO1xyXG5cclxuLyoqXHJcbiAqIFJlZHVjZXJcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge0lTdG9yZX0gc3RhdGVcclxuICogQHBhcmFtIHtBY3Rpb25zfSBhY3Rpb25cclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGU6IElTdG9yZSwgYWN0aW9uOiBBY3Rpb25zKSB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBcIklOSVRfQVBQXCI6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgcG9pbnRzOiBhY3Rpb24ucG9pbnRzXHJcbiAgICAgIH07XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=